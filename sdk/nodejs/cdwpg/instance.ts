// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cdwpg/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * cluster password.
     */
    public readonly adminPassword!: pulumi.Output<string>;
    /**
     * instance billing mode.
     */
    public readonly chargeProperties!: pulumi.Output<outputs.Cdwpg.InstanceChargeProperties>;
    /**
     * instance name.
     */
    public readonly instanceName!: pulumi.Output<string>;
    /**
     * resource information.
     */
    public readonly resources!: pulumi.Output<outputs.Cdwpg.InstanceResource[]>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * subnet.
     */
    public readonly userSubnetId!: pulumi.Output<string>;
    /**
     * private network.
     */
    public readonly userVpcId!: pulumi.Output<string>;
    /**
     * Availability Zone.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["chargeProperties"] = state ? state.chargeProperties : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userSubnetId"] = state ? state.userSubnetId : undefined;
            resourceInputs["userVpcId"] = state ? state.userVpcId : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.adminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if ((!args || args.chargeProperties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chargeProperties'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.resources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            if ((!args || args.userSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userSubnetId'");
            }
            if ((!args || args.userVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userVpcId'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["chargeProperties"] = args ? args.chargeProperties : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userSubnetId"] = args ? args.userSubnetId : undefined;
            resourceInputs["userVpcId"] = args ? args.userVpcId : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * cluster password.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * instance billing mode.
     */
    chargeProperties?: pulumi.Input<inputs.Cdwpg.InstanceChargeProperties>;
    /**
     * instance name.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * resource information.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.Cdwpg.InstanceResource>[]>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * subnet.
     */
    userSubnetId?: pulumi.Input<string>;
    /**
     * private network.
     */
    userVpcId?: pulumi.Input<string>;
    /**
     * Availability Zone.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * cluster password.
     */
    adminPassword: pulumi.Input<string>;
    /**
     * instance billing mode.
     */
    chargeProperties: pulumi.Input<inputs.Cdwpg.InstanceChargeProperties>;
    /**
     * instance name.
     */
    instanceName: pulumi.Input<string>;
    /**
     * resource information.
     */
    resources: pulumi.Input<pulumi.Input<inputs.Cdwpg.InstanceResource>[]>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * subnet.
     */
    userSubnetId: pulumi.Input<string>;
    /**
     * private network.
     */
    userVpcId: pulumi.Input<string>;
    /**
     * Availability Zone.
     */
    zone: pulumi.Input<string>;
}
