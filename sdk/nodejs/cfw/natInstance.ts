// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class NatInstance extends pulumi.CustomResource {
    /**
     * Get an existing NatInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatInstanceState, opts?: pulumi.CustomResourceOptions): NatInstance {
        return new NatInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cfw/natInstance:NatInstance';

    /**
     * Returns true if the given object is an instance of NatInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatInstance.__pulumiType;
    }

    /**
     * Off-site disaster recovery 1: use off-site disaster recovery; 0: do not use off-site disaster recovery; if empty, the
     * default is not to use off-site disaster recovery.
     */
    public readonly crossAZone!: pulumi.Output<number | undefined>;
    /**
     * Mode 1: access mode; 0: new mode.
     */
    public readonly mode!: pulumi.Output<number>;
    /**
     * Firewall instance name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of nat gateways connected to the access mode, at least one of NewModeItems and NatgwList is passed.
     */
    public readonly natGwLists!: pulumi.Output<string[] | undefined>;
    /**
     * New mode passing parameters are added, at least one of new_mode_items and nat_gw_list is passed.
     */
    public readonly newModeItems!: pulumi.Output<outputs.Cfw.NatInstanceNewModeItems | undefined>;
    /**
     * Bandwidth.
     */
    public readonly width!: pulumi.Output<number>;
    /**
     * Zone list.
     */
    public readonly zoneSets!: pulumi.Output<string[]>;

    /**
     * Create a NatInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatInstanceArgs | NatInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatInstanceState | undefined;
            resourceInputs["crossAZone"] = state ? state.crossAZone : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natGwLists"] = state ? state.natGwLists : undefined;
            resourceInputs["newModeItems"] = state ? state.newModeItems : undefined;
            resourceInputs["width"] = state ? state.width : undefined;
            resourceInputs["zoneSets"] = state ? state.zoneSets : undefined;
        } else {
            const args = argsOrState as NatInstanceArgs | undefined;
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.width === undefined) && !opts.urn) {
                throw new Error("Missing required property 'width'");
            }
            if ((!args || args.zoneSets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneSets'");
            }
            resourceInputs["crossAZone"] = args ? args.crossAZone : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natGwLists"] = args ? args.natGwLists : undefined;
            resourceInputs["newModeItems"] = args ? args.newModeItems : undefined;
            resourceInputs["width"] = args ? args.width : undefined;
            resourceInputs["zoneSets"] = args ? args.zoneSets : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NatInstance resources.
 */
export interface NatInstanceState {
    /**
     * Off-site disaster recovery 1: use off-site disaster recovery; 0: do not use off-site disaster recovery; if empty, the
     * default is not to use off-site disaster recovery.
     */
    crossAZone?: pulumi.Input<number>;
    /**
     * Mode 1: access mode; 0: new mode.
     */
    mode?: pulumi.Input<number>;
    /**
     * Firewall instance name.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of nat gateways connected to the access mode, at least one of NewModeItems and NatgwList is passed.
     */
    natGwLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * New mode passing parameters are added, at least one of new_mode_items and nat_gw_list is passed.
     */
    newModeItems?: pulumi.Input<inputs.Cfw.NatInstanceNewModeItems>;
    /**
     * Bandwidth.
     */
    width?: pulumi.Input<number>;
    /**
     * Zone list.
     */
    zoneSets?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NatInstance resource.
 */
export interface NatInstanceArgs {
    /**
     * Off-site disaster recovery 1: use off-site disaster recovery; 0: do not use off-site disaster recovery; if empty, the
     * default is not to use off-site disaster recovery.
     */
    crossAZone?: pulumi.Input<number>;
    /**
     * Mode 1: access mode; 0: new mode.
     */
    mode: pulumi.Input<number>;
    /**
     * Firewall instance name.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of nat gateways connected to the access mode, at least one of NewModeItems and NatgwList is passed.
     */
    natGwLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * New mode passing parameters are added, at least one of new_mode_items and nat_gw_list is passed.
     */
    newModeItems?: pulumi.Input<inputs.Cfw.NatInstanceNewModeItems>;
    /**
     * Bandwidth.
     */
    width: pulumi.Input<number>;
    /**
     * Zone list.
     */
    zoneSets: pulumi.Input<pulumi.Input<string>[]>;
}
