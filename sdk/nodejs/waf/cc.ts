// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Cc extends pulumi.CustomResource {
    /**
     * Get an existing Cc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CcState, opts?: pulumi.CustomResourceOptions): Cc {
        return new Cc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Waf/cc:Cc';

    /**
     * Returns true if the given object is an instance of Cc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cc.__pulumiType;
    }

    /**
     * Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
     */
    public readonly actionType!: pulumi.Output<string>;
    /**
     * Session match mode, 0 use session, 1 use ip.
     */
    public readonly advance!: pulumi.Output<string>;
    /**
     * Domain.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
     */
    public readonly edition!: pulumi.Output<string>;
    /**
     * Event ID.
     */
    public readonly eventId!: pulumi.Output<string | undefined>;
    /**
     * Interval.
     */
    public readonly interval!: pulumi.Output<string>;
    /**
     * CC detection threshold.
     */
    public readonly limit!: pulumi.Output<string>;
    /**
     * Match method, 0 equal, 1 contains, 2 prefix.
     */
    public readonly matchFunc!: pulumi.Output<number>;
    /**
     * Rule Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Rule Priority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Rule ID.
     */
    public /*out*/ readonly ruleId!: pulumi.Output<string>;
    /**
     * Advance mode use session id.
     */
    public readonly sessionApplieds!: pulumi.Output<number[] | undefined>;
    /**
     * Rule Status, 0 rule close, 1 rule open.
     */
    public readonly status!: pulumi.Output<number>;
    /**
     * Operate Type.
     */
    public readonly type!: pulumi.Output<number | undefined>;
    /**
     * Check URL.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * Action ValidTime, minute unit. Min: 60, Max: 604800.
     */
    public readonly validTime!: pulumi.Output<number>;

    /**
     * Create a Cc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CcArgs | CcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CcState | undefined;
            resourceInputs["actionType"] = state ? state.actionType : undefined;
            resourceInputs["advance"] = state ? state.advance : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["eventId"] = state ? state.eventId : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["limit"] = state ? state.limit : undefined;
            resourceInputs["matchFunc"] = state ? state.matchFunc : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["sessionApplieds"] = state ? state.sessionApplieds : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["validTime"] = state ? state.validTime : undefined;
        } else {
            const args = argsOrState as CcArgs | undefined;
            if ((!args || args.actionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionType'");
            }
            if ((!args || args.advance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'advance'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.edition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edition'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.limit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'limit'");
            }
            if ((!args || args.matchFunc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'matchFunc'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            if ((!args || args.validTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validTime'");
            }
            resourceInputs["actionType"] = args ? args.actionType : undefined;
            resourceInputs["advance"] = args ? args.advance : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["eventId"] = args ? args.eventId : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["limit"] = args ? args.limit : undefined;
            resourceInputs["matchFunc"] = args ? args.matchFunc : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["sessionApplieds"] = args ? args.sessionApplieds : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["validTime"] = args ? args.validTime : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cc resources.
 */
export interface CcState {
    /**
     * Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
     */
    actionType?: pulumi.Input<string>;
    /**
     * Session match mode, 0 use session, 1 use ip.
     */
    advance?: pulumi.Input<string>;
    /**
     * Domain.
     */
    domain?: pulumi.Input<string>;
    /**
     * WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
     */
    edition?: pulumi.Input<string>;
    /**
     * Event ID.
     */
    eventId?: pulumi.Input<string>;
    /**
     * Interval.
     */
    interval?: pulumi.Input<string>;
    /**
     * CC detection threshold.
     */
    limit?: pulumi.Input<string>;
    /**
     * Match method, 0 equal, 1 contains, 2 prefix.
     */
    matchFunc?: pulumi.Input<number>;
    /**
     * Rule Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Rule Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Rule ID.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * Advance mode use session id.
     */
    sessionApplieds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Rule Status, 0 rule close, 1 rule open.
     */
    status?: pulumi.Input<number>;
    /**
     * Operate Type.
     */
    type?: pulumi.Input<number>;
    /**
     * Check URL.
     */
    url?: pulumi.Input<string>;
    /**
     * Action ValidTime, minute unit. Min: 60, Max: 604800.
     */
    validTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Cc resource.
 */
export interface CcArgs {
    /**
     * Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
     */
    actionType: pulumi.Input<string>;
    /**
     * Session match mode, 0 use session, 1 use ip.
     */
    advance: pulumi.Input<string>;
    /**
     * Domain.
     */
    domain: pulumi.Input<string>;
    /**
     * WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
     */
    edition: pulumi.Input<string>;
    /**
     * Event ID.
     */
    eventId?: pulumi.Input<string>;
    /**
     * Interval.
     */
    interval: pulumi.Input<string>;
    /**
     * CC detection threshold.
     */
    limit: pulumi.Input<string>;
    /**
     * Match method, 0 equal, 1 contains, 2 prefix.
     */
    matchFunc: pulumi.Input<number>;
    /**
     * Rule Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Rule Priority.
     */
    priority: pulumi.Input<number>;
    /**
     * Advance mode use session id.
     */
    sessionApplieds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Rule Status, 0 rule close, 1 rule open.
     */
    status: pulumi.Input<number>;
    /**
     * Operate Type.
     */
    type?: pulumi.Input<number>;
    /**
     * Check URL.
     */
    url: pulumi.Input<string>;
    /**
     * Action ValidTime, minute unit. Min: 60, Max: 604800.
     */
    validTime: pulumi.Input<number>;
}
