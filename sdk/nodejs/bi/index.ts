// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DatasourceArgs, DatasourceState } from "./datasource";
export type Datasource = import("./datasource").Datasource;
export const Datasource: typeof import("./datasource").Datasource = null as any;
utilities.lazyLoad(exports, ["Datasource"], () => require("./datasource"));

export { DatasourceCloudArgs, DatasourceCloudState } from "./datasourceCloud";
export type DatasourceCloud = import("./datasourceCloud").DatasourceCloud;
export const DatasourceCloud: typeof import("./datasourceCloud").DatasourceCloud = null as any;
utilities.lazyLoad(exports, ["DatasourceCloud"], () => require("./datasourceCloud"));

export { EmbedIntervalApplyArgs, EmbedIntervalApplyState } from "./embedIntervalApply";
export type EmbedIntervalApply = import("./embedIntervalApply").EmbedIntervalApply;
export const EmbedIntervalApply: typeof import("./embedIntervalApply").EmbedIntervalApply = null as any;
utilities.lazyLoad(exports, ["EmbedIntervalApply"], () => require("./embedIntervalApply"));

export { EmbedTokenApplyArgs, EmbedTokenApplyState } from "./embedTokenApply";
export type EmbedTokenApply = import("./embedTokenApply").EmbedTokenApply;
export const EmbedTokenApply: typeof import("./embedTokenApply").EmbedTokenApply = null as any;
utilities.lazyLoad(exports, ["EmbedTokenApply"], () => require("./embedTokenApply"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetUserProjectArgs, GetUserProjectResult, GetUserProjectOutputArgs } from "./getUserProject";
export const getUserProject: typeof import("./getUserProject").getUserProject = null as any;
export const getUserProjectOutput: typeof import("./getUserProject").getUserProjectOutput = null as any;
utilities.lazyLoad(exports, ["getUserProject","getUserProjectOutput"], () => require("./getUserProject"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectUserRoleArgs, ProjectUserRoleState } from "./projectUserRole";
export type ProjectUserRole = import("./projectUserRole").ProjectUserRole;
export const ProjectUserRole: typeof import("./projectUserRole").ProjectUserRole = null as any;
utilities.lazyLoad(exports, ["ProjectUserRole"], () => require("./projectUserRole"));

export { UserRoleArgs, UserRoleState } from "./userRole";
export type UserRole = import("./userRole").UserRole;
export const UserRole: typeof import("./userRole").UserRole = null as any;
utilities.lazyLoad(exports, ["UserRole"], () => require("./userRole"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Bi/datasource:Datasource":
                return new Datasource(name, <any>undefined, { urn })
            case "tencentcloud:Bi/datasourceCloud:DatasourceCloud":
                return new DatasourceCloud(name, <any>undefined, { urn })
            case "tencentcloud:Bi/embedIntervalApply:EmbedIntervalApply":
                return new EmbedIntervalApply(name, <any>undefined, { urn })
            case "tencentcloud:Bi/embedTokenApply:EmbedTokenApply":
                return new EmbedTokenApply(name, <any>undefined, { urn })
            case "tencentcloud:Bi/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "tencentcloud:Bi/projectUserRole:ProjectUserRole":
                return new ProjectUserRole(name, <any>undefined, { urn })
            case "tencentcloud:Bi/userRole:UserRole":
                return new UserRole(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Bi/datasource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Bi/datasourceCloud", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Bi/embedIntervalApply", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Bi/embedTokenApply", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Bi/project", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Bi/projectUserRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Bi/userRole", _module)
