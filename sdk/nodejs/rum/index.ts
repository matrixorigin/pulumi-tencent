// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetCustomUrlArgs, GetCustomUrlResult, GetCustomUrlOutputArgs } from "./getCustomUrl";
export const getCustomUrl: typeof import("./getCustomUrl").getCustomUrl = null as any;
export const getCustomUrlOutput: typeof import("./getCustomUrl").getCustomUrlOutput = null as any;
utilities.lazyLoad(exports, ["getCustomUrl","getCustomUrlOutput"], () => require("./getCustomUrl"));

export { GetEventUrlArgs, GetEventUrlResult, GetEventUrlOutputArgs } from "./getEventUrl";
export const getEventUrl: typeof import("./getEventUrl").getEventUrl = null as any;
export const getEventUrlOutput: typeof import("./getEventUrl").getEventUrlOutput = null as any;
utilities.lazyLoad(exports, ["getEventUrl","getEventUrlOutput"], () => require("./getEventUrl"));

export { GetFetchUrlArgs, GetFetchUrlResult, GetFetchUrlOutputArgs } from "./getFetchUrl";
export const getFetchUrl: typeof import("./getFetchUrl").getFetchUrl = null as any;
export const getFetchUrlOutput: typeof import("./getFetchUrl").getFetchUrlOutput = null as any;
utilities.lazyLoad(exports, ["getFetchUrl","getFetchUrlOutput"], () => require("./getFetchUrl"));

export { GetFetchUrlInfoArgs, GetFetchUrlInfoResult, GetFetchUrlInfoOutputArgs } from "./getFetchUrlInfo";
export const getFetchUrlInfo: typeof import("./getFetchUrlInfo").getFetchUrlInfo = null as any;
export const getFetchUrlInfoOutput: typeof import("./getFetchUrlInfo").getFetchUrlInfoOutput = null as any;
utilities.lazyLoad(exports, ["getFetchUrlInfo","getFetchUrlInfoOutput"], () => require("./getFetchUrlInfo"));

export { GetGroupLogArgs, GetGroupLogResult, GetGroupLogOutputArgs } from "./getGroupLog";
export const getGroupLog: typeof import("./getGroupLog").getGroupLog = null as any;
export const getGroupLogOutput: typeof import("./getGroupLog").getGroupLogOutput = null as any;
utilities.lazyLoad(exports, ["getGroupLog","getGroupLogOutput"], () => require("./getGroupLog"));

export { GetLogExportArgs, GetLogExportResult, GetLogExportOutputArgs } from "./getLogExport";
export const getLogExport: typeof import("./getLogExport").getLogExport = null as any;
export const getLogExportOutput: typeof import("./getLogExport").getLogExportOutput = null as any;
utilities.lazyLoad(exports, ["getLogExport","getLogExportOutput"], () => require("./getLogExport"));

export { GetLogExportListArgs, GetLogExportListResult, GetLogExportListOutputArgs } from "./getLogExportList";
export const getLogExportList: typeof import("./getLogExportList").getLogExportList = null as any;
export const getLogExportListOutput: typeof import("./getLogExportList").getLogExportListOutput = null as any;
utilities.lazyLoad(exports, ["getLogExportList","getLogExportListOutput"], () => require("./getLogExportList"));

export { GetLogListArgs, GetLogListResult, GetLogListOutputArgs } from "./getLogList";
export const getLogList: typeof import("./getLogList").getLogList = null as any;
export const getLogListOutput: typeof import("./getLogList").getLogListOutput = null as any;
utilities.lazyLoad(exports, ["getLogList","getLogListOutput"], () => require("./getLogList"));

export { GetLogStatsLogListArgs, GetLogStatsLogListResult, GetLogStatsLogListOutputArgs } from "./getLogStatsLogList";
export const getLogStatsLogList: typeof import("./getLogStatsLogList").getLogStatsLogList = null as any;
export const getLogStatsLogListOutput: typeof import("./getLogStatsLogList").getLogStatsLogListOutput = null as any;
utilities.lazyLoad(exports, ["getLogStatsLogList","getLogStatsLogListOutput"], () => require("./getLogStatsLogList"));

export { GetLogUrlStatisticsArgs, GetLogUrlStatisticsResult, GetLogUrlStatisticsOutputArgs } from "./getLogUrlStatistics";
export const getLogUrlStatistics: typeof import("./getLogUrlStatistics").getLogUrlStatistics = null as any;
export const getLogUrlStatisticsOutput: typeof import("./getLogUrlStatistics").getLogUrlStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getLogUrlStatistics","getLogUrlStatisticsOutput"], () => require("./getLogUrlStatistics"));

export { GetOfflineLogConfigArgs, GetOfflineLogConfigResult, GetOfflineLogConfigOutputArgs } from "./getOfflineLogConfig";
export const getOfflineLogConfig: typeof import("./getOfflineLogConfig").getOfflineLogConfig = null as any;
export const getOfflineLogConfigOutput: typeof import("./getOfflineLogConfig").getOfflineLogConfigOutput = null as any;
utilities.lazyLoad(exports, ["getOfflineLogConfig","getOfflineLogConfigOutput"], () => require("./getOfflineLogConfig"));

export { GetPerformancePageArgs, GetPerformancePageResult, GetPerformancePageOutputArgs } from "./getPerformancePage";
export const getPerformancePage: typeof import("./getPerformancePage").getPerformancePage = null as any;
export const getPerformancePageOutput: typeof import("./getPerformancePage").getPerformancePageOutput = null as any;
utilities.lazyLoad(exports, ["getPerformancePage","getPerformancePageOutput"], () => require("./getPerformancePage"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetPvUrlInfoArgs, GetPvUrlInfoResult, GetPvUrlInfoOutputArgs } from "./getPvUrlInfo";
export const getPvUrlInfo: typeof import("./getPvUrlInfo").getPvUrlInfo = null as any;
export const getPvUrlInfoOutput: typeof import("./getPvUrlInfo").getPvUrlInfoOutput = null as any;
utilities.lazyLoad(exports, ["getPvUrlInfo","getPvUrlInfoOutput"], () => require("./getPvUrlInfo"));

export { GetPvUrlStatisticsArgs, GetPvUrlStatisticsResult, GetPvUrlStatisticsOutputArgs } from "./getPvUrlStatistics";
export const getPvUrlStatistics: typeof import("./getPvUrlStatistics").getPvUrlStatistics = null as any;
export const getPvUrlStatisticsOutput: typeof import("./getPvUrlStatistics").getPvUrlStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getPvUrlStatistics","getPvUrlStatisticsOutput"], () => require("./getPvUrlStatistics"));

export { GetReportCountArgs, GetReportCountResult, GetReportCountOutputArgs } from "./getReportCount";
export const getReportCount: typeof import("./getReportCount").getReportCount = null as any;
export const getReportCountOutput: typeof import("./getReportCount").getReportCountOutput = null as any;
utilities.lazyLoad(exports, ["getReportCount","getReportCountOutput"], () => require("./getReportCount"));

export { GetScoresArgs, GetScoresResult, GetScoresOutputArgs } from "./getScores";
export const getScores: typeof import("./getScores").getScores = null as any;
export const getScoresOutput: typeof import("./getScores").getScoresOutput = null as any;
utilities.lazyLoad(exports, ["getScores","getScoresOutput"], () => require("./getScores"));

export { GetSetUrlStatisticsArgs, GetSetUrlStatisticsResult, GetSetUrlStatisticsOutputArgs } from "./getSetUrlStatistics";
export const getSetUrlStatistics: typeof import("./getSetUrlStatistics").getSetUrlStatistics = null as any;
export const getSetUrlStatisticsOutput: typeof import("./getSetUrlStatistics").getSetUrlStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getSetUrlStatistics","getSetUrlStatisticsOutput"], () => require("./getSetUrlStatistics"));

export { GetSignArgs, GetSignResult, GetSignOutputArgs } from "./getSign";
export const getSign: typeof import("./getSign").getSign = null as any;
export const getSignOutput: typeof import("./getSign").getSignOutput = null as any;
utilities.lazyLoad(exports, ["getSign","getSignOutput"], () => require("./getSign"));

export { GetStaticProjectArgs, GetStaticProjectResult, GetStaticProjectOutputArgs } from "./getStaticProject";
export const getStaticProject: typeof import("./getStaticProject").getStaticProject = null as any;
export const getStaticProjectOutput: typeof import("./getStaticProject").getStaticProjectOutput = null as any;
utilities.lazyLoad(exports, ["getStaticProject","getStaticProjectOutput"], () => require("./getStaticProject"));

export { GetStaticResourceArgs, GetStaticResourceResult, GetStaticResourceOutputArgs } from "./getStaticResource";
export const getStaticResource: typeof import("./getStaticResource").getStaticResource = null as any;
export const getStaticResourceOutput: typeof import("./getStaticResource").getStaticResourceOutput = null as any;
utilities.lazyLoad(exports, ["getStaticResource","getStaticResourceOutput"], () => require("./getStaticResource"));

export { GetStaticUrlArgs, GetStaticUrlResult, GetStaticUrlOutputArgs } from "./getStaticUrl";
export const getStaticUrl: typeof import("./getStaticUrl").getStaticUrl = null as any;
export const getStaticUrlOutput: typeof import("./getStaticUrl").getStaticUrlOutput = null as any;
utilities.lazyLoad(exports, ["getStaticUrl","getStaticUrlOutput"], () => require("./getStaticUrl"));

export { GetTawAreaArgs, GetTawAreaResult, GetTawAreaOutputArgs } from "./getTawArea";
export const getTawArea: typeof import("./getTawArea").getTawArea = null as any;
export const getTawAreaOutput: typeof import("./getTawArea").getTawAreaOutput = null as any;
utilities.lazyLoad(exports, ["getTawArea","getTawAreaOutput"], () => require("./getTawArea"));

export { GetTawInstanceArgs, GetTawInstanceResult, GetTawInstanceOutputArgs } from "./getTawInstance";
export const getTawInstance: typeof import("./getTawInstance").getTawInstance = null as any;
export const getTawInstanceOutput: typeof import("./getTawInstance").getTawInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getTawInstance","getTawInstanceOutput"], () => require("./getTawInstance"));

export { GetWebVitalsPageArgs, GetWebVitalsPageResult, GetWebVitalsPageOutputArgs } from "./getWebVitalsPage";
export const getWebVitalsPage: typeof import("./getWebVitalsPage").getWebVitalsPage = null as any;
export const getWebVitalsPageOutput: typeof import("./getWebVitalsPage").getWebVitalsPageOutput = null as any;
utilities.lazyLoad(exports, ["getWebVitalsPage","getWebVitalsPageOutput"], () => require("./getWebVitalsPage"));

export { GetWhitelistArgs, GetWhitelistResult, GetWhitelistOutputArgs } from "./getWhitelist";
export const getWhitelist: typeof import("./getWhitelist").getWhitelist = null as any;
export const getWhitelistOutput: typeof import("./getWhitelist").getWhitelistOutput = null as any;
utilities.lazyLoad(exports, ["getWhitelist","getWhitelistOutput"], () => require("./getWhitelist"));

export { InstanceStatusConfigArgs, InstanceStatusConfigState } from "./instanceStatusConfig";
export type InstanceStatusConfig = import("./instanceStatusConfig").InstanceStatusConfig;
export const InstanceStatusConfig: typeof import("./instanceStatusConfig").InstanceStatusConfig = null as any;
utilities.lazyLoad(exports, ["InstanceStatusConfig"], () => require("./instanceStatusConfig"));

export { OfflineLogConfigAttachmentArgs, OfflineLogConfigAttachmentState } from "./offlineLogConfigAttachment";
export type OfflineLogConfigAttachment = import("./offlineLogConfigAttachment").OfflineLogConfigAttachment;
export const OfflineLogConfigAttachment: typeof import("./offlineLogConfigAttachment").OfflineLogConfigAttachment = null as any;
utilities.lazyLoad(exports, ["OfflineLogConfigAttachment"], () => require("./offlineLogConfigAttachment"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectStatusConfigArgs, ProjectStatusConfigState } from "./projectStatusConfig";
export type ProjectStatusConfig = import("./projectStatusConfig").ProjectStatusConfig;
export const ProjectStatusConfig: typeof import("./projectStatusConfig").ProjectStatusConfig = null as any;
utilities.lazyLoad(exports, ["ProjectStatusConfig"], () => require("./projectStatusConfig"));

export { ReleaseFileArgs, ReleaseFileState } from "./releaseFile";
export type ReleaseFile = import("./releaseFile").ReleaseFile;
export const ReleaseFile: typeof import("./releaseFile").ReleaseFile = null as any;
utilities.lazyLoad(exports, ["ReleaseFile"], () => require("./releaseFile"));

export { TawInstanceArgs, TawInstanceState } from "./tawInstance";
export type TawInstance = import("./tawInstance").TawInstance;
export const TawInstance: typeof import("./tawInstance").TawInstance = null as any;
utilities.lazyLoad(exports, ["TawInstance"], () => require("./tawInstance"));

export { WhitelistArgs, WhitelistState } from "./whitelist";
export type Whitelist = import("./whitelist").Whitelist;
export const Whitelist: typeof import("./whitelist").Whitelist = null as any;
utilities.lazyLoad(exports, ["Whitelist"], () => require("./whitelist"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Rum/instanceStatusConfig:InstanceStatusConfig":
                return new InstanceStatusConfig(name, <any>undefined, { urn })
            case "tencentcloud:Rum/offlineLogConfigAttachment:OfflineLogConfigAttachment":
                return new OfflineLogConfigAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Rum/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "tencentcloud:Rum/projectStatusConfig:ProjectStatusConfig":
                return new ProjectStatusConfig(name, <any>undefined, { urn })
            case "tencentcloud:Rum/releaseFile:ReleaseFile":
                return new ReleaseFile(name, <any>undefined, { urn })
            case "tencentcloud:Rum/tawInstance:TawInstance":
                return new TawInstance(name, <any>undefined, { urn })
            case "tencentcloud:Rum/whitelist:Whitelist":
                return new Whitelist(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/instanceStatusConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/offlineLogConfigAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/project", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/projectStatusConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/releaseFile", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/tawInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/whitelist", _module)
