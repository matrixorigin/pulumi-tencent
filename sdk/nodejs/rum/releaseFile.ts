// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ReleaseFile extends pulumi.CustomResource {
    /**
     * Get an existing ReleaseFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReleaseFileState, opts?: pulumi.CustomResourceOptions): ReleaseFile {
        return new ReleaseFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Rum/releaseFile:ReleaseFile';

    /**
     * Returns true if the given object is an instance of ReleaseFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReleaseFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReleaseFile.__pulumiType;
    }

    /**
     * Release file hash.
     */
    public readonly fileHash!: pulumi.Output<string>;
    /**
     * Release file unique key.
     */
    public readonly fileKey!: pulumi.Output<string>;
    /**
     * Release file name.
     */
    public readonly fileName!: pulumi.Output<string>;
    /**
     * Project ID.
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * Release file id.
     */
    public readonly releaseFileId!: pulumi.Output<number>;
    /**
     * Release File version.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a ReleaseFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReleaseFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReleaseFileArgs | ReleaseFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReleaseFileState | undefined;
            resourceInputs["fileHash"] = state ? state.fileHash : undefined;
            resourceInputs["fileKey"] = state ? state.fileKey : undefined;
            resourceInputs["fileName"] = state ? state.fileName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["releaseFileId"] = state ? state.releaseFileId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ReleaseFileArgs | undefined;
            if ((!args || args.fileHash === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileHash'");
            }
            if ((!args || args.fileKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileKey'");
            }
            if ((!args || args.fileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.releaseFileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseFileId'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["fileHash"] = args ? args.fileHash : undefined;
            resourceInputs["fileKey"] = args ? args.fileKey : undefined;
            resourceInputs["fileName"] = args ? args.fileName : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["releaseFileId"] = args ? args.releaseFileId : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReleaseFile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReleaseFile resources.
 */
export interface ReleaseFileState {
    /**
     * Release file hash.
     */
    fileHash?: pulumi.Input<string>;
    /**
     * Release file unique key.
     */
    fileKey?: pulumi.Input<string>;
    /**
     * Release file name.
     */
    fileName?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Release file id.
     */
    releaseFileId?: pulumi.Input<number>;
    /**
     * Release File version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReleaseFile resource.
 */
export interface ReleaseFileArgs {
    /**
     * Release file hash.
     */
    fileHash: pulumi.Input<string>;
    /**
     * Release file unique key.
     */
    fileKey: pulumi.Input<string>;
    /**
     * Release file name.
     */
    fileName: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId: pulumi.Input<number>;
    /**
     * Release file id.
     */
    releaseFileId: pulumi.Input<number>;
    /**
     * Release File version.
     */
    version: pulumi.Input<string>;
}
