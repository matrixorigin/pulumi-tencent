// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BaselineArgs, BaselineState } from "./baseline";
export type Baseline = import("./baseline").Baseline;
export const Baseline: typeof import("./baseline").Baseline = null as any;
utilities.lazyLoad(exports, ["Baseline"], () => require("./baseline"));

export { DatasourceArgs, DatasourceState } from "./datasource";
export type Datasource = import("./datasource").Datasource;
export const Datasource: typeof import("./datasource").Datasource = null as any;
utilities.lazyLoad(exports, ["Datasource"], () => require("./datasource"));

export { DqRuleArgs, DqRuleState } from "./dqRule";
export type DqRule = import("./dqRule").DqRule;
export const DqRule: typeof import("./dqRule").DqRule = null as any;
utilities.lazyLoad(exports, ["DqRule"], () => require("./dqRule"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { GetDataSourceListArgs, GetDataSourceListResult, GetDataSourceListOutputArgs } from "./getDataSourceList";
export const getDataSourceList: typeof import("./getDataSourceList").getDataSourceList = null as any;
export const getDataSourceListOutput: typeof import("./getDataSourceList").getDataSourceListOutput = null as any;
utilities.lazyLoad(exports, ["getDataSourceList","getDataSourceListOutput"], () => require("./getDataSourceList"));

export { GetDataSourceWithoutInfoArgs, GetDataSourceWithoutInfoResult, GetDataSourceWithoutInfoOutputArgs } from "./getDataSourceWithoutInfo";
export const getDataSourceWithoutInfo: typeof import("./getDataSourceWithoutInfo").getDataSourceWithoutInfo = null as any;
export const getDataSourceWithoutInfoOutput: typeof import("./getDataSourceWithoutInfo").getDataSourceWithoutInfoOutput = null as any;
utilities.lazyLoad(exports, ["getDataSourceWithoutInfo","getDataSourceWithoutInfoOutput"], () => require("./getDataSourceWithoutInfo"));

export { GetRuleTemplatesArgs, GetRuleTemplatesResult, GetRuleTemplatesOutputArgs } from "./getRuleTemplates";
export const getRuleTemplates: typeof import("./getRuleTemplates").getRuleTemplates = null as any;
export const getRuleTemplatesOutput: typeof import("./getRuleTemplates").getRuleTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getRuleTemplates","getRuleTemplatesOutput"], () => require("./getRuleTemplates"));

export { IntegrationOfflineTaskArgs, IntegrationOfflineTaskState } from "./integrationOfflineTask";
export type IntegrationOfflineTask = import("./integrationOfflineTask").IntegrationOfflineTask;
export const IntegrationOfflineTask: typeof import("./integrationOfflineTask").IntegrationOfflineTask = null as any;
utilities.lazyLoad(exports, ["IntegrationOfflineTask"], () => require("./integrationOfflineTask"));

export { IntegrationRealtimeTaskArgs, IntegrationRealtimeTaskState } from "./integrationRealtimeTask";
export type IntegrationRealtimeTask = import("./integrationRealtimeTask").IntegrationRealtimeTask;
export const IntegrationRealtimeTask: typeof import("./integrationRealtimeTask").IntegrationRealtimeTask = null as any;
utilities.lazyLoad(exports, ["IntegrationRealtimeTask"], () => require("./integrationRealtimeTask"));

export { IntegrationTaskNodeArgs, IntegrationTaskNodeState } from "./integrationTaskNode";
export type IntegrationTaskNode = import("./integrationTaskNode").IntegrationTaskNode;
export const IntegrationTaskNode: typeof import("./integrationTaskNode").IntegrationTaskNode = null as any;
utilities.lazyLoad(exports, ["IntegrationTaskNode"], () => require("./integrationTaskNode"));

export { ResourceArgs, ResourceState } from "./resource";
export type Resource = import("./resource").Resource;
export const Resource: typeof import("./resource").Resource = null as any;
utilities.lazyLoad(exports, ["Resource"], () => require("./resource"));

export { RuleTemplateArgs, RuleTemplateState } from "./ruleTemplate";
export type RuleTemplate = import("./ruleTemplate").RuleTemplate;
export const RuleTemplate: typeof import("./ruleTemplate").RuleTemplate = null as any;
utilities.lazyLoad(exports, ["RuleTemplate"], () => require("./ruleTemplate"));

export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Wedata/baseline:Baseline":
                return new Baseline(name, <any>undefined, { urn })
            case "tencentcloud:Wedata/datasource:Datasource":
                return new Datasource(name, <any>undefined, { urn })
            case "tencentcloud:Wedata/dqRule:DqRule":
                return new DqRule(name, <any>undefined, { urn })
            case "tencentcloud:Wedata/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "tencentcloud:Wedata/integrationOfflineTask:IntegrationOfflineTask":
                return new IntegrationOfflineTask(name, <any>undefined, { urn })
            case "tencentcloud:Wedata/integrationRealtimeTask:IntegrationRealtimeTask":
                return new IntegrationRealtimeTask(name, <any>undefined, { urn })
            case "tencentcloud:Wedata/integrationTaskNode:IntegrationTaskNode":
                return new IntegrationTaskNode(name, <any>undefined, { urn })
            case "tencentcloud:Wedata/resource:Resource":
                return new Resource(name, <any>undefined, { urn })
            case "tencentcloud:Wedata/ruleTemplate:RuleTemplate":
                return new RuleTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Wedata/script:Script":
                return new Script(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Wedata/baseline", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Wedata/datasource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Wedata/dqRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Wedata/function", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Wedata/integrationOfflineTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Wedata/integrationRealtimeTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Wedata/integrationTaskNode", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Wedata/resource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Wedata/ruleTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Wedata/script", _module)
