// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Datasource extends pulumi.CustomResource {
    /**
     * Get an existing Datasource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasourceState, opts?: pulumi.CustomResourceOptions): Datasource {
        return new Datasource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Wedata/datasource:Datasource';

    /**
     * Returns true if the given object is an instance of Datasource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datasource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datasource.__pulumiType;
    }

    /**
     * BizParams.
     */
    public readonly bizParams!: pulumi.Output<string | undefined>;
    /**
     * DataSource Category.
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * ClusterId.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Collect.
     */
    public readonly collect!: pulumi.Output<string>;
    /**
     * COSBucket.
     */
    public readonly cosBucket!: pulumi.Output<string | undefined>;
    /**
     * Cos region.
     */
    public readonly cosRegion!: pulumi.Output<string | undefined>;
    /**
     * Dbname.
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * Description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display.
     */
    public readonly display!: pulumi.Output<string | undefined>;
    /**
     * Instance.
     */
    public readonly instance!: pulumi.Output<string | undefined>;
    /**
     * DataSource Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Owner projectId.
     */
    public readonly ownerProjectId!: pulumi.Output<string>;
    /**
     * Owner Project Ident.
     */
    public readonly ownerProjectIdent!: pulumi.Output<string>;
    /**
     * Owner project name.
     */
    public readonly ownerProjectName!: pulumi.Output<string>;
    /**
     * Params.
     */
    public readonly params!: pulumi.Output<string>;
    /**
     * Params Out.
     */
    public /*out*/ readonly paramsOut!: pulumi.Output<string>;
    /**
     * Status.
     */
    public readonly status!: pulumi.Output<number | undefined>;
    /**
     * DataSource Type.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Datasource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasourceArgs | DatasourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasourceState | undefined;
            resourceInputs["bizParams"] = state ? state.bizParams : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["collect"] = state ? state.collect : undefined;
            resourceInputs["cosBucket"] = state ? state.cosBucket : undefined;
            resourceInputs["cosRegion"] = state ? state.cosRegion : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["display"] = state ? state.display : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerProjectId"] = state ? state.ownerProjectId : undefined;
            resourceInputs["ownerProjectIdent"] = state ? state.ownerProjectIdent : undefined;
            resourceInputs["ownerProjectName"] = state ? state.ownerProjectName : undefined;
            resourceInputs["params"] = state ? state.params : undefined;
            resourceInputs["paramsOut"] = state ? state.paramsOut : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DatasourceArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.ownerProjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerProjectId'");
            }
            if ((!args || args.ownerProjectIdent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerProjectIdent'");
            }
            if ((!args || args.ownerProjectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerProjectName'");
            }
            if ((!args || args.params === undefined) && !opts.urn) {
                throw new Error("Missing required property 'params'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bizParams"] = args ? args.bizParams : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["collect"] = args ? args.collect : undefined;
            resourceInputs["cosBucket"] = args ? args.cosBucket : undefined;
            resourceInputs["cosRegion"] = args ? args.cosRegion : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["display"] = args ? args.display : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerProjectId"] = args ? args.ownerProjectId : undefined;
            resourceInputs["ownerProjectIdent"] = args ? args.ownerProjectIdent : undefined;
            resourceInputs["ownerProjectName"] = args ? args.ownerProjectName : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["paramsOut"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Datasource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Datasource resources.
 */
export interface DatasourceState {
    /**
     * BizParams.
     */
    bizParams?: pulumi.Input<string>;
    /**
     * DataSource Category.
     */
    category?: pulumi.Input<string>;
    /**
     * ClusterId.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Collect.
     */
    collect?: pulumi.Input<string>;
    /**
     * COSBucket.
     */
    cosBucket?: pulumi.Input<string>;
    /**
     * Cos region.
     */
    cosRegion?: pulumi.Input<string>;
    /**
     * Dbname.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Display.
     */
    display?: pulumi.Input<string>;
    /**
     * Instance.
     */
    instance?: pulumi.Input<string>;
    /**
     * DataSource Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Owner projectId.
     */
    ownerProjectId?: pulumi.Input<string>;
    /**
     * Owner Project Ident.
     */
    ownerProjectIdent?: pulumi.Input<string>;
    /**
     * Owner project name.
     */
    ownerProjectName?: pulumi.Input<string>;
    /**
     * Params.
     */
    params?: pulumi.Input<string>;
    /**
     * Params Out.
     */
    paramsOut?: pulumi.Input<string>;
    /**
     * Status.
     */
    status?: pulumi.Input<number>;
    /**
     * DataSource Type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Datasource resource.
 */
export interface DatasourceArgs {
    /**
     * BizParams.
     */
    bizParams?: pulumi.Input<string>;
    /**
     * DataSource Category.
     */
    category: pulumi.Input<string>;
    /**
     * ClusterId.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Collect.
     */
    collect?: pulumi.Input<string>;
    /**
     * COSBucket.
     */
    cosBucket?: pulumi.Input<string>;
    /**
     * Cos region.
     */
    cosRegion?: pulumi.Input<string>;
    /**
     * Dbname.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Display.
     */
    display?: pulumi.Input<string>;
    /**
     * Instance.
     */
    instance?: pulumi.Input<string>;
    /**
     * DataSource Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Owner projectId.
     */
    ownerProjectId: pulumi.Input<string>;
    /**
     * Owner Project Ident.
     */
    ownerProjectIdent: pulumi.Input<string>;
    /**
     * Owner project name.
     */
    ownerProjectName: pulumi.Input<string>;
    /**
     * Params.
     */
    params: pulumi.Input<string>;
    /**
     * Status.
     */
    status?: pulumi.Input<number>;
    /**
     * DataSource Type.
     */
    type: pulumi.Input<string>;
}
