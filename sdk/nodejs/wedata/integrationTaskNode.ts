// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class IntegrationTaskNode extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationTaskNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationTaskNodeState, opts?: pulumi.CustomResourceOptions): IntegrationTaskNode {
        return new IntegrationTaskNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Wedata/integrationTaskNode:IntegrationTaskNode';

    /**
     * Returns true if the given object is an instance of IntegrationTaskNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationTaskNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationTaskNode.__pulumiType;
    }

    /**
     * Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM,
     * GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA,
     * REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
     */
    public readonly dataSourceType!: pulumi.Output<string>;
    /**
     * Node Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Node ID.
     */
    public /*out*/ readonly nodeId!: pulumi.Output<string>;
    /**
     * Node information.
     */
    public readonly nodeInfo!: pulumi.Output<outputs.Wedata.IntegrationTaskNodeNodeInfo>;
    /**
     * Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
     */
    public readonly nodeType!: pulumi.Output<string>;
    /**
     * Project ID.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The task id to which the node belongs.
     */
    public readonly taskId!: pulumi.Output<string>;
    /**
     * Task display mode, 0: canvas mode, 1: form mode.
     */
    public readonly taskMode!: pulumi.Output<number>;
    /**
     * Task type, 201: real-time task, 202: offline task.
     */
    public readonly taskType!: pulumi.Output<number>;

    /**
     * Create a IntegrationTaskNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationTaskNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationTaskNodeArgs | IntegrationTaskNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationTaskNodeState | undefined;
            resourceInputs["dataSourceType"] = state ? state.dataSourceType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["nodeInfo"] = state ? state.nodeInfo : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["taskMode"] = state ? state.taskMode : undefined;
            resourceInputs["taskType"] = state ? state.taskType : undefined;
        } else {
            const args = argsOrState as IntegrationTaskNodeArgs | undefined;
            if ((!args || args.dataSourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceType'");
            }
            if ((!args || args.nodeInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeInfo'");
            }
            if ((!args || args.nodeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.taskId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskId'");
            }
            if ((!args || args.taskMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskMode'");
            }
            if ((!args || args.taskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskType'");
            }
            resourceInputs["dataSourceType"] = args ? args.dataSourceType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeInfo"] = args ? args.nodeInfo : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["taskId"] = args ? args.taskId : undefined;
            resourceInputs["taskMode"] = args ? args.taskMode : undefined;
            resourceInputs["taskType"] = args ? args.taskType : undefined;
            resourceInputs["nodeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationTaskNode.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationTaskNode resources.
 */
export interface IntegrationTaskNodeState {
    /**
     * Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM,
     * GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA,
     * REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
     */
    dataSourceType?: pulumi.Input<string>;
    /**
     * Node Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Node ID.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * Node information.
     */
    nodeInfo?: pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfo>;
    /**
     * Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
     */
    nodeType?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The task id to which the node belongs.
     */
    taskId?: pulumi.Input<string>;
    /**
     * Task display mode, 0: canvas mode, 1: form mode.
     */
    taskMode?: pulumi.Input<number>;
    /**
     * Task type, 201: real-time task, 202: offline task.
     */
    taskType?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a IntegrationTaskNode resource.
 */
export interface IntegrationTaskNodeArgs {
    /**
     * Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM,
     * GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA,
     * REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
     */
    dataSourceType: pulumi.Input<string>;
    /**
     * Node Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Node information.
     */
    nodeInfo: pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfo>;
    /**
     * Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
     */
    nodeType: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId: pulumi.Input<string>;
    /**
     * The task id to which the node belongs.
     */
    taskId: pulumi.Input<string>;
    /**
     * Task display mode, 0: canvas mode, 1: form mode.
     */
    taskMode: pulumi.Input<number>;
    /**
     * Task type, 201: real-time task, 202: offline task.
     */
    taskType: pulumi.Input<number>;
}
