// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SnapshotTemplate extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotTemplateState, opts?: pulumi.CustomResourceOptions): SnapshotTemplate {
        return new SnapshotTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Css/snapshotTemplate:SnapshotTemplate';

    /**
     * Returns true if the given object is an instance of SnapshotTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnapshotTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotTemplate.__pulumiType;
    }

    /**
     * Cos application ID.
     */
    public readonly cosAppId!: pulumi.Output<number>;
    /**
     * Cos bucket name. Note: The CosBucket parameter value cannot include the - [appid] part.
     */
    public readonly cosBucket!: pulumi.Output<string>;
    /**
     * Cos file name. If it is empty, set according to the default value
     * {StreamID}-screenshot-{Hour}-{Minute}-{Second}-{Width}x{Height}{Ext}.
     */
    public readonly cosFileName!: pulumi.Output<string | undefined>;
    /**
     * Cos Bucket folder prefix. If it is empty, set according to the default value /{Year}-{Month}-{Day}/.
     */
    public readonly cosPrefix!: pulumi.Output<string | undefined>;
    /**
     * Cos region.
     */
    public readonly cosRegion!: pulumi.Output<string>;
    /**
     * Description information. Maximum length: 1024 bytes. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Screenshot height. Default: 0 (original height). Range: 0-2000.
     */
    public readonly height!: pulumi.Output<number | undefined>;
    /**
     * Whether porn is enabled, 0: not enabled, 1: enabled. Default: 0.
     */
    public readonly pornFlag!: pulumi.Output<number | undefined>;
    /**
     * Screenshot interval, unit: s, default: 10s. Range: 2s~300s.
     */
    public readonly snapshotInterval!: pulumi.Output<number | undefined>;
    /**
     * Template name. Maximum length: 255 bytes. Only Chinese, English, numbers, `_`, `-` are supported.
     */
    public readonly templateName!: pulumi.Output<string>;
    /**
     * Screenshot width. Default: 0 (original width). Range: 0-3000.
     */
    public readonly width!: pulumi.Output<number | undefined>;

    /**
     * Create a SnapshotTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotTemplateArgs | SnapshotTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotTemplateState | undefined;
            resourceInputs["cosAppId"] = state ? state.cosAppId : undefined;
            resourceInputs["cosBucket"] = state ? state.cosBucket : undefined;
            resourceInputs["cosFileName"] = state ? state.cosFileName : undefined;
            resourceInputs["cosPrefix"] = state ? state.cosPrefix : undefined;
            resourceInputs["cosRegion"] = state ? state.cosRegion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["height"] = state ? state.height : undefined;
            resourceInputs["pornFlag"] = state ? state.pornFlag : undefined;
            resourceInputs["snapshotInterval"] = state ? state.snapshotInterval : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["width"] = state ? state.width : undefined;
        } else {
            const args = argsOrState as SnapshotTemplateArgs | undefined;
            if ((!args || args.cosAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosAppId'");
            }
            if ((!args || args.cosBucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosBucket'");
            }
            if ((!args || args.cosRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosRegion'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["cosAppId"] = args ? args.cosAppId : undefined;
            resourceInputs["cosBucket"] = args ? args.cosBucket : undefined;
            resourceInputs["cosFileName"] = args ? args.cosFileName : undefined;
            resourceInputs["cosPrefix"] = args ? args.cosPrefix : undefined;
            resourceInputs["cosRegion"] = args ? args.cosRegion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["height"] = args ? args.height : undefined;
            resourceInputs["pornFlag"] = args ? args.pornFlag : undefined;
            resourceInputs["snapshotInterval"] = args ? args.snapshotInterval : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["width"] = args ? args.width : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnapshotTemplate resources.
 */
export interface SnapshotTemplateState {
    /**
     * Cos application ID.
     */
    cosAppId?: pulumi.Input<number>;
    /**
     * Cos bucket name. Note: The CosBucket parameter value cannot include the - [appid] part.
     */
    cosBucket?: pulumi.Input<string>;
    /**
     * Cos file name. If it is empty, set according to the default value
     * {StreamID}-screenshot-{Hour}-{Minute}-{Second}-{Width}x{Height}{Ext}.
     */
    cosFileName?: pulumi.Input<string>;
    /**
     * Cos Bucket folder prefix. If it is empty, set according to the default value /{Year}-{Month}-{Day}/.
     */
    cosPrefix?: pulumi.Input<string>;
    /**
     * Cos region.
     */
    cosRegion?: pulumi.Input<string>;
    /**
     * Description information. Maximum length: 1024 bytes. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
     */
    description?: pulumi.Input<string>;
    /**
     * Screenshot height. Default: 0 (original height). Range: 0-2000.
     */
    height?: pulumi.Input<number>;
    /**
     * Whether porn is enabled, 0: not enabled, 1: enabled. Default: 0.
     */
    pornFlag?: pulumi.Input<number>;
    /**
     * Screenshot interval, unit: s, default: 10s. Range: 2s~300s.
     */
    snapshotInterval?: pulumi.Input<number>;
    /**
     * Template name. Maximum length: 255 bytes. Only Chinese, English, numbers, `_`, `-` are supported.
     */
    templateName?: pulumi.Input<string>;
    /**
     * Screenshot width. Default: 0 (original width). Range: 0-3000.
     */
    width?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SnapshotTemplate resource.
 */
export interface SnapshotTemplateArgs {
    /**
     * Cos application ID.
     */
    cosAppId: pulumi.Input<number>;
    /**
     * Cos bucket name. Note: The CosBucket parameter value cannot include the - [appid] part.
     */
    cosBucket: pulumi.Input<string>;
    /**
     * Cos file name. If it is empty, set according to the default value
     * {StreamID}-screenshot-{Hour}-{Minute}-{Second}-{Width}x{Height}{Ext}.
     */
    cosFileName?: pulumi.Input<string>;
    /**
     * Cos Bucket folder prefix. If it is empty, set according to the default value /{Year}-{Month}-{Day}/.
     */
    cosPrefix?: pulumi.Input<string>;
    /**
     * Cos region.
     */
    cosRegion: pulumi.Input<string>;
    /**
     * Description information. Maximum length: 1024 bytes. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
     */
    description?: pulumi.Input<string>;
    /**
     * Screenshot height. Default: 0 (original height). Range: 0-2000.
     */
    height?: pulumi.Input<number>;
    /**
     * Whether porn is enabled, 0: not enabled, 1: enabled. Default: 0.
     */
    pornFlag?: pulumi.Input<number>;
    /**
     * Screenshot interval, unit: s, default: 10s. Range: 2s~300s.
     */
    snapshotInterval?: pulumi.Input<number>;
    /**
     * Template name. Maximum length: 255 bytes. Only Chinese, English, numbers, `_`, `-` are supported.
     */
    templateName: pulumi.Input<string>;
    /**
     * Screenshot width. Default: 0 (original width). Range: 0-3000.
     */
    width?: pulumi.Input<number>;
}
