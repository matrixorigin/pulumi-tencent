// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AuthenticateDomainOwnerOperationArgs, AuthenticateDomainOwnerOperationState } from "./authenticateDomainOwnerOperation";
export type AuthenticateDomainOwnerOperation = import("./authenticateDomainOwnerOperation").AuthenticateDomainOwnerOperation;
export const AuthenticateDomainOwnerOperation: typeof import("./authenticateDomainOwnerOperation").AuthenticateDomainOwnerOperation = null as any;
utilities.lazyLoad(exports, ["AuthenticateDomainOwnerOperation"], () => require("./authenticateDomainOwnerOperation"));

export { BackupStreamArgs, BackupStreamState } from "./backupStream";
export type BackupStream = import("./backupStream").BackupStream;
export const BackupStream: typeof import("./backupStream").BackupStream = null as any;
utilities.lazyLoad(exports, ["BackupStream"], () => require("./backupStream"));

export { CallbackRuleAttachmentArgs, CallbackRuleAttachmentState } from "./callbackRuleAttachment";
export type CallbackRuleAttachment = import("./callbackRuleAttachment").CallbackRuleAttachment;
export const CallbackRuleAttachment: typeof import("./callbackRuleAttachment").CallbackRuleAttachment = null as any;
utilities.lazyLoad(exports, ["CallbackRuleAttachment"], () => require("./callbackRuleAttachment"));

export { CallbackTemplateArgs, CallbackTemplateState } from "./callbackTemplate";
export type CallbackTemplate = import("./callbackTemplate").CallbackTemplate;
export const CallbackTemplate: typeof import("./callbackTemplate").CallbackTemplate = null as any;
utilities.lazyLoad(exports, ["CallbackTemplate"], () => require("./callbackTemplate"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainRefererArgs, DomainRefererState } from "./domainReferer";
export type DomainReferer = import("./domainReferer").DomainReferer;
export const DomainReferer: typeof import("./domainReferer").DomainReferer = null as any;
utilities.lazyLoad(exports, ["DomainReferer"], () => require("./domainReferer"));

export { EnableOptimalSwitchingArgs, EnableOptimalSwitchingState } from "./enableOptimalSwitching";
export type EnableOptimalSwitching = import("./enableOptimalSwitching").EnableOptimalSwitching;
export const EnableOptimalSwitching: typeof import("./enableOptimalSwitching").EnableOptimalSwitching = null as any;
utilities.lazyLoad(exports, ["EnableOptimalSwitching"], () => require("./enableOptimalSwitching"));

export { GetBackupStreamArgs, GetBackupStreamResult, GetBackupStreamOutputArgs } from "./getBackupStream";
export const getBackupStream: typeof import("./getBackupStream").getBackupStream = null as any;
export const getBackupStreamOutput: typeof import("./getBackupStream").getBackupStreamOutput = null as any;
utilities.lazyLoad(exports, ["getBackupStream","getBackupStreamOutput"], () => require("./getBackupStream"));

export { GetDeliverLogDownListArgs, GetDeliverLogDownListResult, GetDeliverLogDownListOutputArgs } from "./getDeliverLogDownList";
export const getDeliverLogDownList: typeof import("./getDeliverLogDownList").getDeliverLogDownList = null as any;
export const getDeliverLogDownListOutput: typeof import("./getDeliverLogDownList").getDeliverLogDownListOutput = null as any;
utilities.lazyLoad(exports, ["getDeliverLogDownList","getDeliverLogDownListOutput"], () => require("./getDeliverLogDownList"));

export { GetDomainsArgs, GetDomainsResult, GetDomainsOutputArgs } from "./getDomains";
export const getDomains: typeof import("./getDomains").getDomains = null as any;
export const getDomainsOutput: typeof import("./getDomains").getDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDomains","getDomainsOutput"], () => require("./getDomains"));

export { GetMonitorReportArgs, GetMonitorReportResult, GetMonitorReportOutputArgs } from "./getMonitorReport";
export const getMonitorReport: typeof import("./getMonitorReport").getMonitorReport = null as any;
export const getMonitorReportOutput: typeof import("./getMonitorReport").getMonitorReportOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorReport","getMonitorReportOutput"], () => require("./getMonitorReport"));

export { GetPadTemplatesArgs, GetPadTemplatesResult, GetPadTemplatesOutputArgs } from "./getPadTemplates";
export const getPadTemplates: typeof import("./getPadTemplates").getPadTemplates = null as any;
export const getPadTemplatesOutput: typeof import("./getPadTemplates").getPadTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getPadTemplates","getPadTemplatesOutput"], () => require("./getPadTemplates"));

export { GetPullStreamTaskStatusArgs, GetPullStreamTaskStatusResult, GetPullStreamTaskStatusOutputArgs } from "./getPullStreamTaskStatus";
export const getPullStreamTaskStatus: typeof import("./getPullStreamTaskStatus").getPullStreamTaskStatus = null as any;
export const getPullStreamTaskStatusOutput: typeof import("./getPullStreamTaskStatus").getPullStreamTaskStatusOutput = null as any;
utilities.lazyLoad(exports, ["getPullStreamTaskStatus","getPullStreamTaskStatusOutput"], () => require("./getPullStreamTaskStatus"));

export { GetStreamMonitorListArgs, GetStreamMonitorListResult, GetStreamMonitorListOutputArgs } from "./getStreamMonitorList";
export const getStreamMonitorList: typeof import("./getStreamMonitorList").getStreamMonitorList = null as any;
export const getStreamMonitorListOutput: typeof import("./getStreamMonitorList").getStreamMonitorListOutput = null as any;
utilities.lazyLoad(exports, ["getStreamMonitorList","getStreamMonitorListOutput"], () => require("./getStreamMonitorList"));

export { GetTimeShiftRecordDetailArgs, GetTimeShiftRecordDetailResult, GetTimeShiftRecordDetailOutputArgs } from "./getTimeShiftRecordDetail";
export const getTimeShiftRecordDetail: typeof import("./getTimeShiftRecordDetail").getTimeShiftRecordDetail = null as any;
export const getTimeShiftRecordDetailOutput: typeof import("./getTimeShiftRecordDetail").getTimeShiftRecordDetailOutput = null as any;
utilities.lazyLoad(exports, ["getTimeShiftRecordDetail","getTimeShiftRecordDetailOutput"], () => require("./getTimeShiftRecordDetail"));

export { GetTimeShiftStreamListArgs, GetTimeShiftStreamListResult, GetTimeShiftStreamListOutputArgs } from "./getTimeShiftStreamList";
export const getTimeShiftStreamList: typeof import("./getTimeShiftStreamList").getTimeShiftStreamList = null as any;
export const getTimeShiftStreamListOutput: typeof import("./getTimeShiftStreamList").getTimeShiftStreamListOutput = null as any;
utilities.lazyLoad(exports, ["getTimeShiftStreamList","getTimeShiftStreamListOutput"], () => require("./getTimeShiftStreamList"));

export { GetWatermarksArgs, GetWatermarksResult, GetWatermarksOutputArgs } from "./getWatermarks";
export const getWatermarks: typeof import("./getWatermarks").getWatermarks = null as any;
export const getWatermarksOutput: typeof import("./getWatermarks").getWatermarksOutput = null as any;
utilities.lazyLoad(exports, ["getWatermarks","getWatermarksOutput"], () => require("./getWatermarks"));

export { GetXp2pDetailInfoListArgs, GetXp2pDetailInfoListResult, GetXp2pDetailInfoListOutputArgs } from "./getXp2pDetailInfoList";
export const getXp2pDetailInfoList: typeof import("./getXp2pDetailInfoList").getXp2pDetailInfoList = null as any;
export const getXp2pDetailInfoListOutput: typeof import("./getXp2pDetailInfoList").getXp2pDetailInfoListOutput = null as any;
utilities.lazyLoad(exports, ["getXp2pDetailInfoList","getXp2pDetailInfoListOutput"], () => require("./getXp2pDetailInfoList"));

export { LiveTranscodeRuleAttachmentArgs, LiveTranscodeRuleAttachmentState } from "./liveTranscodeRuleAttachment";
export type LiveTranscodeRuleAttachment = import("./liveTranscodeRuleAttachment").LiveTranscodeRuleAttachment;
export const LiveTranscodeRuleAttachment: typeof import("./liveTranscodeRuleAttachment").LiveTranscodeRuleAttachment = null as any;
utilities.lazyLoad(exports, ["LiveTranscodeRuleAttachment"], () => require("./liveTranscodeRuleAttachment"));

export { LiveTranscodeTemplateArgs, LiveTranscodeTemplateState } from "./liveTranscodeTemplate";
export type LiveTranscodeTemplate = import("./liveTranscodeTemplate").LiveTranscodeTemplate;
export const LiveTranscodeTemplate: typeof import("./liveTranscodeTemplate").LiveTranscodeTemplate = null as any;
utilities.lazyLoad(exports, ["LiveTranscodeTemplate"], () => require("./liveTranscodeTemplate"));

export { PadRuleAttachmentArgs, PadRuleAttachmentState } from "./padRuleAttachment";
export type PadRuleAttachment = import("./padRuleAttachment").PadRuleAttachment;
export const PadRuleAttachment: typeof import("./padRuleAttachment").PadRuleAttachment = null as any;
utilities.lazyLoad(exports, ["PadRuleAttachment"], () => require("./padRuleAttachment"));

export { PadTemplateArgs, PadTemplateState } from "./padTemplate";
export type PadTemplate = import("./padTemplate").PadTemplate;
export const PadTemplate: typeof import("./padTemplate").PadTemplate = null as any;
utilities.lazyLoad(exports, ["PadTemplate"], () => require("./padTemplate"));

export { PlayAuthKeyConfigArgs, PlayAuthKeyConfigState } from "./playAuthKeyConfig";
export type PlayAuthKeyConfig = import("./playAuthKeyConfig").PlayAuthKeyConfig;
export const PlayAuthKeyConfig: typeof import("./playAuthKeyConfig").PlayAuthKeyConfig = null as any;
utilities.lazyLoad(exports, ["PlayAuthKeyConfig"], () => require("./playAuthKeyConfig"));

export { PlayDomainCertAttachmentArgs, PlayDomainCertAttachmentState } from "./playDomainCertAttachment";
export type PlayDomainCertAttachment = import("./playDomainCertAttachment").PlayDomainCertAttachment;
export const PlayDomainCertAttachment: typeof import("./playDomainCertAttachment").PlayDomainCertAttachment = null as any;
utilities.lazyLoad(exports, ["PlayDomainCertAttachment"], () => require("./playDomainCertAttachment"));

export { PullStreamTaskArgs, PullStreamTaskState } from "./pullStreamTask";
export type PullStreamTask = import("./pullStreamTask").PullStreamTask;
export const PullStreamTask: typeof import("./pullStreamTask").PullStreamTask = null as any;
utilities.lazyLoad(exports, ["PullStreamTask"], () => require("./pullStreamTask"));

export { PullStreamTaskRestartArgs, PullStreamTaskRestartState } from "./pullStreamTaskRestart";
export type PullStreamTaskRestart = import("./pullStreamTaskRestart").PullStreamTaskRestart;
export const PullStreamTaskRestart: typeof import("./pullStreamTaskRestart").PullStreamTaskRestart = null as any;
utilities.lazyLoad(exports, ["PullStreamTaskRestart"], () => require("./pullStreamTaskRestart"));

export { PushAuthKeyConfigArgs, PushAuthKeyConfigState } from "./pushAuthKeyConfig";
export type PushAuthKeyConfig = import("./pushAuthKeyConfig").PushAuthKeyConfig;
export const PushAuthKeyConfig: typeof import("./pushAuthKeyConfig").PushAuthKeyConfig = null as any;
utilities.lazyLoad(exports, ["PushAuthKeyConfig"], () => require("./pushAuthKeyConfig"));

export { RecordRuleAttachmentArgs, RecordRuleAttachmentState } from "./recordRuleAttachment";
export type RecordRuleAttachment = import("./recordRuleAttachment").RecordRuleAttachment;
export const RecordRuleAttachment: typeof import("./recordRuleAttachment").RecordRuleAttachment = null as any;
utilities.lazyLoad(exports, ["RecordRuleAttachment"], () => require("./recordRuleAttachment"));

export { RecordTemplateArgs, RecordTemplateState } from "./recordTemplate";
export type RecordTemplate = import("./recordTemplate").RecordTemplate;
export const RecordTemplate: typeof import("./recordTemplate").RecordTemplate = null as any;
utilities.lazyLoad(exports, ["RecordTemplate"], () => require("./recordTemplate"));

export { SnapshotRuleAttachmentArgs, SnapshotRuleAttachmentState } from "./snapshotRuleAttachment";
export type SnapshotRuleAttachment = import("./snapshotRuleAttachment").SnapshotRuleAttachment;
export const SnapshotRuleAttachment: typeof import("./snapshotRuleAttachment").SnapshotRuleAttachment = null as any;
utilities.lazyLoad(exports, ["SnapshotRuleAttachment"], () => require("./snapshotRuleAttachment"));

export { SnapshotTemplateArgs, SnapshotTemplateState } from "./snapshotTemplate";
export type SnapshotTemplate = import("./snapshotTemplate").SnapshotTemplate;
export const SnapshotTemplate: typeof import("./snapshotTemplate").SnapshotTemplate = null as any;
utilities.lazyLoad(exports, ["SnapshotTemplate"], () => require("./snapshotTemplate"));

export { StartStreamMonitorArgs, StartStreamMonitorState } from "./startStreamMonitor";
export type StartStreamMonitor = import("./startStreamMonitor").StartStreamMonitor;
export const StartStreamMonitor: typeof import("./startStreamMonitor").StartStreamMonitor = null as any;
utilities.lazyLoad(exports, ["StartStreamMonitor"], () => require("./startStreamMonitor"));

export { StreamMonitorArgs, StreamMonitorState } from "./streamMonitor";
export type StreamMonitor = import("./streamMonitor").StreamMonitor;
export const StreamMonitor: typeof import("./streamMonitor").StreamMonitor = null as any;
utilities.lazyLoad(exports, ["StreamMonitor"], () => require("./streamMonitor"));

export { TimeshiftRuleAttachmentArgs, TimeshiftRuleAttachmentState } from "./timeshiftRuleAttachment";
export type TimeshiftRuleAttachment = import("./timeshiftRuleAttachment").TimeshiftRuleAttachment;
export const TimeshiftRuleAttachment: typeof import("./timeshiftRuleAttachment").TimeshiftRuleAttachment = null as any;
utilities.lazyLoad(exports, ["TimeshiftRuleAttachment"], () => require("./timeshiftRuleAttachment"));

export { TimeshiftTemplateArgs, TimeshiftTemplateState } from "./timeshiftTemplate";
export type TimeshiftTemplate = import("./timeshiftTemplate").TimeshiftTemplate;
export const TimeshiftTemplate: typeof import("./timeshiftTemplate").TimeshiftTemplate = null as any;
utilities.lazyLoad(exports, ["TimeshiftTemplate"], () => require("./timeshiftTemplate"));

export { WatermarkArgs, WatermarkState } from "./watermark";
export type Watermark = import("./watermark").Watermark;
export const Watermark: typeof import("./watermark").Watermark = null as any;
utilities.lazyLoad(exports, ["Watermark"], () => require("./watermark"));

export { WatermarkRuleAttachmentArgs, WatermarkRuleAttachmentState } from "./watermarkRuleAttachment";
export type WatermarkRuleAttachment = import("./watermarkRuleAttachment").WatermarkRuleAttachment;
export const WatermarkRuleAttachment: typeof import("./watermarkRuleAttachment").WatermarkRuleAttachment = null as any;
utilities.lazyLoad(exports, ["WatermarkRuleAttachment"], () => require("./watermarkRuleAttachment"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Css/authenticateDomainOwnerOperation:AuthenticateDomainOwnerOperation":
                return new AuthenticateDomainOwnerOperation(name, <any>undefined, { urn })
            case "tencentcloud:Css/backupStream:BackupStream":
                return new BackupStream(name, <any>undefined, { urn })
            case "tencentcloud:Css/callbackRuleAttachment:CallbackRuleAttachment":
                return new CallbackRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Css/callbackTemplate:CallbackTemplate":
                return new CallbackTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Css/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "tencentcloud:Css/domainReferer:DomainReferer":
                return new DomainReferer(name, <any>undefined, { urn })
            case "tencentcloud:Css/enableOptimalSwitching:EnableOptimalSwitching":
                return new EnableOptimalSwitching(name, <any>undefined, { urn })
            case "tencentcloud:Css/liveTranscodeRuleAttachment:LiveTranscodeRuleAttachment":
                return new LiveTranscodeRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Css/liveTranscodeTemplate:LiveTranscodeTemplate":
                return new LiveTranscodeTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Css/padRuleAttachment:PadRuleAttachment":
                return new PadRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Css/padTemplate:PadTemplate":
                return new PadTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Css/playAuthKeyConfig:PlayAuthKeyConfig":
                return new PlayAuthKeyConfig(name, <any>undefined, { urn })
            case "tencentcloud:Css/playDomainCertAttachment:PlayDomainCertAttachment":
                return new PlayDomainCertAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Css/pullStreamTask:PullStreamTask":
                return new PullStreamTask(name, <any>undefined, { urn })
            case "tencentcloud:Css/pullStreamTaskRestart:PullStreamTaskRestart":
                return new PullStreamTaskRestart(name, <any>undefined, { urn })
            case "tencentcloud:Css/pushAuthKeyConfig:PushAuthKeyConfig":
                return new PushAuthKeyConfig(name, <any>undefined, { urn })
            case "tencentcloud:Css/recordRuleAttachment:RecordRuleAttachment":
                return new RecordRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Css/recordTemplate:RecordTemplate":
                return new RecordTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Css/snapshotRuleAttachment:SnapshotRuleAttachment":
                return new SnapshotRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Css/snapshotTemplate:SnapshotTemplate":
                return new SnapshotTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Css/startStreamMonitor:StartStreamMonitor":
                return new StartStreamMonitor(name, <any>undefined, { urn })
            case "tencentcloud:Css/streamMonitor:StreamMonitor":
                return new StreamMonitor(name, <any>undefined, { urn })
            case "tencentcloud:Css/timeshiftRuleAttachment:TimeshiftRuleAttachment":
                return new TimeshiftRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Css/timeshiftTemplate:TimeshiftTemplate":
                return new TimeshiftTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Css/watermark:Watermark":
                return new Watermark(name, <any>undefined, { urn })
            case "tencentcloud:Css/watermarkRuleAttachment:WatermarkRuleAttachment":
                return new WatermarkRuleAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Css/authenticateDomainOwnerOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/backupStream", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/callbackRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/callbackTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/domain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/domainReferer", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/enableOptimalSwitching", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/liveTranscodeRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/liveTranscodeTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/padRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/padTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/playAuthKeyConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/playDomainCertAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/pullStreamTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/pullStreamTaskRestart", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/pushAuthKeyConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/recordRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/recordTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/snapshotRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/snapshotTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/startStreamMonitor", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/streamMonitor", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/timeshiftRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/timeshiftTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/watermark", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Css/watermarkRuleAttachment", _module)
