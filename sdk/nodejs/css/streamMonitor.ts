// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class StreamMonitor extends pulumi.CustomResource {
    /**
     * Get an existing StreamMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamMonitorState, opts?: pulumi.CustomResourceOptions): StreamMonitor {
        return new StreamMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Css/streamMonitor:StreamMonitor';

    /**
     * Returns true if the given object is an instance of StreamMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamMonitor.__pulumiType;
    }

    /**
     * AI asr input index list.(first input index is 1.).
     */
    public readonly aiAsrInputIndexLists!: pulumi.Output<number[] | undefined>;
    /**
     * If enable format diagnose.
     */
    public readonly aiFormatDiagnose!: pulumi.Output<number | undefined>;
    /**
     * Ai ocr input index list(first input index is 1.).
     */
    public readonly aiOcrInputIndexLists!: pulumi.Output<number[] | undefined>;
    /**
     * If store monitor event.
     */
    public readonly allowMonitorReport!: pulumi.Output<number | undefined>;
    /**
     * Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
     */
    public readonly asrLanguage!: pulumi.Output<number | undefined>;
    /**
     * If enable stream broken check.
     */
    public readonly checkStreamBroken!: pulumi.Output<number | undefined>;
    /**
     * If enable low frame rate check.
     */
    public readonly checkStreamLowFrameRate!: pulumi.Output<number | undefined>;
    /**
     * Wait monitor input info list.
     */
    public readonly inputLists!: pulumi.Output<outputs.Css.StreamMonitorInputList[]>;
    /**
     * Monitor task name.
     */
    public readonly monitorName!: pulumi.Output<string | undefined>;
    /**
     * Monitor event notify policy.
     */
    public readonly notifyPolicy!: pulumi.Output<outputs.Css.StreamMonitorNotifyPolicy | undefined>;
    /**
     * Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
     */
    public readonly ocrLanguage!: pulumi.Output<number | undefined>;
    /**
     * Monitor task output info.
     */
    public readonly outputInfo!: pulumi.Output<outputs.Css.StreamMonitorOutputInfo>;

    /**
     * Create a StreamMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamMonitorArgs | StreamMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamMonitorState | undefined;
            resourceInputs["aiAsrInputIndexLists"] = state ? state.aiAsrInputIndexLists : undefined;
            resourceInputs["aiFormatDiagnose"] = state ? state.aiFormatDiagnose : undefined;
            resourceInputs["aiOcrInputIndexLists"] = state ? state.aiOcrInputIndexLists : undefined;
            resourceInputs["allowMonitorReport"] = state ? state.allowMonitorReport : undefined;
            resourceInputs["asrLanguage"] = state ? state.asrLanguage : undefined;
            resourceInputs["checkStreamBroken"] = state ? state.checkStreamBroken : undefined;
            resourceInputs["checkStreamLowFrameRate"] = state ? state.checkStreamLowFrameRate : undefined;
            resourceInputs["inputLists"] = state ? state.inputLists : undefined;
            resourceInputs["monitorName"] = state ? state.monitorName : undefined;
            resourceInputs["notifyPolicy"] = state ? state.notifyPolicy : undefined;
            resourceInputs["ocrLanguage"] = state ? state.ocrLanguage : undefined;
            resourceInputs["outputInfo"] = state ? state.outputInfo : undefined;
        } else {
            const args = argsOrState as StreamMonitorArgs | undefined;
            if ((!args || args.inputLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputLists'");
            }
            if ((!args || args.outputInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outputInfo'");
            }
            resourceInputs["aiAsrInputIndexLists"] = args ? args.aiAsrInputIndexLists : undefined;
            resourceInputs["aiFormatDiagnose"] = args ? args.aiFormatDiagnose : undefined;
            resourceInputs["aiOcrInputIndexLists"] = args ? args.aiOcrInputIndexLists : undefined;
            resourceInputs["allowMonitorReport"] = args ? args.allowMonitorReport : undefined;
            resourceInputs["asrLanguage"] = args ? args.asrLanguage : undefined;
            resourceInputs["checkStreamBroken"] = args ? args.checkStreamBroken : undefined;
            resourceInputs["checkStreamLowFrameRate"] = args ? args.checkStreamLowFrameRate : undefined;
            resourceInputs["inputLists"] = args ? args.inputLists : undefined;
            resourceInputs["monitorName"] = args ? args.monitorName : undefined;
            resourceInputs["notifyPolicy"] = args ? args.notifyPolicy : undefined;
            resourceInputs["ocrLanguage"] = args ? args.ocrLanguage : undefined;
            resourceInputs["outputInfo"] = args ? args.outputInfo : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StreamMonitor resources.
 */
export interface StreamMonitorState {
    /**
     * AI asr input index list.(first input index is 1.).
     */
    aiAsrInputIndexLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If enable format diagnose.
     */
    aiFormatDiagnose?: pulumi.Input<number>;
    /**
     * Ai ocr input index list(first input index is 1.).
     */
    aiOcrInputIndexLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If store monitor event.
     */
    allowMonitorReport?: pulumi.Input<number>;
    /**
     * Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
     */
    asrLanguage?: pulumi.Input<number>;
    /**
     * If enable stream broken check.
     */
    checkStreamBroken?: pulumi.Input<number>;
    /**
     * If enable low frame rate check.
     */
    checkStreamLowFrameRate?: pulumi.Input<number>;
    /**
     * Wait monitor input info list.
     */
    inputLists?: pulumi.Input<pulumi.Input<inputs.Css.StreamMonitorInputList>[]>;
    /**
     * Monitor task name.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * Monitor event notify policy.
     */
    notifyPolicy?: pulumi.Input<inputs.Css.StreamMonitorNotifyPolicy>;
    /**
     * Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
     */
    ocrLanguage?: pulumi.Input<number>;
    /**
     * Monitor task output info.
     */
    outputInfo?: pulumi.Input<inputs.Css.StreamMonitorOutputInfo>;
}

/**
 * The set of arguments for constructing a StreamMonitor resource.
 */
export interface StreamMonitorArgs {
    /**
     * AI asr input index list.(first input index is 1.).
     */
    aiAsrInputIndexLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If enable format diagnose.
     */
    aiFormatDiagnose?: pulumi.Input<number>;
    /**
     * Ai ocr input index list(first input index is 1.).
     */
    aiOcrInputIndexLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If store monitor event.
     */
    allowMonitorReport?: pulumi.Input<number>;
    /**
     * Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
     */
    asrLanguage?: pulumi.Input<number>;
    /**
     * If enable stream broken check.
     */
    checkStreamBroken?: pulumi.Input<number>;
    /**
     * If enable low frame rate check.
     */
    checkStreamLowFrameRate?: pulumi.Input<number>;
    /**
     * Wait monitor input info list.
     */
    inputLists: pulumi.Input<pulumi.Input<inputs.Css.StreamMonitorInputList>[]>;
    /**
     * Monitor task name.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * Monitor event notify policy.
     */
    notifyPolicy?: pulumi.Input<inputs.Css.StreamMonitorNotifyPolicy>;
    /**
     * Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
     */
    ocrLanguage?: pulumi.Input<number>;
    /**
     * Monitor task output info.
     */
    outputInfo: pulumi.Input<inputs.Css.StreamMonitorOutputInfo>;
}
