// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { GetAutoScaleRecordsArgs, GetAutoScaleRecordsResult, GetAutoScaleRecordsOutputArgs } from "./getAutoScaleRecords";
export const getAutoScaleRecords: typeof import("./getAutoScaleRecords").getAutoScaleRecords = null as any;
export const getAutoScaleRecordsOutput: typeof import("./getAutoScaleRecords").getAutoScaleRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScaleRecords","getAutoScaleRecordsOutput"], () => require("./getAutoScaleRecords"));

export { GetCvmQuotaArgs, GetCvmQuotaResult, GetCvmQuotaOutputArgs } from "./getCvmQuota";
export const getCvmQuota: typeof import("./getCvmQuota").getCvmQuota = null as any;
export const getCvmQuotaOutput: typeof import("./getCvmQuota").getCvmQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getCvmQuota","getCvmQuotaOutput"], () => require("./getCvmQuota"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetNodesArgs, GetNodesResult, GetNodesOutputArgs } from "./getNodes";
export const getNodes: typeof import("./getNodes").getNodes = null as any;
export const getNodesOutput: typeof import("./getNodes").getNodesOutput = null as any;
utilities.lazyLoad(exports, ["getNodes","getNodesOutput"], () => require("./getNodes"));

export { UserManagerArgs, UserManagerState } from "./userManager";
export type UserManager = import("./userManager").UserManager;
export const UserManager: typeof import("./userManager").UserManager = null as any;
utilities.lazyLoad(exports, ["UserManager"], () => require("./userManager"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Emr/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "tencentcloud:Emr/userManager:UserManager":
                return new UserManager(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Emr/cluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Emr/userManager", _module)
