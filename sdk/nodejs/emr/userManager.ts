// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class UserManager extends pulumi.CustomResource {
    /**
     * Get an existing UserManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserManagerState, opts?: pulumi.CustomResourceOptions): UserManager {
        return new UserManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Emr/userManager:UserManager';

    /**
     * Returns true if the given object is an instance of UserManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserManager.__pulumiType;
    }

    /**
     * Create time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Download keytab url.
     */
    public /*out*/ readonly downloadKeytabUrl!: pulumi.Output<string>;
    /**
     * Cluster string ID.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * PassWord.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * If support download keytab.
     */
    public /*out*/ readonly supportDownloadKeytab!: pulumi.Output<boolean>;
    /**
     * User group membership.
     */
    public readonly userGroup!: pulumi.Output<string>;
    /**
     * Username.
     */
    public readonly userName!: pulumi.Output<string>;
    /**
     * User type.
     */
    public /*out*/ readonly userType!: pulumi.Output<string>;

    /**
     * Create a UserManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserManagerArgs | UserManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserManagerState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["downloadKeytabUrl"] = state ? state.downloadKeytabUrl : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["supportDownloadKeytab"] = state ? state.supportDownloadKeytab : undefined;
            resourceInputs["userGroup"] = state ? state.userGroup : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
        } else {
            const args = argsOrState as UserManagerArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.userGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userGroup'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["userGroup"] = args ? args.userGroup : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["downloadKeytabUrl"] = undefined /*out*/;
            resourceInputs["supportDownloadKeytab"] = undefined /*out*/;
            resourceInputs["userType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserManager.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserManager resources.
 */
export interface UserManagerState {
    /**
     * Create time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Download keytab url.
     */
    downloadKeytabUrl?: pulumi.Input<string>;
    /**
     * Cluster string ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * PassWord.
     */
    password?: pulumi.Input<string>;
    /**
     * If support download keytab.
     */
    supportDownloadKeytab?: pulumi.Input<boolean>;
    /**
     * User group membership.
     */
    userGroup?: pulumi.Input<string>;
    /**
     * Username.
     */
    userName?: pulumi.Input<string>;
    /**
     * User type.
     */
    userType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserManager resource.
 */
export interface UserManagerArgs {
    /**
     * Cluster string ID.
     */
    instanceId: pulumi.Input<string>;
    /**
     * PassWord.
     */
    password: pulumi.Input<string>;
    /**
     * User group membership.
     */
    userGroup: pulumi.Input<string>;
    /**
     * Username.
     */
    userName: pulumi.Input<string>;
}
