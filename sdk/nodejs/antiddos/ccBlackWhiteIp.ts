// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class CcBlackWhiteIp extends pulumi.CustomResource {
    /**
     * Get an existing CcBlackWhiteIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CcBlackWhiteIpState, opts?: pulumi.CustomResourceOptions): CcBlackWhiteIp {
        return new CcBlackWhiteIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Antiddos/ccBlackWhiteIp:CcBlackWhiteIp';

    /**
     * Returns true if the given object is an instance of CcBlackWhiteIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CcBlackWhiteIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CcBlackWhiteIp.__pulumiType;
    }

    /**
     * Black white ip.
     */
    public readonly blackWhiteIp!: pulumi.Output<outputs.Antiddos.CcBlackWhiteIpBlackWhiteIp>;
    /**
     * domain.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * instance id.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * ip address.
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * protocol.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * IP type, value [black(blacklist IP), white(whitelist IP)].
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a CcBlackWhiteIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CcBlackWhiteIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CcBlackWhiteIpArgs | CcBlackWhiteIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CcBlackWhiteIpState | undefined;
            resourceInputs["blackWhiteIp"] = state ? state.blackWhiteIp : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CcBlackWhiteIpArgs | undefined;
            if ((!args || args.blackWhiteIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blackWhiteIp'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["blackWhiteIp"] = args ? args.blackWhiteIp : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CcBlackWhiteIp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CcBlackWhiteIp resources.
 */
export interface CcBlackWhiteIpState {
    /**
     * Black white ip.
     */
    blackWhiteIp?: pulumi.Input<inputs.Antiddos.CcBlackWhiteIpBlackWhiteIp>;
    /**
     * domain.
     */
    domain?: pulumi.Input<string>;
    /**
     * instance id.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * ip address.
     */
    ip?: pulumi.Input<string>;
    /**
     * protocol.
     */
    protocol?: pulumi.Input<string>;
    /**
     * IP type, value [black(blacklist IP), white(whitelist IP)].
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CcBlackWhiteIp resource.
 */
export interface CcBlackWhiteIpArgs {
    /**
     * Black white ip.
     */
    blackWhiteIp: pulumi.Input<inputs.Antiddos.CcBlackWhiteIpBlackWhiteIp>;
    /**
     * domain.
     */
    domain: pulumi.Input<string>;
    /**
     * instance id.
     */
    instanceId: pulumi.Input<string>;
    /**
     * ip address.
     */
    ip: pulumi.Input<string>;
    /**
     * protocol.
     */
    protocol: pulumi.Input<string>;
    /**
     * IP type, value [black(blacklist IP), white(whitelist IP)].
     */
    type: pulumi.Input<string>;
}
