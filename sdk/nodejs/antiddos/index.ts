// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CcBlackWhiteIpArgs, CcBlackWhiteIpState } from "./ccBlackWhiteIp";
export type CcBlackWhiteIp = import("./ccBlackWhiteIp").CcBlackWhiteIp;
export const CcBlackWhiteIp: typeof import("./ccBlackWhiteIp").CcBlackWhiteIp = null as any;
utilities.lazyLoad(exports, ["CcBlackWhiteIp"], () => require("./ccBlackWhiteIp"));

export { CcPrecisionPolicyArgs, CcPrecisionPolicyState } from "./ccPrecisionPolicy";
export type CcPrecisionPolicy = import("./ccPrecisionPolicy").CcPrecisionPolicy;
export const CcPrecisionPolicy: typeof import("./ccPrecisionPolicy").CcPrecisionPolicy = null as any;
utilities.lazyLoad(exports, ["CcPrecisionPolicy"], () => require("./ccPrecisionPolicy"));

export { DdosBlackWhiteIpArgs, DdosBlackWhiteIpState } from "./ddosBlackWhiteIp";
export type DdosBlackWhiteIp = import("./ddosBlackWhiteIp").DdosBlackWhiteIp;
export const DdosBlackWhiteIp: typeof import("./ddosBlackWhiteIp").DdosBlackWhiteIp = null as any;
utilities.lazyLoad(exports, ["DdosBlackWhiteIp"], () => require("./ddosBlackWhiteIp"));

export { DdosGeoIpBlockConfigArgs, DdosGeoIpBlockConfigState } from "./ddosGeoIpBlockConfig";
export type DdosGeoIpBlockConfig = import("./ddosGeoIpBlockConfig").DdosGeoIpBlockConfig;
export const DdosGeoIpBlockConfig: typeof import("./ddosGeoIpBlockConfig").DdosGeoIpBlockConfig = null as any;
utilities.lazyLoad(exports, ["DdosGeoIpBlockConfig"], () => require("./ddosGeoIpBlockConfig"));

export { DdosSpeedLimitConfigArgs, DdosSpeedLimitConfigState } from "./ddosSpeedLimitConfig";
export type DdosSpeedLimitConfig = import("./ddosSpeedLimitConfig").DdosSpeedLimitConfig;
export const DdosSpeedLimitConfig: typeof import("./ddosSpeedLimitConfig").DdosSpeedLimitConfig = null as any;
utilities.lazyLoad(exports, ["DdosSpeedLimitConfig"], () => require("./ddosSpeedLimitConfig"));

export { DefaultAlarmThresholdArgs, DefaultAlarmThresholdState } from "./defaultAlarmThreshold";
export type DefaultAlarmThreshold = import("./defaultAlarmThreshold").DefaultAlarmThreshold;
export const DefaultAlarmThreshold: typeof import("./defaultAlarmThreshold").DefaultAlarmThreshold = null as any;
utilities.lazyLoad(exports, ["DefaultAlarmThreshold"], () => require("./defaultAlarmThreshold"));

export { GetBasicDeviceStatusArgs, GetBasicDeviceStatusResult, GetBasicDeviceStatusOutputArgs } from "./getBasicDeviceStatus";
export const getBasicDeviceStatus: typeof import("./getBasicDeviceStatus").getBasicDeviceStatus = null as any;
export const getBasicDeviceStatusOutput: typeof import("./getBasicDeviceStatus").getBasicDeviceStatusOutput = null as any;
utilities.lazyLoad(exports, ["getBasicDeviceStatus","getBasicDeviceStatusOutput"], () => require("./getBasicDeviceStatus"));

export { GetBgpBizTrendArgs, GetBgpBizTrendResult, GetBgpBizTrendOutputArgs } from "./getBgpBizTrend";
export const getBgpBizTrend: typeof import("./getBgpBizTrend").getBgpBizTrend = null as any;
export const getBgpBizTrendOutput: typeof import("./getBgpBizTrend").getBgpBizTrendOutput = null as any;
utilities.lazyLoad(exports, ["getBgpBizTrend","getBgpBizTrendOutput"], () => require("./getBgpBizTrend"));

export { GetListListenerArgs, GetListListenerResult, GetListListenerOutputArgs } from "./getListListener";
export const getListListener: typeof import("./getListListener").getListListener = null as any;
export const getListListenerOutput: typeof import("./getListListener").getListListenerOutput = null as any;
utilities.lazyLoad(exports, ["getListListener","getListListenerOutput"], () => require("./getListListener"));

export { GetOverviewAttackTrendArgs, GetOverviewAttackTrendResult, GetOverviewAttackTrendOutputArgs } from "./getOverviewAttackTrend";
export const getOverviewAttackTrend: typeof import("./getOverviewAttackTrend").getOverviewAttackTrend = null as any;
export const getOverviewAttackTrendOutput: typeof import("./getOverviewAttackTrend").getOverviewAttackTrendOutput = null as any;
utilities.lazyLoad(exports, ["getOverviewAttackTrend","getOverviewAttackTrendOutput"], () => require("./getOverviewAttackTrend"));

export { GetOverviewCcTrendArgs, GetOverviewCcTrendResult, GetOverviewCcTrendOutputArgs } from "./getOverviewCcTrend";
export const getOverviewCcTrend: typeof import("./getOverviewCcTrend").getOverviewCcTrend = null as any;
export const getOverviewCcTrendOutput: typeof import("./getOverviewCcTrend").getOverviewCcTrendOutput = null as any;
utilities.lazyLoad(exports, ["getOverviewCcTrend","getOverviewCcTrendOutput"], () => require("./getOverviewCcTrend"));

export { GetOverviewDdosEventListArgs, GetOverviewDdosEventListResult, GetOverviewDdosEventListOutputArgs } from "./getOverviewDdosEventList";
export const getOverviewDdosEventList: typeof import("./getOverviewDdosEventList").getOverviewDdosEventList = null as any;
export const getOverviewDdosEventListOutput: typeof import("./getOverviewDdosEventList").getOverviewDdosEventListOutput = null as any;
utilities.lazyLoad(exports, ["getOverviewDdosEventList","getOverviewDdosEventListOutput"], () => require("./getOverviewDdosEventList"));

export { GetOverviewDdosTrendArgs, GetOverviewDdosTrendResult, GetOverviewDdosTrendOutputArgs } from "./getOverviewDdosTrend";
export const getOverviewDdosTrend: typeof import("./getOverviewDdosTrend").getOverviewDdosTrend = null as any;
export const getOverviewDdosTrendOutput: typeof import("./getOverviewDdosTrend").getOverviewDdosTrendOutput = null as any;
utilities.lazyLoad(exports, ["getOverviewDdosTrend","getOverviewDdosTrendOutput"], () => require("./getOverviewDdosTrend"));

export { GetOverviewIndexArgs, GetOverviewIndexResult, GetOverviewIndexOutputArgs } from "./getOverviewIndex";
export const getOverviewIndex: typeof import("./getOverviewIndex").getOverviewIndex = null as any;
export const getOverviewIndexOutput: typeof import("./getOverviewIndex").getOverviewIndexOutput = null as any;
utilities.lazyLoad(exports, ["getOverviewIndex","getOverviewIndexOutput"], () => require("./getOverviewIndex"));

export { GetPendingRiskInfoArgs, GetPendingRiskInfoResult, GetPendingRiskInfoOutputArgs } from "./getPendingRiskInfo";
export const getPendingRiskInfo: typeof import("./getPendingRiskInfo").getPendingRiskInfo = null as any;
export const getPendingRiskInfoOutput: typeof import("./getPendingRiskInfo").getPendingRiskInfoOutput = null as any;
utilities.lazyLoad(exports, ["getPendingRiskInfo","getPendingRiskInfoOutput"], () => require("./getPendingRiskInfo"));

export { IpAlarmThresholdConfigArgs, IpAlarmThresholdConfigState } from "./ipAlarmThresholdConfig";
export type IpAlarmThresholdConfig = import("./ipAlarmThresholdConfig").IpAlarmThresholdConfig;
export const IpAlarmThresholdConfig: typeof import("./ipAlarmThresholdConfig").IpAlarmThresholdConfig = null as any;
utilities.lazyLoad(exports, ["IpAlarmThresholdConfig"], () => require("./ipAlarmThresholdConfig"));

export { PacketFilterConfigArgs, PacketFilterConfigState } from "./packetFilterConfig";
export type PacketFilterConfig = import("./packetFilterConfig").PacketFilterConfig;
export const PacketFilterConfig: typeof import("./packetFilterConfig").PacketFilterConfig = null as any;
utilities.lazyLoad(exports, ["PacketFilterConfig"], () => require("./packetFilterConfig"));

export { PortAclConfigArgs, PortAclConfigState } from "./portAclConfig";
export type PortAclConfig = import("./portAclConfig").PortAclConfig;
export const PortAclConfig: typeof import("./portAclConfig").PortAclConfig = null as any;
utilities.lazyLoad(exports, ["PortAclConfig"], () => require("./portAclConfig"));

export { SchedulingDomainUserNameArgs, SchedulingDomainUserNameState } from "./schedulingDomainUserName";
export type SchedulingDomainUserName = import("./schedulingDomainUserName").SchedulingDomainUserName;
export const SchedulingDomainUserName: typeof import("./schedulingDomainUserName").SchedulingDomainUserName = null as any;
utilities.lazyLoad(exports, ["SchedulingDomainUserName"], () => require("./schedulingDomainUserName"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Antiddos/ccBlackWhiteIp:CcBlackWhiteIp":
                return new CcBlackWhiteIp(name, <any>undefined, { urn })
            case "tencentcloud:Antiddos/ccPrecisionPolicy:CcPrecisionPolicy":
                return new CcPrecisionPolicy(name, <any>undefined, { urn })
            case "tencentcloud:Antiddos/ddosBlackWhiteIp:DdosBlackWhiteIp":
                return new DdosBlackWhiteIp(name, <any>undefined, { urn })
            case "tencentcloud:Antiddos/ddosGeoIpBlockConfig:DdosGeoIpBlockConfig":
                return new DdosGeoIpBlockConfig(name, <any>undefined, { urn })
            case "tencentcloud:Antiddos/ddosSpeedLimitConfig:DdosSpeedLimitConfig":
                return new DdosSpeedLimitConfig(name, <any>undefined, { urn })
            case "tencentcloud:Antiddos/defaultAlarmThreshold:DefaultAlarmThreshold":
                return new DefaultAlarmThreshold(name, <any>undefined, { urn })
            case "tencentcloud:Antiddos/ipAlarmThresholdConfig:IpAlarmThresholdConfig":
                return new IpAlarmThresholdConfig(name, <any>undefined, { urn })
            case "tencentcloud:Antiddos/packetFilterConfig:PacketFilterConfig":
                return new PacketFilterConfig(name, <any>undefined, { urn })
            case "tencentcloud:Antiddos/portAclConfig:PortAclConfig":
                return new PortAclConfig(name, <any>undefined, { urn })
            case "tencentcloud:Antiddos/schedulingDomainUserName:SchedulingDomainUserName":
                return new SchedulingDomainUserName(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Antiddos/ccBlackWhiteIp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Antiddos/ccPrecisionPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Antiddos/ddosBlackWhiteIp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Antiddos/ddosGeoIpBlockConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Antiddos/ddosSpeedLimitConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Antiddos/defaultAlarmThreshold", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Antiddos/ipAlarmThresholdConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Antiddos/packetFilterConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Antiddos/portAclConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Antiddos/schedulingDomainUserName", _module)
