// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class JobCopy extends pulumi.CustomResource {
    /**
     * Get an existing JobCopy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobCopyState, opts?: pulumi.CustomResourceOptions): JobCopy {
        return new JobCopy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Oceanus/jobCopy:JobCopy';

    /**
     * Returns true if the given object is an instance of JobCopy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JobCopy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JobCopy.__pulumiType;
    }

    /**
     * Copy Job ID.
     */
    public /*out*/ readonly jobId!: pulumi.Output<string>;
    /**
     * The type of the source job.
     */
    public readonly jobType!: pulumi.Output<number | undefined>;
    /**
     * The serial ID of the job to be copied.
     */
    public readonly sourceId!: pulumi.Output<string>;
    /**
     * The name of the job to be copied.
     */
    public readonly sourceName!: pulumi.Output<string | undefined>;
    /**
     * The cluster serial ID of the target cluster.
     */
    public readonly targetClusterId!: pulumi.Output<string>;
    /**
     * The directory ID of the new job.
     */
    public readonly targetFolderId!: pulumi.Output<string | undefined>;
    /**
     * The name of the new job.
     */
    public readonly targetName!: pulumi.Output<string | undefined>;
    /**
     * Workspace SerialId.
     */
    public readonly workSpaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a JobCopy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobCopyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobCopyArgs | JobCopyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobCopyState | undefined;
            resourceInputs["jobId"] = state ? state.jobId : undefined;
            resourceInputs["jobType"] = state ? state.jobType : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
            resourceInputs["sourceName"] = state ? state.sourceName : undefined;
            resourceInputs["targetClusterId"] = state ? state.targetClusterId : undefined;
            resourceInputs["targetFolderId"] = state ? state.targetFolderId : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["workSpaceId"] = state ? state.workSpaceId : undefined;
        } else {
            const args = argsOrState as JobCopyArgs | undefined;
            if ((!args || args.sourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            if ((!args || args.targetClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetClusterId'");
            }
            resourceInputs["jobType"] = args ? args.jobType : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
            resourceInputs["sourceName"] = args ? args.sourceName : undefined;
            resourceInputs["targetClusterId"] = args ? args.targetClusterId : undefined;
            resourceInputs["targetFolderId"] = args ? args.targetFolderId : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["workSpaceId"] = args ? args.workSpaceId : undefined;
            resourceInputs["jobId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JobCopy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering JobCopy resources.
 */
export interface JobCopyState {
    /**
     * Copy Job ID.
     */
    jobId?: pulumi.Input<string>;
    /**
     * The type of the source job.
     */
    jobType?: pulumi.Input<number>;
    /**
     * The serial ID of the job to be copied.
     */
    sourceId?: pulumi.Input<string>;
    /**
     * The name of the job to be copied.
     */
    sourceName?: pulumi.Input<string>;
    /**
     * The cluster serial ID of the target cluster.
     */
    targetClusterId?: pulumi.Input<string>;
    /**
     * The directory ID of the new job.
     */
    targetFolderId?: pulumi.Input<string>;
    /**
     * The name of the new job.
     */
    targetName?: pulumi.Input<string>;
    /**
     * Workspace SerialId.
     */
    workSpaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JobCopy resource.
 */
export interface JobCopyArgs {
    /**
     * The type of the source job.
     */
    jobType?: pulumi.Input<number>;
    /**
     * The serial ID of the job to be copied.
     */
    sourceId: pulumi.Input<string>;
    /**
     * The name of the job to be copied.
     */
    sourceName?: pulumi.Input<string>;
    /**
     * The cluster serial ID of the target cluster.
     */
    targetClusterId: pulumi.Input<string>;
    /**
     * The directory ID of the new job.
     */
    targetFolderId?: pulumi.Input<string>;
    /**
     * The name of the new job.
     */
    targetName?: pulumi.Input<string>;
    /**
     * Workspace SerialId.
     */
    workSpaceId?: pulumi.Input<string>;
}
