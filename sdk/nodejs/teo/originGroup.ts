// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class OriginGroup extends pulumi.CustomResource {
    /**
     * Get an existing OriginGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OriginGroupState, opts?: pulumi.CustomResourceOptions): OriginGroup {
        return new OriginGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Teo/originGroup:OriginGroup';

    /**
     * Returns true if the given object is an instance of OriginGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OriginGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OriginGroup.__pulumiType;
    }

    /**
     * Origin site group creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Back-to-origin Host Header, it only takes effect when type = HTTP is passed in. The rule engine modifies the Host Header
     * configuration priority to be higher than the Host Header of the origin site group.
     */
    public readonly hostHeader!: pulumi.Output<string | undefined>;
    /**
     * OriginGroup Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * OriginGroup ID.
     */
    public /*out*/ readonly originGroupId!: pulumi.Output<string>;
    /**
     * Origin site records.
     */
    public readonly records!: pulumi.Output<outputs.Teo.OriginGroupRecord[]>;
    /**
     * List of referenced instances of the origin site group.
     */
    public /*out*/ readonly references!: pulumi.Output<outputs.Teo.OriginGroupReference[]>;
    /**
     * Type of the origin site. Valid values: - `GENERAL`: Universal origin site group, only supports adding IP/domain name
     * origin sites, which can be referenced by domain name service, rule engine, four-layer proxy, general load balancing, and
     * HTTP-specific load balancing. - `HTTP`: The HTTP-specific origin site group, supports adding IP/domain name and object
     * storage origin site as the origin site, it cannot be referenced by the four-layer proxy, it can only be added to the
     * acceleration domain name, rule engine-modify origin site, and HTTP-specific load balancing reference.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Origin site group update time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Site ID.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a OriginGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OriginGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OriginGroupArgs | OriginGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OriginGroupState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["hostHeader"] = state ? state.hostHeader : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["originGroupId"] = state ? state.originGroupId : undefined;
            resourceInputs["records"] = state ? state.records : undefined;
            resourceInputs["references"] = state ? state.references : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as OriginGroupArgs | undefined;
            if ((!args || args.records === undefined) && !opts.urn) {
                throw new Error("Missing required property 'records'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["hostHeader"] = args ? args.hostHeader : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["records"] = args ? args.records : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["originGroupId"] = undefined /*out*/;
            resourceInputs["references"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OriginGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OriginGroup resources.
 */
export interface OriginGroupState {
    /**
     * Origin site group creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Back-to-origin Host Header, it only takes effect when type = HTTP is passed in. The rule engine modifies the Host Header
     * configuration priority to be higher than the Host Header of the origin site group.
     */
    hostHeader?: pulumi.Input<string>;
    /**
     * OriginGroup Name.
     */
    name?: pulumi.Input<string>;
    /**
     * OriginGroup ID.
     */
    originGroupId?: pulumi.Input<string>;
    /**
     * Origin site records.
     */
    records?: pulumi.Input<pulumi.Input<inputs.Teo.OriginGroupRecord>[]>;
    /**
     * List of referenced instances of the origin site group.
     */
    references?: pulumi.Input<pulumi.Input<inputs.Teo.OriginGroupReference>[]>;
    /**
     * Type of the origin site. Valid values: - `GENERAL`: Universal origin site group, only supports adding IP/domain name
     * origin sites, which can be referenced by domain name service, rule engine, four-layer proxy, general load balancing, and
     * HTTP-specific load balancing. - `HTTP`: The HTTP-specific origin site group, supports adding IP/domain name and object
     * storage origin site as the origin site, it cannot be referenced by the four-layer proxy, it can only be added to the
     * acceleration domain name, rule engine-modify origin site, and HTTP-specific load balancing reference.
     */
    type?: pulumi.Input<string>;
    /**
     * Origin site group update time.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Site ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OriginGroup resource.
 */
export interface OriginGroupArgs {
    /**
     * Back-to-origin Host Header, it only takes effect when type = HTTP is passed in. The rule engine modifies the Host Header
     * configuration priority to be higher than the Host Header of the origin site group.
     */
    hostHeader?: pulumi.Input<string>;
    /**
     * OriginGroup Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Origin site records.
     */
    records: pulumi.Input<pulumi.Input<inputs.Teo.OriginGroupRecord>[]>;
    /**
     * Type of the origin site. Valid values: - `GENERAL`: Universal origin site group, only supports adding IP/domain name
     * origin sites, which can be referenced by domain name service, rule engine, four-layer proxy, general load balancing, and
     * HTTP-specific load balancing. - `HTTP`: The HTTP-specific origin site group, supports adding IP/domain name and object
     * storage origin site as the origin site, it cannot be referenced by the four-layer proxy, it can only be added to the
     * acceleration domain name, rule engine-modify origin site, and HTTP-specific load balancing reference.
     */
    type: pulumi.Input<string>;
    /**
     * Site ID.
     */
    zoneId: pulumi.Input<string>;
}
