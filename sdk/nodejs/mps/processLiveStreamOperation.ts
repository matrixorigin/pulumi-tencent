// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ProcessLiveStreamOperation extends pulumi.CustomResource {
    /**
     * Get an existing ProcessLiveStreamOperation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProcessLiveStreamOperationState, opts?: pulumi.CustomResourceOptions): ProcessLiveStreamOperation {
        return new ProcessLiveStreamOperation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Mps/processLiveStreamOperation:ProcessLiveStreamOperation';

    /**
     * Returns true if the given object is an instance of ProcessLiveStreamOperation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProcessLiveStreamOperation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProcessLiveStreamOperation.__pulumiType;
    }

    /**
     * AI video intelligent analysis input parameter types.
     */
    public readonly aiAnalysisTask!: pulumi.Output<outputs.Mps.ProcessLiveStreamOperationAiAnalysisTask | undefined>;
    /**
     * Type parameter of a video content audit task.
     */
    public readonly aiContentReviewTask!: pulumi.Output<outputs.Mps.ProcessLiveStreamOperationAiContentReviewTask | undefined>;
    /**
     * The parameters for a video quality control task.
     */
    public readonly aiQualityControlTask!: pulumi.Output<outputs.Mps.ProcessLiveStreamOperationAiQualityControlTask | undefined>;
    /**
     * Type parameter of video content recognition task.
     */
    public readonly aiRecognitionTask!: pulumi.Output<outputs.Mps.ProcessLiveStreamOperationAiRecognitionTask | undefined>;
    /**
     * Target directory of a live stream processing output file, such as `/movie/201909/`. If this parameter is left empty, the
     * `/` directory will be used.
     */
    public readonly outputDir!: pulumi.Output<string | undefined>;
    /**
     * Target bucket of a live stream processing output file. This parameter is required if a file will be output.
     */
    public readonly outputStorage!: pulumi.Output<outputs.Mps.ProcessLiveStreamOperationOutputStorage | undefined>;
    /**
     * The scheme ID.Note 1: About `OutputStorage` and `OutputDir`:If an output storage and directory are specified for a
     * subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for
     * the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If
     * `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the
     * scheme.
     */
    public readonly scheduleId!: pulumi.Output<number | undefined>;
    /**
     * The source context which is used to pass through the user request information. The task flow status change callback will
     * return the value of this field. It can contain up to 1,000 characters.
     */
    public readonly sessionContext!: pulumi.Output<string | undefined>;
    /**
     * The ID used for deduplication. If there was a request with the same ID in the last seven days, the current request will
     * return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered,
     * no deduplication will be performed.
     */
    public readonly sessionId!: pulumi.Output<string | undefined>;
    /**
     * Event notification information of a task, which is used to specify the live stream processing result.
     */
    public readonly taskNotifyConfig!: pulumi.Output<outputs.Mps.ProcessLiveStreamOperationTaskNotifyConfig>;
    /**
     * Live stream URL, which must be a live stream file address. RTMP, HLS, and FLV are supported.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a ProcessLiveStreamOperation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProcessLiveStreamOperationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProcessLiveStreamOperationArgs | ProcessLiveStreamOperationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProcessLiveStreamOperationState | undefined;
            resourceInputs["aiAnalysisTask"] = state ? state.aiAnalysisTask : undefined;
            resourceInputs["aiContentReviewTask"] = state ? state.aiContentReviewTask : undefined;
            resourceInputs["aiQualityControlTask"] = state ? state.aiQualityControlTask : undefined;
            resourceInputs["aiRecognitionTask"] = state ? state.aiRecognitionTask : undefined;
            resourceInputs["outputDir"] = state ? state.outputDir : undefined;
            resourceInputs["outputStorage"] = state ? state.outputStorage : undefined;
            resourceInputs["scheduleId"] = state ? state.scheduleId : undefined;
            resourceInputs["sessionContext"] = state ? state.sessionContext : undefined;
            resourceInputs["sessionId"] = state ? state.sessionId : undefined;
            resourceInputs["taskNotifyConfig"] = state ? state.taskNotifyConfig : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ProcessLiveStreamOperationArgs | undefined;
            if ((!args || args.taskNotifyConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskNotifyConfig'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["aiAnalysisTask"] = args ? args.aiAnalysisTask : undefined;
            resourceInputs["aiContentReviewTask"] = args ? args.aiContentReviewTask : undefined;
            resourceInputs["aiQualityControlTask"] = args ? args.aiQualityControlTask : undefined;
            resourceInputs["aiRecognitionTask"] = args ? args.aiRecognitionTask : undefined;
            resourceInputs["outputDir"] = args ? args.outputDir : undefined;
            resourceInputs["outputStorage"] = args ? args.outputStorage : undefined;
            resourceInputs["scheduleId"] = args ? args.scheduleId : undefined;
            resourceInputs["sessionContext"] = args ? args.sessionContext : undefined;
            resourceInputs["sessionId"] = args ? args.sessionId : undefined;
            resourceInputs["taskNotifyConfig"] = args ? args.taskNotifyConfig : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProcessLiveStreamOperation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProcessLiveStreamOperation resources.
 */
export interface ProcessLiveStreamOperationState {
    /**
     * AI video intelligent analysis input parameter types.
     */
    aiAnalysisTask?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationAiAnalysisTask>;
    /**
     * Type parameter of a video content audit task.
     */
    aiContentReviewTask?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationAiContentReviewTask>;
    /**
     * The parameters for a video quality control task.
     */
    aiQualityControlTask?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationAiQualityControlTask>;
    /**
     * Type parameter of video content recognition task.
     */
    aiRecognitionTask?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationAiRecognitionTask>;
    /**
     * Target directory of a live stream processing output file, such as `/movie/201909/`. If this parameter is left empty, the
     * `/` directory will be used.
     */
    outputDir?: pulumi.Input<string>;
    /**
     * Target bucket of a live stream processing output file. This parameter is required if a file will be output.
     */
    outputStorage?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationOutputStorage>;
    /**
     * The scheme ID.Note 1: About `OutputStorage` and `OutputDir`:If an output storage and directory are specified for a
     * subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for
     * the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If
     * `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the
     * scheme.
     */
    scheduleId?: pulumi.Input<number>;
    /**
     * The source context which is used to pass through the user request information. The task flow status change callback will
     * return the value of this field. It can contain up to 1,000 characters.
     */
    sessionContext?: pulumi.Input<string>;
    /**
     * The ID used for deduplication. If there was a request with the same ID in the last seven days, the current request will
     * return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered,
     * no deduplication will be performed.
     */
    sessionId?: pulumi.Input<string>;
    /**
     * Event notification information of a task, which is used to specify the live stream processing result.
     */
    taskNotifyConfig?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationTaskNotifyConfig>;
    /**
     * Live stream URL, which must be a live stream file address. RTMP, HLS, and FLV are supported.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProcessLiveStreamOperation resource.
 */
export interface ProcessLiveStreamOperationArgs {
    /**
     * AI video intelligent analysis input parameter types.
     */
    aiAnalysisTask?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationAiAnalysisTask>;
    /**
     * Type parameter of a video content audit task.
     */
    aiContentReviewTask?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationAiContentReviewTask>;
    /**
     * The parameters for a video quality control task.
     */
    aiQualityControlTask?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationAiQualityControlTask>;
    /**
     * Type parameter of video content recognition task.
     */
    aiRecognitionTask?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationAiRecognitionTask>;
    /**
     * Target directory of a live stream processing output file, such as `/movie/201909/`. If this parameter is left empty, the
     * `/` directory will be used.
     */
    outputDir?: pulumi.Input<string>;
    /**
     * Target bucket of a live stream processing output file. This parameter is required if a file will be output.
     */
    outputStorage?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationOutputStorage>;
    /**
     * The scheme ID.Note 1: About `OutputStorage` and `OutputDir`:If an output storage and directory are specified for a
     * subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for
     * the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If
     * `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the
     * scheme.
     */
    scheduleId?: pulumi.Input<number>;
    /**
     * The source context which is used to pass through the user request information. The task flow status change callback will
     * return the value of this field. It can contain up to 1,000 characters.
     */
    sessionContext?: pulumi.Input<string>;
    /**
     * The ID used for deduplication. If there was a request with the same ID in the last seven days, the current request will
     * return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered,
     * no deduplication will be performed.
     */
    sessionId?: pulumi.Input<string>;
    /**
     * Event notification information of a task, which is used to specify the live stream processing result.
     */
    taskNotifyConfig: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationTaskNotifyConfig>;
    /**
     * Live stream URL, which must be a live stream file address. RTMP, HLS, and FLV are supported.
     */
    url: pulumi.Input<string>;
}
