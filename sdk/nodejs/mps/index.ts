// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AdaptiveDynamicStreamingTemplateArgs, AdaptiveDynamicStreamingTemplateState } from "./adaptiveDynamicStreamingTemplate";
export type AdaptiveDynamicStreamingTemplate = import("./adaptiveDynamicStreamingTemplate").AdaptiveDynamicStreamingTemplate;
export const AdaptiveDynamicStreamingTemplate: typeof import("./adaptiveDynamicStreamingTemplate").AdaptiveDynamicStreamingTemplate = null as any;
utilities.lazyLoad(exports, ["AdaptiveDynamicStreamingTemplate"], () => require("./adaptiveDynamicStreamingTemplate"));

export { AiAnalysisTemplateArgs, AiAnalysisTemplateState } from "./aiAnalysisTemplate";
export type AiAnalysisTemplate = import("./aiAnalysisTemplate").AiAnalysisTemplate;
export const AiAnalysisTemplate: typeof import("./aiAnalysisTemplate").AiAnalysisTemplate = null as any;
utilities.lazyLoad(exports, ["AiAnalysisTemplate"], () => require("./aiAnalysisTemplate"));

export { AiRecognitionTemplateArgs, AiRecognitionTemplateState } from "./aiRecognitionTemplate";
export type AiRecognitionTemplate = import("./aiRecognitionTemplate").AiRecognitionTemplate;
export const AiRecognitionTemplate: typeof import("./aiRecognitionTemplate").AiRecognitionTemplate = null as any;
utilities.lazyLoad(exports, ["AiRecognitionTemplate"], () => require("./aiRecognitionTemplate"));

export { AnimatedGraphicsTemplateArgs, AnimatedGraphicsTemplateState } from "./animatedGraphicsTemplate";
export type AnimatedGraphicsTemplate = import("./animatedGraphicsTemplate").AnimatedGraphicsTemplate;
export const AnimatedGraphicsTemplate: typeof import("./animatedGraphicsTemplate").AnimatedGraphicsTemplate = null as any;
utilities.lazyLoad(exports, ["AnimatedGraphicsTemplate"], () => require("./animatedGraphicsTemplate"));

export { ContentReviewTemplateArgs, ContentReviewTemplateState } from "./contentReviewTemplate";
export type ContentReviewTemplate = import("./contentReviewTemplate").ContentReviewTemplate;
export const ContentReviewTemplate: typeof import("./contentReviewTemplate").ContentReviewTemplate = null as any;
utilities.lazyLoad(exports, ["ContentReviewTemplate"], () => require("./contentReviewTemplate"));

export { EditMediaOperationArgs, EditMediaOperationState } from "./editMediaOperation";
export type EditMediaOperation = import("./editMediaOperation").EditMediaOperation;
export const EditMediaOperation: typeof import("./editMediaOperation").EditMediaOperation = null as any;
utilities.lazyLoad(exports, ["EditMediaOperation"], () => require("./editMediaOperation"));

export { EnableScheduleConfigArgs, EnableScheduleConfigState } from "./enableScheduleConfig";
export type EnableScheduleConfig = import("./enableScheduleConfig").EnableScheduleConfig;
export const EnableScheduleConfig: typeof import("./enableScheduleConfig").EnableScheduleConfig = null as any;
utilities.lazyLoad(exports, ["EnableScheduleConfig"], () => require("./enableScheduleConfig"));

export { EnableWorkflowConfigArgs, EnableWorkflowConfigState } from "./enableWorkflowConfig";
export type EnableWorkflowConfig = import("./enableWorkflowConfig").EnableWorkflowConfig;
export const EnableWorkflowConfig: typeof import("./enableWorkflowConfig").EnableWorkflowConfig = null as any;
utilities.lazyLoad(exports, ["EnableWorkflowConfig"], () => require("./enableWorkflowConfig"));

export { EventArgs, EventState } from "./event";
export type Event = import("./event").Event;
export const Event: typeof import("./event").Event = null as any;
utilities.lazyLoad(exports, ["Event"], () => require("./event"));

export { ExecuteFunctionOperationArgs, ExecuteFunctionOperationState } from "./executeFunctionOperation";
export type ExecuteFunctionOperation = import("./executeFunctionOperation").ExecuteFunctionOperation;
export const ExecuteFunctionOperation: typeof import("./executeFunctionOperation").ExecuteFunctionOperation = null as any;
utilities.lazyLoad(exports, ["ExecuteFunctionOperation"], () => require("./executeFunctionOperation"));

export { FlowArgs, FlowState } from "./flow";
export type Flow = import("./flow").Flow;
export const Flow: typeof import("./flow").Flow = null as any;
utilities.lazyLoad(exports, ["Flow"], () => require("./flow"));

export { GetMediaMetaDataArgs, GetMediaMetaDataResult, GetMediaMetaDataOutputArgs } from "./getMediaMetaData";
export const getMediaMetaData: typeof import("./getMediaMetaData").getMediaMetaData = null as any;
export const getMediaMetaDataOutput: typeof import("./getMediaMetaData").getMediaMetaDataOutput = null as any;
utilities.lazyLoad(exports, ["getMediaMetaData","getMediaMetaDataOutput"], () => require("./getMediaMetaData"));

export { GetParseLiveStreamProcessNotificationArgs, GetParseLiveStreamProcessNotificationResult, GetParseLiveStreamProcessNotificationOutputArgs } from "./getParseLiveStreamProcessNotification";
export const getParseLiveStreamProcessNotification: typeof import("./getParseLiveStreamProcessNotification").getParseLiveStreamProcessNotification = null as any;
export const getParseLiveStreamProcessNotificationOutput: typeof import("./getParseLiveStreamProcessNotification").getParseLiveStreamProcessNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getParseLiveStreamProcessNotification","getParseLiveStreamProcessNotificationOutput"], () => require("./getParseLiveStreamProcessNotification"));

export { GetParseNotificationArgs, GetParseNotificationResult, GetParseNotificationOutputArgs } from "./getParseNotification";
export const getParseNotification: typeof import("./getParseNotification").getParseNotification = null as any;
export const getParseNotificationOutput: typeof import("./getParseNotification").getParseNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getParseNotification","getParseNotificationOutput"], () => require("./getParseNotification"));

export { GetSchedulesArgs, GetSchedulesResult, GetSchedulesOutputArgs } from "./getSchedules";
export const getSchedules: typeof import("./getSchedules").getSchedules = null as any;
export const getSchedulesOutput: typeof import("./getSchedules").getSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getSchedules","getSchedulesOutput"], () => require("./getSchedules"));

export { GetTasksArgs, GetTasksResult, GetTasksOutputArgs } from "./getTasks";
export const getTasks: typeof import("./getTasks").getTasks = null as any;
export const getTasksOutput: typeof import("./getTasks").getTasksOutput = null as any;
utilities.lazyLoad(exports, ["getTasks","getTasksOutput"], () => require("./getTasks"));

export { ImageSpriteTemplateArgs, ImageSpriteTemplateState } from "./imageSpriteTemplate";
export type ImageSpriteTemplate = import("./imageSpriteTemplate").ImageSpriteTemplate;
export const ImageSpriteTemplate: typeof import("./imageSpriteTemplate").ImageSpriteTemplate = null as any;
utilities.lazyLoad(exports, ["ImageSpriteTemplate"], () => require("./imageSpriteTemplate"));

export { InputArgs, InputState } from "./input";
export type Input = import("./input").Input;
export const Input: typeof import("./input").Input = null as any;
utilities.lazyLoad(exports, ["Input"], () => require("./input"));

export { ManageTaskOperationArgs, ManageTaskOperationState } from "./manageTaskOperation";
export type ManageTaskOperation = import("./manageTaskOperation").ManageTaskOperation;
export const ManageTaskOperation: typeof import("./manageTaskOperation").ManageTaskOperation = null as any;
utilities.lazyLoad(exports, ["ManageTaskOperation"], () => require("./manageTaskOperation"));

export { OutputArgs, OutputState } from "./output";
export type Output = import("./output").Output;
export const Output: typeof import("./output").Output = null as any;
utilities.lazyLoad(exports, ["Output"], () => require("./output"));

export { PersonSampleArgs, PersonSampleState } from "./personSample";
export type PersonSample = import("./personSample").PersonSample;
export const PersonSample: typeof import("./personSample").PersonSample = null as any;
utilities.lazyLoad(exports, ["PersonSample"], () => require("./personSample"));

export { ProcessLiveStreamOperationArgs, ProcessLiveStreamOperationState } from "./processLiveStreamOperation";
export type ProcessLiveStreamOperation = import("./processLiveStreamOperation").ProcessLiveStreamOperation;
export const ProcessLiveStreamOperation: typeof import("./processLiveStreamOperation").ProcessLiveStreamOperation = null as any;
utilities.lazyLoad(exports, ["ProcessLiveStreamOperation"], () => require("./processLiveStreamOperation"));

export { ProcessMediaOperationArgs, ProcessMediaOperationState } from "./processMediaOperation";
export type ProcessMediaOperation = import("./processMediaOperation").ProcessMediaOperation;
export const ProcessMediaOperation: typeof import("./processMediaOperation").ProcessMediaOperation = null as any;
utilities.lazyLoad(exports, ["ProcessMediaOperation"], () => require("./processMediaOperation"));

export { SampleSnapshotTemplateArgs, SampleSnapshotTemplateState } from "./sampleSnapshotTemplate";
export type SampleSnapshotTemplate = import("./sampleSnapshotTemplate").SampleSnapshotTemplate;
export const SampleSnapshotTemplate: typeof import("./sampleSnapshotTemplate").SampleSnapshotTemplate = null as any;
utilities.lazyLoad(exports, ["SampleSnapshotTemplate"], () => require("./sampleSnapshotTemplate"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { SnapshotByTimeoffsetTemplateArgs, SnapshotByTimeoffsetTemplateState } from "./snapshotByTimeoffsetTemplate";
export type SnapshotByTimeoffsetTemplate = import("./snapshotByTimeoffsetTemplate").SnapshotByTimeoffsetTemplate;
export const SnapshotByTimeoffsetTemplate: typeof import("./snapshotByTimeoffsetTemplate").SnapshotByTimeoffsetTemplate = null as any;
utilities.lazyLoad(exports, ["SnapshotByTimeoffsetTemplate"], () => require("./snapshotByTimeoffsetTemplate"));

export { StartFlowOperationArgs, StartFlowOperationState } from "./startFlowOperation";
export type StartFlowOperation = import("./startFlowOperation").StartFlowOperation;
export const StartFlowOperation: typeof import("./startFlowOperation").StartFlowOperation = null as any;
utilities.lazyLoad(exports, ["StartFlowOperation"], () => require("./startFlowOperation"));

export { TranscodeTemplateArgs, TranscodeTemplateState } from "./transcodeTemplate";
export type TranscodeTemplate = import("./transcodeTemplate").TranscodeTemplate;
export const TranscodeTemplate: typeof import("./transcodeTemplate").TranscodeTemplate = null as any;
utilities.lazyLoad(exports, ["TranscodeTemplate"], () => require("./transcodeTemplate"));

export { WatermarkTemplateArgs, WatermarkTemplateState } from "./watermarkTemplate";
export type WatermarkTemplate = import("./watermarkTemplate").WatermarkTemplate;
export const WatermarkTemplate: typeof import("./watermarkTemplate").WatermarkTemplate = null as any;
utilities.lazyLoad(exports, ["WatermarkTemplate"], () => require("./watermarkTemplate"));

export { WithdrawsWatermarkOperationArgs, WithdrawsWatermarkOperationState } from "./withdrawsWatermarkOperation";
export type WithdrawsWatermarkOperation = import("./withdrawsWatermarkOperation").WithdrawsWatermarkOperation;
export const WithdrawsWatermarkOperation: typeof import("./withdrawsWatermarkOperation").WithdrawsWatermarkOperation = null as any;
utilities.lazyLoad(exports, ["WithdrawsWatermarkOperation"], () => require("./withdrawsWatermarkOperation"));

export { WordSampleArgs, WordSampleState } from "./wordSample";
export type WordSample = import("./wordSample").WordSample;
export const WordSample: typeof import("./wordSample").WordSample = null as any;
utilities.lazyLoad(exports, ["WordSample"], () => require("./wordSample"));

export { WorkflowArgs, WorkflowState } from "./workflow";
export type Workflow = import("./workflow").Workflow;
export const Workflow: typeof import("./workflow").Workflow = null as any;
utilities.lazyLoad(exports, ["Workflow"], () => require("./workflow"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Mps/adaptiveDynamicStreamingTemplate:AdaptiveDynamicStreamingTemplate":
                return new AdaptiveDynamicStreamingTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/aiAnalysisTemplate:AiAnalysisTemplate":
                return new AiAnalysisTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/aiRecognitionTemplate:AiRecognitionTemplate":
                return new AiRecognitionTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/animatedGraphicsTemplate:AnimatedGraphicsTemplate":
                return new AnimatedGraphicsTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/contentReviewTemplate:ContentReviewTemplate":
                return new ContentReviewTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/editMediaOperation:EditMediaOperation":
                return new EditMediaOperation(name, <any>undefined, { urn })
            case "tencentcloud:Mps/enableScheduleConfig:EnableScheduleConfig":
                return new EnableScheduleConfig(name, <any>undefined, { urn })
            case "tencentcloud:Mps/enableWorkflowConfig:EnableWorkflowConfig":
                return new EnableWorkflowConfig(name, <any>undefined, { urn })
            case "tencentcloud:Mps/event:Event":
                return new Event(name, <any>undefined, { urn })
            case "tencentcloud:Mps/executeFunctionOperation:ExecuteFunctionOperation":
                return new ExecuteFunctionOperation(name, <any>undefined, { urn })
            case "tencentcloud:Mps/flow:Flow":
                return new Flow(name, <any>undefined, { urn })
            case "tencentcloud:Mps/imageSpriteTemplate:ImageSpriteTemplate":
                return new ImageSpriteTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/input:Input":
                return new Input(name, <any>undefined, { urn })
            case "tencentcloud:Mps/manageTaskOperation:ManageTaskOperation":
                return new ManageTaskOperation(name, <any>undefined, { urn })
            case "tencentcloud:Mps/output:Output":
                return new Output(name, <any>undefined, { urn })
            case "tencentcloud:Mps/personSample:PersonSample":
                return new PersonSample(name, <any>undefined, { urn })
            case "tencentcloud:Mps/processLiveStreamOperation:ProcessLiveStreamOperation":
                return new ProcessLiveStreamOperation(name, <any>undefined, { urn })
            case "tencentcloud:Mps/processMediaOperation:ProcessMediaOperation":
                return new ProcessMediaOperation(name, <any>undefined, { urn })
            case "tencentcloud:Mps/sampleSnapshotTemplate:SampleSnapshotTemplate":
                return new SampleSnapshotTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "tencentcloud:Mps/snapshotByTimeoffsetTemplate:SnapshotByTimeoffsetTemplate":
                return new SnapshotByTimeoffsetTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/startFlowOperation:StartFlowOperation":
                return new StartFlowOperation(name, <any>undefined, { urn })
            case "tencentcloud:Mps/transcodeTemplate:TranscodeTemplate":
                return new TranscodeTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/watermarkTemplate:WatermarkTemplate":
                return new WatermarkTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/withdrawsWatermarkOperation:WithdrawsWatermarkOperation":
                return new WithdrawsWatermarkOperation(name, <any>undefined, { urn })
            case "tencentcloud:Mps/wordSample:WordSample":
                return new WordSample(name, <any>undefined, { urn })
            case "tencentcloud:Mps/workflow:Workflow":
                return new Workflow(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/adaptiveDynamicStreamingTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/aiAnalysisTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/aiRecognitionTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/animatedGraphicsTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/contentReviewTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/editMediaOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/enableScheduleConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/enableWorkflowConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/event", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/executeFunctionOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/flow", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/imageSpriteTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/input", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/manageTaskOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/output", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/personSample", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/processLiveStreamOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/processMediaOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/sampleSnapshotTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/schedule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/snapshotByTimeoffsetTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/startFlowOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/transcodeTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/watermarkTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/withdrawsWatermarkOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/wordSample", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/workflow", _module)
