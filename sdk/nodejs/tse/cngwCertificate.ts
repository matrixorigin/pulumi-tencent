// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class CngwCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CngwCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CngwCertificateState, opts?: pulumi.CustomResourceOptions): CngwCertificate {
        return new CngwCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tse/cngwCertificate:CngwCertificate';

    /**
     * Returns true if the given object is an instance of CngwCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CngwCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CngwCertificate.__pulumiType;
    }

    /**
     * Domains of the binding.
     */
    public readonly bindDomains!: pulumi.Output<string[]>;
    /**
     * Certificate ID of ssl platform.
     */
    public readonly certId!: pulumi.Output<string>;
    /**
     * Pem format of certificate.
     */
    public /*out*/ readonly crt!: pulumi.Output<string>;
    /**
     * Gateway ID.
     */
    public readonly gatewayId!: pulumi.Output<string>;
    /**
     * Private key of certificate.
     */
    public /*out*/ readonly key!: pulumi.Output<string>;
    /**
     * Certificate name.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a CngwCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CngwCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CngwCertificateArgs | CngwCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CngwCertificateState | undefined;
            resourceInputs["bindDomains"] = state ? state.bindDomains : undefined;
            resourceInputs["certId"] = state ? state.certId : undefined;
            resourceInputs["crt"] = state ? state.crt : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as CngwCertificateArgs | undefined;
            if ((!args || args.bindDomains === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindDomains'");
            }
            if ((!args || args.certId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certId'");
            }
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            resourceInputs["bindDomains"] = args ? args.bindDomains : undefined;
            resourceInputs["certId"] = args ? args.certId : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["crt"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CngwCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CngwCertificate resources.
 */
export interface CngwCertificateState {
    /**
     * Domains of the binding.
     */
    bindDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate ID of ssl platform.
     */
    certId?: pulumi.Input<string>;
    /**
     * Pem format of certificate.
     */
    crt?: pulumi.Input<string>;
    /**
     * Gateway ID.
     */
    gatewayId?: pulumi.Input<string>;
    /**
     * Private key of certificate.
     */
    key?: pulumi.Input<string>;
    /**
     * Certificate name.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CngwCertificate resource.
 */
export interface CngwCertificateArgs {
    /**
     * Domains of the binding.
     */
    bindDomains: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate ID of ssl platform.
     */
    certId: pulumi.Input<string>;
    /**
     * Gateway ID.
     */
    gatewayId: pulumi.Input<string>;
    /**
     * Certificate name.
     */
    name?: pulumi.Input<string>;
}
