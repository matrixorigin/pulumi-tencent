// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class CngwNetworkAccessControl extends pulumi.CustomResource {
    /**
     * Get an existing CngwNetworkAccessControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CngwNetworkAccessControlState, opts?: pulumi.CustomResourceOptions): CngwNetworkAccessControl {
        return new CngwNetworkAccessControl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tse/cngwNetworkAccessControl:CngwNetworkAccessControl';

    /**
     * Returns true if the given object is an instance of CngwNetworkAccessControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CngwNetworkAccessControl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CngwNetworkAccessControl.__pulumiType;
    }

    /**
     * access control policy.
     */
    public readonly accessControl!: pulumi.Output<outputs.Tse.CngwNetworkAccessControlAccessControl | undefined>;
    /**
     * gateway ID.
     */
    public readonly gatewayId!: pulumi.Output<string>;
    /**
     * gateway group ID.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * network id.
     */
    public readonly networkId!: pulumi.Output<string>;

    /**
     * Create a CngwNetworkAccessControl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CngwNetworkAccessControlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CngwNetworkAccessControlArgs | CngwNetworkAccessControlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CngwNetworkAccessControlState | undefined;
            resourceInputs["accessControl"] = state ? state.accessControl : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
        } else {
            const args = argsOrState as CngwNetworkAccessControlArgs | undefined;
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["accessControl"] = args ? args.accessControl : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CngwNetworkAccessControl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CngwNetworkAccessControl resources.
 */
export interface CngwNetworkAccessControlState {
    /**
     * access control policy.
     */
    accessControl?: pulumi.Input<inputs.Tse.CngwNetworkAccessControlAccessControl>;
    /**
     * gateway ID.
     */
    gatewayId?: pulumi.Input<string>;
    /**
     * gateway group ID.
     */
    groupId?: pulumi.Input<string>;
    /**
     * network id.
     */
    networkId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CngwNetworkAccessControl resource.
 */
export interface CngwNetworkAccessControlArgs {
    /**
     * access control policy.
     */
    accessControl?: pulumi.Input<inputs.Tse.CngwNetworkAccessControlAccessControl>;
    /**
     * gateway ID.
     */
    gatewayId: pulumi.Input<string>;
    /**
     * gateway group ID.
     */
    groupId: pulumi.Input<string>;
    /**
     * network id.
     */
    networkId: pulumi.Input<string>;
}
