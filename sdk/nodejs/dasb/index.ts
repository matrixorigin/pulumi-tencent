// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { BindDeviceAccountPasswordArgs, BindDeviceAccountPasswordState } from "./bindDeviceAccountPassword";
export type BindDeviceAccountPassword = import("./bindDeviceAccountPassword").BindDeviceAccountPassword;
export const BindDeviceAccountPassword: typeof import("./bindDeviceAccountPassword").BindDeviceAccountPassword = null as any;
utilities.lazyLoad(exports, ["BindDeviceAccountPassword"], () => require("./bindDeviceAccountPassword"));

export { BindDeviceAccountPrivateKeyArgs, BindDeviceAccountPrivateKeyState } from "./bindDeviceAccountPrivateKey";
export type BindDeviceAccountPrivateKey = import("./bindDeviceAccountPrivateKey").BindDeviceAccountPrivateKey;
export const BindDeviceAccountPrivateKey: typeof import("./bindDeviceAccountPrivateKey").BindDeviceAccountPrivateKey = null as any;
utilities.lazyLoad(exports, ["BindDeviceAccountPrivateKey"], () => require("./bindDeviceAccountPrivateKey"));

export { BindDeviceResourceArgs, BindDeviceResourceState } from "./bindDeviceResource";
export type BindDeviceResource = import("./bindDeviceResource").BindDeviceResource;
export const BindDeviceResource: typeof import("./bindDeviceResource").BindDeviceResource = null as any;
utilities.lazyLoad(exports, ["BindDeviceResource"], () => require("./bindDeviceResource"));

export { CmdTemplateArgs, CmdTemplateState } from "./cmdTemplate";
export type CmdTemplate = import("./cmdTemplate").CmdTemplate;
export const CmdTemplate: typeof import("./cmdTemplate").CmdTemplate = null as any;
utilities.lazyLoad(exports, ["CmdTemplate"], () => require("./cmdTemplate"));

export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { DeviceAccountArgs, DeviceAccountState } from "./deviceAccount";
export type DeviceAccount = import("./deviceAccount").DeviceAccount;
export const DeviceAccount: typeof import("./deviceAccount").DeviceAccount = null as any;
utilities.lazyLoad(exports, ["DeviceAccount"], () => require("./deviceAccount"));

export { DeviceGroupArgs, DeviceGroupState } from "./deviceGroup";
export type DeviceGroup = import("./deviceGroup").DeviceGroup;
export const DeviceGroup: typeof import("./deviceGroup").DeviceGroup = null as any;
utilities.lazyLoad(exports, ["DeviceGroup"], () => require("./deviceGroup"));

export { DeviceGroupMembersArgs, DeviceGroupMembersState } from "./deviceGroupMembers";
export type DeviceGroupMembers = import("./deviceGroupMembers").DeviceGroupMembers;
export const DeviceGroupMembers: typeof import("./deviceGroupMembers").DeviceGroupMembers = null as any;
utilities.lazyLoad(exports, ["DeviceGroupMembers"], () => require("./deviceGroupMembers"));

export { ResetUserArgs, ResetUserState } from "./resetUser";
export type ResetUser = import("./resetUser").ResetUser;
export const ResetUser: typeof import("./resetUser").ResetUser = null as any;
utilities.lazyLoad(exports, ["ResetUser"], () => require("./resetUser"));

export { ResourceArgs, ResourceState } from "./resource";
export type Resource = import("./resource").Resource;
export const Resource: typeof import("./resource").Resource = null as any;
utilities.lazyLoad(exports, ["Resource"], () => require("./resource"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));

export { UserGroupMembersArgs, UserGroupMembersState } from "./userGroupMembers";
export type UserGroupMembers = import("./userGroupMembers").UserGroupMembers;
export const UserGroupMembers: typeof import("./userGroupMembers").UserGroupMembers = null as any;
utilities.lazyLoad(exports, ["UserGroupMembers"], () => require("./userGroupMembers"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Dasb/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/bindDeviceAccountPassword:BindDeviceAccountPassword":
                return new BindDeviceAccountPassword(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/bindDeviceAccountPrivateKey:BindDeviceAccountPrivateKey":
                return new BindDeviceAccountPrivateKey(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/bindDeviceResource:BindDeviceResource":
                return new BindDeviceResource(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/cmdTemplate:CmdTemplate":
                return new CmdTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/deviceAccount:DeviceAccount":
                return new DeviceAccount(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/deviceGroup:DeviceGroup":
                return new DeviceGroup(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/deviceGroupMembers:DeviceGroupMembers":
                return new DeviceGroupMembers(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/resetUser:ResetUser":
                return new ResetUser(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/resource:Resource":
                return new Resource(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/user:User":
                return new User(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "tencentcloud:Dasb/userGroupMembers:UserGroupMembers":
                return new UserGroupMembers(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/acl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/bindDeviceAccountPassword", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/bindDeviceAccountPrivateKey", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/bindDeviceResource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/cmdTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/device", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/deviceAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/deviceGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/deviceGroupMembers", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/resetUser", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/resource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/user", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/userGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dasb/userGroupMembers", _module)
