// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class RiskCenter extends pulumi.CustomResource {
    /**
     * Get an existing RiskCenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RiskCenterState, opts?: pulumi.CustomResourceOptions): RiskCenter {
        return new RiskCenter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Csip/riskCenter:RiskCenter';

    /**
     * Returns true if the given object is an instance of RiskCenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RiskCenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RiskCenter.__pulumiType;
    }

    /**
     * Scan the asset information list.
     */
    public readonly assets!: pulumi.Output<outputs.Csip.RiskCenterAsset[]>;
    /**
     * 0- Full scan, 1- Specify asset scan, 2- Exclude asset scan, 3- Manually fill in the scan. If 1 and 2 are required while
     * task_mode not 1, the Assets field is required. If 3 is required, SelfDefiningAssets is required.
     */
    public readonly scanAssetType!: pulumi.Output<number>;
    /**
     * Request origin.
     */
    public /*out*/ readonly scanFrom!: pulumi.Output<string>;
    /**
     * Scan Project. Example: port/poc/weakpass/webcontent/configrisk/exposedserver.
     */
    public readonly scanItems!: pulumi.Output<string[]>;
    /**
     * Scan plan details.
     */
    public readonly scanPlanContent!: pulumi.Output<string | undefined>;
    /**
     * 0- Periodic task, 1- immediate scan, 2- periodic scan, 3- Custom; 0, 2 and 3 are required for scan_plan_content.
     */
    public readonly scanPlanType!: pulumi.Output<number>;
    /**
     * Ip/domain/url array.
     */
    public readonly selfDefiningAssets!: pulumi.Output<string[] | undefined>;
    /**
     * Advanced configuration.
     */
    public readonly taskAdvanceCfg!: pulumi.Output<outputs.Csip.RiskCenterTaskAdvanceCfg | undefined>;
    /**
     * Physical examination mode, 0-standard mode, 1-fast mode, 2-advanced mode, default standard mode.
     */
    public readonly taskMode!: pulumi.Output<number | undefined>;
    /**
     * Task Name.
     */
    public readonly taskName!: pulumi.Output<string>;

    /**
     * Create a RiskCenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RiskCenterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RiskCenterArgs | RiskCenterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RiskCenterState | undefined;
            resourceInputs["assets"] = state ? state.assets : undefined;
            resourceInputs["scanAssetType"] = state ? state.scanAssetType : undefined;
            resourceInputs["scanFrom"] = state ? state.scanFrom : undefined;
            resourceInputs["scanItems"] = state ? state.scanItems : undefined;
            resourceInputs["scanPlanContent"] = state ? state.scanPlanContent : undefined;
            resourceInputs["scanPlanType"] = state ? state.scanPlanType : undefined;
            resourceInputs["selfDefiningAssets"] = state ? state.selfDefiningAssets : undefined;
            resourceInputs["taskAdvanceCfg"] = state ? state.taskAdvanceCfg : undefined;
            resourceInputs["taskMode"] = state ? state.taskMode : undefined;
            resourceInputs["taskName"] = state ? state.taskName : undefined;
        } else {
            const args = argsOrState as RiskCenterArgs | undefined;
            if ((!args || args.scanAssetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scanAssetType'");
            }
            if ((!args || args.scanItems === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scanItems'");
            }
            if ((!args || args.scanPlanType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scanPlanType'");
            }
            if ((!args || args.taskName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskName'");
            }
            resourceInputs["assets"] = args ? args.assets : undefined;
            resourceInputs["scanAssetType"] = args ? args.scanAssetType : undefined;
            resourceInputs["scanItems"] = args ? args.scanItems : undefined;
            resourceInputs["scanPlanContent"] = args ? args.scanPlanContent : undefined;
            resourceInputs["scanPlanType"] = args ? args.scanPlanType : undefined;
            resourceInputs["selfDefiningAssets"] = args ? args.selfDefiningAssets : undefined;
            resourceInputs["taskAdvanceCfg"] = args ? args.taskAdvanceCfg : undefined;
            resourceInputs["taskMode"] = args ? args.taskMode : undefined;
            resourceInputs["taskName"] = args ? args.taskName : undefined;
            resourceInputs["scanFrom"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RiskCenter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RiskCenter resources.
 */
export interface RiskCenterState {
    /**
     * Scan the asset information list.
     */
    assets?: pulumi.Input<pulumi.Input<inputs.Csip.RiskCenterAsset>[]>;
    /**
     * 0- Full scan, 1- Specify asset scan, 2- Exclude asset scan, 3- Manually fill in the scan. If 1 and 2 are required while
     * task_mode not 1, the Assets field is required. If 3 is required, SelfDefiningAssets is required.
     */
    scanAssetType?: pulumi.Input<number>;
    /**
     * Request origin.
     */
    scanFrom?: pulumi.Input<string>;
    /**
     * Scan Project. Example: port/poc/weakpass/webcontent/configrisk/exposedserver.
     */
    scanItems?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Scan plan details.
     */
    scanPlanContent?: pulumi.Input<string>;
    /**
     * 0- Periodic task, 1- immediate scan, 2- periodic scan, 3- Custom; 0, 2 and 3 are required for scan_plan_content.
     */
    scanPlanType?: pulumi.Input<number>;
    /**
     * Ip/domain/url array.
     */
    selfDefiningAssets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Advanced configuration.
     */
    taskAdvanceCfg?: pulumi.Input<inputs.Csip.RiskCenterTaskAdvanceCfg>;
    /**
     * Physical examination mode, 0-standard mode, 1-fast mode, 2-advanced mode, default standard mode.
     */
    taskMode?: pulumi.Input<number>;
    /**
     * Task Name.
     */
    taskName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RiskCenter resource.
 */
export interface RiskCenterArgs {
    /**
     * Scan the asset information list.
     */
    assets?: pulumi.Input<pulumi.Input<inputs.Csip.RiskCenterAsset>[]>;
    /**
     * 0- Full scan, 1- Specify asset scan, 2- Exclude asset scan, 3- Manually fill in the scan. If 1 and 2 are required while
     * task_mode not 1, the Assets field is required. If 3 is required, SelfDefiningAssets is required.
     */
    scanAssetType: pulumi.Input<number>;
    /**
     * Scan Project. Example: port/poc/weakpass/webcontent/configrisk/exposedserver.
     */
    scanItems: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Scan plan details.
     */
    scanPlanContent?: pulumi.Input<string>;
    /**
     * 0- Periodic task, 1- immediate scan, 2- periodic scan, 3- Custom; 0, 2 and 3 are required for scan_plan_content.
     */
    scanPlanType: pulumi.Input<number>;
    /**
     * Ip/domain/url array.
     */
    selfDefiningAssets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Advanced configuration.
     */
    taskAdvanceCfg?: pulumi.Input<inputs.Csip.RiskCenterTaskAdvanceCfg>;
    /**
     * Physical examination mode, 0-standard mode, 1-fast mode, 2-advanced mode, default standard mode.
     */
    taskMode?: pulumi.Input<number>;
    /**
     * Task Name.
     */
    taskName: pulumi.Input<string>;
}
