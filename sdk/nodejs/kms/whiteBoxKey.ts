// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class WhiteBoxKey extends pulumi.CustomResource {
    /**
     * Get an existing WhiteBoxKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WhiteBoxKeyState, opts?: pulumi.CustomResourceOptions): WhiteBoxKey {
        return new WhiteBoxKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Kms/whiteBoxKey:WhiteBoxKey';

    /**
     * Returns true if the given object is an instance of WhiteBoxKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WhiteBoxKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WhiteBoxKey.__pulumiType;
    }

    /**
     * All algorithm types for creating keys, supported values: AES_256, SM4.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * As an alias for the key to be easier to identify and easier to understand, it cannot be empty and is a combination of
     * 1-60 alphanumeric characters - _. The first character must be a letter or number. Alias are not repeatable.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * Description of the key, up to 1024 bytes.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable the key. Enabled or Disabled. Default is Enabled.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The tags of Key.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a WhiteBoxKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WhiteBoxKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WhiteBoxKeyArgs | WhiteBoxKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WhiteBoxKeyState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as WhiteBoxKeyArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.alias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WhiteBoxKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WhiteBoxKey resources.
 */
export interface WhiteBoxKeyState {
    /**
     * All algorithm types for creating keys, supported values: AES_256, SM4.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * As an alias for the key to be easier to identify and easier to understand, it cannot be empty and is a combination of
     * 1-60 alphanumeric characters - _. The first character must be a letter or number. Alias are not repeatable.
     */
    alias?: pulumi.Input<string>;
    /**
     * Description of the key, up to 1024 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable the key. Enabled or Disabled. Default is Enabled.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags of Key.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a WhiteBoxKey resource.
 */
export interface WhiteBoxKeyArgs {
    /**
     * All algorithm types for creating keys, supported values: AES_256, SM4.
     */
    algorithm: pulumi.Input<string>;
    /**
     * As an alias for the key to be easier to identify and easier to understand, it cannot be empty and is a combination of
     * 1-60 alphanumeric characters - _. The first character must be a letter or number. Alias are not repeatable.
     */
    alias: pulumi.Input<string>;
    /**
     * Description of the key, up to 1024 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable the key. Enabled or Disabled. Default is Enabled.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags of Key.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}
