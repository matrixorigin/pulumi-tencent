// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CustomLineArgs, CustomLineState } from "./customLine";
export type CustomLine = import("./customLine").CustomLine;
export const CustomLine: typeof import("./customLine").CustomLine = null as any;
utilities.lazyLoad(exports, ["CustomLine"], () => require("./customLine"));

export { DomainAliasArgs, DomainAliasState } from "./domainAlias";
export type DomainAlias = import("./domainAlias").DomainAlias;
export const DomainAlias: typeof import("./domainAlias").DomainAlias = null as any;
utilities.lazyLoad(exports, ["DomainAlias"], () => require("./domainAlias"));

export { DomainInstanceArgs, DomainInstanceState } from "./domainInstance";
export type DomainInstance = import("./domainInstance").DomainInstance;
export const DomainInstance: typeof import("./domainInstance").DomainInstance = null as any;
utilities.lazyLoad(exports, ["DomainInstance"], () => require("./domainInstance"));

export { DomainLockArgs, DomainLockState } from "./domainLock";
export type DomainLock = import("./domainLock").DomainLock;
export const DomainLock: typeof import("./domainLock").DomainLock = null as any;
utilities.lazyLoad(exports, ["DomainLock"], () => require("./domainLock"));

export { DownloadSnapshotOperationArgs, DownloadSnapshotOperationState } from "./downloadSnapshotOperation";
export type DownloadSnapshotOperation = import("./downloadSnapshotOperation").DownloadSnapshotOperation;
export const DownloadSnapshotOperation: typeof import("./downloadSnapshotOperation").DownloadSnapshotOperation = null as any;
utilities.lazyLoad(exports, ["DownloadSnapshotOperation"], () => require("./downloadSnapshotOperation"));

export { GetDomainAnalyticsArgs, GetDomainAnalyticsResult, GetDomainAnalyticsOutputArgs } from "./getDomainAnalytics";
export const getDomainAnalytics: typeof import("./getDomainAnalytics").getDomainAnalytics = null as any;
export const getDomainAnalyticsOutput: typeof import("./getDomainAnalytics").getDomainAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainAnalytics","getDomainAnalyticsOutput"], () => require("./getDomainAnalytics"));

export { GetDomainListArgs, GetDomainListResult, GetDomainListOutputArgs } from "./getDomainList";
export const getDomainList: typeof import("./getDomainList").getDomainList = null as any;
export const getDomainListOutput: typeof import("./getDomainList").getDomainListOutput = null as any;
utilities.lazyLoad(exports, ["getDomainList","getDomainListOutput"], () => require("./getDomainList"));

export { GetDomainLogListArgs, GetDomainLogListResult, GetDomainLogListOutputArgs } from "./getDomainLogList";
export const getDomainLogList: typeof import("./getDomainLogList").getDomainLogList = null as any;
export const getDomainLogListOutput: typeof import("./getDomainLogList").getDomainLogListOutput = null as any;
utilities.lazyLoad(exports, ["getDomainLogList","getDomainLogListOutput"], () => require("./getDomainLogList"));

export { GetRecordAnalyticsArgs, GetRecordAnalyticsResult, GetRecordAnalyticsOutputArgs } from "./getRecordAnalytics";
export const getRecordAnalytics: typeof import("./getRecordAnalytics").getRecordAnalytics = null as any;
export const getRecordAnalyticsOutput: typeof import("./getRecordAnalytics").getRecordAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getRecordAnalytics","getRecordAnalyticsOutput"], () => require("./getRecordAnalytics"));

export { GetRecordLineListArgs, GetRecordLineListResult, GetRecordLineListOutputArgs } from "./getRecordLineList";
export const getRecordLineList: typeof import("./getRecordLineList").getRecordLineList = null as any;
export const getRecordLineListOutput: typeof import("./getRecordLineList").getRecordLineListOutput = null as any;
utilities.lazyLoad(exports, ["getRecordLineList","getRecordLineListOutput"], () => require("./getRecordLineList"));

export { GetRecordListArgs, GetRecordListResult, GetRecordListOutputArgs } from "./getRecordList";
export const getRecordList: typeof import("./getRecordList").getRecordList = null as any;
export const getRecordListOutput: typeof import("./getRecordList").getRecordListOutput = null as any;
utilities.lazyLoad(exports, ["getRecordList","getRecordListOutput"], () => require("./getRecordList"));

export { GetRecordTypeArgs, GetRecordTypeResult, GetRecordTypeOutputArgs } from "./getRecordType";
export const getRecordType: typeof import("./getRecordType").getRecordType = null as any;
export const getRecordTypeOutput: typeof import("./getRecordType").getRecordTypeOutput = null as any;
utilities.lazyLoad(exports, ["getRecordType","getRecordTypeOutput"], () => require("./getRecordType"));

export { GetRecordsArgs, GetRecordsResult, GetRecordsOutputArgs } from "./getRecords";
export const getRecords: typeof import("./getRecords").getRecords = null as any;
export const getRecordsOutput: typeof import("./getRecords").getRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getRecords","getRecordsOutput"], () => require("./getRecords"));

export { ModifyDomainOwnerOperationArgs, ModifyDomainOwnerOperationState } from "./modifyDomainOwnerOperation";
export type ModifyDomainOwnerOperation = import("./modifyDomainOwnerOperation").ModifyDomainOwnerOperation;
export const ModifyDomainOwnerOperation: typeof import("./modifyDomainOwnerOperation").ModifyDomainOwnerOperation = null as any;
utilities.lazyLoad(exports, ["ModifyDomainOwnerOperation"], () => require("./modifyDomainOwnerOperation"));

export { ModifyRecordGroupOperationArgs, ModifyRecordGroupOperationState } from "./modifyRecordGroupOperation";
export type ModifyRecordGroupOperation = import("./modifyRecordGroupOperation").ModifyRecordGroupOperation;
export const ModifyRecordGroupOperation: typeof import("./modifyRecordGroupOperation").ModifyRecordGroupOperation = null as any;
utilities.lazyLoad(exports, ["ModifyRecordGroupOperation"], () => require("./modifyRecordGroupOperation"));

export { RecordArgs, RecordState } from "./record";
export type Record = import("./record").Record;
export const Record: typeof import("./record").Record = null as any;
utilities.lazyLoad(exports, ["Record"], () => require("./record"));

export { RecordGroupArgs, RecordGroupState } from "./recordGroup";
export type RecordGroup = import("./recordGroup").RecordGroup;
export const RecordGroup: typeof import("./recordGroup").RecordGroup = null as any;
utilities.lazyLoad(exports, ["RecordGroup"], () => require("./recordGroup"));

export { SnapshotConfigArgs, SnapshotConfigState } from "./snapshotConfig";
export type SnapshotConfig = import("./snapshotConfig").SnapshotConfig;
export const SnapshotConfig: typeof import("./snapshotConfig").SnapshotConfig = null as any;
utilities.lazyLoad(exports, ["SnapshotConfig"], () => require("./snapshotConfig"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Dnspod/customLine:CustomLine":
                return new CustomLine(name, <any>undefined, { urn })
            case "tencentcloud:Dnspod/domainAlias:DomainAlias":
                return new DomainAlias(name, <any>undefined, { urn })
            case "tencentcloud:Dnspod/domainInstance:DomainInstance":
                return new DomainInstance(name, <any>undefined, { urn })
            case "tencentcloud:Dnspod/domainLock:DomainLock":
                return new DomainLock(name, <any>undefined, { urn })
            case "tencentcloud:Dnspod/downloadSnapshotOperation:DownloadSnapshotOperation":
                return new DownloadSnapshotOperation(name, <any>undefined, { urn })
            case "tencentcloud:Dnspod/modifyDomainOwnerOperation:ModifyDomainOwnerOperation":
                return new ModifyDomainOwnerOperation(name, <any>undefined, { urn })
            case "tencentcloud:Dnspod/modifyRecordGroupOperation:ModifyRecordGroupOperation":
                return new ModifyRecordGroupOperation(name, <any>undefined, { urn })
            case "tencentcloud:Dnspod/record:Record":
                return new Record(name, <any>undefined, { urn })
            case "tencentcloud:Dnspod/recordGroup:RecordGroup":
                return new RecordGroup(name, <any>undefined, { urn })
            case "tencentcloud:Dnspod/snapshotConfig:SnapshotConfig":
                return new SnapshotConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Dnspod/customLine", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dnspod/domainAlias", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dnspod/domainInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dnspod/domainLock", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dnspod/downloadSnapshotOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dnspod/modifyDomainOwnerOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dnspod/modifyRecordGroupOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dnspod/record", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dnspod/recordGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dnspod/snapshotConfig", _module)
