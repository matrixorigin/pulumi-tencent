// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class RocketmqTopic extends pulumi.CustomResource {
    /**
     * Get an existing RocketmqTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RocketmqTopicState, opts?: pulumi.CustomResourceOptions): RocketmqTopic {
        return new RocketmqTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Trocket/rocketmqTopic:RocketmqTopic';

    /**
     * Returns true if the given object is an instance of RocketmqTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RocketmqTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RocketmqTopic.__pulumiType;
    }

    /**
     * Instance Id.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Number of queue. Must be greater than or equal to 3.
     */
    public readonly queueNum!: pulumi.Output<number>;
    /**
     * remark.
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * topic.
     */
    public readonly topic!: pulumi.Output<string>;
    /**
     * Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed
     * message.
     */
    public readonly topicType!: pulumi.Output<string>;

    /**
     * Create a RocketmqTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RocketmqTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RocketmqTopicArgs | RocketmqTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RocketmqTopicState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["queueNum"] = state ? state.queueNum : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["topic"] = state ? state.topic : undefined;
            resourceInputs["topicType"] = state ? state.topicType : undefined;
        } else {
            const args = argsOrState as RocketmqTopicArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.queueNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueNum'");
            }
            if ((!args || args.topic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topic'");
            }
            if ((!args || args.topicType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicType'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["queueNum"] = args ? args.queueNum : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["topic"] = args ? args.topic : undefined;
            resourceInputs["topicType"] = args ? args.topicType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RocketmqTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RocketmqTopic resources.
 */
export interface RocketmqTopicState {
    /**
     * Instance Id.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Number of queue. Must be greater than or equal to 3.
     */
    queueNum?: pulumi.Input<number>;
    /**
     * remark.
     */
    remark?: pulumi.Input<string>;
    /**
     * topic.
     */
    topic?: pulumi.Input<string>;
    /**
     * Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed
     * message.
     */
    topicType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RocketmqTopic resource.
 */
export interface RocketmqTopicArgs {
    /**
     * Instance Id.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Number of queue. Must be greater than or equal to 3.
     */
    queueNum: pulumi.Input<number>;
    /**
     * remark.
     */
    remark?: pulumi.Input<string>;
    /**
     * topic.
     */
    topic: pulumi.Input<string>;
    /**
     * Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed
     * message.
     */
    topicType: pulumi.Input<string>;
}
