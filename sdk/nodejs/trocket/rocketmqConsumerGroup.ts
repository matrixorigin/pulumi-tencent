// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class RocketmqConsumerGroup extends pulumi.CustomResource {
    /**
     * Get an existing RocketmqConsumerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RocketmqConsumerGroupState, opts?: pulumi.CustomResourceOptions): RocketmqConsumerGroup {
        return new RocketmqConsumerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Trocket/rocketmqConsumerGroup:RocketmqConsumerGroup';

    /**
     * Returns true if the given object is an instance of RocketmqConsumerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RocketmqConsumerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RocketmqConsumerGroup.__pulumiType;
    }

    /**
     * Whether to enable consumption.
     */
    public readonly consumeEnable!: pulumi.Output<boolean>;
    /**
     * `true`: Sequential delivery, `false`: Concurrent delivery.
     */
    public readonly consumeMessageOrderly!: pulumi.Output<boolean>;
    /**
     * Name of consumer group.
     */
    public readonly consumerGroup!: pulumi.Output<string>;
    /**
     * Instance ID.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Max retry times.
     */
    public readonly maxRetryTimes!: pulumi.Output<number>;
    /**
     * remark.
     */
    public readonly remark!: pulumi.Output<string | undefined>;

    /**
     * Create a RocketmqConsumerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RocketmqConsumerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RocketmqConsumerGroupArgs | RocketmqConsumerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RocketmqConsumerGroupState | undefined;
            resourceInputs["consumeEnable"] = state ? state.consumeEnable : undefined;
            resourceInputs["consumeMessageOrderly"] = state ? state.consumeMessageOrderly : undefined;
            resourceInputs["consumerGroup"] = state ? state.consumerGroup : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["maxRetryTimes"] = state ? state.maxRetryTimes : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
        } else {
            const args = argsOrState as RocketmqConsumerGroupArgs | undefined;
            if ((!args || args.consumeEnable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumeEnable'");
            }
            if ((!args || args.consumeMessageOrderly === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumeMessageOrderly'");
            }
            if ((!args || args.consumerGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerGroup'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.maxRetryTimes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxRetryTimes'");
            }
            resourceInputs["consumeEnable"] = args ? args.consumeEnable : undefined;
            resourceInputs["consumeMessageOrderly"] = args ? args.consumeMessageOrderly : undefined;
            resourceInputs["consumerGroup"] = args ? args.consumerGroup : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["maxRetryTimes"] = args ? args.maxRetryTimes : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RocketmqConsumerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RocketmqConsumerGroup resources.
 */
export interface RocketmqConsumerGroupState {
    /**
     * Whether to enable consumption.
     */
    consumeEnable?: pulumi.Input<boolean>;
    /**
     * `true`: Sequential delivery, `false`: Concurrent delivery.
     */
    consumeMessageOrderly?: pulumi.Input<boolean>;
    /**
     * Name of consumer group.
     */
    consumerGroup?: pulumi.Input<string>;
    /**
     * Instance ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Max retry times.
     */
    maxRetryTimes?: pulumi.Input<number>;
    /**
     * remark.
     */
    remark?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RocketmqConsumerGroup resource.
 */
export interface RocketmqConsumerGroupArgs {
    /**
     * Whether to enable consumption.
     */
    consumeEnable: pulumi.Input<boolean>;
    /**
     * `true`: Sequential delivery, `false`: Concurrent delivery.
     */
    consumeMessageOrderly: pulumi.Input<boolean>;
    /**
     * Name of consumer group.
     */
    consumerGroup: pulumi.Input<string>;
    /**
     * Instance ID.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Max retry times.
     */
    maxRetryTimes: pulumi.Input<number>;
    /**
     * remark.
     */
    remark?: pulumi.Input<string>;
}
