// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ProviderAssumeRole {
    externalId?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    sessionDuration: pulumi.Input<number>;
    sessionName: pulumi.Input<string>;
}

export interface ProviderAssumeRoleWithSaml {
    principalArn: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    samlAssertion: pulumi.Input<string>;
    sessionDuration: pulumi.Input<number>;
    sessionName: pulumi.Input<string>;
}

export interface ProviderAssumeRoleWithWebIdentity {
    roleArn: pulumi.Input<string>;
    sessionDuration: pulumi.Input<number>;
    sessionName: pulumi.Input<string>;
    webIdentityToken: pulumi.Input<string>;
}
export namespace Address {
}

export namespace Antiddos {
    export interface CcBlackWhiteIpBlackWhiteIp {
        ip: pulumi.Input<string>;
        mask: pulumi.Input<number>;
    }

    export interface CcPrecisionPolicyPolicyList {
        fieldName: pulumi.Input<string>;
        fieldType: pulumi.Input<string>;
        value: pulumi.Input<string>;
        valueOperator: pulumi.Input<string>;
    }

    export interface DdosGeoIpBlockConfigDdosGeoIpBlockConfig {
        action: pulumi.Input<string>;
        areaLists?: pulumi.Input<pulumi.Input<number>[]>;
        regionType: pulumi.Input<string>;
    }

    export interface DdosSpeedLimitConfigDdosSpeedLimitConfig {
        dstPortList?: pulumi.Input<string>;
        dstPortScopes?: pulumi.Input<pulumi.Input<inputs.Antiddos.DdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope>[]>;
        mode: pulumi.Input<number>;
        protocolList?: pulumi.Input<string>;
        speedValues: pulumi.Input<pulumi.Input<inputs.Antiddos.DdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValue>[]>;
    }

    export interface DdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope {
        beginPort: pulumi.Input<number>;
        endPort: pulumi.Input<number>;
    }

    export interface DdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValue {
        type: pulumi.Input<number>;
        value: pulumi.Input<number>;
    }

    export interface DefaultAlarmThresholdDefaultAlarmConfig {
        alarmThreshold?: pulumi.Input<number>;
        alarmType?: pulumi.Input<number>;
    }

    export interface PacketFilterConfigPacketFilterConfig {
        action: pulumi.Input<string>;
        depth?: pulumi.Input<number>;
        depth2?: pulumi.Input<number>;
        dportEnd: pulumi.Input<number>;
        dportStart: pulumi.Input<number>;
        isNot?: pulumi.Input<number>;
        isNot2?: pulumi.Input<number>;
        matchBegin?: pulumi.Input<string>;
        matchBegin2?: pulumi.Input<string>;
        matchLogic?: pulumi.Input<string>;
        matchType?: pulumi.Input<string>;
        matchType2?: pulumi.Input<string>;
        offset?: pulumi.Input<number>;
        offset2?: pulumi.Input<number>;
        pktLenGt?: pulumi.Input<number>;
        pktlenMax: pulumi.Input<number>;
        pktlenMin: pulumi.Input<number>;
        protocol: pulumi.Input<string>;
        sportEnd: pulumi.Input<number>;
        sportStart: pulumi.Input<number>;
        str?: pulumi.Input<string>;
        str2?: pulumi.Input<string>;
    }

    export interface PortAclConfigAclConfig {
        action: pulumi.Input<string>;
        dPortEnd: pulumi.Input<number>;
        dPortStart: pulumi.Input<number>;
        forwardProtocol: pulumi.Input<string>;
        priority?: pulumi.Input<number>;
        sPortEnd: pulumi.Input<number>;
        sPortStart: pulumi.Input<number>;
    }
}

export namespace ApiGateway {
    export interface ApiConstantParameter {
        defaultValue?: pulumi.Input<string>;
        desc?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        position?: pulumi.Input<string>;
    }

    export interface ApiMicroService {
        clusterId: pulumi.Input<string>;
        microServiceName: pulumi.Input<string>;
        namespaceId: pulumi.Input<string>;
    }

    export interface ApiOauthConfig {
        loginRedirectUrl?: pulumi.Input<string>;
        publicKey: pulumi.Input<string>;
        tokenLocation: pulumi.Input<string>;
    }

    export interface ApiRequestParameter {
        defaultValue?: pulumi.Input<string>;
        desc?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        position: pulumi.Input<string>;
        required?: pulumi.Input<boolean>;
        type: pulumi.Input<string>;
    }

    export interface ApiResponseErrorCode {
        code: pulumi.Input<number>;
        convertedCode?: pulumi.Input<number>;
        desc?: pulumi.Input<string>;
        msg: pulumi.Input<string>;
        needConvert?: pulumi.Input<boolean>;
    }

    export interface ApiServiceConfigCosConfig {
        action: pulumi.Input<string>;
        authorization?: pulumi.Input<boolean>;
        bucketName: pulumi.Input<string>;
        pathMatchMode?: pulumi.Input<string>;
    }

    export interface ApiServiceParameter {
        defaultValue?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        position?: pulumi.Input<string>;
        relevantRequestParameterDesc?: pulumi.Input<string>;
        relevantRequestParameterName?: pulumi.Input<string>;
        relevantRequestParameterPosition?: pulumi.Input<string>;
        relevantRequestParameterType?: pulumi.Input<string>;
    }

    export interface ApiServiceTsfHealthCheckConf {
        errorThresholdPercentage?: pulumi.Input<number>;
        isHealthCheck?: pulumi.Input<boolean>;
        requestVolumeThreshold?: pulumi.Input<number>;
        sleepWindowInMilliseconds?: pulumi.Input<number>;
    }

    export interface ApiServiceTsfLoadBalanceConf {
        isLoadBalance?: pulumi.Input<boolean>;
        method?: pulumi.Input<string>;
        sessionStickRequired?: pulumi.Input<boolean>;
        sessionStickTimeout?: pulumi.Input<number>;
    }

    export interface ApiTargetService {
        dockerIp?: pulumi.Input<string>;
        hostIp: pulumi.Input<string>;
        vmIp: pulumi.Input<string>;
        vmPort: pulumi.Input<number>;
        vpcId: pulumi.Input<string>;
    }

    export interface ApiTargetServicesHealthCheckConf {
        errorThresholdPercentage?: pulumi.Input<number>;
        isHealthCheck?: pulumi.Input<boolean>;
        requestVolumeThreshold?: pulumi.Input<number>;
        sleepWindowInMilliseconds?: pulumi.Input<number>;
    }

    export interface GetBindApiAppsStatusFilter {
        name: string;
        values: string[];
    }

    export interface GetBindApiAppsStatusFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetUpstreamsFilter {
        name: string;
        values: string[];
    }

    export interface GetUpstreamsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ImportOpenApiConstantParameter {
        defaultValue?: pulumi.Input<string>;
        desc?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        position?: pulumi.Input<string>;
    }

    export interface ImportOpenApiMicroService {
        clusterId?: pulumi.Input<string>;
        microServiceName?: pulumi.Input<string>;
        namespaceId?: pulumi.Input<string>;
    }

    export interface ImportOpenApiOauthConfig {
        loginRedirectUrl?: pulumi.Input<string>;
        publicKey?: pulumi.Input<string>;
        tokenLocation?: pulumi.Input<string>;
    }

    export interface ImportOpenApiRequestParameter {
        defaultValue?: pulumi.Input<string>;
        desc?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        position?: pulumi.Input<string>;
        required?: pulumi.Input<boolean>;
        type?: pulumi.Input<string>;
    }

    export interface ImportOpenApiResponseErrorCode {
        code?: pulumi.Input<number>;
        convertedCode?: pulumi.Input<number>;
        desc?: pulumi.Input<string>;
        msg?: pulumi.Input<string>;
        needConvert?: pulumi.Input<boolean>;
    }

    export interface ImportOpenApiServiceConfigCosConfig {
        action?: pulumi.Input<string>;
        authorization?: pulumi.Input<boolean>;
        bucketName?: pulumi.Input<string>;
        pathMatchMode?: pulumi.Input<string>;
    }

    export interface ImportOpenApiServiceParameter {
        defaultValue?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        position?: pulumi.Input<string>;
        relevantRequestParameterDesc?: pulumi.Input<string>;
        relevantRequestParameterName?: pulumi.Input<string>;
        relevantRequestParameterPosition?: pulumi.Input<string>;
        relevantRequestParameterType?: pulumi.Input<string>;
    }

    export interface ImportOpenApiServiceTsfHealthCheckConf {
        errorThresholdPercentage?: pulumi.Input<number>;
        isHealthCheck?: pulumi.Input<boolean>;
        requestVolumeThreshold?: pulumi.Input<number>;
        sleepWindowInMilliseconds?: pulumi.Input<number>;
    }

    export interface ImportOpenApiServiceTsfLoadBalanceConf {
        isLoadBalance?: pulumi.Input<boolean>;
        method?: pulumi.Input<string>;
        sessionStickRequired?: pulumi.Input<boolean>;
        sessionStickTimeout?: pulumi.Input<number>;
    }

    export interface ServiceApiList {
        apiDesc?: pulumi.Input<string>;
        apiId?: pulumi.Input<string>;
        apiName?: pulumi.Input<string>;
        method?: pulumi.Input<string>;
        path?: pulumi.Input<string>;
    }

    export interface ServiceUsagePlanList {
        apiId?: pulumi.Input<string>;
        bindType?: pulumi.Input<string>;
        usagePlanId?: pulumi.Input<string>;
        usagePlanName?: pulumi.Input<string>;
    }

    export interface UpstreamHealthChecker {
        activeCheckHttpPath?: pulumi.Input<string>;
        activeCheckInterval?: pulumi.Input<number>;
        activeCheckTimeout?: pulumi.Input<number>;
        enableActiveCheck: pulumi.Input<boolean>;
        enablePassiveCheck: pulumi.Input<boolean>;
        healthyHttpStatus: pulumi.Input<string>;
        httpFailureThreshold: pulumi.Input<number>;
        tcpFailureThreshold: pulumi.Input<number>;
        timeoutThreshold: pulumi.Input<number>;
        unhealthyHttpStatus: pulumi.Input<string>;
        unhealthyTimeout?: pulumi.Input<number>;
    }

    export interface UpstreamK8sService {
        clusterId: pulumi.Input<string>;
        extraLabels: pulumi.Input<pulumi.Input<inputs.ApiGateway.UpstreamK8sServiceExtraLabel>[]>;
        name?: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        port: pulumi.Input<number>;
        serviceName: pulumi.Input<string>;
        weight: pulumi.Input<number>;
    }

    export interface UpstreamK8sServiceExtraLabel {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface UpstreamNode {
        clusterId?: pulumi.Input<string>;
        host: pulumi.Input<string>;
        nameSpace?: pulumi.Input<string>;
        port: pulumi.Input<number>;
        serviceName?: pulumi.Input<string>;
        source?: pulumi.Input<string>;
        tags?: pulumi.Input<pulumi.Input<string>[]>;
        uniqueServiceName?: pulumi.Input<string>;
        vmInstanceId?: pulumi.Input<string>;
        weight: pulumi.Input<number>;
    }

    export interface UsagePlanAttachList {
        apiId?: pulumi.Input<string>;
        apiName?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        environment?: pulumi.Input<string>;
        method?: pulumi.Input<string>;
        modifyTime?: pulumi.Input<string>;
        path?: pulumi.Input<string>;
        serviceId?: pulumi.Input<string>;
        serviceName?: pulumi.Input<string>;
    }
}

export namespace As {
    export interface GetInstancesFilter {
        name: string;
        values: string[];
    }

    export interface GetInstancesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface LifecycleHookLifecycleCommand {
        commandId: pulumi.Input<string>;
        parameters?: pulumi.Input<string>;
    }

    export interface LoadBalancerForwardLoadBalancer {
        listenerId: pulumi.Input<string>;
        loadBalancerId: pulumi.Input<string>;
        locationId?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
        targetAttributes: pulumi.Input<pulumi.Input<inputs.As.LoadBalancerForwardLoadBalancerTargetAttribute>[]>;
    }

    export interface LoadBalancerForwardLoadBalancerTargetAttribute {
        port: pulumi.Input<number>;
        weight: pulumi.Input<number>;
    }

    export interface ScalingConfigDataDisk {
        deleteWithInstance?: pulumi.Input<boolean>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
    }

    export interface ScalingConfigHostNameSettings {
        hostName: pulumi.Input<string>;
        hostNameStyle?: pulumi.Input<string>;
    }

    export interface ScalingConfigInstanceNameSettings {
        instanceName: pulumi.Input<string>;
        instanceNameStyle?: pulumi.Input<string>;
    }

    export interface ScalingGroupForwardBalancerId {
        listenerId: pulumi.Input<string>;
        loadBalancerId: pulumi.Input<string>;
        ruleId?: pulumi.Input<string>;
        targetAttributes: pulumi.Input<pulumi.Input<inputs.As.ScalingGroupForwardBalancerIdTargetAttribute>[]>;
    }

    export interface ScalingGroupForwardBalancerIdTargetAttribute {
        port: pulumi.Input<number>;
        weight: pulumi.Input<number>;
    }

    export interface StartInstanceRefreshRefreshSettings {
        checkInstanceTargetHealth?: pulumi.Input<boolean>;
        rollingUpdateSettings: pulumi.Input<inputs.As.StartInstanceRefreshRefreshSettingsRollingUpdateSettings>;
    }

    export interface StartInstanceRefreshRefreshSettingsRollingUpdateSettings {
        batchNumber: pulumi.Input<number>;
        batchPause?: pulumi.Input<string>;
        maxSurge?: pulumi.Input<number>;
    }
}

export namespace Audit {
    export interface GetEventsLookupAttribute {
        attributeKey: string;
        attributeValue?: string;
    }

    export interface GetEventsLookupAttributeArgs {
        attributeKey: pulumi.Input<string>;
        attributeValue?: pulumi.Input<string>;
    }

    export interface TrackStorage {
        storageAccountId?: pulumi.Input<string>;
        storageAppId?: pulumi.Input<string>;
        storageName: pulumi.Input<string>;
        storagePrefix: pulumi.Input<string>;
        storageRegion: pulumi.Input<string>;
        storageType: pulumi.Input<string>;
    }
}

export namespace Audits {
}

export namespace Availability {
}

export namespace Batch {
    export interface ApplyAccountBaselinesBaselineConfigItem {
        configuration?: pulumi.Input<string>;
        identifier?: pulumi.Input<string>;
    }
}

export namespace Bi {
    export interface DatasourceCloudServiceType {
        instanceId: pulumi.Input<string>;
        region: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

}

export namespace Cam {
    export interface MfaFlagActionFlag {
        phone?: pulumi.Input<number>;
        stoken?: pulumi.Input<number>;
        wechat?: pulumi.Input<number>;
    }

    export interface MfaFlagLoginFlag {
        phone?: pulumi.Input<number>;
        stoken?: pulumi.Input<number>;
        wechat?: pulumi.Input<number>;
    }

    export interface PolicyVersionPolicyVersion {
        createDate?: pulumi.Input<string>;
        document?: pulumi.Input<string>;
        isDefaultVersion?: pulumi.Input<number>;
        versionId?: pulumi.Input<number>;
    }

    export interface TagRoleAttachmentTag {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }
}

export namespace Cat {
    export interface TaskSetBatchTasks {
        name: pulumi.Input<string>;
        targetAddress: pulumi.Input<string>;
    }
}

export namespace Cbs {
}

export namespace Ccn {
    export interface GetCrossBorderRegionBandwidthLimitsFilter {
        name: string;
        values: string[];
    }

    export interface GetCrossBorderRegionBandwidthLimitsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetRoutesFilter {
        name: string;
        values: string[];
    }

    export interface GetRoutesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InstancesAcceptAttachInstance {
        description?: pulumi.Input<string>;
        instanceId: pulumi.Input<string>;
        instanceRegion: pulumi.Input<string>;
        instanceType?: pulumi.Input<string>;
        routeTableId?: pulumi.Input<string>;
    }

    export interface InstancesRejectAttachInstance {
        description?: pulumi.Input<string>;
        instanceId: pulumi.Input<string>;
        instanceRegion: pulumi.Input<string>;
        instanceType?: pulumi.Input<string>;
        routeTableId?: pulumi.Input<string>;
    }

    export interface InstancesResetAttachInstance {
        description?: pulumi.Input<string>;
        instanceId: pulumi.Input<string>;
        instanceRegion: pulumi.Input<string>;
        instanceType?: pulumi.Input<string>;
        routeTableId?: pulumi.Input<string>;
    }

    export interface RouteTableAssociateInstanceConfigInstance {
        instanceId: pulumi.Input<string>;
        instanceType: pulumi.Input<string>;
    }

    export interface RouteTableBroadcastPoliciesPolicy {
        action: pulumi.Input<string>;
        broadcastConditions: pulumi.Input<pulumi.Input<inputs.Ccn.RouteTableBroadcastPoliciesPolicyBroadcastCondition>[]>;
        description: pulumi.Input<string>;
        routeConditions: pulumi.Input<pulumi.Input<inputs.Ccn.RouteTableBroadcastPoliciesPolicyRouteCondition>[]>;
    }

    export interface RouteTableBroadcastPoliciesPolicyBroadcastCondition {
        matchPattern: pulumi.Input<number>;
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RouteTableBroadcastPoliciesPolicyRouteCondition {
        matchPattern: pulumi.Input<number>;
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RouteTableInputPoliciesPolicy {
        action: pulumi.Input<string>;
        description: pulumi.Input<string>;
        routeConditions: pulumi.Input<pulumi.Input<inputs.Ccn.RouteTableInputPoliciesPolicyRouteCondition>[]>;
    }

    export interface RouteTableInputPoliciesPolicyRouteCondition {
        matchPattern: pulumi.Input<number>;
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RouteTableSelectionPoliciesSelectionPolicy {
        description: pulumi.Input<string>;
        instanceId: pulumi.Input<string>;
        instanceType: pulumi.Input<string>;
        routeTableId: pulumi.Input<string>;
        sourceCidrBlock: pulumi.Input<string>;
    }
}

export namespace Cdc {
}

export namespace Cdh {
    export interface InstanceHostResource {
        cpuAvailableNum?: pulumi.Input<number>;
        cpuTotalNum?: pulumi.Input<number>;
        diskAvailableSize?: pulumi.Input<number>;
        diskTotalSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        memoryAvailableSize?: pulumi.Input<number>;
        memoryTotalSize?: pulumi.Input<number>;
    }
}

export namespace Cdn {
    export interface DomainAuthentication {
        switch?: pulumi.Input<string>;
        typeA?: pulumi.Input<inputs.Cdn.DomainAuthenticationTypeA>;
        typeB?: pulumi.Input<inputs.Cdn.DomainAuthenticationTypeB>;
        typeC?: pulumi.Input<inputs.Cdn.DomainAuthenticationTypeC>;
        typeD?: pulumi.Input<inputs.Cdn.DomainAuthenticationTypeD>;
    }

    export interface DomainAuthenticationTypeA {
        backupSecretKey?: pulumi.Input<string>;
        expireTime: pulumi.Input<number>;
        fileExtensions: pulumi.Input<pulumi.Input<string>[]>;
        filterType: pulumi.Input<string>;
        secretKey: pulumi.Input<string>;
        signParam: pulumi.Input<string>;
    }

    export interface DomainAuthenticationTypeB {
        backupSecretKey?: pulumi.Input<string>;
        expireTime: pulumi.Input<number>;
        fileExtensions: pulumi.Input<pulumi.Input<string>[]>;
        filterType: pulumi.Input<string>;
        secretKey: pulumi.Input<string>;
    }

    export interface DomainAuthenticationTypeC {
        backupSecretKey?: pulumi.Input<string>;
        expireTime: pulumi.Input<number>;
        fileExtensions: pulumi.Input<pulumi.Input<string>[]>;
        filterType: pulumi.Input<string>;
        secretKey: pulumi.Input<string>;
        timeFormat?: pulumi.Input<string>;
    }

    export interface DomainAuthenticationTypeD {
        backupSecretKey?: pulumi.Input<string>;
        expireTime: pulumi.Input<number>;
        fileExtensions: pulumi.Input<pulumi.Input<string>[]>;
        filterType: pulumi.Input<string>;
        secretKey: pulumi.Input<string>;
        timeFormat?: pulumi.Input<string>;
        timeParam?: pulumi.Input<string>;
    }

    export interface DomainAwsPrivateAccess {
        accessKey?: pulumi.Input<string>;
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
        secretKey?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
    }

    export interface DomainBandWidthAlert {
        alertPercentage?: pulumi.Input<number>;
        alertSwitch?: pulumi.Input<string>;
        bpsThreshold?: pulumi.Input<number>;
        counterMeasure?: pulumi.Input<string>;
        lastTriggerTime?: pulumi.Input<string>;
        lastTriggerTimeOverseas?: pulumi.Input<string>;
        metric?: pulumi.Input<string>;
        statisticItem?: pulumi.Input<inputs.Cdn.DomainBandWidthAlertStatisticItem>;
        switch: pulumi.Input<string>;
    }

    export interface DomainBandWidthAlertStatisticItem {
        alertPercentage?: pulumi.Input<number>;
        alertSwitch?: pulumi.Input<string>;
        bpsThreshold?: pulumi.Input<number>;
        counterMeasure?: pulumi.Input<string>;
        cycle?: pulumi.Input<number>;
        metric?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        unblockTime?: pulumi.Input<number>;
    }

    export interface DomainCacheKey {
        fullUrlCache?: pulumi.Input<string>;
        ignoreCase?: pulumi.Input<string>;
        keyRules?: pulumi.Input<pulumi.Input<inputs.Cdn.DomainCacheKeyKeyRule>[]>;
        queryString?: pulumi.Input<inputs.Cdn.DomainCacheKeyQueryString>;
    }

    export interface DomainCacheKeyKeyRule {
        fullUrlCache?: pulumi.Input<string>;
        ignoreCase?: pulumi.Input<string>;
        queryString: pulumi.Input<inputs.Cdn.DomainCacheKeyKeyRuleQueryString>;
        rulePaths: pulumi.Input<pulumi.Input<string>[]>;
        ruleTag?: pulumi.Input<string>;
        ruleType: pulumi.Input<string>;
    }

    export interface DomainCacheKeyKeyRuleQueryString {
        action?: pulumi.Input<string>;
        switch?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface DomainCacheKeyQueryString {
        action?: pulumi.Input<string>;
        reorder?: pulumi.Input<string>;
        switch?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface DomainCompression {
        compressionRules?: pulumi.Input<pulumi.Input<inputs.Cdn.DomainCompressionCompressionRule>[]>;
        switch: pulumi.Input<string>;
    }

    export interface DomainCompressionCompressionRule {
        algorithms: pulumi.Input<pulumi.Input<string>[]>;
        compress: pulumi.Input<boolean>;
        fileExtensions?: pulumi.Input<pulumi.Input<string>[]>;
        maxLength: pulumi.Input<number>;
        minLength: pulumi.Input<number>;
        rulePaths?: pulumi.Input<pulumi.Input<string>[]>;
        ruleType?: pulumi.Input<string>;
    }

    export interface DomainDownstreamCapping {
        cappingRules?: pulumi.Input<pulumi.Input<inputs.Cdn.DomainDownstreamCappingCappingRule>[]>;
        switch: pulumi.Input<string>;
    }

    export interface DomainDownstreamCappingCappingRule {
        kbpsThreshold: pulumi.Input<number>;
        rulePaths: pulumi.Input<pulumi.Input<string>[]>;
        ruleType: pulumi.Input<string>;
    }

    export interface DomainErrorPage {
        pageRules?: pulumi.Input<pulumi.Input<inputs.Cdn.DomainErrorPagePageRule>[]>;
        switch: pulumi.Input<string>;
    }

    export interface DomainErrorPagePageRule {
        redirectCode: pulumi.Input<number>;
        redirectUrl: pulumi.Input<string>;
        statusCode: pulumi.Input<number>;
    }

    export interface DomainHttpsConfig {
        clientCertificateConfig?: pulumi.Input<inputs.Cdn.DomainHttpsConfigClientCertificateConfig>;
        forceRedirect?: pulumi.Input<inputs.Cdn.DomainHttpsConfigForceRedirect>;
        http2Switch?: pulumi.Input<string>;
        httpsSwitch: pulumi.Input<string>;
        ocspStaplingSwitch?: pulumi.Input<string>;
        serverCertificateConfig?: pulumi.Input<inputs.Cdn.DomainHttpsConfigServerCertificateConfig>;
        spdySwitch?: pulumi.Input<string>;
        tlsVersions?: pulumi.Input<pulumi.Input<string>[]>;
        verifyClient?: pulumi.Input<string>;
    }

    export interface DomainHttpsConfigClientCertificateConfig {
        certificateContent: pulumi.Input<string>;
        certificateName?: pulumi.Input<string>;
        deployTime?: pulumi.Input<string>;
        expireTime?: pulumi.Input<string>;
    }

    export interface DomainHttpsConfigForceRedirect {
        carryHeaders?: pulumi.Input<string>;
        redirectStatusCode?: pulumi.Input<number>;
        redirectType?: pulumi.Input<string>;
        switch?: pulumi.Input<string>;
    }

    export interface DomainHttpsConfigServerCertificateConfig {
        certificateContent?: pulumi.Input<string>;
        certificateId?: pulumi.Input<string>;
        certificateName?: pulumi.Input<string>;
        deployTime?: pulumi.Input<string>;
        expireTime?: pulumi.Input<string>;
        message?: pulumi.Input<string>;
        privateKey?: pulumi.Input<string>;
    }

    export interface DomainHwPrivateAccess {
        accessKey?: pulumi.Input<string>;
        bucket?: pulumi.Input<string>;
        secretKey?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
    }

    export interface DomainIpFilter {
        filterRules?: pulumi.Input<pulumi.Input<inputs.Cdn.DomainIpFilterFilterRule>[]>;
        filterType?: pulumi.Input<string>;
        filters?: pulumi.Input<pulumi.Input<string>[]>;
        returnCode?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface DomainIpFilterFilterRule {
        filterType: pulumi.Input<string>;
        filters: pulumi.Input<pulumi.Input<string>[]>;
        rulePaths: pulumi.Input<pulumi.Input<string>[]>;
        ruleType: pulumi.Input<string>;
    }

    export interface DomainIpFreqLimit {
        qps?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface DomainMaxAge {
        maxAgeRules?: pulumi.Input<pulumi.Input<inputs.Cdn.DomainMaxAgeMaxAgeRule>[]>;
        switch: pulumi.Input<string>;
    }

    export interface DomainMaxAgeMaxAgeRule {
        followOrigin?: pulumi.Input<string>;
        maxAgeContents: pulumi.Input<pulumi.Input<string>[]>;
        maxAgeTime: pulumi.Input<number>;
        maxAgeType: pulumi.Input<string>;
    }

    export interface DomainOrigin {
        backupOriginLists?: pulumi.Input<pulumi.Input<string>[]>;
        backupOriginType?: pulumi.Input<string>;
        backupServerName?: pulumi.Input<string>;
        cosPrivateAccess?: pulumi.Input<string>;
        originCompany?: pulumi.Input<string>;
        originLists: pulumi.Input<pulumi.Input<string>[]>;
        originPullProtocol?: pulumi.Input<string>;
        originType: pulumi.Input<string>;
        serverName?: pulumi.Input<string>;
    }

    export interface DomainOriginPullOptimization {
        optimizationType?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
    }

    export interface DomainOriginPullTimeout {
        connectTimeout: pulumi.Input<number>;
        receiveTimeout: pulumi.Input<number>;
    }

    export interface DomainOssPrivateAccess {
        accessKey?: pulumi.Input<string>;
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
        secretKey?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
    }

    export interface DomainOthersPrivateAccess {
        accessKey?: pulumi.Input<string>;
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
        secretKey?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
    }

    export interface DomainPostMaxSize {
        maxSize?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface DomainQnPrivateAccess {
        accessKey?: pulumi.Input<string>;
        secretKey?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
    }

    export interface DomainReferer {
        refererRules?: pulumi.Input<pulumi.Input<inputs.Cdn.DomainRefererRefererRule>[]>;
        switch: pulumi.Input<string>;
    }

    export interface DomainRefererRefererRule {
        allowEmpty: pulumi.Input<boolean>;
        refererType: pulumi.Input<string>;
        referers: pulumi.Input<pulumi.Input<string>[]>;
        rulePaths: pulumi.Input<pulumi.Input<string>[]>;
        ruleType: pulumi.Input<string>;
    }

    export interface DomainRequestHeader {
        headerRules?: pulumi.Input<pulumi.Input<inputs.Cdn.DomainRequestHeaderHeaderRule>[]>;
        switch?: pulumi.Input<string>;
    }

    export interface DomainRequestHeaderHeaderRule {
        headerMode: pulumi.Input<string>;
        headerName: pulumi.Input<string>;
        headerValue: pulumi.Input<string>;
        rulePaths: pulumi.Input<pulumi.Input<string>[]>;
        ruleType: pulumi.Input<string>;
    }

    export interface DomainResponseHeader {
        headerRules?: pulumi.Input<pulumi.Input<inputs.Cdn.DomainResponseHeaderHeaderRule>[]>;
        switch: pulumi.Input<string>;
    }

    export interface DomainResponseHeaderHeaderRule {
        headerMode: pulumi.Input<string>;
        headerName: pulumi.Input<string>;
        headerValue: pulumi.Input<string>;
        rulePaths: pulumi.Input<pulumi.Input<string>[]>;
        ruleType: pulumi.Input<string>;
    }

    export interface DomainRuleCach {
        cacheTime: pulumi.Input<number>;
        compareMaxAge?: pulumi.Input<string>;
        followOriginSwitch?: pulumi.Input<string>;
        heuristicCacheSwitch?: pulumi.Input<string>;
        heuristicCacheTime?: pulumi.Input<number>;
        ignoreCacheControl?: pulumi.Input<string>;
        ignoreSetCookie?: pulumi.Input<string>;
        noCacheSwitch?: pulumi.Input<string>;
        reValidate?: pulumi.Input<string>;
        rulePaths?: pulumi.Input<pulumi.Input<string>[]>;
        ruleType?: pulumi.Input<string>;
        switch?: pulumi.Input<string>;
    }

    export interface DomainStatusCodeCache {
        cacheRules?: pulumi.Input<pulumi.Input<inputs.Cdn.DomainStatusCodeCacheCacheRule>[]>;
        switch: pulumi.Input<string>;
    }

    export interface DomainStatusCodeCacheCacheRule {
        cacheTime: pulumi.Input<number>;
        statusCode: pulumi.Input<string>;
    }

    export interface UrlPurgePurgeHistory {
        createTime?: pulumi.Input<string>;
        flushType?: pulumi.Input<string>;
        purgeType?: pulumi.Input<string>;
        status?: pulumi.Input<string>;
        taskId?: pulumi.Input<string>;
        url?: pulumi.Input<string>;
    }

    export interface UrlPushPushHistory {
        area?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        percent?: pulumi.Input<number>;
        status?: pulumi.Input<string>;
        taskId?: pulumi.Input<string>;
        updateTime?: pulumi.Input<string>;
        url?: pulumi.Input<string>;
    }
}

export namespace Cdwdoris {
    export interface GetInstancesSearchTag {
        allValue?: number;
        tagKey?: string;
        tagValue?: string;
    }

    export interface GetInstancesSearchTagArgs {
        allValue?: pulumi.Input<number>;
        tagKey?: pulumi.Input<string>;
        tagValue?: pulumi.Input<string>;
    }

    export interface InstanceBeSpec {
        count: pulumi.Input<number>;
        diskSize: pulumi.Input<number>;
        specName: pulumi.Input<string>;
    }

    export interface InstanceChargeProperties {
        chargeType?: pulumi.Input<string>;
        renewFlag?: pulumi.Input<number>;
        timeSpan?: pulumi.Input<number>;
        timeUnit?: pulumi.Input<string>;
    }

    export interface InstanceFeSpec {
        count: pulumi.Input<number>;
        diskSize: pulumi.Input<number>;
        specName: pulumi.Input<string>;
    }

    export interface InstanceTag {
        tagKey: pulumi.Input<string>;
        tagValue: pulumi.Input<string>;
    }

    export interface InstanceUserMultiZoneInfos {
        subnetId?: pulumi.Input<string>;
        subnetIpNum?: pulumi.Input<number>;
        zone?: pulumi.Input<string>;
    }

    export interface WorkloadGroupWorkloadGroup {
        cpuHardLimit?: pulumi.Input<string>;
        cpuShare?: pulumi.Input<number>;
        enableMemoryOverCommit?: pulumi.Input<boolean>;
        memoryLimit?: pulumi.Input<number>;
        workloadGroupName?: pulumi.Input<string>;
    }
}

export namespace Cdwpg {
    export interface InstanceChargeProperties {
        chargeType?: pulumi.Input<string>;
        renewFlag: pulumi.Input<number>;
        timeSpan: pulumi.Input<number>;
        timeUnit: pulumi.Input<string>;
    }

    export interface InstanceResource {
        count: pulumi.Input<number>;
        diskSpec: pulumi.Input<inputs.Cdwpg.InstanceResourceDiskSpec>;
        specName: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface InstanceResourceDiskSpec {
        diskCount: pulumi.Input<number>;
        diskSize: pulumi.Input<number>;
        diskType: pulumi.Input<string>;
    }
}

export namespace Cfs {
}

export namespace Cfw {
    export interface NatInstanceNewModeItems {
        eips: pulumi.Input<pulumi.Input<string>[]>;
        vpcLists: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface VpcInstanceVpcFwInstance {
        fwDeploy: pulumi.Input<inputs.Cfw.VpcInstanceVpcFwInstanceFwDeploy>;
        fwInsId?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        vpcIds?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface VpcInstanceVpcFwInstanceFwDeploy {
        crossAZone?: pulumi.Input<number>;
        deployRegion: pulumi.Input<string>;
        width: pulumi.Input<number>;
        zoneSets: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface VpcPolicyBetaList {
        lastTime?: pulumi.Input<string>;
        taskId?: pulumi.Input<number>;
        taskName?: pulumi.Input<string>;
    }
}

export namespace Chdfs {
    export interface AccessRuleAccessRule {
        accessMode?: pulumi.Input<number>;
        accessRuleId?: pulumi.Input<number>;
        address?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        priority?: pulumi.Input<number>;
    }

    export interface LifeCycleRuleLifeCycleRule {
        createTime?: pulumi.Input<string>;
        lifeCycleRuleId?: pulumi.Input<number>;
        lifeCycleRuleName?: pulumi.Input<string>;
        path?: pulumi.Input<string>;
        status?: pulumi.Input<number>;
        transitions?: pulumi.Input<pulumi.Input<inputs.Chdfs.LifeCycleRuleLifeCycleRuleTransition>[]>;
    }

    export interface LifeCycleRuleLifeCycleRuleTransition {
        days: pulumi.Input<number>;
        type: pulumi.Input<number>;
    }
}

export namespace Ci {
    export interface MediaAnimationTemplateContainer {
        format: pulumi.Input<string>;
    }

    export interface MediaAnimationTemplateTimeInterval {
        duration?: pulumi.Input<string>;
        start?: pulumi.Input<string>;
    }

    export interface MediaAnimationTemplateVideo {
        animateFramesPerSecond?: pulumi.Input<string>;
        animateOnlyKeepKeyFrame?: pulumi.Input<string>;
        animateTimeIntervalOfFrame?: pulumi.Input<string>;
        codec: pulumi.Input<string>;
        fps?: pulumi.Input<string>;
        height?: pulumi.Input<string>;
        quality?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface MediaConcatTemplateConcatTemplate {
        audio?: pulumi.Input<inputs.Ci.MediaConcatTemplateConcatTemplateAudio>;
        audioMixes?: pulumi.Input<pulumi.Input<inputs.Ci.MediaConcatTemplateConcatTemplateAudioMix>[]>;
        concatFragments: pulumi.Input<pulumi.Input<inputs.Ci.MediaConcatTemplateConcatTemplateConcatFragment>[]>;
        container: pulumi.Input<inputs.Ci.MediaConcatTemplateConcatTemplateContainer>;
        video?: pulumi.Input<inputs.Ci.MediaConcatTemplateConcatTemplateVideo>;
    }

    export interface MediaConcatTemplateConcatTemplateAudio {
        bitrate?: pulumi.Input<string>;
        channels?: pulumi.Input<string>;
        codec: pulumi.Input<string>;
        samplerate?: pulumi.Input<string>;
    }

    export interface MediaConcatTemplateConcatTemplateAudioMix {
        audioSource: pulumi.Input<string>;
        effectConfig?: pulumi.Input<inputs.Ci.MediaConcatTemplateConcatTemplateAudioMixEffectConfig>;
        mixMode?: pulumi.Input<string>;
        replace?: pulumi.Input<string>;
    }

    export interface MediaConcatTemplateConcatTemplateAudioMixEffectConfig {
        bgmFadeTime?: pulumi.Input<string>;
        enableBgmFade?: pulumi.Input<string>;
        enableEndFadeout?: pulumi.Input<string>;
        enableStartFadein?: pulumi.Input<string>;
        endFadeoutTime?: pulumi.Input<string>;
        startFadeinTime?: pulumi.Input<string>;
    }

    export interface MediaConcatTemplateConcatTemplateConcatFragment {
        mode: pulumi.Input<string>;
        url: pulumi.Input<string>;
    }

    export interface MediaConcatTemplateConcatTemplateContainer {
        format: pulumi.Input<string>;
    }

    export interface MediaConcatTemplateConcatTemplateVideo {
        bitrate?: pulumi.Input<string>;
        codec: pulumi.Input<string>;
        crf?: pulumi.Input<string>;
        fps?: pulumi.Input<string>;
        height?: pulumi.Input<string>;
        remove?: pulumi.Input<string>;
        rotate?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface MediaPicProcessTemplatePicProcess {
        isPicInfo?: pulumi.Input<string>;
        processRule: pulumi.Input<string>;
    }

    export interface MediaSmartCoverTemplateSmartCover {
        count?: pulumi.Input<string>;
        deleteDuplicates?: pulumi.Input<string>;
        format: pulumi.Input<string>;
        height?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface MediaSnapshotTemplateSnapshot {
        blackLevel?: pulumi.Input<string>;
        ciParam?: pulumi.Input<string>;
        count: pulumi.Input<string>;
        height?: pulumi.Input<string>;
        isCheckBlack?: pulumi.Input<string>;
        isCheckCount?: pulumi.Input<string>;
        mode?: pulumi.Input<string>;
        pixelBlackThreshold?: pulumi.Input<string>;
        snapshotOutMode?: pulumi.Input<string>;
        spriteSnapshotConfig?: pulumi.Input<inputs.Ci.MediaSnapshotTemplateSnapshotSpriteSnapshotConfig>;
        start?: pulumi.Input<string>;
        timeInterval?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface MediaSnapshotTemplateSnapshotSpriteSnapshotConfig {
        cellHeight?: pulumi.Input<string>;
        cellWidth?: pulumi.Input<string>;
        color: pulumi.Input<string>;
        columns: pulumi.Input<string>;
        lines: pulumi.Input<string>;
        margin?: pulumi.Input<string>;
        padding?: pulumi.Input<string>;
    }

    export interface MediaSpeechRecognitionTemplateSpeechRecognition {
        channelNum: pulumi.Input<string>;
        convertNumMode?: pulumi.Input<string>;
        engineModelType: pulumi.Input<string>;
        filterDirty?: pulumi.Input<string>;
        filterModal?: pulumi.Input<string>;
        filterPunc?: pulumi.Input<string>;
        outputFileType?: pulumi.Input<string>;
        resTextFormat?: pulumi.Input<string>;
        speakerDiarization?: pulumi.Input<string>;
        speakerNumber?: pulumi.Input<string>;
    }

    export interface MediaTranscodeProTemplateAudio {
        codec: pulumi.Input<string>;
        remove?: pulumi.Input<string>;
    }

    export interface MediaTranscodeProTemplateContainer {
        clipConfig?: pulumi.Input<inputs.Ci.MediaTranscodeProTemplateContainerClipConfig>;
        format: pulumi.Input<string>;
    }

    export interface MediaTranscodeProTemplateContainerClipConfig {
        duration?: pulumi.Input<string>;
    }

    export interface MediaTranscodeProTemplateTimeInterval {
        duration?: pulumi.Input<string>;
        start?: pulumi.Input<string>;
    }

    export interface MediaTranscodeProTemplateTransConfig {
        adjDarMethod?: pulumi.Input<string>;
        audioBitrateAdjMethod?: pulumi.Input<string>;
        deleteMetadata?: pulumi.Input<string>;
        isCheckAudioBitrate?: pulumi.Input<string>;
        isCheckReso?: pulumi.Input<string>;
        isCheckVideoBitrate?: pulumi.Input<string>;
        isHdr2Sdr?: pulumi.Input<string>;
        resoAdjMethod?: pulumi.Input<string>;
        videoBitrateAdjMethod?: pulumi.Input<string>;
    }

    export interface MediaTranscodeProTemplateVideo {
        bitrate?: pulumi.Input<string>;
        codec?: pulumi.Input<string>;
        fps?: pulumi.Input<string>;
        height?: pulumi.Input<string>;
        interlaced?: pulumi.Input<string>;
        profile?: pulumi.Input<string>;
        rotate?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface MediaTranscodeTemplateAudio {
        bitrate?: pulumi.Input<string>;
        channels?: pulumi.Input<string>;
        codec?: pulumi.Input<string>;
        keepTwoTracks?: pulumi.Input<string>;
        remove?: pulumi.Input<string>;
        sampleFormat?: pulumi.Input<string>;
        samplerate?: pulumi.Input<string>;
        switchTrack?: pulumi.Input<string>;
    }

    export interface MediaTranscodeTemplateAudioMix {
        audioSource: pulumi.Input<string>;
        effectConfig?: pulumi.Input<inputs.Ci.MediaTranscodeTemplateAudioMixEffectConfig>;
        mixMode?: pulumi.Input<string>;
        replace?: pulumi.Input<string>;
    }

    export interface MediaTranscodeTemplateAudioMixEffectConfig {
        bgmFadeTime?: pulumi.Input<string>;
        enableBgmFade?: pulumi.Input<string>;
        enableEndFadeout?: pulumi.Input<string>;
        enableStartFadein?: pulumi.Input<string>;
        endFadeoutTime?: pulumi.Input<string>;
        startFadeinTime?: pulumi.Input<string>;
    }

    export interface MediaTranscodeTemplateContainer {
        clipConfig?: pulumi.Input<inputs.Ci.MediaTranscodeTemplateContainerClipConfig>;
        format: pulumi.Input<string>;
    }

    export interface MediaTranscodeTemplateContainerClipConfig {
        duration?: pulumi.Input<string>;
    }

    export interface MediaTranscodeTemplateTimeInterval {
        duration?: pulumi.Input<string>;
        start?: pulumi.Input<string>;
    }

    export interface MediaTranscodeTemplateTransConfig {
        adjDarMethod?: pulumi.Input<string>;
        audioBitrateAdjMethod?: pulumi.Input<string>;
        deleteMetadata?: pulumi.Input<string>;
        hlsEncrypt?: pulumi.Input<inputs.Ci.MediaTranscodeTemplateTransConfigHlsEncrypt>;
        isCheckAudioBitrate?: pulumi.Input<string>;
        isCheckReso?: pulumi.Input<string>;
        isCheckVideoBitrate?: pulumi.Input<string>;
        isHdr2Sdr?: pulumi.Input<string>;
        resoAdjMethod?: pulumi.Input<string>;
        videoBitrateAdjMethod?: pulumi.Input<string>;
    }

    export interface MediaTranscodeTemplateTransConfigHlsEncrypt {
        isHlsEncrypt?: pulumi.Input<string>;
        uriKey?: pulumi.Input<string>;
    }

    export interface MediaTranscodeTemplateVideo {
        bitrate?: pulumi.Input<string>;
        bufsize?: pulumi.Input<string>;
        codec?: pulumi.Input<string>;
        crf?: pulumi.Input<string>;
        fps?: pulumi.Input<string>;
        gop?: pulumi.Input<string>;
        height?: pulumi.Input<string>;
        longShortMode?: pulumi.Input<string>;
        maxrate?: pulumi.Input<string>;
        pixfmt?: pulumi.Input<string>;
        preset?: pulumi.Input<string>;
        profile?: pulumi.Input<string>;
        remove?: pulumi.Input<string>;
        rotate?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface MediaVideoMontageTemplateAudio {
        bitrate?: pulumi.Input<string>;
        channels?: pulumi.Input<string>;
        codec: pulumi.Input<string>;
        remove?: pulumi.Input<string>;
        samplerate?: pulumi.Input<string>;
    }

    export interface MediaVideoMontageTemplateAudioMix {
        audioSource: pulumi.Input<string>;
        effectConfig?: pulumi.Input<inputs.Ci.MediaVideoMontageTemplateAudioMixEffectConfig>;
        mixMode?: pulumi.Input<string>;
        replace?: pulumi.Input<string>;
    }

    export interface MediaVideoMontageTemplateAudioMixEffectConfig {
        bgmFadeTime?: pulumi.Input<string>;
        enableBgmFade?: pulumi.Input<string>;
        enableEndFadeout?: pulumi.Input<string>;
        enableStartFadein?: pulumi.Input<string>;
        endFadeoutTime?: pulumi.Input<string>;
        startFadeinTime?: pulumi.Input<string>;
    }

    export interface MediaVideoMontageTemplateContainer {
        format: pulumi.Input<string>;
    }

    export interface MediaVideoMontageTemplateVideo {
        bitrate?: pulumi.Input<string>;
        codec: pulumi.Input<string>;
        crf?: pulumi.Input<string>;
        fps?: pulumi.Input<string>;
        height?: pulumi.Input<string>;
        remove?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface MediaVideoProcessTemplateColorEnhance {
        contrast?: pulumi.Input<string>;
        correction?: pulumi.Input<string>;
        enable?: pulumi.Input<string>;
        saturation?: pulumi.Input<string>;
    }

    export interface MediaVideoProcessTemplateMsSharpen {
        enable?: pulumi.Input<string>;
        sharpenLevel?: pulumi.Input<string>;
    }

    export interface MediaVoiceSeparateTemplateAudioConfig {
        bitrate?: pulumi.Input<string>;
        channels?: pulumi.Input<string>;
        codec: pulumi.Input<string>;
        samplerate?: pulumi.Input<string>;
    }

    export interface MediaWatermarkTemplateWatermark {
        dx: pulumi.Input<string>;
        dy: pulumi.Input<string>;
        endTime?: pulumi.Input<string>;
        image?: pulumi.Input<inputs.Ci.MediaWatermarkTemplateWatermarkImage>;
        locMode: pulumi.Input<string>;
        pos: pulumi.Input<string>;
        startTime?: pulumi.Input<string>;
        text?: pulumi.Input<inputs.Ci.MediaWatermarkTemplateWatermarkText>;
        type: pulumi.Input<string>;
    }

    export interface MediaWatermarkTemplateWatermarkImage {
        background: pulumi.Input<string>;
        height?: pulumi.Input<string>;
        mode: pulumi.Input<string>;
        transparency: pulumi.Input<string>;
        url: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface MediaWatermarkTemplateWatermarkText {
        fontColor: pulumi.Input<string>;
        fontSize: pulumi.Input<string>;
        fontType: pulumi.Input<string>;
        text: pulumi.Input<string>;
        transparency: pulumi.Input<string>;
    }
}

export namespace Ckafka {
    export interface AclRuleRuleList {
        host: pulumi.Input<string>;
        operation: pulumi.Input<string>;
        permissionType: pulumi.Input<string>;
        principal: pulumi.Input<string>;
    }

    export interface ConnectResourceClickhouseConnectParam {
        isUpdate?: pulumi.Input<boolean>;
        password: pulumi.Input<string>;
        port: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        serviceVip?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName: pulumi.Input<string>;
    }

    export interface ConnectResourceDorisConnectParam {
        bePort?: pulumi.Input<number>;
        isUpdate?: pulumi.Input<boolean>;
        password: pulumi.Input<string>;
        port: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        selfBuilt?: pulumi.Input<boolean>;
        serviceVip?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName: pulumi.Input<string>;
    }

    export interface ConnectResourceDtsConnectParam {
        groupId: pulumi.Input<string>;
        isUpdate?: pulumi.Input<boolean>;
        password: pulumi.Input<string>;
        port: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        topic: pulumi.Input<string>;
        userName: pulumi.Input<string>;
    }

    export interface ConnectResourceEsConnectParam {
        isUpdate?: pulumi.Input<boolean>;
        password: pulumi.Input<string>;
        port: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        serviceVip?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName: pulumi.Input<string>;
    }

    export interface ConnectResourceKafkaConnectParam {
        brokerAddress?: pulumi.Input<string>;
        isUpdate?: pulumi.Input<boolean>;
        region?: pulumi.Input<string>;
        resource?: pulumi.Input<string>;
        selfBuilt?: pulumi.Input<boolean>;
    }

    export interface ConnectResourceMariadbConnectParam {
        isUpdate?: pulumi.Input<boolean>;
        password: pulumi.Input<string>;
        port: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        serviceVip?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName: pulumi.Input<string>;
    }

    export interface ConnectResourceMongodbConnectParam {
        isUpdate?: pulumi.Input<boolean>;
        password: pulumi.Input<string>;
        port: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        serviceVip?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName: pulumi.Input<string>;
    }

    export interface ConnectResourceMysqlConnectParam {
        clusterId?: pulumi.Input<string>;
        isUpdate?: pulumi.Input<boolean>;
        password: pulumi.Input<string>;
        port: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        selfBuilt?: pulumi.Input<boolean>;
        serviceVip?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName: pulumi.Input<string>;
    }

    export interface ConnectResourcePostgresqlConnectParam {
        clusterId?: pulumi.Input<string>;
        isUpdate?: pulumi.Input<boolean>;
        password: pulumi.Input<string>;
        port: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        selfBuilt?: pulumi.Input<boolean>;
        serviceVip?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName: pulumi.Input<string>;
    }

    export interface ConnectResourceSqlserverConnectParam {
        isUpdate?: pulumi.Input<boolean>;
        password: pulumi.Input<string>;
        port: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        serviceVip?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResource {
        clickHouseParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceClickHouseParam>;
        clsParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceClsParam>;
        cosParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceCosParam>;
        ctsdbParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceCtsdbParam>;
        dtsParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceDtsParam>;
        esParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceEsParam>;
        eventBusParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceEventBusParam>;
        kafkaParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceKafkaParam>;
        mariaDbParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceMariaDbParam>;
        mongoDbParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceMongoDbParam>;
        mySqlParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceMySqlParam>;
        postgreSqlParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourcePostgreSqlParam>;
        scfParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceScfParam>;
        sqlServerParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceSqlServerParam>;
        tdwParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceTdwParam>;
        topicParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceTopicParam>;
        type: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceClickHouseParam {
        cluster: pulumi.Input<string>;
        database: pulumi.Input<string>;
        dropCls?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceClickHouseParamDropCls>;
        dropInvalidMessage?: pulumi.Input<boolean>;
        ip?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        schemas: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceClickHouseParamSchema>[]>;
        selfBuilt?: pulumi.Input<boolean>;
        serviceVip?: pulumi.Input<string>;
        table: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName?: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceClickHouseParamDropCls {
        dropClsLogSet?: pulumi.Input<string>;
        dropClsOwneruin?: pulumi.Input<string>;
        dropClsRegion?: pulumi.Input<string>;
        dropClsTopicId?: pulumi.Input<string>;
        dropInvalidMessageToCls?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskSourceResourceClickHouseParamSchema {
        allowNull: pulumi.Input<boolean>;
        columnName: pulumi.Input<string>;
        jsonKey: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceClsParam {
        contentKey?: pulumi.Input<string>;
        decodeJson: pulumi.Input<boolean>;
        logSet?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        timeField?: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceCosParam {
        aggregateBatchSize?: pulumi.Input<number>;
        aggregateInterval?: pulumi.Input<number>;
        bucketName: pulumi.Input<string>;
        directoryTimeFormat?: pulumi.Input<string>;
        formatOutputType?: pulumi.Input<string>;
        objectKey?: pulumi.Input<string>;
        objectKeyPrefix?: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceCtsdbParam {
        ctsdbMetric?: pulumi.Input<string>;
        resource?: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceDtsParam {
        groupId?: pulumi.Input<string>;
        groupPassword?: pulumi.Input<string>;
        groupUser?: pulumi.Input<string>;
        ip?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        topic?: pulumi.Input<string>;
        tranSql?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskSourceResourceEsParam {
        contentKey?: pulumi.Input<string>;
        databasePrimaryKey?: pulumi.Input<string>;
        dateFormat?: pulumi.Input<string>;
        documentIdField?: pulumi.Input<string>;
        dropCls?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceEsParamDropCls>;
        dropDlq?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceEsParamDropDlq>;
        dropInvalidJsonMessage?: pulumi.Input<boolean>;
        dropInvalidMessage?: pulumi.Input<boolean>;
        index?: pulumi.Input<string>;
        indexType?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        selfBuilt?: pulumi.Input<boolean>;
        serviceVip?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName?: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceEsParamDropCls {
        dropClsLogSet?: pulumi.Input<string>;
        dropClsOwneruin?: pulumi.Input<string>;
        dropClsRegion?: pulumi.Input<string>;
        dropClsTopicId?: pulumi.Input<string>;
        dropInvalidMessageToCls?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskSourceResourceEsParamDropDlq {
        dlqType?: pulumi.Input<string>;
        kafkaParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceEsParamDropDlqKafkaParam>;
        maxRetryAttempts?: pulumi.Input<number>;
        retryInterval?: pulumi.Input<number>;
        topicParam?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceEsParamDropDlqTopicParam>;
        type: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceEsParamDropDlqKafkaParam {
        compressionType?: pulumi.Input<string>;
        enableToleration?: pulumi.Input<boolean>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        partitionNum?: pulumi.Input<number>;
        qpsLimit?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        resourceName?: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        startTime?: pulumi.Input<number>;
        tableMappings?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceEsParamDropDlqKafkaParamTableMapping>[]>;
        topic?: pulumi.Input<string>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
        useTableMapping?: pulumi.Input<boolean>;
        zoneId?: pulumi.Input<number>;
    }

    export interface DatahubTaskSourceResourceEsParamDropDlqKafkaParamTableMapping {
        database: pulumi.Input<string>;
        table: pulumi.Input<string>;
        topic: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceEsParamDropDlqTopicParam {
        compressionType?: pulumi.Input<string>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        startTime?: pulumi.Input<number>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskSourceResourceEventBusParam {
        functionName?: pulumi.Input<string>;
        namespace?: pulumi.Input<string>;
        qualifier?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        type: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceKafkaParam {
        compressionType?: pulumi.Input<string>;
        enableToleration?: pulumi.Input<boolean>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        partitionNum?: pulumi.Input<number>;
        qpsLimit?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        resourceName?: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        startTime?: pulumi.Input<number>;
        tableMappings?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceKafkaParamTableMapping>[]>;
        topic?: pulumi.Input<string>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
        useTableMapping?: pulumi.Input<boolean>;
        zoneId?: pulumi.Input<number>;
    }

    export interface DatahubTaskSourceResourceKafkaParamTableMapping {
        database: pulumi.Input<string>;
        table: pulumi.Input<string>;
        topic: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceMariaDbParam {
        database: pulumi.Input<string>;
        includeContentChanges?: pulumi.Input<string>;
        includeQuery?: pulumi.Input<boolean>;
        isTablePrefix?: pulumi.Input<boolean>;
        keyColumns?: pulumi.Input<string>;
        outputFormat?: pulumi.Input<string>;
        recordWithSchema?: pulumi.Input<boolean>;
        resource: pulumi.Input<string>;
        snapshotMode?: pulumi.Input<string>;
        table: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceMongoDbParam {
        collection: pulumi.Input<string>;
        copyExisting: pulumi.Input<boolean>;
        database: pulumi.Input<string>;
        ip?: pulumi.Input<string>;
        listeningEvent?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        pipeline?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        readPreference?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        selfBuilt?: pulumi.Input<boolean>;
        userName?: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceMySqlParam {
        dataSourceIncrementColumn?: pulumi.Input<string>;
        dataSourceIncrementMode?: pulumi.Input<string>;
        dataSourceMonitorMode?: pulumi.Input<string>;
        dataSourceMonitorResource?: pulumi.Input<string>;
        dataSourceStartFrom?: pulumi.Input<string>;
        dataTargetInsertMode?: pulumi.Input<string>;
        dataTargetPrimaryKeyField?: pulumi.Input<string>;
        dataTargetRecordMappings?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceMySqlParamDataTargetRecordMapping>[]>;
        database: pulumi.Input<string>;
        ddlTopic?: pulumi.Input<string>;
        dropCls?: pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourceMySqlParamDropCls>;
        dropInvalidMessage?: pulumi.Input<boolean>;
        includeContentChanges?: pulumi.Input<string>;
        includeQuery?: pulumi.Input<boolean>;
        isTablePrefix?: pulumi.Input<boolean>;
        isTableRegular?: pulumi.Input<boolean>;
        keyColumns?: pulumi.Input<string>;
        outputFormat?: pulumi.Input<string>;
        recordWithSchema?: pulumi.Input<boolean>;
        resource: pulumi.Input<string>;
        signalDatabase?: pulumi.Input<string>;
        snapshotMode?: pulumi.Input<string>;
        table: pulumi.Input<string>;
        topicRegex?: pulumi.Input<string>;
        topicReplacement?: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceMySqlParamDataTargetRecordMapping {
        allowNull?: pulumi.Input<boolean>;
        autoIncrement?: pulumi.Input<boolean>;
        columnName?: pulumi.Input<string>;
        columnSize?: pulumi.Input<string>;
        decimalDigits?: pulumi.Input<string>;
        defaultValue?: pulumi.Input<string>;
        extraInfo?: pulumi.Input<string>;
        jsonKey?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceMySqlParamDropCls {
        dropClsLogSet?: pulumi.Input<string>;
        dropClsOwneruin?: pulumi.Input<string>;
        dropClsRegion?: pulumi.Input<string>;
        dropClsTopicId?: pulumi.Input<string>;
        dropInvalidMessageToCls?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskSourceResourcePostgreSqlParam {
        dataFormat?: pulumi.Input<string>;
        dataTargetInsertMode?: pulumi.Input<string>;
        dataTargetPrimaryKeyField?: pulumi.Input<string>;
        dataTargetRecordMappings?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskSourceResourcePostgreSqlParamDataTargetRecordMapping>[]>;
        database: pulumi.Input<string>;
        dropInvalidMessage?: pulumi.Input<boolean>;
        isTableRegular?: pulumi.Input<boolean>;
        keyColumns?: pulumi.Input<string>;
        pluginName: pulumi.Input<string>;
        recordWithSchema?: pulumi.Input<boolean>;
        resource: pulumi.Input<string>;
        snapshotMode?: pulumi.Input<string>;
        table: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourcePostgreSqlParamDataTargetRecordMapping {
        allowNull?: pulumi.Input<boolean>;
        autoIncrement?: pulumi.Input<boolean>;
        columnName?: pulumi.Input<string>;
        columnSize?: pulumi.Input<string>;
        decimalDigits?: pulumi.Input<string>;
        defaultValue?: pulumi.Input<string>;
        extraInfo?: pulumi.Input<string>;
        jsonKey?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceScfParam {
        batchSize?: pulumi.Input<number>;
        functionName: pulumi.Input<string>;
        maxRetries?: pulumi.Input<number>;
        namespace?: pulumi.Input<string>;
        qualifier?: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceSqlServerParam {
        database: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        snapshotMode?: pulumi.Input<string>;
        table: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceTdwParam {
        bid: pulumi.Input<string>;
        isDomestic?: pulumi.Input<boolean>;
        tdwHost?: pulumi.Input<string>;
        tdwPort?: pulumi.Input<number>;
        tid: pulumi.Input<string>;
    }

    export interface DatahubTaskSourceResourceTopicParam {
        compressionType?: pulumi.Input<string>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        startTime?: pulumi.Input<number>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskTargetResource {
        clickHouseParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceClickHouseParam>;
        clsParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceClsParam>;
        cosParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceCosParam>;
        ctsdbParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceCtsdbParam>;
        dtsParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceDtsParam>;
        esParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceEsParam>;
        eventBusParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceEventBusParam>;
        kafkaParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceKafkaParam>;
        mariaDbParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceMariaDbParam>;
        mongoDbParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceMongoDbParam>;
        mySqlParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceMySqlParam>;
        postgreSqlParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourcePostgreSqlParam>;
        scfParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceScfParam>;
        sqlServerParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceSqlServerParam>;
        tdwParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceTdwParam>;
        topicParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceTopicParam>;
        type: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceClickHouseParam {
        cluster: pulumi.Input<string>;
        database: pulumi.Input<string>;
        dropCls?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceClickHouseParamDropCls>;
        dropInvalidMessage?: pulumi.Input<boolean>;
        ip?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        schemas: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceClickHouseParamSchema>[]>;
        selfBuilt?: pulumi.Input<boolean>;
        serviceVip?: pulumi.Input<string>;
        table: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName?: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceClickHouseParamDropCls {
        dropClsLogSet?: pulumi.Input<string>;
        dropClsOwneruin?: pulumi.Input<string>;
        dropClsRegion?: pulumi.Input<string>;
        dropClsTopicId?: pulumi.Input<string>;
        dropInvalidMessageToCls?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskTargetResourceClickHouseParamSchema {
        allowNull: pulumi.Input<boolean>;
        columnName: pulumi.Input<string>;
        jsonKey: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceClsParam {
        contentKey?: pulumi.Input<string>;
        decodeJson: pulumi.Input<boolean>;
        logSet?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        timeField?: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceCosParam {
        aggregateBatchSize?: pulumi.Input<number>;
        aggregateInterval?: pulumi.Input<number>;
        bucketName: pulumi.Input<string>;
        directoryTimeFormat?: pulumi.Input<string>;
        formatOutputType?: pulumi.Input<string>;
        objectKey?: pulumi.Input<string>;
        objectKeyPrefix?: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceCtsdbParam {
        ctsdbMetric?: pulumi.Input<string>;
        resource?: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceDtsParam {
        groupId?: pulumi.Input<string>;
        groupPassword?: pulumi.Input<string>;
        groupUser?: pulumi.Input<string>;
        ip?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        topic?: pulumi.Input<string>;
        tranSql?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskTargetResourceEsParam {
        contentKey?: pulumi.Input<string>;
        databasePrimaryKey?: pulumi.Input<string>;
        dateFormat?: pulumi.Input<string>;
        documentIdField?: pulumi.Input<string>;
        dropCls?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceEsParamDropCls>;
        dropDlq?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceEsParamDropDlq>;
        dropInvalidJsonMessage?: pulumi.Input<boolean>;
        dropInvalidMessage?: pulumi.Input<boolean>;
        index?: pulumi.Input<string>;
        indexType?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        selfBuilt?: pulumi.Input<boolean>;
        serviceVip?: pulumi.Input<string>;
        uniqVpcId?: pulumi.Input<string>;
        userName?: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceEsParamDropCls {
        dropClsLogSet?: pulumi.Input<string>;
        dropClsOwneruin?: pulumi.Input<string>;
        dropClsRegion?: pulumi.Input<string>;
        dropClsTopicId?: pulumi.Input<string>;
        dropInvalidMessageToCls?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskTargetResourceEsParamDropDlq {
        dlqType?: pulumi.Input<string>;
        kafkaParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceEsParamDropDlqKafkaParam>;
        maxRetryAttempts?: pulumi.Input<number>;
        retryInterval?: pulumi.Input<number>;
        topicParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceEsParamDropDlqTopicParam>;
        type: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceEsParamDropDlqKafkaParam {
        compressionType?: pulumi.Input<string>;
        enableToleration?: pulumi.Input<boolean>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        partitionNum?: pulumi.Input<number>;
        qpsLimit?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        resourceName?: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        startTime?: pulumi.Input<number>;
        tableMappings?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceEsParamDropDlqKafkaParamTableMapping>[]>;
        topic?: pulumi.Input<string>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
        useTableMapping?: pulumi.Input<boolean>;
        zoneId?: pulumi.Input<number>;
    }

    export interface DatahubTaskTargetResourceEsParamDropDlqKafkaParamTableMapping {
        database: pulumi.Input<string>;
        table: pulumi.Input<string>;
        topic: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceEsParamDropDlqTopicParam {
        compressionType?: pulumi.Input<string>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        startTime?: pulumi.Input<number>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskTargetResourceEventBusParam {
        functionName?: pulumi.Input<string>;
        namespace?: pulumi.Input<string>;
        qualifier?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        type: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceKafkaParam {
        compressionType?: pulumi.Input<string>;
        enableToleration?: pulumi.Input<boolean>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        partitionNum?: pulumi.Input<number>;
        qpsLimit?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        resourceName?: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        startTime?: pulumi.Input<number>;
        tableMappings?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceKafkaParamTableMapping>[]>;
        topic?: pulumi.Input<string>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
        useTableMapping?: pulumi.Input<boolean>;
        zoneId?: pulumi.Input<number>;
    }

    export interface DatahubTaskTargetResourceKafkaParamTableMapping {
        database: pulumi.Input<string>;
        table: pulumi.Input<string>;
        topic: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceMariaDbParam {
        database: pulumi.Input<string>;
        includeContentChanges?: pulumi.Input<string>;
        includeQuery?: pulumi.Input<boolean>;
        isTablePrefix?: pulumi.Input<boolean>;
        keyColumns?: pulumi.Input<string>;
        outputFormat?: pulumi.Input<string>;
        recordWithSchema?: pulumi.Input<boolean>;
        resource: pulumi.Input<string>;
        snapshotMode?: pulumi.Input<string>;
        table: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceMongoDbParam {
        collection: pulumi.Input<string>;
        copyExisting: pulumi.Input<boolean>;
        database: pulumi.Input<string>;
        ip?: pulumi.Input<string>;
        listeningEvent?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        pipeline?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        readPreference?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        selfBuilt?: pulumi.Input<boolean>;
        userName?: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceMySqlParam {
        dataSourceIncrementColumn?: pulumi.Input<string>;
        dataSourceIncrementMode?: pulumi.Input<string>;
        dataSourceMonitorMode?: pulumi.Input<string>;
        dataSourceMonitorResource?: pulumi.Input<string>;
        dataSourceStartFrom?: pulumi.Input<string>;
        dataTargetInsertMode?: pulumi.Input<string>;
        dataTargetPrimaryKeyField?: pulumi.Input<string>;
        dataTargetRecordMappings?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceMySqlParamDataTargetRecordMapping>[]>;
        database: pulumi.Input<string>;
        ddlTopic?: pulumi.Input<string>;
        dropCls?: pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourceMySqlParamDropCls>;
        dropInvalidMessage?: pulumi.Input<boolean>;
        includeContentChanges?: pulumi.Input<string>;
        includeQuery?: pulumi.Input<boolean>;
        isTablePrefix?: pulumi.Input<boolean>;
        isTableRegular?: pulumi.Input<boolean>;
        keyColumns?: pulumi.Input<string>;
        outputFormat?: pulumi.Input<string>;
        recordWithSchema?: pulumi.Input<boolean>;
        resource: pulumi.Input<string>;
        signalDatabase?: pulumi.Input<string>;
        snapshotMode?: pulumi.Input<string>;
        table: pulumi.Input<string>;
        topicRegex?: pulumi.Input<string>;
        topicReplacement?: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceMySqlParamDataTargetRecordMapping {
        allowNull?: pulumi.Input<boolean>;
        autoIncrement?: pulumi.Input<boolean>;
        columnName?: pulumi.Input<string>;
        columnSize?: pulumi.Input<string>;
        decimalDigits?: pulumi.Input<string>;
        defaultValue?: pulumi.Input<string>;
        extraInfo?: pulumi.Input<string>;
        jsonKey?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceMySqlParamDropCls {
        dropClsLogSet?: pulumi.Input<string>;
        dropClsOwneruin?: pulumi.Input<string>;
        dropClsRegion?: pulumi.Input<string>;
        dropClsTopicId?: pulumi.Input<string>;
        dropInvalidMessageToCls?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskTargetResourcePostgreSqlParam {
        dataFormat?: pulumi.Input<string>;
        dataTargetInsertMode?: pulumi.Input<string>;
        dataTargetPrimaryKeyField?: pulumi.Input<string>;
        dataTargetRecordMappings?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTargetResourcePostgreSqlParamDataTargetRecordMapping>[]>;
        database: pulumi.Input<string>;
        dropInvalidMessage?: pulumi.Input<boolean>;
        isTableRegular?: pulumi.Input<boolean>;
        keyColumns?: pulumi.Input<string>;
        pluginName: pulumi.Input<string>;
        recordWithSchema?: pulumi.Input<boolean>;
        resource: pulumi.Input<string>;
        snapshotMode?: pulumi.Input<string>;
        table: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourcePostgreSqlParamDataTargetRecordMapping {
        allowNull?: pulumi.Input<boolean>;
        autoIncrement?: pulumi.Input<boolean>;
        columnName?: pulumi.Input<string>;
        columnSize?: pulumi.Input<string>;
        decimalDigits?: pulumi.Input<string>;
        defaultValue?: pulumi.Input<string>;
        extraInfo?: pulumi.Input<string>;
        jsonKey?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceScfParam {
        batchSize?: pulumi.Input<number>;
        functionName: pulumi.Input<string>;
        maxRetries?: pulumi.Input<number>;
        namespace?: pulumi.Input<string>;
        qualifier?: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceSqlServerParam {
        database: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        snapshotMode?: pulumi.Input<string>;
        table: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceTdwParam {
        bid: pulumi.Input<string>;
        isDomestic?: pulumi.Input<boolean>;
        tdwHost?: pulumi.Input<string>;
        tdwPort?: pulumi.Input<number>;
        tid: pulumi.Input<string>;
    }

    export interface DatahubTaskTargetResourceTopicParam {
        compressionType?: pulumi.Input<string>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        startTime?: pulumi.Input<number>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskTransformParam {
        analyseResults?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformParamAnalyseResult>[]>;
        analysisFormat: pulumi.Input<string>;
        content: pulumi.Input<string>;
        failureParam: pulumi.Input<inputs.Ckafka.DatahubTaskTransformParamFailureParam>;
        filterParams?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformParamFilterParam>[]>;
        mapParams?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformParamMapParam>[]>;
        outputFormat: pulumi.Input<string>;
        regex?: pulumi.Input<string>;
        result?: pulumi.Input<string>;
        sourceType: pulumi.Input<string>;
        useEventBus?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskTransformParamAnalyseResult {
        key: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformParamFailureParam {
        dlqType?: pulumi.Input<string>;
        kafkaParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformParamFailureParamKafkaParam>;
        maxRetryAttempts?: pulumi.Input<number>;
        retryInterval?: pulumi.Input<number>;
        topicParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformParamFailureParamTopicParam>;
        type: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformParamFailureParamKafkaParam {
        compressionType?: pulumi.Input<string>;
        enableToleration?: pulumi.Input<boolean>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        partitionNum?: pulumi.Input<number>;
        qpsLimit?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        resourceName?: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        startTime?: pulumi.Input<number>;
        tableMappings?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformParamFailureParamKafkaParamTableMapping>[]>;
        topic?: pulumi.Input<string>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
        useTableMapping?: pulumi.Input<boolean>;
        zoneId?: pulumi.Input<number>;
    }

    export interface DatahubTaskTransformParamFailureParamKafkaParamTableMapping {
        database: pulumi.Input<string>;
        table: pulumi.Input<string>;
        topic: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformParamFailureParamTopicParam {
        compressionType?: pulumi.Input<string>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        startTime?: pulumi.Input<number>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskTransformParamFilterParam {
        key: pulumi.Input<string>;
        matchMode: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformParamMapParam {
        key: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParam {
        batchAnalyse?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamBatchAnalyse>;
        content: pulumi.Input<string>;
        failureParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFailureParam>;
        fieldChains: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChain>[]>;
        filterParams?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFilterParam>[]>;
        keepMetadata?: pulumi.Input<boolean>;
        outputFormat?: pulumi.Input<string>;
        result?: pulumi.Input<string>;
        rowParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamRowParam>;
        sourceType?: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamBatchAnalyse {
        format: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFailureParam {
        dlqType?: pulumi.Input<string>;
        kafkaParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFailureParamKafkaParam>;
        maxRetryAttempts?: pulumi.Input<number>;
        retryInterval?: pulumi.Input<number>;
        topicParam?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFailureParamTopicParam>;
        type: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFailureParamKafkaParam {
        compressionType?: pulumi.Input<string>;
        enableToleration?: pulumi.Input<boolean>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        partitionNum?: pulumi.Input<number>;
        qpsLimit?: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        resourceName?: pulumi.Input<string>;
        selfBuilt: pulumi.Input<boolean>;
        startTime?: pulumi.Input<number>;
        tableMappings?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFailureParamKafkaParamTableMapping>[]>;
        topic?: pulumi.Input<string>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
        useTableMapping?: pulumi.Input<boolean>;
        zoneId?: pulumi.Input<number>;
    }

    export interface DatahubTaskTransformsParamFailureParamKafkaParamTableMapping {
        database: pulumi.Input<string>;
        table: pulumi.Input<string>;
        topic: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFailureParamTopicParam {
        compressionType?: pulumi.Input<string>;
        msgMultiple?: pulumi.Input<number>;
        offsetType?: pulumi.Input<string>;
        resource: pulumi.Input<string>;
        startTime?: pulumi.Input<number>;
        topicId?: pulumi.Input<string>;
        useAutoCreateTopic?: pulumi.Input<boolean>;
    }

    export interface DatahubTaskTransformsParamFieldChain {
        analyse: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyse>;
        analyseJsonResult?: pulumi.Input<string>;
        analyseResults?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResult>[]>;
        result?: pulumi.Input<string>;
        sMTs?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMT>[]>;
        secondaryAnalyse?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyse>;
        secondaryAnalyseJsonResult?: pulumi.Input<string>;
        secondaryAnalyseResults?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResult>[]>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyse {
        format: pulumi.Input<string>;
        inputValue?: pulumi.Input<string>;
        inputValueType?: pulumi.Input<string>;
        regex?: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyseResult {
        key: pulumi.Input<string>;
        operate: pulumi.Input<string>;
        originalValue?: pulumi.Input<string>;
        schemeType: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        valueOperate?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResultValueOperate>;
        valueOperates?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResultValueOperate>[]>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyseResultValueOperate {
        date?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateDate>;
        jsonPathReplace?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateJsonPathReplace>;
        kV?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateKV>;
        regexReplace?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateRegexReplace>;
        replace?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateReplace>;
        result?: pulumi.Input<string>;
        split?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSplit>;
        substr?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSubstr>;
        type: pulumi.Input<string>;
        urlDecode?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateUrlDecode>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateDate {
        format?: pulumi.Input<string>;
        targetType?: pulumi.Input<string>;
        timeZone?: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateJsonPathReplace {
        newValue: pulumi.Input<string>;
        oldValue: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateKV {
        delimiter: pulumi.Input<string>;
        keepOriginalKey?: pulumi.Input<string>;
        regex: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateRegexReplace {
        newValue: pulumi.Input<string>;
        regex: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateReplace {
        newValue: pulumi.Input<string>;
        oldValue: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSplit {
        regex: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSubstr {
        end: pulumi.Input<number>;
        start: pulumi.Input<number>;
    }

    export interface DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateUrlDecode {
        charsetName?: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSMT {
        key: pulumi.Input<string>;
        operate: pulumi.Input<string>;
        originalValue?: pulumi.Input<string>;
        schemeType: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        valueOperate?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMTValueOperate>;
        valueOperates?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMTValueOperate>[]>;
    }

    export interface DatahubTaskTransformsParamFieldChainSMTValueOperate {
        date?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMTValueOperateDate>;
        jsonPathReplace?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMTValueOperateJsonPathReplace>;
        kV?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMTValueOperateKV>;
        regexReplace?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMTValueOperateRegexReplace>;
        replace?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMTValueOperateReplace>;
        result?: pulumi.Input<string>;
        split?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMTValueOperateSplit>;
        substr?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMTValueOperateSubstr>;
        type: pulumi.Input<string>;
        urlDecode?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSMTValueOperateUrlDecode>;
    }

    export interface DatahubTaskTransformsParamFieldChainSMTValueOperateDate {
        format?: pulumi.Input<string>;
        targetType?: pulumi.Input<string>;
        timeZone?: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSMTValueOperateJsonPathReplace {
        newValue: pulumi.Input<string>;
        oldValue: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSMTValueOperateKV {
        delimiter: pulumi.Input<string>;
        keepOriginalKey?: pulumi.Input<string>;
        regex: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSMTValueOperateRegexReplace {
        newValue: pulumi.Input<string>;
        regex: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSMTValueOperateReplace {
        newValue: pulumi.Input<string>;
        oldValue: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSMTValueOperateSplit {
        regex: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSMTValueOperateSubstr {
        end: pulumi.Input<number>;
        start: pulumi.Input<number>;
    }

    export interface DatahubTaskTransformsParamFieldChainSMTValueOperateUrlDecode {
        charsetName?: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyse {
        regex: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyseResult {
        key: pulumi.Input<string>;
        operate: pulumi.Input<string>;
        originalValue?: pulumi.Input<string>;
        schemeType: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        valueOperate?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperate>;
        valueOperates?: pulumi.Input<pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperate>[]>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperate {
        date?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateDate>;
        jsonPathReplace?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateJsonPathReplace>;
        kV?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateKV>;
        regexReplace?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateRegexReplace>;
        replace?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateReplace>;
        result?: pulumi.Input<string>;
        split?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSplit>;
        substr?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSubstr>;
        type: pulumi.Input<string>;
        urlDecode?: pulumi.Input<inputs.Ckafka.DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateUrlDecode>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateDate {
        format?: pulumi.Input<string>;
        targetType?: pulumi.Input<string>;
        timeZone?: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateJsonPathReplace {
        newValue: pulumi.Input<string>;
        oldValue: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateKV {
        delimiter: pulumi.Input<string>;
        keepOriginalKey?: pulumi.Input<string>;
        regex: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateRegexReplace {
        newValue: pulumi.Input<string>;
        regex: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateReplace {
        newValue: pulumi.Input<string>;
        oldValue: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSplit {
        regex: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSubstr {
        end: pulumi.Input<number>;
        start: pulumi.Input<number>;
    }

    export interface DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateUrlDecode {
        charsetName?: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamFilterParam {
        key: pulumi.Input<string>;
        matchMode: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface DatahubTaskTransformsParamRowParam {
        entryDelimiter?: pulumi.Input<string>;
        keyValueDelimiter?: pulumi.Input<string>;
        rowContent: pulumi.Input<string>;
    }

    export interface GetInstancesFilter {
        name: string;
        values: string[];
    }

    export interface GetInstancesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InstanceConfig {
        autoCreateTopicEnable: pulumi.Input<boolean>;
        defaultNumPartitions: pulumi.Input<number>;
        defaultReplicationFactor: pulumi.Input<number>;
    }

    export interface InstanceDynamicRetentionConfig {
        bottomRetention?: pulumi.Input<number>;
        diskQuotaPercentage?: pulumi.Input<number>;
        enable?: pulumi.Input<number>;
        stepForwardPercentage?: pulumi.Input<number>;
    }

    export interface InstanceTag {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface RouteBrokerVipList {
        vip?: pulumi.Input<string>;
        vport?: pulumi.Input<string>;
    }

    export interface RouteVipList {
        vip?: pulumi.Input<string>;
        vport?: pulumi.Input<string>;
    }
}

export namespace Classic {
    export interface GetElasticPublicIpv6sFilter {
        name: string;
        values: string[];
    }

    export interface GetElasticPublicIpv6sFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace Clb {
    export interface AttachmentTarget {
        eniIp?: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        port: pulumi.Input<number>;
        weight?: pulumi.Input<number>;
    }

    export interface FunctionTargetsAttachmentFunctionTargets {
        function: pulumi.Input<inputs.Clb.FunctionTargetsAttachmentFunctionTargetsFunction>;
        weight?: pulumi.Input<number>;
    }

    export interface FunctionTargetsAttachmentFunctionTargetsFunction {
        functionName: pulumi.Input<string>;
        functionNamespace: pulumi.Input<string>;
        functionQualifier: pulumi.Input<string>;
        functionQualifierType?: pulumi.Input<string>;
    }

    export interface GetClusterResourcesFilter {
        name: string;
        values: string[];
    }

    export interface GetClusterResourcesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetCrossTargetsFilter {
        name: string;
        values: string[];
    }

    export interface GetCrossTargetsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetExclusiveClustersFilter {
        name: string;
        values: string[];
    }

    export interface GetExclusiveClustersFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetInstanceDetailFilter {
        name: string;
        values: string[];
    }

    export interface GetInstanceDetailFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetListenersByTargetsBackend {
        privateIp: string;
        vpcId: string;
    }

    export interface GetListenersByTargetsBackendArgs {
        privateIp: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }

    export interface GetResourcesFilter {
        name: string;
        values: string[];
    }

    export interface GetResourcesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetTargetGroupListFilter {
        name: string;
        values: string[];
    }

    export interface GetTargetGroupListFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InstanceSnatIp {
        ip?: pulumi.Input<string>;
        subnetId: pulumi.Input<string>;
    }

    export interface ListenerRuleOauth {
        oauthEnable?: pulumi.Input<boolean>;
        oauthFailureStatus?: pulumi.Input<string>;
    }

    export interface ReplaceCertForLbsCertificate {
        certCaContent?: pulumi.Input<string>;
        certCaId?: pulumi.Input<string>;
        certCaName?: pulumi.Input<string>;
        certContent?: pulumi.Input<string>;
        certId?: pulumi.Input<string>;
        certKey?: pulumi.Input<string>;
        certName?: pulumi.Input<string>;
        sslMode?: pulumi.Input<string>;
    }

    export interface SnatIpIp {
        ip: pulumi.Input<string>;
        subnetId: pulumi.Input<string>;
    }

    export interface TargetGroupAttachmentsAssociation {
        listenerId?: pulumi.Input<string>;
        loadBalancerId?: pulumi.Input<string>;
        locationId?: pulumi.Input<string>;
        targetGroupId?: pulumi.Input<string>;
    }

    export interface TargetGroupTargetGroupInstance {
        bindIp: pulumi.Input<string>;
        newPort?: pulumi.Input<number>;
        port: pulumi.Input<number>;
        weight?: pulumi.Input<number>;
    }
}

export namespace Clickhouse {
    export interface AccountPermissionDatabasePrivilegeList {
        databaseName: pulumi.Input<string>;
        databasePrivileges?: pulumi.Input<pulumi.Input<string>[]>;
        tablePrivilegeLists?: pulumi.Input<pulumi.Input<inputs.Clickhouse.AccountPermissionDatabasePrivilegeListTablePrivilegeList>[]>;
    }

    export interface AccountPermissionDatabasePrivilegeListTablePrivilegeList {
        tableName: pulumi.Input<string>;
        tablePrivileges: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface BackupStrategyDataBackupStrategy {
        backUpTables: pulumi.Input<pulumi.Input<inputs.Clickhouse.BackupStrategyDataBackupStrategyBackUpTable>[]>;
        executeHour: pulumi.Input<number>;
        retainDays: pulumi.Input<number>;
        weekDays: pulumi.Input<string>;
    }

    export interface BackupStrategyDataBackupStrategyBackUpTable {
        database: pulumi.Input<string>;
        ips?: pulumi.Input<string>;
        rip?: pulumi.Input<string>;
        table: pulumi.Input<string>;
        totalBytes: pulumi.Input<number>;
        vCluster?: pulumi.Input<string>;
        zooPath?: pulumi.Input<string>;
    }

    export interface BackupStrategyMetaBackupStrategy {
        executeHour?: pulumi.Input<number>;
        retainDays?: pulumi.Input<number>;
        weekDays?: pulumi.Input<string>;
    }

    export interface InstanceCommonSpec {
        count: pulumi.Input<number>;
        diskSize: pulumi.Input<number>;
        specName: pulumi.Input<string>;
    }

    export interface InstanceDataSpec {
        count: pulumi.Input<number>;
        diskSize: pulumi.Input<number>;
        specName: pulumi.Input<string>;
    }

    export interface KeyvalConfigItems {
        confKey: pulumi.Input<string>;
        confValue: pulumi.Input<string>;
    }

    export interface XmlConfigModifyConfContext {
        fileName: pulumi.Input<string>;
        filePath?: pulumi.Input<string>;
        newConfValue: pulumi.Input<string>;
    }
}

export namespace Cls {
    export interface AlarmAlarmTarget {
        endTimeOffset: pulumi.Input<number>;
        logsetId: pulumi.Input<string>;
        number: pulumi.Input<number>;
        query: pulumi.Input<string>;
        startTimeOffset: pulumi.Input<number>;
        syntaxRule?: pulumi.Input<number>;
        topicId: pulumi.Input<string>;
    }

    export interface AlarmAnalysis {
        configInfos?: pulumi.Input<pulumi.Input<inputs.Cls.AlarmAnalysisConfigInfo>[]>;
        content: pulumi.Input<string>;
        name: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface AlarmAnalysisConfigInfo {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface AlarmCallBack {
        body: pulumi.Input<string>;
        headers?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface AlarmMonitorTime {
        time: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface AlarmMultiCondition {
        alarmLevel?: pulumi.Input<number>;
        condition?: pulumi.Input<string>;
    }

    export interface AlarmNoticeNoticeReceiver {
        endTime?: pulumi.Input<string>;
        index?: pulumi.Input<number>;
        noticeContentId?: pulumi.Input<string>;
        receiverChannels: pulumi.Input<pulumi.Input<string>[]>;
        receiverIds: pulumi.Input<pulumi.Input<number>[]>;
        receiverType: pulumi.Input<string>;
        startTime?: pulumi.Input<string>;
    }

    export interface AlarmNoticeWebCallback {
        /**
         * @deprecated This parameter is deprecated. Please use `notice_content_id`.
         */
        body?: pulumi.Input<string>;
        callbackType: pulumi.Input<string>;
        /**
         * @deprecated This parameter is deprecated. Please use `notice_content_id`.
         */
        headers?: pulumi.Input<pulumi.Input<string>[]>;
        index?: pulumi.Input<number>;
        method?: pulumi.Input<string>;
        mobiles?: pulumi.Input<pulumi.Input<string>[]>;
        noticeContentId?: pulumi.Input<string>;
        remindType?: pulumi.Input<number>;
        url: pulumi.Input<string>;
        userIds?: pulumi.Input<pulumi.Input<string>[]>;
        webCallbackId?: pulumi.Input<string>;
    }

    export interface CkafkaConsumerCkafka {
        instanceId: pulumi.Input<string>;
        instanceName: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
        topicName: pulumi.Input<string>;
        vip: pulumi.Input<string>;
        vport: pulumi.Input<string>;
    }

    export interface CkafkaConsumerContent {
        enableTag: pulumi.Input<boolean>;
        metaFields: pulumi.Input<pulumi.Input<string>[]>;
        tagJsonNotTiled?: pulumi.Input<boolean>;
        timestampAccuracy?: pulumi.Input<number>;
    }

    export interface ConfigExcludePath {
        type?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface ConfigExtraContainerFile {
        container: pulumi.Input<string>;
        excludeLabels?: pulumi.Input<pulumi.Input<string>[]>;
        excludeNamespace?: pulumi.Input<string>;
        filePattern: pulumi.Input<string>;
        includeLabels?: pulumi.Input<pulumi.Input<string>[]>;
        logPath: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        workload?: pulumi.Input<inputs.Cls.ConfigExtraContainerFileWorkload>;
    }

    export interface ConfigExtraContainerFileWorkload {
        container?: pulumi.Input<string>;
        kind: pulumi.Input<string>;
        name: pulumi.Input<string>;
        namespace?: pulumi.Input<string>;
    }

    export interface ConfigExtraContainerStdout {
        allContainers: pulumi.Input<boolean>;
        excludeLabels?: pulumi.Input<pulumi.Input<string>[]>;
        excludeNamespace?: pulumi.Input<string>;
        includeLabels?: pulumi.Input<pulumi.Input<string>[]>;
        namespace?: pulumi.Input<string>;
        workloads?: pulumi.Input<pulumi.Input<inputs.Cls.ConfigExtraContainerStdoutWorkload>[]>;
    }

    export interface ConfigExtraContainerStdoutWorkload {
        container?: pulumi.Input<string>;
        kind: pulumi.Input<string>;
        name: pulumi.Input<string>;
        namespace?: pulumi.Input<string>;
    }

    export interface ConfigExtraExcludePath {
        type?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface ConfigExtraExtractRule {
        backtracking?: pulumi.Input<number>;
        beginRegex?: pulumi.Input<string>;
        delimiter?: pulumi.Input<string>;
        filterKeyRegexes?: pulumi.Input<pulumi.Input<inputs.Cls.ConfigExtraExtractRuleFilterKeyRegex>[]>;
        keys?: pulumi.Input<pulumi.Input<string>[]>;
        logRegex?: pulumi.Input<string>;
        timeFormat?: pulumi.Input<string>;
        timeKey?: pulumi.Input<string>;
        unMatchLogKey?: pulumi.Input<string>;
        unMatchUpLoadSwitch?: pulumi.Input<boolean>;
    }

    export interface ConfigExtraExtractRuleFilterKeyRegex {
        key?: pulumi.Input<string>;
        regex?: pulumi.Input<string>;
    }

    export interface ConfigExtraHostFile {
        customLabels?: pulumi.Input<pulumi.Input<string>[]>;
        filePattern: pulumi.Input<string>;
        logPath: pulumi.Input<string>;
    }

    export interface ConfigExtractRule {
        address?: pulumi.Input<string>;
        backtracking?: pulumi.Input<number>;
        beginRegex?: pulumi.Input<string>;
        delimiter?: pulumi.Input<string>;
        filterKeyRegexes?: pulumi.Input<pulumi.Input<inputs.Cls.ConfigExtractRuleFilterKeyRegex>[]>;
        isGbk?: pulumi.Input<number>;
        jsonStandard?: pulumi.Input<number>;
        keys?: pulumi.Input<pulumi.Input<string>[]>;
        logRegex?: pulumi.Input<string>;
        metaTags?: pulumi.Input<pulumi.Input<inputs.Cls.ConfigExtractRuleMetaTag>[]>;
        metadataType?: pulumi.Input<number>;
        parseProtocol?: pulumi.Input<string>;
        pathRegex?: pulumi.Input<string>;
        protocol?: pulumi.Input<string>;
        timeFormat?: pulumi.Input<string>;
        timeKey?: pulumi.Input<string>;
        unMatchLogKey?: pulumi.Input<string>;
        unMatchUpLoadSwitch?: pulumi.Input<boolean>;
    }

    export interface ConfigExtractRuleFilterKeyRegex {
        key?: pulumi.Input<string>;
        regex?: pulumi.Input<string>;
    }

    export interface ConfigExtractRuleMetaTag {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface CosRechargeExtractRuleInfo {
        address?: pulumi.Input<string>;
        backtracking?: pulumi.Input<number>;
        beginRegex?: pulumi.Input<string>;
        delimiter?: pulumi.Input<string>;
        filterKeyRegexes?: pulumi.Input<pulumi.Input<inputs.Cls.CosRechargeExtractRuleInfoFilterKeyRegex>[]>;
        isGbk?: pulumi.Input<number>;
        jsonStandard?: pulumi.Input<number>;
        keys?: pulumi.Input<pulumi.Input<string>[]>;
        logRegex?: pulumi.Input<string>;
        metaTags?: pulumi.Input<pulumi.Input<inputs.Cls.CosRechargeExtractRuleInfoMetaTag>[]>;
        metadataType?: pulumi.Input<number>;
        parseProtocol?: pulumi.Input<string>;
        pathRegex?: pulumi.Input<string>;
        protocol?: pulumi.Input<string>;
        timeFormat?: pulumi.Input<string>;
        timeKey?: pulumi.Input<string>;
        unMatchLogKey?: pulumi.Input<string>;
        unMatchUpLoadSwitch?: pulumi.Input<boolean>;
    }

    export interface CosRechargeExtractRuleInfoFilterKeyRegex {
        key: pulumi.Input<string>;
        regex: pulumi.Input<string>;
    }

    export interface CosRechargeExtractRuleInfoMetaTag {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface CosShipperCompress {
        format: pulumi.Input<string>;
    }

    export interface CosShipperContent {
        csv?: pulumi.Input<inputs.Cls.CosShipperContentCsv>;
        format: pulumi.Input<string>;
        json?: pulumi.Input<inputs.Cls.CosShipperContentJson>;
    }

    export interface CosShipperContentCsv {
        delimiter: pulumi.Input<string>;
        escapeChar: pulumi.Input<string>;
        keys: pulumi.Input<pulumi.Input<string>[]>;
        nonExistingField: pulumi.Input<string>;
        printKey: pulumi.Input<boolean>;
    }

    export interface CosShipperContentJson {
        enableTag: pulumi.Input<boolean>;
        metaFields: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface CosShipperFilterRule {
        key: pulumi.Input<string>;
        regex: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface DataTransformDstResource {
        alias: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
    }

    export interface GetLogsetsFilter {
        key: string;
        values: string[];
    }

    export interface GetLogsetsFilterArgs {
        key: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface IndexRule {
        dynamicIndex?: pulumi.Input<inputs.Cls.IndexRuleDynamicIndex>;
        fullText?: pulumi.Input<inputs.Cls.IndexRuleFullText>;
        keyValue?: pulumi.Input<inputs.Cls.IndexRuleKeyValue>;
        tag?: pulumi.Input<inputs.Cls.IndexRuleTag>;
    }

    export interface IndexRuleDynamicIndex {
        status: pulumi.Input<boolean>;
    }

    export interface IndexRuleFullText {
        caseSensitive: pulumi.Input<boolean>;
        containZH: pulumi.Input<boolean>;
        tokenizer: pulumi.Input<string>;
    }

    export interface IndexRuleKeyValue {
        caseSensitive: pulumi.Input<boolean>;
        keyValues?: pulumi.Input<pulumi.Input<inputs.Cls.IndexRuleKeyValueKeyValue>[]>;
    }

    export interface IndexRuleKeyValueKeyValue {
        key: pulumi.Input<string>;
        value?: pulumi.Input<inputs.Cls.IndexRuleKeyValueKeyValueValue>;
    }

    export interface IndexRuleKeyValueKeyValueValue {
        containZH?: pulumi.Input<boolean>;
        sqlFlag?: pulumi.Input<boolean>;
        tokenizer?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface IndexRuleTag {
        caseSensitive: pulumi.Input<boolean>;
        keyValues?: pulumi.Input<pulumi.Input<inputs.Cls.IndexRuleTagKeyValue>[]>;
    }

    export interface IndexRuleTagKeyValue {
        key: pulumi.Input<string>;
        value?: pulumi.Input<inputs.Cls.IndexRuleTagKeyValueValue>;
    }

    export interface IndexRuleTagKeyValueValue {
        containZH?: pulumi.Input<boolean>;
        sqlFlag?: pulumi.Input<boolean>;
        tokenizer?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface KafkaRechargeLogRechargeRule {
        defaultTimeSrc?: pulumi.Input<number>;
        defaultTimeSwitch: pulumi.Input<boolean>;
        encodingFormat: pulumi.Input<number>;
        keys?: pulumi.Input<pulumi.Input<string>[]>;
        logRegex?: pulumi.Input<string>;
        metadatas?: pulumi.Input<pulumi.Input<string>[]>;
        rechargeType: pulumi.Input<string>;
        timeFormat?: pulumi.Input<string>;
        timeKey?: pulumi.Input<string>;
        timeRegex?: pulumi.Input<string>;
        timeZone?: pulumi.Input<string>;
        unMatchLogKey?: pulumi.Input<string>;
        unMatchLogSwitch?: pulumi.Input<boolean>;
        unMatchLogTimeSrc?: pulumi.Input<number>;
    }

    export interface KafkaRechargeProtocol {
        mechanism?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        protocol?: pulumi.Input<string>;
        userName?: pulumi.Input<string>;
    }

    export interface MachineGroupMachineGroupType {
        type: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface NoticeContentNoticeContents {
        recoveryContent?: pulumi.Input<inputs.Cls.NoticeContentNoticeContentsRecoveryContent>;
        triggerContent?: pulumi.Input<inputs.Cls.NoticeContentNoticeContentsTriggerContent>;
        type: pulumi.Input<string>;
    }

    export interface NoticeContentNoticeContentsRecoveryContent {
        content?: pulumi.Input<string>;
        headers?: pulumi.Input<pulumi.Input<string>[]>;
        title?: pulumi.Input<string>;
    }

    export interface NoticeContentNoticeContentsTriggerContent {
        content?: pulumi.Input<string>;
        headers?: pulumi.Input<pulumi.Input<string>[]>;
        title?: pulumi.Input<string>;
    }

    export interface ScheduledSqlDstResource {
        bizType?: pulumi.Input<number>;
        metricName?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
    }

    export interface TopicExtends {
        anonymousAccess?: pulumi.Input<inputs.Cls.TopicExtendsAnonymousAccess>;
    }

    export interface TopicExtendsAnonymousAccess {
        conditions?: pulumi.Input<pulumi.Input<inputs.Cls.TopicExtendsAnonymousAccessCondition>[]>;
        operations?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface TopicExtendsAnonymousAccessCondition {
        attributes?: pulumi.Input<string>;
        conditionValue?: pulumi.Input<string>;
        rule?: pulumi.Input<number>;
    }
}

export namespace Cos {
    export interface BatchManifest {
        location: pulumi.Input<inputs.Cos.BatchManifestLocation>;
        spec: pulumi.Input<inputs.Cos.BatchManifestSpec>;
    }

    export interface BatchManifestLocation {
        etag: pulumi.Input<string>;
        objectArn: pulumi.Input<string>;
        objectVersionId?: pulumi.Input<string>;
    }

    export interface BatchManifestSpec {
        fields?: pulumi.Input<pulumi.Input<string>[]>;
        format: pulumi.Input<string>;
    }

    export interface BatchOperation {
        cosInitiateRestoreObject?: pulumi.Input<inputs.Cos.BatchOperationCosInitiateRestoreObject>;
        cosPutObjectCopy?: pulumi.Input<inputs.Cos.BatchOperationCosPutObjectCopy>;
    }

    export interface BatchOperationCosInitiateRestoreObject {
        expirationInDays: pulumi.Input<number>;
        jobTier: pulumi.Input<string>;
    }

    export interface BatchOperationCosPutObjectCopy {
        accessControlDirective?: pulumi.Input<string>;
        accessControlGrants?: pulumi.Input<inputs.Cos.BatchOperationCosPutObjectCopyAccessControlGrants>;
        cannedAccessControlList?: pulumi.Input<string>;
        metadataDirective?: pulumi.Input<string>;
        modifiedSinceConstraint?: pulumi.Input<number>;
        newObjectMetadata?: pulumi.Input<inputs.Cos.BatchOperationCosPutObjectCopyNewObjectMetadata>;
        newObjectTaggings?: pulumi.Input<pulumi.Input<inputs.Cos.BatchOperationCosPutObjectCopyNewObjectTagging>[]>;
        prefixReplace?: pulumi.Input<boolean>;
        resourcesPrefix?: pulumi.Input<string>;
        storageClass?: pulumi.Input<string>;
        taggingDirective?: pulumi.Input<string>;
        targetKeyPrefix?: pulumi.Input<string>;
        targetResource: pulumi.Input<string>;
        unmodifiedSinceConstraint?: pulumi.Input<number>;
    }

    export interface BatchOperationCosPutObjectCopyAccessControlGrants {
        displayName?: pulumi.Input<string>;
        identifier: pulumi.Input<string>;
        permission: pulumi.Input<string>;
        typeIdentifier: pulumi.Input<string>;
    }

    export interface BatchOperationCosPutObjectCopyNewObjectMetadata {
        cacheControl?: pulumi.Input<string>;
        contentDisposition?: pulumi.Input<string>;
        contentEncoding?: pulumi.Input<string>;
        contentType?: pulumi.Input<string>;
        httpExpiresDate?: pulumi.Input<string>;
        sseAlgorithm?: pulumi.Input<string>;
        userMetadatas?: pulumi.Input<pulumi.Input<inputs.Cos.BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadata>[]>;
    }

    export interface BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadata {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface BatchOperationCosPutObjectCopyNewObjectTagging {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface BatchReport {
        bucket: pulumi.Input<string>;
        enabled: pulumi.Input<string>;
        format: pulumi.Input<string>;
        prefix?: pulumi.Input<string>;
        reportScope: pulumi.Input<string>;
    }

    export interface BucketCorsRule {
        allowedHeaders: pulumi.Input<pulumi.Input<string>[]>;
        allowedMethods: pulumi.Input<pulumi.Input<string>[]>;
        allowedOrigins: pulumi.Input<pulumi.Input<string>[]>;
        exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        maxAgeSeconds?: pulumi.Input<number>;
    }

    export interface BucketDomainCertificateAttachmentDomainCertificate {
        certificate: pulumi.Input<inputs.Cos.BucketDomainCertificateAttachmentDomainCertificateCertificate>;
        domain: pulumi.Input<string>;
    }

    export interface BucketDomainCertificateAttachmentDomainCertificateCertificate {
        certType: pulumi.Input<string>;
        customCert: pulumi.Input<inputs.Cos.BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert>;
    }

    export interface BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert {
        cert: pulumi.Input<string>;
        privateKey: pulumi.Input<string>;
    }

    export interface BucketInventoryDestination {
        accountId?: pulumi.Input<string>;
        bucket: pulumi.Input<string>;
        encryption?: pulumi.Input<inputs.Cos.BucketInventoryDestinationEncryption>;
        format: pulumi.Input<string>;
        prefix?: pulumi.Input<string>;
    }

    export interface BucketInventoryDestinationEncryption {
        sseCos?: pulumi.Input<string>;
    }

    export interface BucketInventoryFilter {
        period?: pulumi.Input<inputs.Cos.BucketInventoryFilterPeriod>;
        prefix?: pulumi.Input<string>;
    }

    export interface BucketInventoryFilterPeriod {
        endTime?: pulumi.Input<string>;
        startTime?: pulumi.Input<string>;
    }

    export interface BucketInventoryOptionalFields {
        fields?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface BucketInventorySchedule {
        frequency: pulumi.Input<string>;
    }

    export interface BucketLifecycleRule {
        abortIncompleteMultipartUpload?: pulumi.Input<inputs.Cos.BucketLifecycleRuleAbortIncompleteMultipartUpload>;
        expiration?: pulumi.Input<inputs.Cos.BucketLifecycleRuleExpiration>;
        filterPrefix: pulumi.Input<string>;
        id?: pulumi.Input<string>;
        nonCurrentExpiration?: pulumi.Input<inputs.Cos.BucketLifecycleRuleNonCurrentExpiration>;
        nonCurrentTransitions?: pulumi.Input<pulumi.Input<inputs.Cos.BucketLifecycleRuleNonCurrentTransition>[]>;
        transitions?: pulumi.Input<pulumi.Input<inputs.Cos.BucketLifecycleRuleTransition>[]>;
    }

    export interface BucketLifecycleRuleAbortIncompleteMultipartUpload {
        daysAfterInitiation: pulumi.Input<number>;
    }

    export interface BucketLifecycleRuleExpiration {
        date?: pulumi.Input<string>;
        days?: pulumi.Input<number>;
        deleteMarker?: pulumi.Input<boolean>;
    }

    export interface BucketLifecycleRuleNonCurrentExpiration {
        nonCurrentDays?: pulumi.Input<number>;
    }

    export interface BucketLifecycleRuleNonCurrentTransition {
        nonCurrentDays?: pulumi.Input<number>;
        storageClass: pulumi.Input<string>;
    }

    export interface BucketLifecycleRuleTransition {
        date?: pulumi.Input<string>;
        days?: pulumi.Input<number>;
        storageClass: pulumi.Input<string>;
    }

    export interface BucketOriginDomainRule {
        domain: pulumi.Input<string>;
        status?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface BucketOriginPullRule {
        customHttpHeaders?: pulumi.Input<{[key: string]: any}>;
        followHttpHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        followQueryString?: pulumi.Input<boolean>;
        followRedirection?: pulumi.Input<boolean>;
        host: pulumi.Input<string>;
        prefix?: pulumi.Input<string>;
        priority: pulumi.Input<number>;
        protocol?: pulumi.Input<string>;
        syncBackToSource?: pulumi.Input<boolean>;
    }

    export interface BucketReplicaRule {
        destinationBucket: pulumi.Input<string>;
        destinationStorageClass?: pulumi.Input<string>;
        id?: pulumi.Input<string>;
        prefix?: pulumi.Input<string>;
        status: pulumi.Input<string>;
    }

    export interface BucketWebsite {
        endpoint?: pulumi.Input<string>;
        errorDocument?: pulumi.Input<string>;
        indexDocument?: pulumi.Input<string>;
        redirectAllRequestsTo?: pulumi.Input<string>;
    }

}

export namespace Csip {
    export interface RiskCenterAsset {
        arn?: pulumi.Input<string>;
        asset?: pulumi.Input<string>;
        assetName?: pulumi.Input<string>;
        assetType?: pulumi.Input<string>;
        instanceType?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface RiskCenterTaskAdvanceCfg {
        cfgRisks?: pulumi.Input<pulumi.Input<inputs.Csip.RiskCenterTaskAdvanceCfgCfgRisk>[]>;
        portRisks?: pulumi.Input<pulumi.Input<inputs.Csip.RiskCenterTaskAdvanceCfgPortRisk>[]>;
        vulRisks?: pulumi.Input<pulumi.Input<inputs.Csip.RiskCenterTaskAdvanceCfgVulRisk>[]>;
        weakPwdRisks?: pulumi.Input<pulumi.Input<inputs.Csip.RiskCenterTaskAdvanceCfgWeakPwdRisk>[]>;
    }

    export interface RiskCenterTaskAdvanceCfgCfgRisk {
        enable: pulumi.Input<number>;
        itemId: pulumi.Input<string>;
        resourceType: pulumi.Input<string>;
    }

    export interface RiskCenterTaskAdvanceCfgPortRisk {
        checkType: pulumi.Input<number>;
        detail: pulumi.Input<string>;
        enable: pulumi.Input<number>;
        portSets: pulumi.Input<string>;
    }

    export interface RiskCenterTaskAdvanceCfgVulRisk {
        enable: pulumi.Input<number>;
        riskId: pulumi.Input<string>;
    }

    export interface RiskCenterTaskAdvanceCfgWeakPwdRisk {
        checkItemId: pulumi.Input<number>;
        enable: pulumi.Input<number>;
    }
}

export namespace Css {
    export interface PlayDomainCertAttachmentDomainInfo {
        domainName: pulumi.Input<string>;
        status: pulumi.Input<number>;
    }

    export interface PullStreamTaskWatermarkList {
        height: pulumi.Input<number>;
        location: pulumi.Input<number>;
        pictureUrl: pulumi.Input<string>;
        width: pulumi.Input<number>;
        xPosition: pulumi.Input<number>;
        yPosition: pulumi.Input<number>;
    }

    export interface RecordTemplateAacParam {
        classId?: pulumi.Input<number>;
        enable?: pulumi.Input<number>;
        procedure?: pulumi.Input<string>;
        recordInterval?: pulumi.Input<number>;
        storageMode?: pulumi.Input<string>;
        storageTime?: pulumi.Input<number>;
        vodFileName?: pulumi.Input<string>;
        vodSubAppId?: pulumi.Input<number>;
    }

    export interface RecordTemplateFlvParam {
        classId?: pulumi.Input<number>;
        enable?: pulumi.Input<number>;
        procedure?: pulumi.Input<string>;
        recordInterval?: pulumi.Input<number>;
        storageMode?: pulumi.Input<string>;
        storageTime?: pulumi.Input<number>;
        vodFileName?: pulumi.Input<string>;
        vodSubAppId?: pulumi.Input<number>;
    }

    export interface RecordTemplateFlvSpecialParam {
        uploadInRecording?: pulumi.Input<boolean>;
    }

    export interface RecordTemplateHlsParam {
        classId?: pulumi.Input<number>;
        enable?: pulumi.Input<number>;
        procedure?: pulumi.Input<string>;
        recordInterval?: pulumi.Input<number>;
        storageMode?: pulumi.Input<string>;
        storageTime?: pulumi.Input<number>;
        vodFileName?: pulumi.Input<string>;
        vodSubAppId?: pulumi.Input<number>;
    }

    export interface RecordTemplateHlsSpecialParam {
        flowContinueDuration?: pulumi.Input<number>;
    }

    export interface RecordTemplateMp3Param {
        classId?: pulumi.Input<number>;
        enable?: pulumi.Input<number>;
        procedure?: pulumi.Input<string>;
        recordInterval?: pulumi.Input<number>;
        storageMode?: pulumi.Input<string>;
        storageTime?: pulumi.Input<number>;
        vodFileName?: pulumi.Input<string>;
        vodSubAppId?: pulumi.Input<number>;
    }

    export interface RecordTemplateMp4Param {
        classId?: pulumi.Input<number>;
        enable?: pulumi.Input<number>;
        procedure?: pulumi.Input<string>;
        recordInterval?: pulumi.Input<number>;
        storageMode?: pulumi.Input<string>;
        storageTime?: pulumi.Input<number>;
        vodFileName?: pulumi.Input<string>;
        vodSubAppId?: pulumi.Input<number>;
    }

    export interface StreamMonitorInputList {
        description?: pulumi.Input<string>;
        inputApp?: pulumi.Input<string>;
        inputDomain?: pulumi.Input<string>;
        inputStreamName: pulumi.Input<string>;
        inputUrl?: pulumi.Input<string>;
    }

    export interface StreamMonitorNotifyPolicy {
        callbackUrl?: pulumi.Input<string>;
        notifyPolicyType?: pulumi.Input<number>;
    }

    export interface StreamMonitorOutputInfo {
        outputApp?: pulumi.Input<string>;
        outputDomain?: pulumi.Input<string>;
        outputStreamHeight: pulumi.Input<number>;
        outputStreamName?: pulumi.Input<string>;
        outputStreamWidth: pulumi.Input<number>;
    }
}

export namespace Cvm {
    export interface ActionTimerActionTimer {
        actionTime?: pulumi.Input<string>;
        timerAction?: pulumi.Input<string>;
    }

    export interface ChcConfigBmcVirtualPrivateCloud {
        asVpcGateway?: pulumi.Input<boolean>;
        ipv6AddressCount?: pulumi.Input<number>;
        privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        subnetId: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }

    export interface ChcConfigDeployVirtualPrivateCloud {
        asVpcGateway?: pulumi.Input<boolean>;
        ipv6AddressCount?: pulumi.Input<number>;
        privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        subnetId: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }

    export interface GetChcHostsFilter {
        name: string;
        values: string[];
    }

    export interface GetChcHostsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetInstancesModificationFilter {
        name: string;
        values: string[];
    }

    export interface GetInstancesModificationFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ImportImageTagSpecification {
        resourceType: pulumi.Input<string>;
        tags: pulumi.Input<pulumi.Input<inputs.Cvm.ImportImageTagSpecificationTag>[]>;
    }

    export interface ImportImageTagSpecificationTag {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface LaunchTemplateActionTimer {
        actionTime?: pulumi.Input<string>;
        externals?: pulumi.Input<inputs.Cvm.LaunchTemplateActionTimerExternals>;
        timerAction?: pulumi.Input<string>;
    }

    export interface LaunchTemplateActionTimerExternals {
        releaseAddress?: pulumi.Input<boolean>;
        storageBlockAttr?: pulumi.Input<inputs.Cvm.LaunchTemplateActionTimerExternalsStorageBlockAttr>;
        unsupportNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface LaunchTemplateActionTimerExternalsStorageBlockAttr {
        maxSize: pulumi.Input<number>;
        minSize: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface LaunchTemplateDataDisk {
        cdcId?: pulumi.Input<string>;
        deleteWithInstance?: pulumi.Input<boolean>;
        diskId?: pulumi.Input<string>;
        diskSize: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        encrypt?: pulumi.Input<boolean>;
        kmsKeyId?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
        throughputPerformance?: pulumi.Input<number>;
    }

    export interface LaunchTemplateEnhancedService {
        automationService?: pulumi.Input<inputs.Cvm.LaunchTemplateEnhancedServiceAutomationService>;
        monitorService?: pulumi.Input<inputs.Cvm.LaunchTemplateEnhancedServiceMonitorService>;
        securityService?: pulumi.Input<inputs.Cvm.LaunchTemplateEnhancedServiceSecurityService>;
    }

    export interface LaunchTemplateEnhancedServiceAutomationService {
        enabled?: pulumi.Input<boolean>;
    }

    export interface LaunchTemplateEnhancedServiceMonitorService {
        enabled?: pulumi.Input<boolean>;
    }

    export interface LaunchTemplateEnhancedServiceSecurityService {
        enabled?: pulumi.Input<boolean>;
    }

    export interface LaunchTemplateInstanceChargePrepaid {
        period: pulumi.Input<number>;
        renewFlag?: pulumi.Input<string>;
    }

    export interface LaunchTemplateInstanceMarketOptions {
        marketType?: pulumi.Input<string>;
        spotOptions: pulumi.Input<inputs.Cvm.LaunchTemplateInstanceMarketOptionsSpotOptions>;
    }

    export interface LaunchTemplateInstanceMarketOptionsSpotOptions {
        maxPrice: pulumi.Input<string>;
        spotInstanceType?: pulumi.Input<string>;
    }

    export interface LaunchTemplateInternetAccessible {
        bandwidthPackageId?: pulumi.Input<string>;
        internetChargeType?: pulumi.Input<string>;
        internetMaxBandwidthOut?: pulumi.Input<number>;
        publicIpAssigned?: pulumi.Input<boolean>;
    }

    export interface LaunchTemplateLoginSettings {
        keepImageLogin?: pulumi.Input<string>;
        keyIds?: pulumi.Input<pulumi.Input<string>[]>;
        password?: pulumi.Input<string>;
    }

    export interface LaunchTemplatePlacement {
        hostIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * @deprecated It has been deprecated from version 1.81.108.
         */
        hostIps?: pulumi.Input<pulumi.Input<string>[]>;
        projectId?: pulumi.Input<number>;
        zone: pulumi.Input<string>;
    }

    export interface LaunchTemplateSystemDisk {
        cdcId?: pulumi.Input<string>;
        diskId?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
    }

    export interface LaunchTemplateTagSpecification {
        resourceType: pulumi.Input<string>;
        tags: pulumi.Input<pulumi.Input<inputs.Cvm.LaunchTemplateTagSpecificationTag>[]>;
    }

    export interface LaunchTemplateTagSpecificationTag {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface LaunchTemplateVersionActionTimer {
        actionTime?: pulumi.Input<string>;
        externals?: pulumi.Input<inputs.Cvm.LaunchTemplateVersionActionTimerExternals>;
        timerAction?: pulumi.Input<string>;
    }

    export interface LaunchTemplateVersionActionTimerExternals {
        releaseAddress?: pulumi.Input<boolean>;
        storageBlockAttr?: pulumi.Input<inputs.Cvm.LaunchTemplateVersionActionTimerExternalsStorageBlockAttr>;
        unsupportNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface LaunchTemplateVersionActionTimerExternalsStorageBlockAttr {
        maxSize: pulumi.Input<number>;
        minSize: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface LaunchTemplateVersionDataDisk {
        cdcId?: pulumi.Input<string>;
        deleteWithInstance?: pulumi.Input<boolean>;
        diskId?: pulumi.Input<string>;
        diskSize: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        encrypt?: pulumi.Input<boolean>;
        kmsKeyId?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
        throughputPerformance?: pulumi.Input<number>;
    }

    export interface LaunchTemplateVersionEnhancedService {
        automationService?: pulumi.Input<inputs.Cvm.LaunchTemplateVersionEnhancedServiceAutomationService>;
        monitorService?: pulumi.Input<inputs.Cvm.LaunchTemplateVersionEnhancedServiceMonitorService>;
        securityService?: pulumi.Input<inputs.Cvm.LaunchTemplateVersionEnhancedServiceSecurityService>;
    }

    export interface LaunchTemplateVersionEnhancedServiceAutomationService {
        enabled?: pulumi.Input<boolean>;
    }

    export interface LaunchTemplateVersionEnhancedServiceMonitorService {
        enabled?: pulumi.Input<boolean>;
    }

    export interface LaunchTemplateVersionEnhancedServiceSecurityService {
        enabled?: pulumi.Input<boolean>;
    }

    export interface LaunchTemplateVersionInstanceChargePrepaid {
        period: pulumi.Input<number>;
        renewFlag?: pulumi.Input<string>;
    }

    export interface LaunchTemplateVersionInstanceMarketOptions {
        marketType?: pulumi.Input<string>;
        spotOptions: pulumi.Input<inputs.Cvm.LaunchTemplateVersionInstanceMarketOptionsSpotOptions>;
    }

    export interface LaunchTemplateVersionInstanceMarketOptionsSpotOptions {
        maxPrice: pulumi.Input<string>;
        spotInstanceType?: pulumi.Input<string>;
    }

    export interface LaunchTemplateVersionInternetAccessible {
        bandwidthPackageId?: pulumi.Input<string>;
        internetChargeType?: pulumi.Input<string>;
        internetMaxBandwidthOut?: pulumi.Input<number>;
        publicIpAssigned?: pulumi.Input<boolean>;
    }

    export interface LaunchTemplateVersionLoginSettings {
        keepImageLogin?: pulumi.Input<string>;
        keyIds?: pulumi.Input<pulumi.Input<string>[]>;
        password?: pulumi.Input<string>;
    }

    export interface LaunchTemplateVersionPlacement {
        hostIds?: pulumi.Input<pulumi.Input<string>[]>;
        hostIps?: pulumi.Input<pulumi.Input<string>[]>;
        projectId?: pulumi.Input<number>;
        zone: pulumi.Input<string>;
    }

    export interface LaunchTemplateVersionSystemDisk {
        cdcId?: pulumi.Input<string>;
        diskId?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
    }

    export interface LaunchTemplateVersionTagSpecification {
        resourceType: pulumi.Input<string>;
        tags: pulumi.Input<pulumi.Input<inputs.Cvm.LaunchTemplateVersionTagSpecificationTag>[]>;
    }

    export interface LaunchTemplateVersionTagSpecificationTag {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface LaunchTemplateVersionVirtualPrivateCloud {
        asVpcGateway?: pulumi.Input<boolean>;
        ipv6AddressCount?: pulumi.Input<number>;
        privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        subnetId: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }

    export interface LaunchTemplateVirtualPrivateCloud {
        asVpcGateway?: pulumi.Input<boolean>;
        ipv6AddressCount?: pulumi.Input<number>;
        privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        subnetId: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }

    export interface ModifyInstanceDiskTypeDataDisk {
        cdcId?: pulumi.Input<string>;
        deleteWithInstance?: pulumi.Input<boolean>;
        diskId?: pulumi.Input<string>;
        diskSize: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        encrypt?: pulumi.Input<boolean>;
        kmsKeyId?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
        throughputPerformance?: pulumi.Input<number>;
    }

    export interface ModifyInstanceDiskTypeSystemDisk {
        cdcId?: pulumi.Input<string>;
        diskId?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
    }

    export interface RenewHostHostChargePrepaid {
        period: pulumi.Input<number>;
        renewFlag?: pulumi.Input<string>;
    }

    export interface RenewInstanceInstanceChargePrepaid {
        period: pulumi.Input<number>;
        renewFlag?: pulumi.Input<string>;
    }
}

export namespace Cwp {
    export interface GetMachinesSimpleFilter {
        exactMatch?: boolean;
        name: string;
        values: string[];
    }

    export interface GetMachinesSimpleFilterArgs {
        exactMatch?: pulumi.Input<boolean>;
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace Cynosdb {
    export interface AccountPrivilegesDatabasePrivilege {
        db: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface AccountPrivilegesTablePrivilege {
        db: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        tableName: pulumi.Input<string>;
    }

    export interface AuditLogFileFilter {
        affectRows?: pulumi.Input<number>;
        dbNames?: pulumi.Input<pulumi.Input<string>[]>;
        execTime?: pulumi.Input<number>;
        hosts?: pulumi.Input<pulumi.Input<string>[]>;
        policyNames?: pulumi.Input<pulumi.Input<string>[]>;
        sentRows?: pulumi.Input<number>;
        sql?: pulumi.Input<string>;
        sqlType?: pulumi.Input<string>;
        sqlTypes?: pulumi.Input<pulumi.Input<string>[]>;
        sqls?: pulumi.Input<pulumi.Input<string>[]>;
        tableNames?: pulumi.Input<pulumi.Input<string>[]>;
        threadIds?: pulumi.Input<pulumi.Input<string>[]>;
        users?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterDatabasesUserHostPrivilege {
        dbHost: pulumi.Input<string>;
        dbPrivilege: pulumi.Input<string>;
        dbUserName: pulumi.Input<string>;
    }

    export interface ClusterInstanceInitInfo {
        cpu: pulumi.Input<number>;
        deviceType?: pulumi.Input<string>;
        instanceCount: pulumi.Input<number>;
        instanceType: pulumi.Input<string>;
        maxRoCount?: pulumi.Input<number>;
        maxRoCpu?: pulumi.Input<number>;
        memory: pulumi.Input<number>;
        minRoCount?: pulumi.Input<number>;
        minRoCpu?: pulumi.Input<number>;
    }

    export interface ClusterParamItem {
        currentValue: pulumi.Input<string>;
        name: pulumi.Input<string>;
        oldValue?: pulumi.Input<string>;
    }

    export interface ClusterRoGroupAddr {
        ip?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
    }

    export interface ClusterRoGroupInstance {
        instanceId?: pulumi.Input<string>;
        instanceName?: pulumi.Input<string>;
    }

    export interface ClusterRwGroupAddr {
        ip?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
    }

    export interface ClusterRwGroupInstance {
        instanceId?: pulumi.Input<string>;
        instanceName?: pulumi.Input<string>;
    }

    export interface ExportInstanceErrorLogsErrorLogItemExport {
        content?: pulumi.Input<string>;
        level?: pulumi.Input<string>;
        timestamp?: pulumi.Input<string>;
    }

    export interface GetAccountAllGrantPrivilegesAccount {
        accountName: string;
        host?: string;
    }

    export interface GetAccountAllGrantPrivilegesAccountArgs {
        accountName: pulumi.Input<string>;
        host?: pulumi.Input<string>;
    }

    export interface GetAuditLogsFilter {
        affectRows?: number;
        dbNames?: string[];
        execTime?: number;
        hosts?: string[];
        policyNames?: string[];
        sentRows?: number;
        sql?: string;
        sqlType?: string;
        sqlTypes?: string[];
        sqls?: string[];
        tableNames?: string[];
        threadIds?: string[];
        users?: string[];
    }

    export interface GetAuditLogsFilterArgs {
        affectRows?: pulumi.Input<number>;
        dbNames?: pulumi.Input<pulumi.Input<string>[]>;
        execTime?: pulumi.Input<number>;
        hosts?: pulumi.Input<pulumi.Input<string>[]>;
        policyNames?: pulumi.Input<pulumi.Input<string>[]>;
        sentRows?: pulumi.Input<number>;
        sql?: pulumi.Input<string>;
        sqlType?: pulumi.Input<string>;
        sqlTypes?: pulumi.Input<pulumi.Input<string>[]>;
        sqls?: pulumi.Input<pulumi.Input<string>[]>;
        tableNames?: pulumi.Input<pulumi.Input<string>[]>;
        threadIds?: pulumi.Input<pulumi.Input<string>[]>;
        users?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetProxyNodeFilter {
        exactMatch?: boolean;
        name?: string;
        names: string[];
        operator?: string;
        values: string[];
    }

    export interface GetProxyNodeFilterArgs {
        exactMatch?: pulumi.Input<boolean>;
        name?: pulumi.Input<string>;
        names: pulumi.Input<pulumi.Input<string>[]>;
        operator?: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InstanceParamInstanceParamList {
        currentValue: pulumi.Input<string>;
        paramName: pulumi.Input<string>;
    }

    export interface ParamTemplateParamList {
        currentValue?: pulumi.Input<string>;
        paramName?: pulumi.Input<string>;
    }

    export interface ProxyEndPointInstanceWeight {
        instanceId: pulumi.Input<string>;
        weight: pulumi.Input<number>;
    }

    export interface ProxyProxyZone {
        proxyNodeCount?: pulumi.Input<number>;
        proxyNodeZone?: pulumi.Input<string>;
    }

    export interface ProxyRoInstance {
        instanceId?: pulumi.Input<string>;
        weight?: pulumi.Input<number>;
    }

    export interface RollBackClusterRollbackDatabase {
        newDatabase: pulumi.Input<string>;
        oldDatabase: pulumi.Input<string>;
    }

    export interface RollBackClusterRollbackTable {
        database: pulumi.Input<string>;
        tables: pulumi.Input<pulumi.Input<inputs.Cynosdb.RollBackClusterRollbackTableTable>[]>;
    }

    export interface RollBackClusterRollbackTableTable {
        newTable: pulumi.Input<string>;
        oldTable: pulumi.Input<string>;
    }
}

export namespace Dayu {
    export interface CcHttpPolicyRuleList {
        operator?: pulumi.Input<string>;
        skey?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface CcHttpsPolicyRuleList {
        operator: pulumi.Input<string>;
        skey: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface CcPolicyV2CcBlackWhiteIp {
        blackWhiteIp: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        domain: pulumi.Input<string>;
        modifyTime?: pulumi.Input<string>;
        protocol: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface CcPolicyV2CcGeoIpPolicy {
        action: pulumi.Input<string>;
        areaLists?: pulumi.Input<pulumi.Input<number>[]>;
        createTime?: pulumi.Input<string>;
        domain: pulumi.Input<string>;
        modifyTime?: pulumi.Input<string>;
        protocol: pulumi.Input<string>;
        regionType: pulumi.Input<string>;
    }

    export interface CcPolicyV2CcPrecisionPolicy {
        domain: pulumi.Input<string>;
        ip: pulumi.Input<string>;
        policyAction: pulumi.Input<string>;
        policyId?: pulumi.Input<string>;
        policys: pulumi.Input<pulumi.Input<inputs.Dayu.CcPolicyV2CcPrecisionPolicyPolicy>[]>;
        protocol: pulumi.Input<string>;
    }

    export interface CcPolicyV2CcPrecisionPolicyPolicy {
        fieldName: pulumi.Input<string>;
        fieldType: pulumi.Input<string>;
        value: pulumi.Input<string>;
        valueOperator: pulumi.Input<string>;
    }

    export interface CcPolicyV2CcPrecisionReqLimit {
        domain: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        ip?: pulumi.Input<string>;
        level: pulumi.Input<string>;
        policys: pulumi.Input<pulumi.Input<inputs.Dayu.CcPolicyV2CcPrecisionReqLimitPolicy>[]>;
        protocol: pulumi.Input<string>;
    }

    export interface CcPolicyV2CcPrecisionReqLimitPolicy {
        action: pulumi.Input<string>;
        cookie?: pulumi.Input<string>;
        executeDuration: pulumi.Input<number>;
        mode: pulumi.Input<string>;
        period: pulumi.Input<number>;
        requestNum: pulumi.Input<number>;
        uri?: pulumi.Input<string>;
        userAgent?: pulumi.Input<string>;
    }

    export interface CcPolicyV2Threshold {
        domain: pulumi.Input<string>;
        threshold: pulumi.Input<number>;
    }

    export interface DdosIpAttachmentV2BoundIpList {
        bizType?: pulumi.Input<string>;
        deviceType?: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        ip: pulumi.Input<string>;
    }

    export interface DdosPolicyDropOption {
        badConnThreshold: pulumi.Input<number>;
        checkSyncConn: pulumi.Input<boolean>;
        connTimeout: pulumi.Input<number>;
        dConnLimit: pulumi.Input<number>;
        dNewLimit: pulumi.Input<number>;
        dropAbroad: pulumi.Input<boolean>;
        dropIcmp: pulumi.Input<boolean>;
        dropOther: pulumi.Input<boolean>;
        dropTcp: pulumi.Input<boolean>;
        dropUdp: pulumi.Input<boolean>;
        icmpMbpsLimit: pulumi.Input<number>;
        nullConnEnable: pulumi.Input<boolean>;
        otherMbpsLimit: pulumi.Input<number>;
        sConnLimit: pulumi.Input<number>;
        sNewLimit: pulumi.Input<number>;
        synLimit: pulumi.Input<number>;
        synRate?: pulumi.Input<number>;
        tcpMbpsLimit: pulumi.Input<number>;
        udpMbpsLimit: pulumi.Input<number>;
    }

    export interface DdosPolicyPacketFilter {
        action?: pulumi.Input<string>;
        dEndPort?: pulumi.Input<number>;
        dStartPort?: pulumi.Input<number>;
        depth?: pulumi.Input<number>;
        isInclude?: pulumi.Input<boolean>;
        matchBegin?: pulumi.Input<string>;
        matchStr?: pulumi.Input<string>;
        matchType?: pulumi.Input<string>;
        offset?: pulumi.Input<number>;
        pktLengthMax?: pulumi.Input<number>;
        pktLengthMin?: pulumi.Input<number>;
        protocol?: pulumi.Input<string>;
        sEndPort?: pulumi.Input<number>;
        sStartPort?: pulumi.Input<number>;
    }

    export interface DdosPolicyPortFilter {
        action?: pulumi.Input<string>;
        endPort?: pulumi.Input<number>;
        kind?: pulumi.Input<number>;
        protocol?: pulumi.Input<string>;
        startPort?: pulumi.Input<number>;
    }

    export interface DdosPolicyV2Acl {
        action: pulumi.Input<string>;
        dPortEnd: pulumi.Input<number>;
        dPortStart: pulumi.Input<number>;
        forwardProtocol: pulumi.Input<string>;
        priority: pulumi.Input<number>;
        sPortEnd: pulumi.Input<number>;
        sPortStart: pulumi.Input<number>;
    }

    export interface DdosPolicyV2BlackWhiteIp {
        ip: pulumi.Input<string>;
        ipType: pulumi.Input<string>;
    }

    export interface DdosPolicyV2DdosConnectLimit {
        badConnThreshold: pulumi.Input<number>;
        connTimeout: pulumi.Input<number>;
        dstConnLimit: pulumi.Input<number>;
        dstNewLimit: pulumi.Input<number>;
        nullConnEnable: pulumi.Input<number>;
        sdConnLimit: pulumi.Input<number>;
        sdNewLimit: pulumi.Input<number>;
        synLimit: pulumi.Input<number>;
        synRate: pulumi.Input<number>;
    }

    export interface DdosPolicyV2DdosGeoIpBlockConfig {
        action: pulumi.Input<string>;
        areaLists: pulumi.Input<pulumi.Input<number>[]>;
        regionType: pulumi.Input<string>;
    }

    export interface DdosPolicyV2DdosSpeedLimitConfig {
        bandwidth: pulumi.Input<number>;
        dstPortList: pulumi.Input<string>;
        mode: pulumi.Input<number>;
        packetRate: pulumi.Input<number>;
        protocolList: pulumi.Input<string>;
    }

    export interface DdosPolicyV2PacketFilter {
        action: pulumi.Input<string>;
        dPortEnd: pulumi.Input<number>;
        dPortStart: pulumi.Input<number>;
        depth: pulumi.Input<number>;
        depth2: pulumi.Input<number>;
        isNot: pulumi.Input<number>;
        isNot2: pulumi.Input<number>;
        matchBegin: pulumi.Input<string>;
        matchBegin2: pulumi.Input<string>;
        matchLogic: pulumi.Input<string>;
        matchType: pulumi.Input<string>;
        matchType2: pulumi.Input<string>;
        offset: pulumi.Input<number>;
        offset2: pulumi.Input<number>;
        pktlenMax: pulumi.Input<number>;
        pktlenMin: pulumi.Input<number>;
        protocol: pulumi.Input<string>;
        sPortEnd: pulumi.Input<number>;
        sPortStart: pulumi.Input<number>;
        str: pulumi.Input<string>;
        str2: pulumi.Input<string>;
    }

    export interface DdosPolicyV2ProtocolBlockConfig {
        dropIcmp: pulumi.Input<number>;
        dropOther: pulumi.Input<number>;
        dropTcp: pulumi.Input<number>;
        dropUdp: pulumi.Input<number>;
    }

    export interface DdosPolicyV2WaterPrintConfig {
        listeners: pulumi.Input<pulumi.Input<inputs.Dayu.DdosPolicyV2WaterPrintConfigListener>[]>;
        offset: pulumi.Input<number>;
        openStatus: pulumi.Input<number>;
        verify: pulumi.Input<string>;
    }

    export interface DdosPolicyV2WaterPrintConfigListener {
        forwardProtocol: pulumi.Input<string>;
        frontendPort: pulumi.Input<number>;
        frontendPortEnd: pulumi.Input<number>;
    }

    export interface DdosPolicyWatermarkFilter {
        autoRemove?: pulumi.Input<boolean>;
        offset?: pulumi.Input<number>;
        openSwitch?: pulumi.Input<boolean>;
        tcpPortLists?: pulumi.Input<pulumi.Input<string>[]>;
        udpPortLists?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface DdosPolicyWatermarkKey {
        content?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        id?: pulumi.Input<string>;
        openSwitch?: pulumi.Input<boolean>;
    }

    export interface L4RuleSourceList {
        source: pulumi.Input<string>;
        weight: pulumi.Input<number>;
    }

    export interface L4RuleV2Rules {
        keepEnable: pulumi.Input<boolean>;
        keeptime: pulumi.Input<number>;
        lbType: pulumi.Input<number>;
        protocol: pulumi.Input<string>;
        region: pulumi.Input<number>;
        removeSwitch: pulumi.Input<boolean>;
        ruleName: pulumi.Input<string>;
        sourceLists: pulumi.Input<pulumi.Input<inputs.Dayu.L4RuleV2RulesSourceList>[]>;
        sourcePort: pulumi.Input<number>;
        sourceType: pulumi.Input<number>;
        virtualPort: pulumi.Input<number>;
    }

    export interface L4RuleV2RulesSourceList {
        source: pulumi.Input<string>;
        weight: pulumi.Input<number>;
    }

    export interface L7RuleV2Rule {
        ccEnable?: pulumi.Input<number>;
        certType?: pulumi.Input<number>;
        domain: pulumi.Input<string>;
        httpsToHttpEnable?: pulumi.Input<number>;
        keepEnable: pulumi.Input<number>;
        keeptime: pulumi.Input<number>;
        lbType: pulumi.Input<number>;
        protocol: pulumi.Input<string>;
        sourceLists: pulumi.Input<pulumi.Input<inputs.Dayu.L7RuleV2RuleSourceList>[]>;
        sourceType: pulumi.Input<number>;
        sslId?: pulumi.Input<string>;
    }

    export interface L7RuleV2RuleSourceList {
        source: pulumi.Input<string>;
        weight: pulumi.Input<number>;
    }
}

export namespace Dbbrain {
    export interface GetSlowLogTopSqlsSchemaList {
        schema: string;
    }

    export interface GetSlowLogTopSqlsSchemaListArgs {
        schema: pulumi.Input<string>;
    }

    export interface ModifyDiagDbInstanceOperationInstanceConfs {
        dailyInspection?: pulumi.Input<string>;
        overviewDisplay?: pulumi.Input<string>;
    }

    export interface SqlFilterSessionToken {
        password: pulumi.Input<string>;
        user: pulumi.Input<string>;
    }

    export interface TdsqlAuditLogFilter {
        affectRows?: pulumi.Input<number>;
        dbNames?: pulumi.Input<pulumi.Input<string>[]>;
        execTime?: pulumi.Input<number>;
        hosts?: pulumi.Input<pulumi.Input<string>[]>;
        sentRows?: pulumi.Input<number>;
        users?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace Dc {
    export interface GetPublicDirectConnectTunnelRoutesFilter {
        name: string;
        values: string[];
    }

    export interface GetPublicDirectConnectTunnelRoutesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace Dcdb {
    export interface AccountPrivilegesAccount {
        host: pulumi.Input<string>;
        user: pulumi.Input<string>;
    }

    export interface AccountPrivilegesColumnPrivileges {
        column: pulumi.Input<string>;
        database: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        table: pulumi.Input<string>;
    }

    export interface AccountPrivilegesDatabasePrivileges {
        database: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface AccountPrivilegesTablePrivileges {
        database: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        table: pulumi.Input<string>;
    }

    export interface AccountPrivilegesViewPrivileges {
        database: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        view: pulumi.Input<string>;
    }

    export interface DbInstanceInitParam {
        param: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface DbInstanceResourceTag {
        tagKey: pulumi.Input<string>;
        tagValue: pulumi.Input<string>;
    }

    export interface DbParametersParams {
        param: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface GetUpgradePriceAddShardConfig {
        shardCount: number;
        shardMemory: number;
        shardStorage: number;
    }

    export interface GetUpgradePriceAddShardConfigArgs {
        shardCount: pulumi.Input<number>;
        shardMemory: pulumi.Input<number>;
        shardStorage: pulumi.Input<number>;
    }

    export interface GetUpgradePriceExpandShardConfig {
        shardInstanceIds: string[];
        shardMemory: number;
        shardNodeCount?: number;
        shardStorage: number;
    }

    export interface GetUpgradePriceExpandShardConfigArgs {
        shardInstanceIds: pulumi.Input<pulumi.Input<string>[]>;
        shardMemory: pulumi.Input<number>;
        shardNodeCount?: pulumi.Input<number>;
        shardStorage: pulumi.Input<number>;
    }

    export interface GetUpgradePriceSplitShardConfig {
        shardInstanceIds: string[];
        shardMemory: number;
        shardStorage: number;
        splitRate: number;
    }

    export interface GetUpgradePriceSplitShardConfigArgs {
        shardInstanceIds: pulumi.Input<pulumi.Input<string>[]>;
        shardMemory: pulumi.Input<number>;
        shardStorage: pulumi.Input<number>;
        splitRate: pulumi.Input<number>;
    }

    export interface HourdbInstanceResourceTag {
        tagKey: pulumi.Input<string>;
        tagValue: pulumi.Input<string>;
    }
}

export namespace Dcx {
    export interface ExtraConfigBfdInfo {
        interval?: pulumi.Input<number>;
        probeFailedTimes?: pulumi.Input<number>;
    }

    export interface ExtraConfigBgpPeer {
        asn?: pulumi.Input<number>;
        authKey?: pulumi.Input<string>;
    }

    export interface ExtraConfigNqaInfo {
        destinationIp?: pulumi.Input<string>;
        interval?: pulumi.Input<number>;
        probeFailedTimes?: pulumi.Input<number>;
    }

    export interface ExtraConfigRouteFilterPrefixes {
        cidr?: pulumi.Input<string>;
    }

}

export namespace Deprecatedalb {
    export interface ServerAttachmentBackend {
        instanceId: pulumi.Input<string>;
        port: pulumi.Input<number>;
        weight?: pulumi.Input<number>;
    }
}

export namespace Deprecatedavailability {
}

export namespace Deprecatedcontainer {
}

export namespace Deprecatedeip {
    export interface GetInstanceFilter {
        name: string;
        values: string[];
    }

    export interface GetInstanceFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace Deprecatedeks {
    export interface ClusterDnsServer {
        domain?: pulumi.Input<string>;
        servers?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterInternalLb {
        enabled: pulumi.Input<boolean>;
        subnetId?: pulumi.Input<string>;
    }

    export interface ClusterPublicLb {
        allowFromCidrs?: pulumi.Input<pulumi.Input<string>[]>;
        enabled: pulumi.Input<boolean>;
        extraParam?: pulumi.Input<string>;
        securityGroup?: pulumi.Input<string>;
        securityPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ContainerInstanceCbsVolume {
        diskId: pulumi.Input<string>;
        name: pulumi.Input<string>;
    }

    export interface ContainerInstanceContainer {
        args?: pulumi.Input<pulumi.Input<string>[]>;
        commands?: pulumi.Input<pulumi.Input<string>[]>;
        cpu?: pulumi.Input<number>;
        envVars?: pulumi.Input<{[key: string]: any}>;
        image: pulumi.Input<string>;
        livenessProbe?: pulumi.Input<inputs.Deprecatedeks.ContainerInstanceContainerLivenessProbe>;
        memory?: pulumi.Input<number>;
        name: pulumi.Input<string>;
        readinessProbe?: pulumi.Input<inputs.Deprecatedeks.ContainerInstanceContainerReadinessProbe>;
        volumeMounts?: pulumi.Input<pulumi.Input<inputs.Deprecatedeks.ContainerInstanceContainerVolumeMount>[]>;
        workingDir?: pulumi.Input<string>;
    }

    export interface ContainerInstanceContainerLivenessProbe {
        execCommands?: pulumi.Input<pulumi.Input<string>[]>;
        failureThreshold?: pulumi.Input<number>;
        httpGetPath?: pulumi.Input<string>;
        httpGetPort?: pulumi.Input<number>;
        httpGetScheme?: pulumi.Input<string>;
        initDelaySeconds?: pulumi.Input<number>;
        periodSeconds?: pulumi.Input<number>;
        successThreshold?: pulumi.Input<number>;
        tcpSocketPort?: pulumi.Input<number>;
        timeoutSeconds?: pulumi.Input<number>;
    }

    export interface ContainerInstanceContainerReadinessProbe {
        execCommands?: pulumi.Input<pulumi.Input<string>[]>;
        failureThreshold?: pulumi.Input<number>;
        httpGetPath?: pulumi.Input<string>;
        httpGetPort?: pulumi.Input<number>;
        httpGetScheme?: pulumi.Input<string>;
        initDelaySeconds?: pulumi.Input<number>;
        periodSeconds?: pulumi.Input<number>;
        successThreshold?: pulumi.Input<number>;
        tcpSocketPort?: pulumi.Input<number>;
        timeoutSeconds?: pulumi.Input<number>;
    }

    export interface ContainerInstanceContainerVolumeMount {
        mountPropagation?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        path: pulumi.Input<string>;
        readOnly?: pulumi.Input<boolean>;
        subPath?: pulumi.Input<string>;
        subPathExpr?: pulumi.Input<string>;
    }

    export interface ContainerInstanceImageRegistryCredential {
        name?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        server?: pulumi.Input<string>;
        username?: pulumi.Input<string>;
    }

    export interface ContainerInstanceInitContainer {
        args?: pulumi.Input<pulumi.Input<string>[]>;
        commands?: pulumi.Input<pulumi.Input<string>[]>;
        cpu?: pulumi.Input<number>;
        envVars?: pulumi.Input<{[key: string]: any}>;
        image: pulumi.Input<string>;
        memory?: pulumi.Input<number>;
        name: pulumi.Input<string>;
        volumeMounts?: pulumi.Input<pulumi.Input<inputs.Deprecatedeks.ContainerInstanceInitContainerVolumeMount>[]>;
        workingDir?: pulumi.Input<string>;
    }

    export interface ContainerInstanceInitContainerVolumeMount {
        mountPropagation?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        path: pulumi.Input<string>;
        readOnly?: pulumi.Input<boolean>;
        subPath?: pulumi.Input<string>;
        subPathExpr?: pulumi.Input<string>;
    }

    export interface ContainerInstanceNfsVolume {
        name: pulumi.Input<string>;
        path: pulumi.Input<string>;
        readOnly?: pulumi.Input<boolean>;
        server: pulumi.Input<string>;
    }

}

export namespace Deprecatedkubernetes {
    export interface AsScalingGroupAutoScalingConfig {
        configurationName: pulumi.Input<string>;
        dataDisks?: pulumi.Input<pulumi.Input<inputs.Deprecatedkubernetes.AsScalingGroupAutoScalingConfigDataDisk>[]>;
        enhancedMonitorService?: pulumi.Input<boolean>;
        enhancedSecurityService?: pulumi.Input<boolean>;
        instanceTags?: pulumi.Input<{[key: string]: any}>;
        instanceType: pulumi.Input<string>;
        internetChargeType?: pulumi.Input<string>;
        internetMaxBandwidthOut?: pulumi.Input<number>;
        keyIds?: pulumi.Input<pulumi.Input<string>[]>;
        password?: pulumi.Input<string>;
        projectId?: pulumi.Input<number>;
        publicIpAssigned?: pulumi.Input<boolean>;
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        systemDiskSize?: pulumi.Input<number>;
        systemDiskType?: pulumi.Input<string>;
    }

    export interface AsScalingGroupAutoScalingConfigDataDisk {
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
    }

    export interface AsScalingGroupAutoScalingGroup {
        defaultCooldown?: pulumi.Input<number>;
        desiredCapacity?: pulumi.Input<number>;
        forwardBalancerIds?: pulumi.Input<pulumi.Input<inputs.Deprecatedkubernetes.AsScalingGroupAutoScalingGroupForwardBalancerId>[]>;
        loadBalancerIds?: pulumi.Input<pulumi.Input<string>[]>;
        maxSize: pulumi.Input<number>;
        minSize: pulumi.Input<number>;
        projectId?: pulumi.Input<number>;
        retryPolicy?: pulumi.Input<string>;
        scalingGroupName: pulumi.Input<string>;
        subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
        tags?: pulumi.Input<{[key: string]: any}>;
        terminationPolicies?: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
        zones?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface AsScalingGroupAutoScalingGroupForwardBalancerId {
        listenerId: pulumi.Input<string>;
        loadBalancerId: pulumi.Input<string>;
        ruleId?: pulumi.Input<string>;
        targetAttributes: pulumi.Input<pulumi.Input<inputs.Deprecatedkubernetes.AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttribute>[]>;
    }

    export interface AsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttribute {
        port: pulumi.Input<number>;
        weight: pulumi.Input<number>;
    }
}

export namespace Deprecatedmonitor {
    export interface BindingObjectDimension {
        dimensionsJson: pulumi.Input<string>;
        uniqueId?: pulumi.Input<string>;
    }

    export interface PolicyGroupBindingObject {
        dimensionsJson?: pulumi.Input<string>;
        isShielded?: pulumi.Input<number>;
        region?: pulumi.Input<string>;
        uniqueId?: pulumi.Input<string>;
    }

    export interface PolicyGroupCondition {
        alarmNotifyPeriod: pulumi.Input<number>;
        alarmNotifyType: pulumi.Input<number>;
        calcPeriod?: pulumi.Input<number>;
        calcType?: pulumi.Input<number>;
        calcValue?: pulumi.Input<number>;
        continuePeriod?: pulumi.Input<number>;
        metricId: pulumi.Input<number>;
    }

    export interface PolicyGroupEventCondition {
        alarmNotifyPeriod: pulumi.Input<number>;
        alarmNotifyType: pulumi.Input<number>;
        eventId: pulumi.Input<number>;
    }

    export interface PolicyGroupReceiver {
        endTime?: pulumi.Input<number>;
        needSendNotice?: pulumi.Input<number>;
        notifyWays?: pulumi.Input<pulumi.Input<string>[]>;
        personInterval?: pulumi.Input<number>;
        receiveLanguage?: pulumi.Input<string>;
        receiverGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
        receiverType?: pulumi.Input<string>;
        receiverUserLists?: pulumi.Input<pulumi.Input<number>[]>;
        recoverNotifies?: pulumi.Input<pulumi.Input<string>[]>;
        roundInterval?: pulumi.Input<number>;
        roundNumber?: pulumi.Input<number>;
        sendFors?: pulumi.Input<pulumi.Input<string>[]>;
        startTime?: pulumi.Input<number>;
        uidLists?: pulumi.Input<pulumi.Input<number>[]>;
    }
}

export namespace Deprecatednats {
}

export namespace Deprecatedroute {
}

export namespace Deprecatedsecurity {
    export interface GroupRuleAddressTemplate {
        groupId?: pulumi.Input<string>;
        templateId?: pulumi.Input<string>;
    }

    export interface GroupRuleProtocolTemplate {
        groupId?: pulumi.Input<string>;
        templateId?: pulumi.Input<string>;
    }
}

export namespace Deprecatedvpc {
    export interface Ipv6EniAddressIpv6Address {
        address: pulumi.Input<string>;
        addressId?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        isWanIpBlocked?: pulumi.Input<boolean>;
        primary?: pulumi.Input<boolean>;
        state?: pulumi.Input<string>;
    }
}

export namespace Dlc {
    export interface AddUsersToWorkGroupAttachmentAddInfo {
        userIds: pulumi.Input<pulumi.Input<string>[]>;
        workGroupId: pulumi.Input<number>;
    }

    export interface AttachUserPolicyOperationPolicySet {
        catalog: pulumi.Input<string>;
        column?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        dataEngine?: pulumi.Input<string>;
        database: pulumi.Input<string>;
        function?: pulumi.Input<string>;
        id?: pulumi.Input<number>;
        mode?: pulumi.Input<string>;
        operation: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        policyType?: pulumi.Input<string>;
        reAuth?: pulumi.Input<boolean>;
        source?: pulumi.Input<string>;
        sourceId?: pulumi.Input<number>;
        sourceName?: pulumi.Input<string>;
        table: pulumi.Input<string>;
        view?: pulumi.Input<string>;
    }

    export interface AttachWorkGroupPolicyOperationPolicySet {
        catalog: pulumi.Input<string>;
        column?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        dataEngine?: pulumi.Input<string>;
        database: pulumi.Input<string>;
        function?: pulumi.Input<string>;
        id?: pulumi.Input<number>;
        mode?: pulumi.Input<string>;
        operation: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        policyType?: pulumi.Input<string>;
        reAuth?: pulumi.Input<boolean>;
        source?: pulumi.Input<string>;
        sourceId?: pulumi.Input<number>;
        sourceName?: pulumi.Input<string>;
        table: pulumi.Input<string>;
        view?: pulumi.Input<string>;
    }

    export interface BindWorkGroupsToUserAttachmentAddInfo {
        userId: pulumi.Input<string>;
        workGroupIds: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface DataEngineCrontabResumeSuspendStrategy {
        resumeTime?: pulumi.Input<string>;
        suspendStrategy?: pulumi.Input<number>;
        suspendTime?: pulumi.Input<string>;
    }

    export interface DataEngineDataEngineConfigPair {
        configItem: pulumi.Input<string>;
        configValue: pulumi.Input<string>;
    }

    export interface DataEngineSessionResourceTemplate {
        driverSize?: pulumi.Input<string>;
        executorMaxNumbers?: pulumi.Input<number>;
        executorNums?: pulumi.Input<number>;
        executorSize?: pulumi.Input<string>;
    }

    export interface DetachUserPolicyOperationPolicySet {
        catalog: pulumi.Input<string>;
        column?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        dataEngine?: pulumi.Input<string>;
        database: pulumi.Input<string>;
        function?: pulumi.Input<string>;
        id?: pulumi.Input<number>;
        mode?: pulumi.Input<string>;
        operation: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        policyType?: pulumi.Input<string>;
        reAuth?: pulumi.Input<boolean>;
        source?: pulumi.Input<string>;
        sourceId?: pulumi.Input<number>;
        sourceName?: pulumi.Input<string>;
        table: pulumi.Input<string>;
        view?: pulumi.Input<string>;
    }

    export interface DetachWorkGroupPolicyOperationPolicySet {
        catalog: pulumi.Input<string>;
        column?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        dataEngine?: pulumi.Input<string>;
        database: pulumi.Input<string>;
        function?: pulumi.Input<string>;
        id?: pulumi.Input<number>;
        mode?: pulumi.Input<string>;
        operation: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        policyType?: pulumi.Input<string>;
        reAuth?: pulumi.Input<boolean>;
        source?: pulumi.Input<string>;
        sourceId?: pulumi.Input<number>;
        sourceName?: pulumi.Input<string>;
        table: pulumi.Input<string>;
        view?: pulumi.Input<string>;
    }

    export interface GetCheckDataEngineConfigPairsValidityDataEngineConfigPair {
        configItem: string;
        configValue: string;
    }

    export interface GetCheckDataEngineConfigPairsValidityDataEngineConfigPairArgs {
        configItem: pulumi.Input<string>;
        configValue: pulumi.Input<string>;
    }

    export interface GetDescribeUserInfoFilter {
        name: string;
        values: string[];
    }

    export interface GetDescribeUserInfoFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetDescribeWorkGroupInfoFilter {
        name: string;
        values: string[];
    }

    export interface GetDescribeWorkGroupInfoFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface UpdateRowFilterOperationPolicy {
        catalog: pulumi.Input<string>;
        column?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        dataEngine?: pulumi.Input<string>;
        database: pulumi.Input<string>;
        function?: pulumi.Input<string>;
        id?: pulumi.Input<number>;
        mode?: pulumi.Input<string>;
        operation: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        policyType?: pulumi.Input<string>;
        reAuth?: pulumi.Input<boolean>;
        source?: pulumi.Input<string>;
        sourceId?: pulumi.Input<number>;
        sourceName?: pulumi.Input<string>;
        table: pulumi.Input<string>;
        view?: pulumi.Input<string>;
    }

    export interface UserDataEngineConfigDataEngineConfigPair {
        configItem: pulumi.Input<string>;
        configValue: pulumi.Input<string>;
    }

    export interface UserDataEngineConfigSessionResourceTemplate {
        driverSize?: pulumi.Input<string>;
        executorMaxNumbers?: pulumi.Input<number>;
        executorNums?: pulumi.Input<number>;
        executorSize?: pulumi.Input<string>;
    }
}

export namespace Dnats {
}

export namespace Dnspod {
    export interface GetDomainListTag {
        tagKey: string;
        tagValues: string[];
    }

    export interface GetDomainListTagArgs {
        tagKey: pulumi.Input<string>;
        tagValues: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace Domains {
}

export namespace Dts {
    export interface CompareTaskObjects {
        objectItems?: pulumi.Input<pulumi.Input<inputs.Dts.CompareTaskObjectsObjectItem>[]>;
        objectMode: pulumi.Input<string>;
    }

    export interface CompareTaskObjectsObjectItem {
        dbMode?: pulumi.Input<string>;
        dbName?: pulumi.Input<string>;
        schemaName?: pulumi.Input<string>;
        tableMode?: pulumi.Input<string>;
        tables?: pulumi.Input<pulumi.Input<inputs.Dts.CompareTaskObjectsObjectItemTable>[]>;
        viewMode?: pulumi.Input<string>;
        views?: pulumi.Input<pulumi.Input<inputs.Dts.CompareTaskObjectsObjectItemView>[]>;
    }

    export interface CompareTaskObjectsObjectItemTable {
        tableName?: pulumi.Input<string>;
    }

    export interface CompareTaskObjectsObjectItemView {
        viewName?: pulumi.Input<string>;
    }

    export interface GetMigrateJobsTagFilter {
        tagKey?: string;
        tagValue?: string;
    }

    export interface GetMigrateJobsTagFilterArgs {
        tagKey?: pulumi.Input<string>;
        tagValue?: pulumi.Input<string>;
    }

    export interface GetSyncJobsTagFilter {
        tagKey?: string;
        tagValue?: string;
    }

    export interface GetSyncJobsTagFilterArgs {
        tagKey?: pulumi.Input<string>;
        tagValue?: pulumi.Input<string>;
    }

    export interface MigrateJobDstInfo {
        accessType: pulumi.Input<string>;
        databaseType: pulumi.Input<string>;
        extraAttrs?: pulumi.Input<pulumi.Input<inputs.Dts.MigrateJobDstInfoExtraAttr>[]>;
        infos: pulumi.Input<pulumi.Input<inputs.Dts.MigrateJobDstInfoInfo>[]>;
        nodeType: pulumi.Input<string>;
        region: pulumi.Input<string>;
        supplier?: pulumi.Input<string>;
    }

    export interface MigrateJobDstInfoExtraAttr {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface MigrateJobDstInfoInfo {
        account?: pulumi.Input<string>;
        accountMode?: pulumi.Input<string>;
        accountRole?: pulumi.Input<string>;
        ccnGwId?: pulumi.Input<string>;
        cvmInstanceId?: pulumi.Input<string>;
        dbKernel?: pulumi.Input<string>;
        engineVersion?: pulumi.Input<string>;
        host?: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        role?: pulumi.Input<string>;
        subnetId?: pulumi.Input<string>;
        tmpSecretId?: pulumi.Input<string>;
        tmpSecretKey?: pulumi.Input<string>;
        tmpToken?: pulumi.Input<string>;
        uniqDcgId?: pulumi.Input<string>;
        uniqVpnGwId?: pulumi.Input<string>;
        user?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface MigrateJobMigrateOption {
        consistency?: pulumi.Input<inputs.Dts.MigrateJobMigrateOptionConsistency>;
        databaseTable: pulumi.Input<inputs.Dts.MigrateJobMigrateOptionDatabaseTable>;
        extraAttrs?: pulumi.Input<pulumi.Input<inputs.Dts.MigrateJobMigrateOptionExtraAttr>[]>;
        isDstReadOnly?: pulumi.Input<boolean>;
        isMigrateAccount?: pulumi.Input<boolean>;
        isOverrideRoot?: pulumi.Input<boolean>;
        migrateType?: pulumi.Input<string>;
    }

    export interface MigrateJobMigrateOptionConsistency {
        mode?: pulumi.Input<string>;
    }

    export interface MigrateJobMigrateOptionDatabaseTable {
        advancedObjects?: pulumi.Input<pulumi.Input<string>[]>;
        databases?: pulumi.Input<pulumi.Input<inputs.Dts.MigrateJobMigrateOptionDatabaseTableDatabase>[]>;
        objectMode: pulumi.Input<string>;
    }

    export interface MigrateJobMigrateOptionDatabaseTableDatabase {
        dbMode?: pulumi.Input<string>;
        dbName?: pulumi.Input<string>;
        eventMode?: pulumi.Input<string>;
        events?: pulumi.Input<pulumi.Input<string>[]>;
        functionMode?: pulumi.Input<string>;
        functions?: pulumi.Input<pulumi.Input<string>[]>;
        newDbName?: pulumi.Input<string>;
        newSchemaName?: pulumi.Input<string>;
        procedureMode?: pulumi.Input<string>;
        procedures?: pulumi.Input<pulumi.Input<string>[]>;
        roleMode?: pulumi.Input<string>;
        roles?: pulumi.Input<pulumi.Input<inputs.Dts.MigrateJobMigrateOptionDatabaseTableDatabaseRole>[]>;
        schemaMode?: pulumi.Input<string>;
        schemaName?: pulumi.Input<string>;
        tableMode?: pulumi.Input<string>;
        tables?: pulumi.Input<pulumi.Input<inputs.Dts.MigrateJobMigrateOptionDatabaseTableDatabaseTable>[]>;
        triggerMode?: pulumi.Input<string>;
        triggers?: pulumi.Input<pulumi.Input<string>[]>;
        viewMode?: pulumi.Input<string>;
        views?: pulumi.Input<pulumi.Input<inputs.Dts.MigrateJobMigrateOptionDatabaseTableDatabaseView>[]>;
    }

    export interface MigrateJobMigrateOptionDatabaseTableDatabaseRole {
        newRoleName?: pulumi.Input<string>;
        roleName?: pulumi.Input<string>;
    }

    export interface MigrateJobMigrateOptionDatabaseTableDatabaseTable {
        newTableName?: pulumi.Input<string>;
        tableEditMode?: pulumi.Input<string>;
        tableName?: pulumi.Input<string>;
        tmpTables?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface MigrateJobMigrateOptionDatabaseTableDatabaseView {
        newViewName?: pulumi.Input<string>;
        viewName?: pulumi.Input<string>;
    }

    export interface MigrateJobMigrateOptionExtraAttr {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface MigrateJobSrcInfo {
        accessType: pulumi.Input<string>;
        databaseType: pulumi.Input<string>;
        extraAttrs?: pulumi.Input<pulumi.Input<inputs.Dts.MigrateJobSrcInfoExtraAttr>[]>;
        infos: pulumi.Input<pulumi.Input<inputs.Dts.MigrateJobSrcInfoInfo>[]>;
        nodeType: pulumi.Input<string>;
        region: pulumi.Input<string>;
        supplier?: pulumi.Input<string>;
    }

    export interface MigrateJobSrcInfoExtraAttr {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface MigrateJobSrcInfoInfo {
        account?: pulumi.Input<string>;
        accountMode?: pulumi.Input<string>;
        accountRole?: pulumi.Input<string>;
        ccnGwId?: pulumi.Input<string>;
        cvmInstanceId?: pulumi.Input<string>;
        dbKernel?: pulumi.Input<string>;
        engineVersion?: pulumi.Input<string>;
        host?: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        role?: pulumi.Input<string>;
        subnetId?: pulumi.Input<string>;
        tmpSecretId?: pulumi.Input<string>;
        tmpSecretKey?: pulumi.Input<string>;
        tmpToken?: pulumi.Input<string>;
        uniqDcgId?: pulumi.Input<string>;
        uniqVpnGwId?: pulumi.Input<string>;
        user?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface MigrateServiceTag {
        tagKey?: pulumi.Input<string>;
        tagValue?: pulumi.Input<string>;
    }

    export interface SyncConfigDstInfo {
        account?: pulumi.Input<string>;
        accountMode?: pulumi.Input<string>;
        accountRole?: pulumi.Input<string>;
        ccnId?: pulumi.Input<string>;
        cvmInstanceId?: pulumi.Input<string>;
        databaseNetEnv?: pulumi.Input<string>;
        dbKernel?: pulumi.Input<string>;
        dbName?: pulumi.Input<string>;
        encryptConn?: pulumi.Input<string>;
        engineVersion?: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        ip?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        region?: pulumi.Input<string>;
        role?: pulumi.Input<string>;
        roleExternalId?: pulumi.Input<string>;
        subnetId?: pulumi.Input<string>;
        supplier?: pulumi.Input<string>;
        tmpSecretId?: pulumi.Input<string>;
        tmpSecretKey?: pulumi.Input<string>;
        tmpToken?: pulumi.Input<string>;
        uniqDcgId?: pulumi.Input<string>;
        uniqVpnGwId?: pulumi.Input<string>;
        user?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface SyncConfigObjects {
        advancedObjects?: pulumi.Input<pulumi.Input<string>[]>;
        databases?: pulumi.Input<pulumi.Input<inputs.Dts.SyncConfigObjectsDatabase>[]>;
        mode?: pulumi.Input<string>;
        onlineDdl?: pulumi.Input<inputs.Dts.SyncConfigObjectsOnlineDdl>;
    }

    export interface SyncConfigObjectsDatabase {
        dbMode?: pulumi.Input<string>;
        dbName?: pulumi.Input<string>;
        eventMode?: pulumi.Input<string>;
        events?: pulumi.Input<pulumi.Input<string>[]>;
        functionMode?: pulumi.Input<string>;
        functions?: pulumi.Input<pulumi.Input<string>[]>;
        newDbName?: pulumi.Input<string>;
        newSchemaName?: pulumi.Input<string>;
        procedureMode?: pulumi.Input<string>;
        procedures?: pulumi.Input<pulumi.Input<string>[]>;
        schemaName?: pulumi.Input<string>;
        tableMode?: pulumi.Input<string>;
        tables?: pulumi.Input<pulumi.Input<inputs.Dts.SyncConfigObjectsDatabaseTable>[]>;
        triggerMode?: pulumi.Input<string>;
        triggers?: pulumi.Input<pulumi.Input<string>[]>;
        viewMode?: pulumi.Input<string>;
        views?: pulumi.Input<pulumi.Input<inputs.Dts.SyncConfigObjectsDatabaseView>[]>;
    }

    export interface SyncConfigObjectsDatabaseTable {
        filterCondition?: pulumi.Input<string>;
        newTableName?: pulumi.Input<string>;
        tableName?: pulumi.Input<string>;
    }

    export interface SyncConfigObjectsDatabaseView {
        newViewName?: pulumi.Input<string>;
        viewName?: pulumi.Input<string>;
    }

    export interface SyncConfigObjectsOnlineDdl {
        status?: pulumi.Input<string>;
    }

    export interface SyncConfigOptions {
        addAdditionalColumn?: pulumi.Input<boolean>;
        conflictHandleOption?: pulumi.Input<inputs.Dts.SyncConfigOptionsConflictHandleOption>;
        conflictHandleType?: pulumi.Input<string>;
        ddlOptions?: pulumi.Input<pulumi.Input<inputs.Dts.SyncConfigOptionsDdlOption>[]>;
        dealOfExistSameTable?: pulumi.Input<string>;
        initType?: pulumi.Input<string>;
        opTypes?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SyncConfigOptionsConflictHandleOption {
        conditionColumn?: pulumi.Input<string>;
        conditionOperator?: pulumi.Input<string>;
        conditionOrderInSrcAndDst?: pulumi.Input<string>;
    }

    export interface SyncConfigOptionsDdlOption {
        ddlObject?: pulumi.Input<string>;
        ddlValues?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SyncConfigSrcInfo {
        account?: pulumi.Input<string>;
        accountMode?: pulumi.Input<string>;
        accountRole?: pulumi.Input<string>;
        ccnId?: pulumi.Input<string>;
        cvmInstanceId?: pulumi.Input<string>;
        databaseNetEnv?: pulumi.Input<string>;
        dbKernel?: pulumi.Input<string>;
        dbName?: pulumi.Input<string>;
        encryptConn?: pulumi.Input<string>;
        engineVersion?: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        ip?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        region?: pulumi.Input<string>;
        role?: pulumi.Input<string>;
        roleExternalId?: pulumi.Input<string>;
        subnetId?: pulumi.Input<string>;
        supplier?: pulumi.Input<string>;
        tmpSecretId?: pulumi.Input<string>;
        tmpSecretKey?: pulumi.Input<string>;
        tmpToken?: pulumi.Input<string>;
        uniqDcgId?: pulumi.Input<string>;
        uniqVpnGwId?: pulumi.Input<string>;
        user?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface SyncJobTag {
        tagKey?: pulumi.Input<string>;
        tagValue?: pulumi.Input<string>;
    }
}

export namespace Eb {
    export interface EventConnectorConnectionDescription {
        apiGwParams?: pulumi.Input<inputs.Eb.EventConnectorConnectionDescriptionApiGwParams>;
        ckafkaParams?: pulumi.Input<inputs.Eb.EventConnectorConnectionDescriptionCkafkaParams>;
        resourceDescription: pulumi.Input<string>;
    }

    export interface EventConnectorConnectionDescriptionApiGwParams {
        method: pulumi.Input<string>;
        protocol: pulumi.Input<string>;
    }

    export interface EventConnectorConnectionDescriptionCkafkaParams {
        offset: pulumi.Input<string>;
        topicName: pulumi.Input<string>;
    }

    export interface EventTargetTargetDescription {
        ckafkaTargetParams?: pulumi.Input<inputs.Eb.EventTargetTargetDescriptionCkafkaTargetParams>;
        esTargetParams?: pulumi.Input<inputs.Eb.EventTargetTargetDescriptionEsTargetParams>;
        resourceDescription: pulumi.Input<string>;
        scfParams?: pulumi.Input<inputs.Eb.EventTargetTargetDescriptionScfParams>;
    }

    export interface EventTargetTargetDescriptionCkafkaTargetParams {
        retryPolicy: pulumi.Input<inputs.Eb.EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy>;
        topicName: pulumi.Input<string>;
    }

    export interface EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy {
        maxRetryAttempts: pulumi.Input<number>;
        retryInterval: pulumi.Input<number>;
    }

    export interface EventTargetTargetDescriptionEsTargetParams {
        indexPrefix: pulumi.Input<string>;
        indexSuffixMode: pulumi.Input<string>;
        indexTemplateType?: pulumi.Input<string>;
        netMode: pulumi.Input<string>;
        outputMode: pulumi.Input<string>;
        rotationInterval: pulumi.Input<string>;
    }

    export interface EventTargetTargetDescriptionScfParams {
        batchEventCount?: pulumi.Input<number>;
        batchTimeout?: pulumi.Input<number>;
        enableBatchDelivery?: pulumi.Input<boolean>;
    }

    export interface EventTransformTransformation {
        etlFilter?: pulumi.Input<inputs.Eb.EventTransformTransformationEtlFilter>;
        extraction?: pulumi.Input<inputs.Eb.EventTransformTransformationExtraction>;
        transform?: pulumi.Input<inputs.Eb.EventTransformTransformationTransform>;
    }

    export interface EventTransformTransformationEtlFilter {
        filter: pulumi.Input<string>;
    }

    export interface EventTransformTransformationExtraction {
        extractionInputPath: pulumi.Input<string>;
        format: pulumi.Input<string>;
        textParams?: pulumi.Input<inputs.Eb.EventTransformTransformationExtractionTextParams>;
    }

    export interface EventTransformTransformationExtractionTextParams {
        regex?: pulumi.Input<string>;
        separator?: pulumi.Input<string>;
    }

    export interface EventTransformTransformationTransform {
        outputStructs: pulumi.Input<pulumi.Input<inputs.Eb.EventTransformTransformationTransformOutputStruct>[]>;
    }

    export interface EventTransformTransformationTransformOutputStruct {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
        valueType: pulumi.Input<string>;
    }

    export interface GetBusFilter {
        name: string;
        values: string[];
    }

    export interface GetBusFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetSearchFilter {
        filters?: inputs.Eb.GetSearchFilterFilter[];
        key?: string;
        operator?: string;
        type?: string;
        value?: string;
    }

    export interface GetSearchFilterArgs {
        filters?: pulumi.Input<pulumi.Input<inputs.Eb.GetSearchFilterFilterArgs>[]>;
        key?: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface GetSearchFilterFilter {
        key: string;
        operator: string;
        value: string;
    }

    export interface GetSearchFilterFilterArgs {
        key: pulumi.Input<string>;
        operator: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface PutEventsEventList {
        data: pulumi.Input<string>;
        source: pulumi.Input<string>;
        subject: pulumi.Input<string>;
        time?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }
}

export namespace Eip {
}

export namespace Eips {
}

export namespace Elastic {
    export interface GetPublicIpv6sFilter {
        name: string;
        values: string[];
    }

    export interface GetPublicIpv6sFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace Elasticsearch {
    export interface DiagnoseDiagnoseJobMeta {
        jobDescription?: pulumi.Input<string>;
        jobName?: pulumi.Input<string>;
        jobZhName?: pulumi.Input<string>;
    }

    export interface InstanceCosBackup {
        backupTime: pulumi.Input<string>;
        isAutoBackup: pulumi.Input<boolean>;
    }

    export interface InstanceEsAcl {
        blackLists?: pulumi.Input<pulumi.Input<string>[]>;
        whiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InstanceMultiZoneInfo {
        availabilityZone: pulumi.Input<string>;
        subnetId: pulumi.Input<string>;
    }

    export interface InstanceNodeInfoList {
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        encrypt?: pulumi.Input<boolean>;
        nodeNum: pulumi.Input<number>;
        nodeType: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface InstanceWebNodeTypeInfo {
        nodeNum: pulumi.Input<number>;
        nodeType: pulumi.Input<string>;
    }

    export interface LogstashOperationDuration {
        periods: pulumi.Input<pulumi.Input<number>[]>;
        timeEnd: pulumi.Input<string>;
        timeStart: pulumi.Input<string>;
        timeZone: pulumi.Input<string>;
    }

    export interface LogstashPipelinePipeline {
        batchDelay: pulumi.Input<number>;
        batchSize: pulumi.Input<number>;
        config: pulumi.Input<string>;
        pipelineDesc: pulumi.Input<string>;
        pipelineId: pulumi.Input<string>;
        queueCheckPointWrites: pulumi.Input<number>;
        queueMaxBytes: pulumi.Input<string>;
        queueType: pulumi.Input<string>;
        workers: pulumi.Input<number>;
    }
}

export namespace Emr {
    export interface ClusterPlacementInfo {
        projectId?: pulumi.Input<number>;
        zone: pulumi.Input<string>;
    }

    export interface ClusterPreExecutedFileSetting {
        args?: pulumi.Input<pulumi.Input<string>[]>;
        cosFileName?: pulumi.Input<string>;
        cosFileUri?: pulumi.Input<string>;
        cosSecretId?: pulumi.Input<string>;
        cosSecretKey?: pulumi.Input<string>;
        remark?: pulumi.Input<string>;
        runOrder?: pulumi.Input<number>;
        whenRun?: pulumi.Input<string>;
    }

    export interface ClusterResourceSpec {
        commonCount?: pulumi.Input<number>;
        commonResourceSpec?: pulumi.Input<inputs.Emr.ClusterResourceSpecCommonResourceSpec>;
        coreCount?: pulumi.Input<number>;
        coreResourceSpec?: pulumi.Input<inputs.Emr.ClusterResourceSpecCoreResourceSpec>;
        masterCount?: pulumi.Input<number>;
        masterResourceSpec?: pulumi.Input<inputs.Emr.ClusterResourceSpecMasterResourceSpec>;
        taskCount?: pulumi.Input<number>;
        taskResourceSpec?: pulumi.Input<inputs.Emr.ClusterResourceSpecTaskResourceSpec>;
    }

    export interface ClusterResourceSpecCommonResourceSpec {
        cpu?: pulumi.Input<number>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        memSize?: pulumi.Input<number>;
        multiDisks?: pulumi.Input<pulumi.Input<inputs.Emr.ClusterResourceSpecCommonResourceSpecMultiDisk>[]>;
        rootSize?: pulumi.Input<number>;
        spec?: pulumi.Input<string>;
        storageType?: pulumi.Input<number>;
    }

    export interface ClusterResourceSpecCommonResourceSpecMultiDisk {
        count?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        volume?: pulumi.Input<number>;
    }

    export interface ClusterResourceSpecCoreResourceSpec {
        cpu?: pulumi.Input<number>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        memSize?: pulumi.Input<number>;
        multiDisks?: pulumi.Input<pulumi.Input<inputs.Emr.ClusterResourceSpecCoreResourceSpecMultiDisk>[]>;
        rootSize?: pulumi.Input<number>;
        spec?: pulumi.Input<string>;
        storageType?: pulumi.Input<number>;
    }

    export interface ClusterResourceSpecCoreResourceSpecMultiDisk {
        count?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        volume?: pulumi.Input<number>;
    }

    export interface ClusterResourceSpecMasterResourceSpec {
        cpu?: pulumi.Input<number>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        memSize?: pulumi.Input<number>;
        multiDisks?: pulumi.Input<pulumi.Input<inputs.Emr.ClusterResourceSpecMasterResourceSpecMultiDisk>[]>;
        rootSize?: pulumi.Input<number>;
        spec?: pulumi.Input<string>;
        storageType?: pulumi.Input<number>;
    }

    export interface ClusterResourceSpecMasterResourceSpecMultiDisk {
        count?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        volume?: pulumi.Input<number>;
    }

    export interface ClusterResourceSpecTaskResourceSpec {
        cpu?: pulumi.Input<number>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        memSize?: pulumi.Input<number>;
        multiDisks?: pulumi.Input<pulumi.Input<inputs.Emr.ClusterResourceSpecTaskResourceSpecMultiDisk>[]>;
        rootSize?: pulumi.Input<number>;
        spec?: pulumi.Input<string>;
        storageType?: pulumi.Input<number>;
    }

    export interface ClusterResourceSpecTaskResourceSpecMultiDisk {
        count?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        volume?: pulumi.Input<number>;
    }

    export interface ClusterTerminateNodeInfo {
        cvmInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
        nodeFlag?: pulumi.Input<string>;
    }

    export interface GetAutoScaleRecordsFilter {
        key: string;
        value: string;
    }

    export interface GetAutoScaleRecordsFilterArgs {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

}

export namespace Eni {
    export interface InstanceIpv4 {
        description?: pulumi.Input<string>;
        ip: pulumi.Input<string>;
        primary: pulumi.Input<boolean>;
    }

    export interface InstanceIpv4Info {
        description?: pulumi.Input<string>;
        ip?: pulumi.Input<string>;
        primary?: pulumi.Input<boolean>;
    }

    export interface Ipv4AddressPrivateIpAddress {
        addressId?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        isWanIpBlocked?: pulumi.Input<boolean>;
        primary?: pulumi.Input<boolean>;
        privateIpAddress: pulumi.Input<string>;
        publicIpAddress?: pulumi.Input<string>;
        qosLevel?: pulumi.Input<string>;
        state?: pulumi.Input<string>;
    }

    export interface Ipv6AddressIpv6Address {
        address: pulumi.Input<string>;
        addressId?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        isWanIpBlocked?: pulumi.Input<boolean>;
        primary?: pulumi.Input<boolean>;
        state?: pulumi.Input<string>;
    }
}

export namespace Enis {
}

export namespace Events {
    export interface AuditTrackFilters {
        resourceFields?: pulumi.Input<pulumi.Input<inputs.Events.AuditTrackFiltersResourceField>[]>;
    }

    export interface AuditTrackFiltersResourceField {
        actionType: pulumi.Input<string>;
        eventNames: pulumi.Input<pulumi.Input<string>[]>;
        resourceType: pulumi.Input<string>;
    }

    export interface AuditTrackStorage {
        storageAccountId?: pulumi.Input<string>;
        storageAppId?: pulumi.Input<string>;
        storageName: pulumi.Input<string>;
        storagePrefix: pulumi.Input<string>;
        storageRegion: pulumi.Input<string>;
        storageType: pulumi.Input<string>;
    }
}

export namespace Gaap {
    export interface CustomHeaderHeader {
        headerName: pulumi.Input<string>;
        headerValue: pulumi.Input<string>;
    }

    export interface GetProxyGroupsFilter {
        name: string;
        values: string[];
    }

    export interface GetProxyGroupsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetProxyGroupsTagSet {
        tagKey: string;
        tagValue: string;
    }

    export interface GetProxyGroupsTagSetArgs {
        tagKey: pulumi.Input<string>;
        tagValue: pulumi.Input<string>;
    }

    export interface HttpRuleRealserver {
        id: pulumi.Input<string>;
        ip: pulumi.Input<string>;
        port: pulumi.Input<number>;
        weight?: pulumi.Input<number>;
    }

    export interface Layer4ListenerRealserverBindSet {
        id: pulumi.Input<string>;
        ip: pulumi.Input<string>;
        port: pulumi.Input<number>;
        weight?: pulumi.Input<number>;
    }
}

export namespace Ha {
}

export namespace Identity {
    export interface CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicy {
        addTime?: pulumi.Input<string>;
        rolePolicyDocument: pulumi.Input<string>;
        rolePolicyName: pulumi.Input<string>;
        rolePolicyType?: pulumi.Input<string>;
    }

}

export namespace Image {
    export interface GetInstanceFilter {
        name: string;
        values: string[];
    }

    export interface GetInstanceFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace Images {
}

export namespace Instance {
    export interface GetTypesFilter {
        name: string;
        values: string[];
    }

    export interface GetTypesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InstanceDataDisk {
        dataDiskId?: pulumi.Input<string>;
        dataDiskSize: pulumi.Input<number>;
        dataDiskSnapshotId?: pulumi.Input<string>;
        dataDiskType: pulumi.Input<string>;
        deleteWithInstance?: pulumi.Input<boolean>;
        deleteWithInstancePrepaid?: pulumi.Input<boolean>;
        encrypt?: pulumi.Input<boolean>;
        throughputPerformance?: pulumi.Input<number>;
    }
}

export namespace Instances {
}

export namespace Invite {
    export interface OrganizationMemberOperationAuthFile {
        name: pulumi.Input<string>;
        url: pulumi.Input<string>;
    }

    export interface OrganizationMemberOperationTag {
        tagKey: pulumi.Input<string>;
        tagValue: pulumi.Input<string>;
    }
}

export namespace Key {
}

export namespace Kms {
    export interface OverwriteWhiteBoxDeviceFingerprintsDeviceFingerprint {
        description?: pulumi.Input<string>;
        identity: pulumi.Input<string>;
    }
}

export namespace Kubernetes {
    export interface ClusterAttachmentWorkerConfig {
        dataDisks?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ClusterAttachmentWorkerConfigDataDisk>[]>;
        desiredPodNum?: pulumi.Input<number>;
        dockerGraphPath?: pulumi.Input<string>;
        extraArgs?: pulumi.Input<pulumi.Input<string>[]>;
        gpuArgs?: pulumi.Input<inputs.Kubernetes.ClusterAttachmentWorkerConfigGpuArgs>;
        /**
         * @deprecated This argument was deprecated, use `unschedulable` instead.
         */
        isSchedule?: pulumi.Input<boolean>;
        mountTarget?: pulumi.Input<string>;
        preStartUserScript?: pulumi.Input<string>;
        taints?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ClusterAttachmentWorkerConfigTaint>[]>;
        userData?: pulumi.Input<string>;
    }

    export interface ClusterAttachmentWorkerConfigDataDisk {
        autoFormatAndMount?: pulumi.Input<boolean>;
        diskPartition?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        fileSystem?: pulumi.Input<string>;
        mountTarget?: pulumi.Input<string>;
    }

    export interface ClusterAttachmentWorkerConfigGpuArgs {
        cuda?: pulumi.Input<{[key: string]: any}>;
        cudnn?: pulumi.Input<{[key: string]: any}>;
        customDriver?: pulumi.Input<{[key: string]: any}>;
        driver?: pulumi.Input<{[key: string]: any}>;
        migEnable?: pulumi.Input<boolean>;
    }

    export interface ClusterAttachmentWorkerConfigOverrides {
        dataDisks?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ClusterAttachmentWorkerConfigOverridesDataDisk>[]>;
        desiredPodNum?: pulumi.Input<number>;
        /**
         * @deprecated This argument was no longer supported by TencentCloud TKE.
         */
        dockerGraphPath?: pulumi.Input<string>;
        /**
         * @deprecated This argument was no longer supported by TencentCloud TKE.
         */
        extraArgs?: pulumi.Input<pulumi.Input<string>[]>;
        gpuArgs?: pulumi.Input<inputs.Kubernetes.ClusterAttachmentWorkerConfigOverridesGpuArgs>;
        /**
         * @deprecated This argument was deprecated, use `unschedulable` instead.
         */
        isSchedule?: pulumi.Input<boolean>;
        /**
         * @deprecated This argument was no longer supported by TencentCloud TKE.
         */
        mountTarget?: pulumi.Input<string>;
        /**
         * @deprecated This argument was no longer supported by TencentCloud TKE.
         */
        preStartUserScript?: pulumi.Input<string>;
        /**
         * @deprecated This argument was no longer supported by TencentCloud TKE.
         */
        userData?: pulumi.Input<string>;
    }

    export interface ClusterAttachmentWorkerConfigOverridesDataDisk {
        autoFormatAndMount?: pulumi.Input<boolean>;
        diskPartition?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        fileSystem?: pulumi.Input<string>;
        mountTarget?: pulumi.Input<string>;
    }

    export interface ClusterAttachmentWorkerConfigOverridesGpuArgs {
        cuda?: pulumi.Input<{[key: string]: any}>;
        cudnn?: pulumi.Input<{[key: string]: any}>;
        customDriver?: pulumi.Input<{[key: string]: any}>;
        driver?: pulumi.Input<{[key: string]: any}>;
        migEnable?: pulumi.Input<boolean>;
    }

    export interface ClusterAttachmentWorkerConfigTaint {
        effect?: pulumi.Input<string>;
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface ClusterAuthOptions {
        autoCreateDiscoveryAnonymousAuth?: pulumi.Input<boolean>;
        issuer?: pulumi.Input<string>;
        jwksUri?: pulumi.Input<string>;
        useTkeDefault?: pulumi.Input<boolean>;
    }

    export interface ClusterClusterAudit {
        deleteAuditLogAndTopic?: pulumi.Input<boolean>;
        enabled: pulumi.Input<boolean>;
        logSetId?: pulumi.Input<string>;
        topicId?: pulumi.Input<string>;
    }

    export interface ClusterClusterExtraArgs {
        kubeApiservers?: pulumi.Input<pulumi.Input<string>[]>;
        kubeControllerManagers?: pulumi.Input<pulumi.Input<string>[]>;
        kubeSchedulers?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterEventPersistence {
        deleteEventLogAndTopic?: pulumi.Input<boolean>;
        enabled: pulumi.Input<boolean>;
        logSetId?: pulumi.Input<string>;
        topicId?: pulumi.Input<string>;
    }

    export interface ClusterExistInstance {
        desiredPodNumbers?: pulumi.Input<pulumi.Input<number>[]>;
        instancesPara?: pulumi.Input<inputs.Kubernetes.ClusterExistInstanceInstancesPara>;
        nodeRole?: pulumi.Input<string>;
    }

    export interface ClusterExistInstanceInstancesPara {
        enhancedMonitorService?: pulumi.Input<boolean>;
        enhancedSecurityService?: pulumi.Input<boolean>;
        instanceIds: pulumi.Input<pulumi.Input<string>[]>;
        keyIds?: pulumi.Input<pulumi.Input<string>[]>;
        masterConfig?: pulumi.Input<inputs.Kubernetes.ClusterExistInstanceInstancesParaMasterConfig>;
        password?: pulumi.Input<string>;
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterExistInstanceInstancesParaMasterConfig {
        dataDisk?: pulumi.Input<inputs.Kubernetes.ClusterExistInstanceInstancesParaMasterConfigDataDisk>;
        desiredPodNumber?: pulumi.Input<number>;
        dockerGraphPath?: pulumi.Input<string>;
        extraArgs?: pulumi.Input<inputs.Kubernetes.ClusterExistInstanceInstancesParaMasterConfigExtraArgs>;
        gpuArgs?: pulumi.Input<inputs.Kubernetes.ClusterExistInstanceInstancesParaMasterConfigGpuArgs>;
        labels?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ClusterExistInstanceInstancesParaMasterConfigLabel>[]>;
        mountTarget?: pulumi.Input<string>;
        taints?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ClusterExistInstanceInstancesParaMasterConfigTaint>[]>;
        unschedulable?: pulumi.Input<number>;
        userScript?: pulumi.Input<string>;
    }

    export interface ClusterExistInstanceInstancesParaMasterConfigDataDisk {
        autoFormatAndMount?: pulumi.Input<boolean>;
        diskPartition?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        fileSystem?: pulumi.Input<string>;
        mountTarget?: pulumi.Input<string>;
    }

    export interface ClusterExistInstanceInstancesParaMasterConfigExtraArgs {
        kubelets?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterExistInstanceInstancesParaMasterConfigGpuArgs {
        cuda?: pulumi.Input<{[key: string]: any}>;
        cudnn?: pulumi.Input<{[key: string]: any}>;
        customDriver?: pulumi.Input<{[key: string]: any}>;
        driver?: pulumi.Input<{[key: string]: any}>;
        migEnable?: pulumi.Input<boolean>;
    }

    export interface ClusterExistInstanceInstancesParaMasterConfigLabel {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ClusterExistInstanceInstancesParaMasterConfigTaint {
        effect?: pulumi.Input<string>;
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface ClusterExtensionAddon {
        name: pulumi.Input<string>;
        param: pulumi.Input<string>;
    }

    export interface ClusterLogAgent {
        enabled: pulumi.Input<boolean>;
        kubeletRootDir?: pulumi.Input<string>;
    }

    export interface ClusterMasterAttachmentExtraArgs {
        etcds?: pulumi.Input<pulumi.Input<string>[]>;
        kubeApiServers?: pulumi.Input<pulumi.Input<string>[]>;
        kubeControllerManagers?: pulumi.Input<pulumi.Input<string>[]>;
        kubeSchedulers?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterMasterAttachmentMasterConfig {
        dataDisk?: pulumi.Input<inputs.Kubernetes.ClusterMasterAttachmentMasterConfigDataDisk>;
        desiredPodNumber?: pulumi.Input<number>;
        dockerGraphPath?: pulumi.Input<string>;
        extraArgs?: pulumi.Input<inputs.Kubernetes.ClusterMasterAttachmentMasterConfigExtraArgs>;
        gpuArgs?: pulumi.Input<inputs.Kubernetes.ClusterMasterAttachmentMasterConfigGpuArgs>;
        labels?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ClusterMasterAttachmentMasterConfigLabel>[]>;
        mountTarget?: pulumi.Input<string>;
        taints?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ClusterMasterAttachmentMasterConfigTaint>[]>;
        unschedulable?: pulumi.Input<number>;
        userScript?: pulumi.Input<string>;
    }

    export interface ClusterMasterAttachmentMasterConfigDataDisk {
        autoFormatAndMount?: pulumi.Input<boolean>;
        diskPartition?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        fileSystem?: pulumi.Input<string>;
        mountTarget?: pulumi.Input<string>;
    }

    export interface ClusterMasterAttachmentMasterConfigExtraArgs {
        kubelets?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterMasterAttachmentMasterConfigGpuArgs {
        cuda?: pulumi.Input<{[key: string]: any}>;
        cudnn?: pulumi.Input<{[key: string]: any}>;
        customDriver?: pulumi.Input<{[key: string]: any}>;
        driver?: pulumi.Input<{[key: string]: any}>;
        migEnable?: pulumi.Input<boolean>;
    }

    export interface ClusterMasterAttachmentMasterConfigLabel {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ClusterMasterAttachmentMasterConfigTaint {
        effect?: pulumi.Input<string>;
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface ClusterMasterConfig {
        availabilityZone?: pulumi.Input<string>;
        bandwidthPackageId?: pulumi.Input<string>;
        camRoleName?: pulumi.Input<string>;
        count?: pulumi.Input<number>;
        dataDisks?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ClusterMasterConfigDataDisk>[]>;
        desiredPodNum?: pulumi.Input<number>;
        disasterRecoverGroupIds?: pulumi.Input<string>;
        enhancedMonitorService?: pulumi.Input<boolean>;
        enhancedSecurityService?: pulumi.Input<boolean>;
        hostname?: pulumi.Input<string>;
        hpcClusterId?: pulumi.Input<string>;
        imgId?: pulumi.Input<string>;
        instanceChargeType?: pulumi.Input<string>;
        instanceChargeTypePrepaidPeriod?: pulumi.Input<number>;
        instanceChargeTypePrepaidRenewFlag?: pulumi.Input<string>;
        instanceName?: pulumi.Input<string>;
        instanceType: pulumi.Input<string>;
        internetChargeType?: pulumi.Input<string>;
        internetMaxBandwidthOut?: pulumi.Input<number>;
        keyIds?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        publicIpAssigned?: pulumi.Input<boolean>;
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        subnetId: pulumi.Input<string>;
        systemDiskSize?: pulumi.Input<number>;
        systemDiskType?: pulumi.Input<string>;
        userData?: pulumi.Input<string>;
    }

    export interface ClusterMasterConfigDataDisk {
        autoFormatAndMount?: pulumi.Input<boolean>;
        diskPartition?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        encrypt?: pulumi.Input<boolean>;
        fileSystem?: pulumi.Input<string>;
        kmsKeyId?: pulumi.Input<string>;
        mountTarget?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
    }

    export interface ClusterNodePoolGlobalConfig {
        expander?: pulumi.Input<string>;
        ignoreDaemonSetsUtilization?: pulumi.Input<boolean>;
        isScaleInEnabled?: pulumi.Input<boolean>;
        maxConcurrentScaleIn?: pulumi.Input<number>;
        scaleInDelay?: pulumi.Input<number>;
        scaleInUnneededTime?: pulumi.Input<number>;
        scaleInUtilizationThreshold?: pulumi.Input<number>;
        skipNodesWithLocalStorage?: pulumi.Input<boolean>;
        skipNodesWithSystemPods?: pulumi.Input<boolean>;
    }

    export interface ClusterResourceDeleteOption {
        deleteMode: pulumi.Input<string>;
        resourceType: pulumi.Input<string>;
        skipDeletionProtection?: pulumi.Input<boolean>;
    }

    export interface ClusterWorkerConfig {
        availabilityZone?: pulumi.Input<string>;
        bandwidthPackageId?: pulumi.Input<string>;
        camRoleName?: pulumi.Input<string>;
        count?: pulumi.Input<number>;
        dataDisks?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ClusterWorkerConfigDataDisk>[]>;
        desiredPodNum?: pulumi.Input<number>;
        disasterRecoverGroupIds?: pulumi.Input<string>;
        enhancedMonitorService?: pulumi.Input<boolean>;
        enhancedSecurityService?: pulumi.Input<boolean>;
        hostname?: pulumi.Input<string>;
        hpcClusterId?: pulumi.Input<string>;
        imgId?: pulumi.Input<string>;
        instanceChargeType?: pulumi.Input<string>;
        instanceChargeTypePrepaidPeriod?: pulumi.Input<number>;
        instanceChargeTypePrepaidRenewFlag?: pulumi.Input<string>;
        instanceName?: pulumi.Input<string>;
        instanceType: pulumi.Input<string>;
        internetChargeType?: pulumi.Input<string>;
        internetMaxBandwidthOut?: pulumi.Input<number>;
        keyIds?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        publicIpAssigned?: pulumi.Input<boolean>;
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        subnetId: pulumi.Input<string>;
        systemDiskSize?: pulumi.Input<number>;
        systemDiskType?: pulumi.Input<string>;
        userData?: pulumi.Input<string>;
    }

    export interface ClusterWorkerConfigDataDisk {
        autoFormatAndMount?: pulumi.Input<boolean>;
        diskPartition?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        encrypt?: pulumi.Input<boolean>;
        fileSystem?: pulumi.Input<string>;
        kmsKeyId?: pulumi.Input<string>;
        mountTarget?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
    }

    export interface ClusterWorkerInstancesList {
        failedReason?: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        instanceRole?: pulumi.Input<string>;
        instanceState?: pulumi.Input<string>;
        lanIp?: pulumi.Input<string>;
    }

    export interface EncryptionProtectionKmsConfiguration {
        keyId?: pulumi.Input<string>;
        kmsRegion?: pulumi.Input<string>;
    }

    export interface GetClusterInstancesFilter {
        name: string;
        values: string[];
    }

    export interface GetClusterInstancesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetClusterNativeNodePoolsFilter {
        name: string;
        values: string[];
    }

    export interface GetClusterNativeNodePoolsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetClusterNodePoolsFilter {
        name: string;
        values: string[];
    }

    export interface GetClusterNodePoolsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface HealthCheckPolicyRule {
        autoRepairEnabled: pulumi.Input<boolean>;
        enabled: pulumi.Input<boolean>;
        name: pulumi.Input<string>;
    }

    export interface NativeNodePoolAnnotation {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface NativeNodePoolLabel {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface NativeNodePoolNative {
        autoRepair?: pulumi.Input<boolean>;
        dataDisks?: pulumi.Input<pulumi.Input<inputs.Kubernetes.NativeNodePoolNativeDataDisk>[]>;
        enableAutoscaling?: pulumi.Input<boolean>;
        healthCheckPolicyName?: pulumi.Input<string>;
        hostNamePattern?: pulumi.Input<string>;
        instanceChargePrepaid?: pulumi.Input<inputs.Kubernetes.NativeNodePoolNativeInstanceChargePrepaid>;
        instanceChargeType: pulumi.Input<string>;
        instanceTypes: pulumi.Input<pulumi.Input<string>[]>;
        internetAccessible?: pulumi.Input<inputs.Kubernetes.NativeNodePoolNativeInternetAccessible>;
        keyIds?: pulumi.Input<pulumi.Input<string>[]>;
        kubeletArgs?: pulumi.Input<pulumi.Input<string>[]>;
        lifecycle?: pulumi.Input<inputs.Kubernetes.NativeNodePoolNativeLifecycle>;
        machineType?: pulumi.Input<string>;
        management?: pulumi.Input<inputs.Kubernetes.NativeNodePoolNativeManagement>;
        replicas?: pulumi.Input<number>;
        runtimeRootDir?: pulumi.Input<string>;
        scaling?: pulumi.Input<inputs.Kubernetes.NativeNodePoolNativeScaling>;
        securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
        subnetIds: pulumi.Input<pulumi.Input<string>[]>;
        systemDisk: pulumi.Input<inputs.Kubernetes.NativeNodePoolNativeSystemDisk>;
    }

    export interface NativeNodePoolNativeDataDisk {
        autoFormatAndMount: pulumi.Input<boolean>;
        diskPartition?: pulumi.Input<string>;
        diskSize: pulumi.Input<number>;
        diskType: pulumi.Input<string>;
        encrypt?: pulumi.Input<string>;
        fileSystem?: pulumi.Input<string>;
        kmsKeyId?: pulumi.Input<string>;
        mountTarget?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
        throughputPerformance?: pulumi.Input<number>;
    }

    export interface NativeNodePoolNativeInstanceChargePrepaid {
        period: pulumi.Input<number>;
        renewFlag?: pulumi.Input<string>;
    }

    export interface NativeNodePoolNativeInternetAccessible {
        bandwidthPackageId?: pulumi.Input<string>;
        chargeType: pulumi.Input<string>;
        maxBandwidthOut: pulumi.Input<number>;
    }

    export interface NativeNodePoolNativeLifecycle {
        postInit?: pulumi.Input<string>;
        preInit?: pulumi.Input<string>;
    }

    export interface NativeNodePoolNativeManagement {
        hosts?: pulumi.Input<pulumi.Input<string>[]>;
        kernelArgs?: pulumi.Input<pulumi.Input<string>[]>;
        nameservers?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface NativeNodePoolNativeScaling {
        createPolicy?: pulumi.Input<string>;
        maxReplicas?: pulumi.Input<number>;
        minReplicas?: pulumi.Input<number>;
    }

    export interface NativeNodePoolNativeSystemDisk {
        diskSize: pulumi.Input<number>;
        diskType: pulumi.Input<string>;
    }

    export interface NativeNodePoolTag {
        resourceType?: pulumi.Input<string>;
        tags?: pulumi.Input<pulumi.Input<inputs.Kubernetes.NativeNodePoolTagTag>[]>;
    }

    export interface NativeNodePoolTagTag {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface NativeNodePoolTaint {
        effect?: pulumi.Input<string>;
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface NodePoolAnnotation {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface NodePoolAutoScalingConfig {
        backupInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
        bandwidthPackageId?: pulumi.Input<string>;
        camRoleName?: pulumi.Input<string>;
        dataDisks?: pulumi.Input<pulumi.Input<inputs.Kubernetes.NodePoolAutoScalingConfigDataDisk>[]>;
        enhancedMonitorService?: pulumi.Input<boolean>;
        enhancedSecurityService?: pulumi.Input<boolean>;
        hostName?: pulumi.Input<string>;
        hostNameStyle?: pulumi.Input<string>;
        instanceChargeType?: pulumi.Input<string>;
        instanceChargeTypePrepaidPeriod?: pulumi.Input<number>;
        instanceChargeTypePrepaidRenewFlag?: pulumi.Input<string>;
        instanceName?: pulumi.Input<string>;
        instanceNameStyle?: pulumi.Input<string>;
        instanceType: pulumi.Input<string>;
        internetChargeType?: pulumi.Input<string>;
        internetMaxBandwidthOut?: pulumi.Input<number>;
        keyIds?: pulumi.Input<pulumi.Input<string>[]>;
        orderlySecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        password?: pulumi.Input<string>;
        publicIpAssigned?: pulumi.Input<boolean>;
        /**
         * @deprecated The order of elements in this field cannot be guaranteed. Use `orderly_security_group_ids` instead.
         */
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        spotInstanceType?: pulumi.Input<string>;
        spotMaxPrice?: pulumi.Input<string>;
        systemDiskSize?: pulumi.Input<number>;
        systemDiskType?: pulumi.Input<string>;
    }

    export interface NodePoolAutoScalingConfigDataDisk {
        deleteWithInstance?: pulumi.Input<boolean>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        encrypt?: pulumi.Input<boolean>;
        snapshotId?: pulumi.Input<string>;
        throughputPerformance?: pulumi.Input<number>;
    }

    export interface NodePoolNodeConfig {
        dataDisks?: pulumi.Input<pulumi.Input<inputs.Kubernetes.NodePoolNodeConfigDataDisk>[]>;
        desiredPodNum?: pulumi.Input<number>;
        dockerGraphPath?: pulumi.Input<string>;
        extraArgs?: pulumi.Input<pulumi.Input<string>[]>;
        gpuArgs?: pulumi.Input<inputs.Kubernetes.NodePoolNodeConfigGpuArgs>;
        isSchedule?: pulumi.Input<boolean>;
        mountTarget?: pulumi.Input<string>;
        preStartUserScript?: pulumi.Input<string>;
        userData?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfigDataDisk {
        autoFormatAndMount?: pulumi.Input<boolean>;
        diskPartition?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        fileSystem?: pulumi.Input<string>;
        mountTarget?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfigGpuArgs {
        cuda?: pulumi.Input<{[key: string]: any}>;
        cudnn?: pulumi.Input<{[key: string]: any}>;
        customDriver?: pulumi.Input<{[key: string]: any}>;
        driver?: pulumi.Input<{[key: string]: any}>;
        migEnable?: pulumi.Input<boolean>;
    }

    export interface NodePoolTaint {
        effect: pulumi.Input<string>;
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ScaleWorkerDataDisk {
        autoFormatAndMount?: pulumi.Input<boolean>;
        diskPartition?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        fileSystem?: pulumi.Input<string>;
        mountTarget?: pulumi.Input<string>;
    }

    export interface ScaleWorkerGpuArgs {
        cuda?: pulumi.Input<{[key: string]: any}>;
        cudnn?: pulumi.Input<{[key: string]: any}>;
        customDriver?: pulumi.Input<{[key: string]: any}>;
        driver?: pulumi.Input<{[key: string]: any}>;
        migEnable?: pulumi.Input<boolean>;
    }

    export interface ScaleWorkerTaint {
        effect?: pulumi.Input<string>;
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface ScaleWorkerWorkerConfig {
        availabilityZone?: pulumi.Input<string>;
        bandwidthPackageId?: pulumi.Input<string>;
        camRoleName?: pulumi.Input<string>;
        count?: pulumi.Input<number>;
        dataDisks?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ScaleWorkerWorkerConfigDataDisk>[]>;
        desiredPodNum?: pulumi.Input<number>;
        disasterRecoverGroupIds?: pulumi.Input<string>;
        enhancedMonitorService?: pulumi.Input<boolean>;
        enhancedSecurityService?: pulumi.Input<boolean>;
        hostname?: pulumi.Input<string>;
        hpcClusterId?: pulumi.Input<string>;
        imgId?: pulumi.Input<string>;
        instanceChargeType?: pulumi.Input<string>;
        instanceChargeTypePrepaidPeriod?: pulumi.Input<number>;
        instanceChargeTypePrepaidRenewFlag?: pulumi.Input<string>;
        instanceName?: pulumi.Input<string>;
        instanceType: pulumi.Input<string>;
        internetChargeType?: pulumi.Input<string>;
        internetMaxBandwidthOut?: pulumi.Input<number>;
        keyIds?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        publicIpAssigned?: pulumi.Input<boolean>;
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        subnetId: pulumi.Input<string>;
        systemDiskSize?: pulumi.Input<number>;
        systemDiskType?: pulumi.Input<string>;
        tags?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ScaleWorkerWorkerConfigTag>[]>;
        userData?: pulumi.Input<string>;
    }

    export interface ScaleWorkerWorkerConfigDataDisk {
        /**
         * @deprecated This argument was deprecated, use `data_disk` instead.
         */
        autoFormatAndMount?: pulumi.Input<boolean>;
        /**
         * @deprecated This argument was deprecated, use `data_disk` instead.
         */
        diskPartition?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        encrypt?: pulumi.Input<boolean>;
        /**
         * @deprecated This argument was deprecated, use `data_disk` instead.
         */
        fileSystem?: pulumi.Input<string>;
        kmsKeyId?: pulumi.Input<string>;
        /**
         * @deprecated This argument was deprecated, use `data_disk` instead.
         */
        mountTarget?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
    }

    export interface ScaleWorkerWorkerConfigTag {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ScaleWorkerWorkerInstancesList {
        failedReason?: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        instanceRole?: pulumi.Input<string>;
        instanceState?: pulumi.Input<string>;
        lanIp?: pulumi.Input<string>;
    }

    export interface ServerlessNodePoolServerlessNode {
        displayName?: pulumi.Input<string>;
        subnetId: pulumi.Input<string>;
    }

    export interface ServerlessNodePoolTaint {
        effect: pulumi.Input<string>;
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }
}

export namespace Lighthouse {
    export interface DiskAutoMountConfiguration {
        fileSystemType?: pulumi.Input<string>;
        instanceId: pulumi.Input<string>;
        mountPoint?: pulumi.Input<string>;
    }

    export interface DiskDiskChargePrepaid {
        period: pulumi.Input<number>;
        renewFlag?: pulumi.Input<string>;
        timeUnit?: pulumi.Input<string>;
    }

    export interface FirewallRuleFirewallRule {
        action?: pulumi.Input<string>;
        cidrBlock?: pulumi.Input<string>;
        firewallRuleDescription?: pulumi.Input<string>;
        port?: pulumi.Input<string>;
        protocol: pulumi.Input<string>;
    }

    export interface FirewallTemplateTemplateRule {
        action?: pulumi.Input<string>;
        cidrBlock?: pulumi.Input<string>;
        firewallRuleDescription?: pulumi.Input<string>;
        port?: pulumi.Input<string>;
        protocol: pulumi.Input<string>;
    }

    export interface GetBundleFilter {
        name: string;
        values: string[];
    }

    export interface GetBundleFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetDiskConfigFilter {
        name: string;
        values: string[];
    }

    export interface GetDiskConfigFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetDisksFilter {
        name: string;
        values: string[];
    }

    export interface GetDisksFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetModifyInstanceBundleFilter {
        name: string;
        values: string[];
    }

    export interface GetModifyInstanceBundleFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetResetInstanceBlueprintFilter {
        name: string;
        values: string[];
    }

    export interface GetResetInstanceBlueprintFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InstanceContainer {
        command?: pulumi.Input<string>;
        containerImage?: pulumi.Input<string>;
        containerName?: pulumi.Input<string>;
        envs?: pulumi.Input<pulumi.Input<inputs.Lighthouse.InstanceContainerEnv>[]>;
        publishPorts?: pulumi.Input<pulumi.Input<inputs.Lighthouse.InstanceContainerPublishPort>[]>;
        volumes?: pulumi.Input<pulumi.Input<inputs.Lighthouse.InstanceContainerVolume>[]>;
    }

    export interface InstanceContainerEnv {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface InstanceContainerPublishPort {
        containerPort: pulumi.Input<number>;
        hostPort: pulumi.Input<number>;
        ip?: pulumi.Input<string>;
        protocol?: pulumi.Input<string>;
    }

    export interface InstanceContainerVolume {
        containerPath: pulumi.Input<string>;
        hostPath: pulumi.Input<string>;
    }

    export interface InstanceLoginConfiguration {
        autoGeneratePassword: pulumi.Input<string>;
        password?: pulumi.Input<string>;
    }

    export interface RenewDiskRenewDiskChargePrepaid {
        curInstanceDeadline?: pulumi.Input<string>;
        period?: pulumi.Input<number>;
        renewFlag?: pulumi.Input<string>;
        timeUnit?: pulumi.Input<string>;
    }

    export interface RenewInstanceInstanceChargePrepaid {
        period: pulumi.Input<number>;
        renewFlag?: pulumi.Input<string>;
    }
}

export namespace Lite {
    export interface GetHbaseInstancesFilter {
        name: string;
        values: string[];
    }

    export interface GetHbaseInstancesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface HbaseInstanceTag {
        tagKey?: pulumi.Input<string>;
        tagValue?: pulumi.Input<string>;
    }

    export interface HbaseInstanceZoneSetting {
        nodeNum: pulumi.Input<number>;
        vpcSettings: pulumi.Input<inputs.Lite.HbaseInstanceZoneSettingVpcSettings>;
        zone: pulumi.Input<string>;
    }

    export interface HbaseInstanceZoneSettingVpcSettings {
        subnetId: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }
}

export namespace Mariadb {
    export interface AccountPrivilegesAccounts {
        host: pulumi.Input<string>;
        user: pulumi.Input<string>;
    }

    export interface AccountPrivilegesColumnPrivilege {
        column: pulumi.Input<string>;
        database: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        table: pulumi.Input<string>;
    }

    export interface AccountPrivilegesDatabasePrivilege {
        database: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface AccountPrivilegesFunctionPrivilege {
        database: pulumi.Input<string>;
        functionName: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface AccountPrivilegesProcedurePrivilege {
        database: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        procedure: pulumi.Input<string>;
    }

    export interface AccountPrivilegesTablePrivilege {
        database: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        table: pulumi.Input<string>;
    }

    export interface AccountPrivilegesViewPrivilege {
        database: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        view: pulumi.Input<string>;
    }

    export interface InstanceInitParam {
        param: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ParametersParam {
        param: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }
}

export namespace Mdl {
    export interface StreamLiveInputInputSetting {
        appName?: pulumi.Input<string>;
        delayTime?: pulumi.Input<number>;
        inputAddress?: pulumi.Input<string>;
        inputDomain?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        sourceType?: pulumi.Input<string>;
        sourceUrl?: pulumi.Input<string>;
        streamName?: pulumi.Input<string>;
        userName?: pulumi.Input<string>;
    }
}

export namespace Mongodb {
    export interface InstanceAccountAuthRole {
        mask: pulumi.Input<number>;
        namespace: pulumi.Input<string>;
    }

    export interface InstanceAddNodeList {
        role: pulumi.Input<string>;
        zone: pulumi.Input<string>;
    }

    export interface InstanceBackupDownloadTaskBackupSet {
        replicaSetId: pulumi.Input<string>;
    }

    export interface InstanceRemoveNodeList {
        nodeName: pulumi.Input<string>;
        role: pulumi.Input<string>;
        zone: pulumi.Input<string>;
    }

    export interface InstanceStandbyInstanceList {
        standbyInstanceId?: pulumi.Input<string>;
        standbyInstanceRegion?: pulumi.Input<string>;
    }

    export interface InstanceTransparentDataEncryptionKeyInfoList {
        createTime?: pulumi.Input<string>;
        keyId?: pulumi.Input<string>;
        keyName?: pulumi.Input<string>;
        keyOrigin?: pulumi.Input<string>;
        keyUsage?: pulumi.Input<string>;
        status?: pulumi.Input<string>;
    }
}

export namespace Monitor {
    export interface AlarmNoticeClsNotice {
        enable?: pulumi.Input<number>;
        logSetId: pulumi.Input<string>;
        region: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
    }

    export interface AlarmNoticeUrlNotice {
        endTime?: pulumi.Input<number>;
        isValid?: pulumi.Input<number>;
        startTime?: pulumi.Input<number>;
        url: pulumi.Input<string>;
        validationCode?: pulumi.Input<string>;
        weekdays?: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface AlarmNoticeUserNotice {
        endTime: pulumi.Input<number>;
        groupIds?: pulumi.Input<pulumi.Input<number>[]>;
        needPhoneArriveNotice?: pulumi.Input<number>;
        noticeWays: pulumi.Input<pulumi.Input<string>[]>;
        phoneCallType?: pulumi.Input<string>;
        phoneCircleInterval?: pulumi.Input<number>;
        phoneCircleTimes?: pulumi.Input<number>;
        phoneInnerInterval?: pulumi.Input<number>;
        phoneOrders?: pulumi.Input<pulumi.Input<number>[]>;
        receiverType: pulumi.Input<string>;
        startTime: pulumi.Input<number>;
        userIds?: pulumi.Input<pulumi.Input<number>[]>;
        weekdays?: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface AlarmPolicyConditions {
        isUnionRule?: pulumi.Input<number>;
        rules?: pulumi.Input<pulumi.Input<inputs.Monitor.AlarmPolicyConditionsRule>[]>;
    }

    export interface AlarmPolicyConditionsRule {
        continuePeriod?: pulumi.Input<number>;
        description?: pulumi.Input<string>;
        filter?: pulumi.Input<inputs.Monitor.AlarmPolicyConditionsRuleFilter>;
        isPowerNotice?: pulumi.Input<number>;
        metricName?: pulumi.Input<string>;
        noticeFrequency?: pulumi.Input<number>;
        operator?: pulumi.Input<string>;
        period?: pulumi.Input<number>;
        ruleType?: pulumi.Input<string>;
        unit?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface AlarmPolicyConditionsRuleFilter {
        dimensions?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface AlarmPolicyEventCondition {
        continuePeriod?: pulumi.Input<number>;
        description?: pulumi.Input<string>;
        filter?: pulumi.Input<inputs.Monitor.AlarmPolicyEventConditionFilter>;
        isPowerNotice?: pulumi.Input<number>;
        metricName?: pulumi.Input<string>;
        noticeFrequency?: pulumi.Input<number>;
        operator?: pulumi.Input<string>;
        period?: pulumi.Input<number>;
        ruleType?: pulumi.Input<string>;
        unit?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface AlarmPolicyEventConditionFilter {
        dimensions?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface AlarmPolicyFilter {
        dimensions?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface AlarmPolicyPolicyTag {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface AlarmPolicyTriggerTask {
        taskConfig: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface BindingReceiverReceivers {
        endTime?: pulumi.Input<number>;
        notifyWays: pulumi.Input<pulumi.Input<string>[]>;
        receiveLanguage?: pulumi.Input<string>;
        receiverGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
        receiverType: pulumi.Input<string>;
        receiverUserLists?: pulumi.Input<pulumi.Input<number>[]>;
        startTime?: pulumi.Input<number>;
    }

    export interface GetAlarmHistoryNamespace {
        monitorType: string;
        namespace: string;
    }

    export interface GetAlarmHistoryNamespaceArgs {
        monitorType: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
    }

    export interface GetAlarmPolicyTriggerTask {
        taskConfig: string;
        type: string;
    }

    export interface GetAlarmPolicyTriggerTaskArgs {
        taskConfig: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface GetDataDimension {
        name: string;
        value: string;
    }

    export interface GetDataDimensionArgs {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface GetProductEventDimension {
        name?: string;
        value?: string;
    }

    export interface GetProductEventDimensionArgs {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface GetStatisticDataCondition {
        key: string;
        operator: string;
        values: string[];
    }

    export interface GetStatisticDataConditionArgs {
        key: pulumi.Input<string>;
        operator: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetTmpInstancesTagFilter {
        key: string;
        value: string;
    }

    export interface GetTmpInstancesTagFilterArgs {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface GrafanaSsoAccountRole {
        organization: pulumi.Input<string>;
        role: pulumi.Input<string>;
    }

    export interface PolicyBindingObjectDimension {
        dimensionsJson: pulumi.Input<string>;
        uniqueId?: pulumi.Input<string>;
    }

    export interface TmpAlertGroupCustomReceiver {
        allowedTimeRanges?: pulumi.Input<pulumi.Input<inputs.Monitor.TmpAlertGroupCustomReceiverAllowedTimeRange>[]>;
        clusterId?: pulumi.Input<string>;
        clusterType?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        url?: pulumi.Input<string>;
    }

    export interface TmpAlertGroupCustomReceiverAllowedTimeRange {
        end?: pulumi.Input<string>;
        start?: pulumi.Input<string>;
    }

    export interface TmpAlertGroupRule {
        annotations?: pulumi.Input<{[key: string]: any}>;
        duration?: pulumi.Input<string>;
        expr?: pulumi.Input<string>;
        labels?: pulumi.Input<{[key: string]: any}>;
        ruleName?: pulumi.Input<string>;
        state?: pulumi.Input<number>;
    }

    export interface TmpAlertRuleAnnotation {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface TmpAlertRuleLabel {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface TmpTkeAlertPolicyAlertRule {
        clusterId?: pulumi.Input<string>;
        id?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        notification?: pulumi.Input<inputs.Monitor.TmpTkeAlertPolicyAlertRuleNotification>;
        rules: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeAlertPolicyAlertRuleRule>[]>;
        templateId?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface TmpTkeAlertPolicyAlertRuleNotification {
        alertManager?: pulumi.Input<inputs.Monitor.TmpTkeAlertPolicyAlertRuleNotificationAlertManager>;
        enabled: pulumi.Input<boolean>;
        notifyWays?: pulumi.Input<pulumi.Input<string>[]>;
        phoneArriveNotice?: pulumi.Input<boolean>;
        phoneCircleInterval?: pulumi.Input<number>;
        phoneCircleTimes?: pulumi.Input<number>;
        phoneInnerInterval?: pulumi.Input<number>;
        phoneNotifyOrders?: pulumi.Input<pulumi.Input<number>[]>;
        receiverGroups?: pulumi.Input<pulumi.Input<string>[]>;
        repeatInterval?: pulumi.Input<string>;
        timeRangeEnd?: pulumi.Input<string>;
        timeRangeStart?: pulumi.Input<string>;
        type: pulumi.Input<string>;
        webHook?: pulumi.Input<string>;
    }

    export interface TmpTkeAlertPolicyAlertRuleNotificationAlertManager {
        clusterId?: pulumi.Input<string>;
        clusterType?: pulumi.Input<string>;
        url: pulumi.Input<string>;
    }

    export interface TmpTkeAlertPolicyAlertRuleRule {
        annotations?: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeAlertPolicyAlertRuleRuleAnnotation>[]>;
        describe?: pulumi.Input<string>;
        for: pulumi.Input<string>;
        labels: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeAlertPolicyAlertRuleRuleLabel>[]>;
        name: pulumi.Input<string>;
        rule: pulumi.Input<string>;
        ruleState?: pulumi.Input<number>;
        template: pulumi.Input<string>;
    }

    export interface TmpTkeAlertPolicyAlertRuleRuleAnnotation {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface TmpTkeAlertPolicyAlertRuleRuleLabel {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface TmpTkeClusterAgentAgents {
        clusterId: pulumi.Input<string>;
        clusterName?: pulumi.Input<string>;
        clusterType: pulumi.Input<string>;
        enableExternal: pulumi.Input<boolean>;
        externalLabels?: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeClusterAgentAgentsExternalLabel>[]>;
        inClusterPodConfig?: pulumi.Input<inputs.Monitor.TmpTkeClusterAgentAgentsInClusterPodConfig>;
        notInstallBasicScrape?: pulumi.Input<boolean>;
        notScrape?: pulumi.Input<boolean>;
        openDefaultRecord?: pulumi.Input<boolean>;
        region: pulumi.Input<string>;
        status?: pulumi.Input<string>;
    }

    export interface TmpTkeClusterAgentAgentsExternalLabel {
        name: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface TmpTkeClusterAgentAgentsInClusterPodConfig {
        hostNet: pulumi.Input<boolean>;
        nodeSelectors?: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector>[]>;
        tolerations?: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeClusterAgentAgentsInClusterPodConfigToleration>[]>;
    }

    export interface TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface TmpTkeClusterAgentAgentsInClusterPodConfigToleration {
        effect?: pulumi.Input<string>;
        key?: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
    }

    export interface TmpTkeConfigPodMonitor {
        config: pulumi.Input<string>;
        name: pulumi.Input<string>;
        templateId?: pulumi.Input<string>;
    }

    export interface TmpTkeConfigRawJob {
        config: pulumi.Input<string>;
        name: pulumi.Input<string>;
        templateId?: pulumi.Input<string>;
    }

    export interface TmpTkeConfigServiceMonitor {
        config: pulumi.Input<string>;
        name: pulumi.Input<string>;
        templateId?: pulumi.Input<string>;
    }

    export interface TmpTkeGlobalNotificationNotification {
        alertManagers?: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeGlobalNotificationNotificationAlertManager>[]>;
        enabled: pulumi.Input<boolean>;
        notifyWays?: pulumi.Input<pulumi.Input<string>[]>;
        phoneArriveNotice?: pulumi.Input<boolean>;
        phoneCircleInterval?: pulumi.Input<number>;
        phoneCircleTimes?: pulumi.Input<number>;
        phoneInnerInterval?: pulumi.Input<number>;
        phoneNotifyOrders?: pulumi.Input<pulumi.Input<number>[]>;
        receiverGroups?: pulumi.Input<pulumi.Input<string>[]>;
        repeatInterval?: pulumi.Input<string>;
        timeRangeEnd?: pulumi.Input<string>;
        timeRangeStart?: pulumi.Input<string>;
        type: pulumi.Input<string>;
        webHook?: pulumi.Input<string>;
    }

    export interface TmpTkeGlobalNotificationNotificationAlertManager {
        clusterId?: pulumi.Input<string>;
        clusterType?: pulumi.Input<string>;
        url: pulumi.Input<string>;
    }

    export interface TmpTkeTemplateAttachmentTargets {
        clusterId?: pulumi.Input<string>;
        clusterName?: pulumi.Input<string>;
        clusterType?: pulumi.Input<string>;
        instanceId: pulumi.Input<string>;
        instanceName?: pulumi.Input<string>;
        region: pulumi.Input<string>;
        syncTime?: pulumi.Input<string>;
        version?: pulumi.Input<string>;
    }

    export interface TmpTkeTemplateTemplate {
        describe?: pulumi.Input<string>;
        isDefault?: pulumi.Input<boolean>;
        level: pulumi.Input<string>;
        name: pulumi.Input<string>;
        podMonitors?: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeTemplateTemplatePodMonitor>[]>;
        rawJobs?: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeTemplateTemplateRawJob>[]>;
        recordRules?: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeTemplateTemplateRecordRule>[]>;
        serviceMonitors?: pulumi.Input<pulumi.Input<inputs.Monitor.TmpTkeTemplateTemplateServiceMonitor>[]>;
        templateId?: pulumi.Input<string>;
        updateTime?: pulumi.Input<string>;
        version?: pulumi.Input<string>;
    }

    export interface TmpTkeTemplateTemplatePodMonitor {
        config: pulumi.Input<string>;
        name: pulumi.Input<string>;
        templateId?: pulumi.Input<string>;
    }

    export interface TmpTkeTemplateTemplateRawJob {
        config: pulumi.Input<string>;
        name: pulumi.Input<string>;
        templateId?: pulumi.Input<string>;
    }

    export interface TmpTkeTemplateTemplateRecordRule {
        config: pulumi.Input<string>;
        name: pulumi.Input<string>;
        templateId?: pulumi.Input<string>;
    }

    export interface TmpTkeTemplateTemplateServiceMonitor {
        config: pulumi.Input<string>;
        name: pulumi.Input<string>;
        templateId?: pulumi.Input<string>;
    }
}

export namespace Mps {
    export interface AdaptiveDynamicStreamingTemplateStreamInfo {
        audio: pulumi.Input<inputs.Mps.AdaptiveDynamicStreamingTemplateStreamInfoAudio>;
        removeAudio?: pulumi.Input<number>;
        removeVideo?: pulumi.Input<number>;
        video: pulumi.Input<inputs.Mps.AdaptiveDynamicStreamingTemplateStreamInfoVideo>;
    }

    export interface AdaptiveDynamicStreamingTemplateStreamInfoAudio {
        audioChannel?: pulumi.Input<number>;
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        sampleRate: pulumi.Input<number>;
    }

    export interface AdaptiveDynamicStreamingTemplateStreamInfoVideo {
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        fillType?: pulumi.Input<string>;
        fps: pulumi.Input<number>;
        gop?: pulumi.Input<number>;
        height?: pulumi.Input<number>;
        resolutionAdaptive?: pulumi.Input<string>;
        vcrf?: pulumi.Input<number>;
        width?: pulumi.Input<number>;
    }

    export interface AiAnalysisTemplateClassificationConfigure {
        switch: pulumi.Input<string>;
    }

    export interface AiAnalysisTemplateCoverConfigure {
        switch: pulumi.Input<string>;
    }

    export interface AiAnalysisTemplateFrameTagConfigure {
        switch: pulumi.Input<string>;
    }

    export interface AiAnalysisTemplateTagConfigure {
        switch: pulumi.Input<string>;
    }

    export interface AiRecognitionTemplateAsrFullTextConfigure {
        subtitleFormat?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
    }

    export interface AiRecognitionTemplateAsrWordsConfigure {
        labelSets?: pulumi.Input<pulumi.Input<string>[]>;
        switch: pulumi.Input<string>;
    }

    export interface AiRecognitionTemplateFaceConfigure {
        defaultLibraryLabelSets?: pulumi.Input<pulumi.Input<string>[]>;
        faceLibrary?: pulumi.Input<string>;
        score?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
        userDefineLibraryLabelSets?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface AiRecognitionTemplateOcrFullTextConfigure {
        switch: pulumi.Input<string>;
    }

    export interface AiRecognitionTemplateOcrWordsConfigure {
        labelSets?: pulumi.Input<pulumi.Input<string>[]>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplatePoliticalConfigure {
        asrReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplatePoliticalConfigureAsrReviewInfo>;
        imgReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplatePoliticalConfigureImgReviewInfo>;
        ocrReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplatePoliticalConfigureOcrReviewInfo>;
    }

    export interface ContentReviewTemplatePoliticalConfigureAsrReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplatePoliticalConfigureImgReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        labelSets?: pulumi.Input<pulumi.Input<string>[]>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplatePoliticalConfigureOcrReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplatePornConfigure {
        asrReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplatePornConfigureAsrReviewInfo>;
        imgReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplatePornConfigureImgReviewInfo>;
        ocrReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplatePornConfigureOcrReviewInfo>;
    }

    export interface ContentReviewTemplatePornConfigureAsrReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplatePornConfigureImgReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        labelSets?: pulumi.Input<pulumi.Input<string>[]>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplatePornConfigureOcrReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplateProhibitedConfigure {
        asrReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplateProhibitedConfigureAsrReviewInfo>;
        ocrReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplateProhibitedConfigureOcrReviewInfo>;
    }

    export interface ContentReviewTemplateProhibitedConfigureAsrReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplateProhibitedConfigureOcrReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplateTerrorismConfigure {
        imgReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplateTerrorismConfigureImgReviewInfo>;
        ocrReviewInfo: pulumi.Input<inputs.Mps.ContentReviewTemplateTerrorismConfigureOcrReviewInfo>;
    }

    export interface ContentReviewTemplateTerrorismConfigureImgReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        labelSets?: pulumi.Input<pulumi.Input<string>[]>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplateTerrorismConfigureOcrReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplateUserDefineConfigure {
        asrReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplateUserDefineConfigureAsrReviewInfo>;
        faceReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplateUserDefineConfigureFaceReviewInfo>;
        ocrReviewInfo?: pulumi.Input<inputs.Mps.ContentReviewTemplateUserDefineConfigureOcrReviewInfo>;
    }

    export interface ContentReviewTemplateUserDefineConfigureAsrReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        labelSets?: pulumi.Input<pulumi.Input<string>[]>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplateUserDefineConfigureFaceReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        labelSets?: pulumi.Input<pulumi.Input<string>[]>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ContentReviewTemplateUserDefineConfigureOcrReviewInfo {
        blockConfidence?: pulumi.Input<number>;
        labelSets?: pulumi.Input<pulumi.Input<string>[]>;
        reviewConfidence?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface EditMediaOperationFileInfo {
        endTimeOffset?: pulumi.Input<number>;
        inputInfo: pulumi.Input<inputs.Mps.EditMediaOperationFileInfoInputInfo>;
        startTimeOffset?: pulumi.Input<number>;
    }

    export interface EditMediaOperationFileInfoInputInfo {
        cosInputInfo?: pulumi.Input<inputs.Mps.EditMediaOperationFileInfoInputInfoCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.EditMediaOperationFileInfoInputInfoS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.EditMediaOperationFileInfoInputInfoUrlInputInfo>;
    }

    export interface EditMediaOperationFileInfoInputInfoCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface EditMediaOperationFileInfoInputInfoS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface EditMediaOperationFileInfoInputInfoUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface EditMediaOperationOutputConfig {
        container?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface EditMediaOperationOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.EditMediaOperationOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.EditMediaOperationOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface EditMediaOperationOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface EditMediaOperationOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface EditMediaOperationTaskNotifyConfig {
        awsSqs?: pulumi.Input<inputs.Mps.EditMediaOperationTaskNotifyConfigAwsSqs>;
        cmqModel?: pulumi.Input<string>;
        cmqRegion?: pulumi.Input<string>;
        notifyMode?: pulumi.Input<string>;
        notifyType?: pulumi.Input<string>;
        notifyUrl?: pulumi.Input<string>;
        queueName?: pulumi.Input<string>;
        topicName?: pulumi.Input<string>;
    }

    export interface EditMediaOperationTaskNotifyConfigAwsSqs {
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
        sqsQueueName: pulumi.Input<string>;
        sqsRegion: pulumi.Input<string>;
    }

    export interface FlowInputGroup {
        allowIpLists?: pulumi.Input<pulumi.Input<string>[]>;
        description?: pulumi.Input<string>;
        failOver?: pulumi.Input<string>;
        hlsPullSettings?: pulumi.Input<inputs.Mps.FlowInputGroupHlsPullSettings>;
        inputName: pulumi.Input<string>;
        protocol: pulumi.Input<string>;
        resilientStream?: pulumi.Input<inputs.Mps.FlowInputGroupResilientStream>;
        rtmpPullSettings?: pulumi.Input<inputs.Mps.FlowInputGroupRtmpPullSettings>;
        rtpSettings?: pulumi.Input<inputs.Mps.FlowInputGroupRtpSettings>;
        rtspPullSettings?: pulumi.Input<inputs.Mps.FlowInputGroupRtspPullSettings>;
        srtSettings?: pulumi.Input<inputs.Mps.FlowInputGroupSrtSettings>;
    }

    export interface FlowInputGroupHlsPullSettings {
        sourceAddresses: pulumi.Input<pulumi.Input<inputs.Mps.FlowInputGroupHlsPullSettingsSourceAddress>[]>;
    }

    export interface FlowInputGroupHlsPullSettingsSourceAddress {
        url: pulumi.Input<string>;
    }

    export interface FlowInputGroupResilientStream {
        bufferTime?: pulumi.Input<number>;
        enable?: pulumi.Input<boolean>;
    }

    export interface FlowInputGroupRtmpPullSettings {
        sourceAddresses: pulumi.Input<pulumi.Input<inputs.Mps.FlowInputGroupRtmpPullSettingsSourceAddress>[]>;
    }

    export interface FlowInputGroupRtmpPullSettingsSourceAddress {
        streamKey: pulumi.Input<string>;
        tcUrl: pulumi.Input<string>;
    }

    export interface FlowInputGroupRtpSettings {
        fec?: pulumi.Input<string>;
        idleTimeout?: pulumi.Input<number>;
    }

    export interface FlowInputGroupRtspPullSettings {
        sourceAddresses: pulumi.Input<pulumi.Input<inputs.Mps.FlowInputGroupRtspPullSettingsSourceAddress>[]>;
    }

    export interface FlowInputGroupRtspPullSettingsSourceAddress {
        url: pulumi.Input<string>;
    }

    export interface FlowInputGroupSrtSettings {
        latency?: pulumi.Input<number>;
        mode?: pulumi.Input<string>;
        passphrase?: pulumi.Input<string>;
        pbKeyLen?: pulumi.Input<number>;
        peerIdleTimeout?: pulumi.Input<number>;
        peerLatency?: pulumi.Input<number>;
        recvLatency?: pulumi.Input<number>;
        sourceAddresses?: pulumi.Input<pulumi.Input<inputs.Mps.FlowInputGroupSrtSettingsSourceAddress>[]>;
        streamId?: pulumi.Input<string>;
    }

    export interface FlowInputGroupSrtSettingsSourceAddress {
        ip: pulumi.Input<string>;
        port: pulumi.Input<number>;
    }

    export interface GetMediaMetaDataInputInfo {
        cosInputInfo?: inputs.Mps.GetMediaMetaDataInputInfoCosInputInfo;
        s3InputInfo?: inputs.Mps.GetMediaMetaDataInputInfoS3InputInfo;
        type: string;
        urlInputInfo?: inputs.Mps.GetMediaMetaDataInputInfoUrlInputInfo;
    }

    export interface GetMediaMetaDataInputInfoArgs {
        cosInputInfo?: pulumi.Input<inputs.Mps.GetMediaMetaDataInputInfoCosInputInfoArgs>;
        s3InputInfo?: pulumi.Input<inputs.Mps.GetMediaMetaDataInputInfoS3InputInfoArgs>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.GetMediaMetaDataInputInfoUrlInputInfoArgs>;
    }

    export interface GetMediaMetaDataInputInfoCosInputInfo {
        bucket: string;
        object: string;
        region: string;
    }

    export interface GetMediaMetaDataInputInfoCosInputInfoArgs {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface GetMediaMetaDataInputInfoS3InputInfo {
        s3Bucket: string;
        s3Object: string;
        s3Region: string;
        s3SecretId?: string;
        s3SecretKey?: string;
    }

    export interface GetMediaMetaDataInputInfoS3InputInfoArgs {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface GetMediaMetaDataInputInfoUrlInputInfo {
        url: string;
    }

    export interface GetMediaMetaDataInputInfoUrlInputInfoArgs {
        url: pulumi.Input<string>;
    }

    export interface InputInputGroup {
        allowIpLists?: pulumi.Input<pulumi.Input<string>[]>;
        description?: pulumi.Input<string>;
        failOver?: pulumi.Input<string>;
        hlsPullSettings?: pulumi.Input<inputs.Mps.InputInputGroupHlsPullSettings>;
        inputName: pulumi.Input<string>;
        protocol: pulumi.Input<string>;
        resilientStream?: pulumi.Input<inputs.Mps.InputInputGroupResilientStream>;
        rtmpPullSettings?: pulumi.Input<inputs.Mps.InputInputGroupRtmpPullSettings>;
        rtpSettings?: pulumi.Input<inputs.Mps.InputInputGroupRtpSettings>;
        rtspPullSettings?: pulumi.Input<inputs.Mps.InputInputGroupRtspPullSettings>;
        srtSettings?: pulumi.Input<inputs.Mps.InputInputGroupSrtSettings>;
    }

    export interface InputInputGroupHlsPullSettings {
        sourceAddresses: pulumi.Input<pulumi.Input<inputs.Mps.InputInputGroupHlsPullSettingsSourceAddress>[]>;
    }

    export interface InputInputGroupHlsPullSettingsSourceAddress {
        url: pulumi.Input<string>;
    }

    export interface InputInputGroupResilientStream {
        bufferTime?: pulumi.Input<number>;
        enable?: pulumi.Input<boolean>;
    }

    export interface InputInputGroupRtmpPullSettings {
        sourceAddresses: pulumi.Input<pulumi.Input<inputs.Mps.InputInputGroupRtmpPullSettingsSourceAddress>[]>;
    }

    export interface InputInputGroupRtmpPullSettingsSourceAddress {
        streamKey: pulumi.Input<string>;
        tcUrl: pulumi.Input<string>;
    }

    export interface InputInputGroupRtpSettings {
        fec?: pulumi.Input<string>;
        idleTimeout?: pulumi.Input<number>;
    }

    export interface InputInputGroupRtspPullSettings {
        sourceAddresses: pulumi.Input<pulumi.Input<inputs.Mps.InputInputGroupRtspPullSettingsSourceAddress>[]>;
    }

    export interface InputInputGroupRtspPullSettingsSourceAddress {
        url: pulumi.Input<string>;
    }

    export interface InputInputGroupSrtSettings {
        latency?: pulumi.Input<number>;
        mode?: pulumi.Input<string>;
        passphrase?: pulumi.Input<string>;
        pbKeyLen?: pulumi.Input<number>;
        peerIdleTimeout?: pulumi.Input<number>;
        peerLatency?: pulumi.Input<number>;
        recvLatency?: pulumi.Input<number>;
        sourceAddresses?: pulumi.Input<pulumi.Input<inputs.Mps.InputInputGroupSrtSettingsSourceAddress>[]>;
        streamId?: pulumi.Input<string>;
    }

    export interface InputInputGroupSrtSettingsSourceAddress {
        ip: pulumi.Input<string>;
        port: pulumi.Input<number>;
    }

    export interface OutputOutput {
        allowIpLists?: pulumi.Input<pulumi.Input<string>[]>;
        description: pulumi.Input<string>;
        maxConcurrent?: pulumi.Input<number>;
        outputName: pulumi.Input<string>;
        outputRegion: pulumi.Input<string>;
        protocol: pulumi.Input<string>;
        rtmpSettings?: pulumi.Input<inputs.Mps.OutputOutputRtmpSettings>;
        rtpSettings?: pulumi.Input<inputs.Mps.OutputOutputRtpSettings>;
        srtSettings?: pulumi.Input<inputs.Mps.OutputOutputSrtSettings>;
    }

    export interface OutputOutputRtmpSettings {
        chunkSize?: pulumi.Input<number>;
        destinations: pulumi.Input<pulumi.Input<inputs.Mps.OutputOutputRtmpSettingsDestination>[]>;
    }

    export interface OutputOutputRtmpSettingsDestination {
        streamKey: pulumi.Input<string>;
        url: pulumi.Input<string>;
    }

    export interface OutputOutputRtpSettings {
        destinations: pulumi.Input<pulumi.Input<inputs.Mps.OutputOutputRtpSettingsDestination>[]>;
        fec: pulumi.Input<string>;
        idleTimeout: pulumi.Input<number>;
    }

    export interface OutputOutputRtpSettingsDestination {
        ip: pulumi.Input<string>;
        port: pulumi.Input<number>;
    }

    export interface OutputOutputSrtSettings {
        destinations: pulumi.Input<pulumi.Input<inputs.Mps.OutputOutputSrtSettingsDestination>[]>;
        latency?: pulumi.Input<number>;
        mode?: pulumi.Input<string>;
        passphrase?: pulumi.Input<string>;
        pbKeyLen?: pulumi.Input<number>;
        peerIdleTimeout?: pulumi.Input<number>;
        peerLatency?: pulumi.Input<number>;
        recvLatency?: pulumi.Input<number>;
        streamId?: pulumi.Input<string>;
    }

    export interface OutputOutputSrtSettingsDestination {
        ip: pulumi.Input<string>;
        port: pulumi.Input<number>;
    }

    export interface ProcessLiveStreamOperationAiAnalysisTask {
        definition: pulumi.Input<number>;
        extendedParameter?: pulumi.Input<string>;
    }

    export interface ProcessLiveStreamOperationAiContentReviewTask {
        definition: pulumi.Input<number>;
    }

    export interface ProcessLiveStreamOperationAiQualityControlTask {
        channelExtPara?: pulumi.Input<string>;
        definition?: pulumi.Input<number>;
    }

    export interface ProcessLiveStreamOperationAiRecognitionTask {
        definition: pulumi.Input<number>;
    }

    export interface ProcessLiveStreamOperationOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ProcessLiveStreamOperationOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ProcessLiveStreamOperationOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ProcessLiveStreamOperationOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessLiveStreamOperationTaskNotifyConfig {
        cmqModel?: pulumi.Input<string>;
        cmqRegion?: pulumi.Input<string>;
        notifyType?: pulumi.Input<string>;
        notifyUrl?: pulumi.Input<string>;
        queueName?: pulumi.Input<string>;
        topicName?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationAiAnalysisTask {
        definition: pulumi.Input<number>;
        extendedParameter?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationAiContentReviewTask {
        definition: pulumi.Input<number>;
    }

    export interface ProcessMediaOperationAiQualityControlTask {
        channelExtPara?: pulumi.Input<string>;
        definition?: pulumi.Input<number>;
    }

    export interface ProcessMediaOperationAiRecognitionTask {
        definition: pulumi.Input<number>;
    }

    export interface ProcessMediaOperationInputInfo {
        cosInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationInputInfoCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationInputInfoS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationInputInfoUrlInputInfo>;
    }

    export interface ProcessMediaOperationInputInfoCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationInputInfoS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationInputInfoUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTask {
        adaptiveDynamicStreamingTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet>[]>;
        animatedGraphicTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet>[]>;
        imageSpriteTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet>[]>;
        sampleSnapshotTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet>[]>;
        snapshotByTimeOffsetTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet>[]>;
        transcodeTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSet>[]>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet {
        addOnSubtitles?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle>[]>;
        definition: pulumi.Input<number>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage>;
        segmentObjectName?: pulumi.Input<string>;
        subStreamObjectName?: pulumi.Input<string>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet>[]>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle {
        subtitle?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle>;
        type?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle {
        cosInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet {
        definition: pulumi.Input<number>;
        endTimeOffset: pulumi.Input<number>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage>;
        startTimeOffset: pulumi.Input<number>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet {
        definition: pulumi.Input<number>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage>;
        webVttObjectName?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet {
        definition: pulumi.Input<number>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet>[]>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet {
        definition: pulumi.Input<number>;
        extTimeOffsetSets?: pulumi.Input<pulumi.Input<string>[]>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage>;
        timeOffsetSets?: pulumi.Input<pulumi.Input<number>[]>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet>[]>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        headTailParameter?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter>;
        mosaicSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet>[]>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage>;
        overrideParameter?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter>;
        rawParameter?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter>;
        segmentObjectName?: pulumi.Input<string>;
        startTimeOffset?: pulumi.Input<number>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet>[]>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter {
        headSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet>[]>;
        tailSets?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet>[]>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet {
        cosInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet {
        cosInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet {
        coordinateOrigin?: pulumi.Input<string>;
        endTimeOffset?: pulumi.Input<number>;
        height?: pulumi.Input<string>;
        startTimeOffset?: pulumi.Input<number>;
        width?: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter {
        addOnSubtitles?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle>[]>;
        addonAudioStreams?: pulumi.Input<pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream>[]>;
        audioTemplate?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate>;
        container?: pulumi.Input<string>;
        removeAudio?: pulumi.Input<number>;
        removeVideo?: pulumi.Input<number>;
        stdExtInfo?: pulumi.Input<string>;
        subtitleTemplate?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate>;
        tehdConfig?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig>;
        videoTemplate?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle {
        subtitle?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle>;
        type?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle {
        cosInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream {
        cosInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate {
        audioChannel?: pulumi.Input<number>;
        bitrate?: pulumi.Input<number>;
        codec?: pulumi.Input<string>;
        sampleRate?: pulumi.Input<number>;
        streamSelects?: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate {
        fontAlpha?: pulumi.Input<number>;
        fontColor?: pulumi.Input<string>;
        fontSize?: pulumi.Input<string>;
        fontType?: pulumi.Input<string>;
        path?: pulumi.Input<string>;
        streamIndex?: pulumi.Input<number>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig {
        maxVideoBitrate?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate {
        bitrate?: pulumi.Input<number>;
        codec?: pulumi.Input<string>;
        contentAdaptStream?: pulumi.Input<number>;
        fillType?: pulumi.Input<string>;
        fps?: pulumi.Input<number>;
        gop?: pulumi.Input<number>;
        height?: pulumi.Input<number>;
        resolutionAdaptive?: pulumi.Input<string>;
        vcrf?: pulumi.Input<number>;
        width?: pulumi.Input<number>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter {
        audioTemplate?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate>;
        container: pulumi.Input<string>;
        removeAudio?: pulumi.Input<number>;
        removeVideo?: pulumi.Input<number>;
        tehdConfig?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig>;
        videoTemplate?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate {
        audioChannel?: pulumi.Input<number>;
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        sampleRate: pulumi.Input<number>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig {
        maxVideoBitrate?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate {
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        fillType?: pulumi.Input<string>;
        fps: pulumi.Input<number>;
        gop?: pulumi.Input<number>;
        height?: pulumi.Input<number>;
        resolutionAdaptive?: pulumi.Input<string>;
        vcrf?: pulumi.Input<number>;
        width?: pulumi.Input<number>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ProcessMediaOperationOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationTaskNotifyConfig {
        awsSqa?: pulumi.Input<inputs.Mps.ProcessMediaOperationTaskNotifyConfigAwsSqa>;
        cmqModel?: pulumi.Input<string>;
        cmqRegion?: pulumi.Input<string>;
        notifyMode?: pulumi.Input<string>;
        notifyType?: pulumi.Input<string>;
        notifyUrl?: pulumi.Input<string>;
        queueName?: pulumi.Input<string>;
        topicName?: pulumi.Input<string>;
    }

    export interface ProcessMediaOperationTaskNotifyConfigAwsSqa {
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
        sqaQueueName: pulumi.Input<string>;
        sqaRegion: pulumi.Input<string>;
    }

    export interface ScheduleActivity {
        activityPara?: pulumi.Input<inputs.Mps.ScheduleActivityActivityPara>;
        activityType: pulumi.Input<string>;
        reardriveIndices?: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface ScheduleActivityActivityPara {
        adaptiveDynamicStreamingTask?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTask>;
        aiAnalysisTask?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAiAnalysisTask>;
        aiContentReviewTask?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAiContentReviewTask>;
        aiRecognitionTask?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAiRecognitionTask>;
        animatedGraphicTask?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAnimatedGraphicTask>;
        imageSpriteTask?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaImageSpriteTask>;
        sampleSnapshotTask?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTask>;
        snapshotByTimeOffsetTask?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTask>;
        transcodeTask?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTask>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTask {
        addOnSubtitles?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle>[]>;
        definition: pulumi.Input<number>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage>;
        segmentObjectName?: pulumi.Input<string>;
        subStreamObjectName?: pulumi.Input<string>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet>[]>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle {
        subtitle?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle>;
        type?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle {
        cosInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAiAnalysisTask {
        definition: pulumi.Input<number>;
        extendedParameter?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAiContentReviewTask {
        definition: pulumi.Input<number>;
    }

    export interface ScheduleActivityActivityParaAiRecognitionTask {
        definition: pulumi.Input<number>;
    }

    export interface ScheduleActivityActivityParaAnimatedGraphicTask {
        definition: pulumi.Input<number>;
        endTimeOffset: pulumi.Input<number>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage>;
        startTimeOffset: pulumi.Input<number>;
    }

    export interface ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaImageSpriteTask {
        definition: pulumi.Input<number>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaImageSpriteTaskOutputStorage>;
        webVttObjectName?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaImageSpriteTaskOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTask {
        definition: pulumi.Input<number>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet>[]>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTask {
        definition: pulumi.Input<number>;
        extTimeOffsetSets?: pulumi.Input<pulumi.Input<string>[]>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet>[]>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTask {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        headTailParameter?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskHeadTailParameter>;
        mosaicSets?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskMosaicSet>[]>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOutputStorage>;
        overrideParameter?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameter>;
        rawParameter?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskRawParameter>;
        segmentObjectName?: pulumi.Input<string>;
        startTimeOffset?: pulumi.Input<number>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskWatermarkSet>[]>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskHeadTailParameter {
        headSets?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet>[]>;
        tailSets?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet>[]>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet {
        cosInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet {
        cosInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskMosaicSet {
        coordinateOrigin?: pulumi.Input<string>;
        endTimeOffset?: pulumi.Input<number>;
        height?: pulumi.Input<string>;
        startTimeOffset?: pulumi.Input<number>;
        width?: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameter {
        addOnSubtitles?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle>[]>;
        addonAudioStreams?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream>[]>;
        audioTemplate?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate>;
        container?: pulumi.Input<string>;
        removeAudio?: pulumi.Input<number>;
        removeVideo?: pulumi.Input<number>;
        stdExtInfo?: pulumi.Input<string>;
        subtitleTemplate?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate>;
        tehdConfig?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig>;
        videoTemplate?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle {
        subtitle?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle>;
        type?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle {
        cosInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream {
        cosInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate {
        audioChannel?: pulumi.Input<number>;
        bitrate?: pulumi.Input<number>;
        codec?: pulumi.Input<string>;
        sampleRate?: pulumi.Input<number>;
        streamSelects?: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate {
        fontAlpha?: pulumi.Input<number>;
        fontColor?: pulumi.Input<string>;
        fontSize?: pulumi.Input<string>;
        fontType?: pulumi.Input<string>;
        path?: pulumi.Input<string>;
        streamIndex?: pulumi.Input<number>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig {
        maxVideoBitrate?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate {
        bitrate?: pulumi.Input<number>;
        codec?: pulumi.Input<string>;
        contentAdaptStream?: pulumi.Input<number>;
        fillType?: pulumi.Input<string>;
        fps?: pulumi.Input<number>;
        gop?: pulumi.Input<number>;
        height?: pulumi.Input<number>;
        resolutionAdaptive?: pulumi.Input<string>;
        vcrf?: pulumi.Input<number>;
        width?: pulumi.Input<number>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskRawParameter {
        audioTemplate?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate>;
        container: pulumi.Input<string>;
        removeAudio?: pulumi.Input<number>;
        removeVideo?: pulumi.Input<number>;
        tehdConfig?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig>;
        videoTemplate?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate {
        audioChannel?: pulumi.Input<number>;
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        sampleRate: pulumi.Input<number>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig {
        maxVideoBitrate?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate {
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        fillType?: pulumi.Input<string>;
        fps: pulumi.Input<number>;
        gop?: pulumi.Input<number>;
        height?: pulumi.Input<number>;
        resolutionAdaptive?: pulumi.Input<string>;
        vcrf?: pulumi.Input<number>;
        width?: pulumi.Input<number>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface ScheduleOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.ScheduleOutputStorageCosOutputStorage>;
        s3OutputStorage?: pulumi.Input<inputs.Mps.ScheduleOutputStorageS3OutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface ScheduleOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ScheduleOutputStorageS3OutputStorage {
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleTaskNotifyConfig {
        awsSqs?: pulumi.Input<inputs.Mps.ScheduleTaskNotifyConfigAwsSqs>;
        cmqModel?: pulumi.Input<string>;
        cmqRegion?: pulumi.Input<string>;
        notifyMode?: pulumi.Input<string>;
        notifyType?: pulumi.Input<string>;
        notifyUrl?: pulumi.Input<string>;
        queueName?: pulumi.Input<string>;
        topicName?: pulumi.Input<string>;
    }

    export interface ScheduleTaskNotifyConfigAwsSqs {
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
        sqsQueueName: pulumi.Input<string>;
        sqsRegion: pulumi.Input<string>;
    }

    export interface ScheduleTrigger {
        awsS3FileUploadTrigger?: pulumi.Input<inputs.Mps.ScheduleTriggerAwsS3FileUploadTrigger>;
        cosFileUploadTrigger?: pulumi.Input<inputs.Mps.ScheduleTriggerCosFileUploadTrigger>;
        type: pulumi.Input<string>;
    }

    export interface ScheduleTriggerAwsS3FileUploadTrigger {
        awsSqs?: pulumi.Input<inputs.Mps.ScheduleTriggerAwsS3FileUploadTriggerAwsSqs>;
        dir?: pulumi.Input<string>;
        formats?: pulumi.Input<pulumi.Input<string>[]>;
        s3Bucket: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface ScheduleTriggerAwsS3FileUploadTriggerAwsSqs {
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
        sqsQueueName: pulumi.Input<string>;
        sqsRegion: pulumi.Input<string>;
    }

    export interface ScheduleTriggerCosFileUploadTrigger {
        bucket: pulumi.Input<string>;
        dir?: pulumi.Input<string>;
        formats?: pulumi.Input<pulumi.Input<string>[]>;
        region: pulumi.Input<string>;
    }

    export interface TranscodeTemplateAudioTemplate {
        audioChannel?: pulumi.Input<number>;
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        sampleRate: pulumi.Input<number>;
    }

    export interface TranscodeTemplateEnhanceConfig {
        videoEnhance?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhance>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhance {
        artifactRepair?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair>;
        colorEnhance?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance>;
        denoise?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceDenoise>;
        faceEnhance?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance>;
        frameRate?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate>;
        hdr?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceHdr>;
        imageQualityEnhance?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance>;
        lowLightEnhance?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance>;
        scratchRepair?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair>;
        sharpEnhance?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance>;
        superResolution?: pulumi.Input<inputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair {
        switch?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance {
        switch?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceDenoise {
        switch?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance {
        intensity?: pulumi.Input<number>;
        switch?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate {
        fps?: pulumi.Input<number>;
        switch?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceHdr {
        switch?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance {
        switch?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance {
        switch?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair {
        intensity?: pulumi.Input<number>;
        switch?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance {
        intensity?: pulumi.Input<number>;
        switch?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution {
        size?: pulumi.Input<number>;
        switch?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface TranscodeTemplateTehdConfig {
        maxVideoBitrate?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface TranscodeTemplateVideoTemplate {
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        fillType?: pulumi.Input<string>;
        fps: pulumi.Input<number>;
        gop?: pulumi.Input<number>;
        height?: pulumi.Input<number>;
        resolutionAdaptive?: pulumi.Input<string>;
        vcrf?: pulumi.Input<number>;
        width?: pulumi.Input<number>;
    }

    export interface WatermarkTemplateImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<string>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface WatermarkTemplateSvgTemplate {
        height?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface WatermarkTemplateTextTemplate {
        fontAlpha: pulumi.Input<number>;
        fontColor: pulumi.Input<string>;
        fontSize: pulumi.Input<string>;
        fontType: pulumi.Input<string>;
    }

    export interface WithdrawsWatermarkOperationInputInfo {
        cosInputInfo?: pulumi.Input<inputs.Mps.WithdrawsWatermarkOperationInputInfoCosInputInfo>;
        s3InputInfo?: pulumi.Input<inputs.Mps.WithdrawsWatermarkOperationInputInfoS3InputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.WithdrawsWatermarkOperationInputInfoUrlInputInfo>;
    }

    export interface WithdrawsWatermarkOperationInputInfoCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface WithdrawsWatermarkOperationInputInfoS3InputInfo {
        s3Bucket: pulumi.Input<string>;
        s3Object: pulumi.Input<string>;
        s3Region: pulumi.Input<string>;
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
    }

    export interface WithdrawsWatermarkOperationInputInfoUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface WithdrawsWatermarkOperationTaskNotifyConfig {
        awsSqs?: pulumi.Input<inputs.Mps.WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs>;
        cmqModel?: pulumi.Input<string>;
        cmqRegion?: pulumi.Input<string>;
        notifyMode?: pulumi.Input<string>;
        notifyType?: pulumi.Input<string>;
        notifyUrl?: pulumi.Input<string>;
        queueName?: pulumi.Input<string>;
        topicName?: pulumi.Input<string>;
    }

    export interface WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs {
        s3SecretId?: pulumi.Input<string>;
        s3SecretKey?: pulumi.Input<string>;
        sqsQueueName: pulumi.Input<string>;
        sqsRegion: pulumi.Input<string>;
    }

    export interface WorkflowAiAnalysisTask {
        definition: pulumi.Input<number>;
        extendedParameter?: pulumi.Input<string>;
    }

    export interface WorkflowAiContentReviewTask {
        definition: pulumi.Input<number>;
    }

    export interface WorkflowAiRecognitionTask {
        definition: pulumi.Input<number>;
    }

    export interface WorkflowMediaProcessTask {
        adaptiveDynamicStreamingTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet>[]>;
        animatedGraphicTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSet>[]>;
        imageSpriteTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskImageSpriteTaskSet>[]>;
        sampleSnapshotTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSet>[]>;
        snapshotByTimeOffsetTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet>[]>;
        transcodeTaskSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSet>[]>;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet {
        definition: pulumi.Input<number>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage>;
        segmentObjectName?: pulumi.Input<string>;
        subStreamObjectName?: pulumi.Input<string>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet>[]>;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskAnimatedGraphicTaskSet {
        definition: pulumi.Input<number>;
        endTimeOffset: pulumi.Input<number>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage>;
        startTimeOffset: pulumi.Input<number>;
    }

    export interface WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskImageSpriteTaskSet {
        definition: pulumi.Input<number>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage>;
        webVttObjectName?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSet {
        definition: pulumi.Input<number>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet>[]>;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet {
        definition: pulumi.Input<number>;
        extTimeOffsetSets?: pulumi.Input<pulumi.Input<string>[]>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage>;
        timeOffsetSets?: pulumi.Input<pulumi.Input<number>[]>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet>[]>;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        headTailParameter?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter>;
        mosaicSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet>[]>;
        objectNumberFormat?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat>;
        outputObjectPath?: pulumi.Input<string>;
        outputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage>;
        overrideParameter?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter>;
        rawParameter?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetRawParameter>;
        segmentObjectName?: pulumi.Input<string>;
        startTimeOffset?: pulumi.Input<number>;
        watermarkSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet>[]>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter {
        headSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet>[]>;
        tailSets?: pulumi.Input<pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet>[]>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet {
        cosInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet {
        cosInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet {
        coordinateOrigin?: pulumi.Input<string>;
        endTimeOffset?: pulumi.Input<number>;
        height?: pulumi.Input<string>;
        startTimeOffset?: pulumi.Input<number>;
        width?: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat {
        increment?: pulumi.Input<number>;
        initialValue?: pulumi.Input<number>;
        minLength?: pulumi.Input<number>;
        placeHolder?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter {
        audioTemplate?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate>;
        container?: pulumi.Input<string>;
        removeAudio?: pulumi.Input<number>;
        removeVideo?: pulumi.Input<number>;
        subtitleTemplate?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate>;
        tehdConfig?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig>;
        videoTemplate?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate {
        audioChannel?: pulumi.Input<number>;
        bitrate?: pulumi.Input<number>;
        codec?: pulumi.Input<string>;
        sampleRate?: pulumi.Input<number>;
        streamSelects?: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate {
        fontAlpha?: pulumi.Input<number>;
        fontColor?: pulumi.Input<string>;
        fontSize?: pulumi.Input<string>;
        fontType?: pulumi.Input<string>;
        path?: pulumi.Input<string>;
        streamIndex?: pulumi.Input<number>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig {
        maxVideoBitrate?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate {
        bitrate?: pulumi.Input<number>;
        codec?: pulumi.Input<string>;
        contentAdaptStream?: pulumi.Input<number>;
        fillType?: pulumi.Input<string>;
        fps?: pulumi.Input<number>;
        gop?: pulumi.Input<number>;
        height?: pulumi.Input<number>;
        resolutionAdaptive?: pulumi.Input<string>;
        vcrf?: pulumi.Input<number>;
        width?: pulumi.Input<number>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetRawParameter {
        audioTemplate?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate>;
        container: pulumi.Input<string>;
        removeAudio?: pulumi.Input<number>;
        removeVideo?: pulumi.Input<number>;
        tehdConfig?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig>;
        videoTemplate?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate {
        audioChannel?: pulumi.Input<number>;
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        sampleRate: pulumi.Input<number>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig {
        maxVideoBitrate?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate {
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        fillType?: pulumi.Input<string>;
        fps: pulumi.Input<number>;
        gop?: pulumi.Input<number>;
        height?: pulumi.Input<number>;
        resolutionAdaptive?: pulumi.Input<string>;
        vcrf?: pulumi.Input<number>;
        width?: pulumi.Input<number>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet {
        definition: pulumi.Input<number>;
        endTimeOffset?: pulumi.Input<number>;
        rawParameter?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter {
        coordinateOrigin?: pulumi.Input<string>;
        imageTemplate?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate>;
        type: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent>;
        repeatType?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        cosInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo>;
        type: pulumi.Input<string>;
        urlInputInfo?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        bucket: pulumi.Input<string>;
        object: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        url: pulumi.Input<string>;
    }

    export interface WorkflowOutputStorage {
        cosOutputStorage?: pulumi.Input<inputs.Mps.WorkflowOutputStorageCosOutputStorage>;
        type: pulumi.Input<string>;
    }

    export interface WorkflowOutputStorageCosOutputStorage {
        bucket?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface WorkflowTaskNotifyConfig {
        cmqModel?: pulumi.Input<string>;
        cmqRegion?: pulumi.Input<string>;
        notifyMode?: pulumi.Input<string>;
        notifyType?: pulumi.Input<string>;
        notifyUrl?: pulumi.Input<string>;
        queueName?: pulumi.Input<string>;
        topicName?: pulumi.Input<string>;
    }

    export interface WorkflowTrigger {
        cosFileUploadTrigger?: pulumi.Input<inputs.Mps.WorkflowTriggerCosFileUploadTrigger>;
        type: pulumi.Input<string>;
    }

    export interface WorkflowTriggerCosFileUploadTrigger {
        bucket: pulumi.Input<string>;
        dir?: pulumi.Input<string>;
        formats?: pulumi.Input<pulumi.Input<string>[]>;
        region: pulumi.Input<string>;
    }
}

export namespace Mysql {
    export interface AuditLogFileFilter {
        affectRows?: pulumi.Input<number>;
        dbNames?: pulumi.Input<pulumi.Input<string>[]>;
        execTime?: pulumi.Input<number>;
        hosts?: pulumi.Input<pulumi.Input<string>[]>;
        policyNames?: pulumi.Input<pulumi.Input<string>[]>;
        sql?: pulumi.Input<string>;
        sqlType?: pulumi.Input<string>;
        sqlTypes?: pulumi.Input<pulumi.Input<string>[]>;
        sqls?: pulumi.Input<pulumi.Input<string>[]>;
        tableNames?: pulumi.Input<pulumi.Input<string>[]>;
        users?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface BackupDownloadRestrictionLimitVpc {
        region: pulumi.Input<string>;
        vpcLists: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ParamTemplateParamList {
        currentValue?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
    }

    export interface PasswordComplexityParamList {
        currentValue?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
    }

    export interface PrivilegeColumn {
        columnName: pulumi.Input<string>;
        databaseName: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        tableName: pulumi.Input<string>;
    }

    export interface PrivilegeDatabase {
        databaseName: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PrivilegeTable {
        databaseName: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        tableName: pulumi.Input<string>;
    }

    export interface ProxyProxyNodeCustom {
        cpu: pulumi.Input<number>;
        mem: pulumi.Input<number>;
        nodeCount: pulumi.Input<number>;
        region: pulumi.Input<string>;
        zone: pulumi.Input<string>;
    }

    export interface RoGroupRoGroupInfo {
        minRoInGroup?: pulumi.Input<number>;
        replicationDelayTime?: pulumi.Input<number>;
        roGroupName?: pulumi.Input<string>;
        roMaxDelayTime?: pulumi.Input<number>;
        roOfflineDelay?: pulumi.Input<number>;
        weightMode?: pulumi.Input<string>;
    }

    export interface RoGroupRoWeightValue {
        instanceId: pulumi.Input<string>;
        weight: pulumi.Input<number>;
    }

    export interface RollbackDatabase {
        databaseName: pulumi.Input<string>;
        newDatabaseName: pulumi.Input<string>;
    }

    export interface RollbackTable {
        database: pulumi.Input<string>;
        tables: pulumi.Input<pulumi.Input<inputs.Mysql.RollbackTableTable>[]>;
    }

    export interface RollbackTableTable {
        newTableName: pulumi.Input<string>;
        tableName: pulumi.Input<string>;
    }
}

export namespace Nat {
}

export namespace Oceanus {
    export interface GetClustersFilter {
        name: string;
        values: string[];
    }

    export interface GetClustersFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetSystemResourceFilter {
        name: string;
        values: string[];
    }

    export interface GetSystemResourceFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetTreeJobsFilter {
        name: string;
        values: string[];
    }

    export interface GetTreeJobsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetWorkSpacesFilter {
        name: string;
        values: string[];
    }

    export interface GetWorkSpacesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface JobConfigClazzLevel {
        clazz: pulumi.Input<string>;
        level: pulumi.Input<string>;
    }

    export interface JobConfigExpertModeConfiguration {
        jobGraph?: pulumi.Input<inputs.Oceanus.JobConfigExpertModeConfigurationJobGraph>;
        nodeConfigs?: pulumi.Input<pulumi.Input<inputs.Oceanus.JobConfigExpertModeConfigurationNodeConfig>[]>;
        slotSharingGroups?: pulumi.Input<pulumi.Input<inputs.Oceanus.JobConfigExpertModeConfigurationSlotSharingGroup>[]>;
    }

    export interface JobConfigExpertModeConfigurationJobGraph {
        edges?: pulumi.Input<pulumi.Input<inputs.Oceanus.JobConfigExpertModeConfigurationJobGraphEdge>[]>;
        nodes?: pulumi.Input<pulumi.Input<inputs.Oceanus.JobConfigExpertModeConfigurationJobGraphNode>[]>;
    }

    export interface JobConfigExpertModeConfigurationJobGraphEdge {
        source: pulumi.Input<number>;
        target: pulumi.Input<number>;
    }

    export interface JobConfigExpertModeConfigurationJobGraphNode {
        description: pulumi.Input<string>;
        id: pulumi.Input<number>;
        name: pulumi.Input<string>;
        parallelism: pulumi.Input<number>;
    }

    export interface JobConfigExpertModeConfigurationNodeConfig {
        configurations?: pulumi.Input<pulumi.Input<inputs.Oceanus.JobConfigExpertModeConfigurationNodeConfigConfiguration>[]>;
        id: pulumi.Input<number>;
        parallelism?: pulumi.Input<number>;
        slotSharingGroup?: pulumi.Input<string>;
        stateTtl?: pulumi.Input<string>;
    }

    export interface JobConfigExpertModeConfigurationNodeConfigConfiguration {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface JobConfigExpertModeConfigurationSlotSharingGroup {
        description?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        spec: pulumi.Input<inputs.Oceanus.JobConfigExpertModeConfigurationSlotSharingGroupSpec>;
    }

    export interface JobConfigExpertModeConfigurationSlotSharingGroupSpec {
        cpu: pulumi.Input<number>;
        heapMemory: pulumi.Input<string>;
        managedMemory?: pulumi.Input<string>;
        offHeapMemory?: pulumi.Input<string>;
    }

    export interface JobConfigProperty {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface JobConfigResourceRef {
        resourceId: pulumi.Input<string>;
        type: pulumi.Input<number>;
        version: pulumi.Input<number>;
    }

    export interface ResourceConfigResourceLoc {
        param: pulumi.Input<inputs.Oceanus.ResourceConfigResourceLocParam>;
        storageType: pulumi.Input<number>;
    }

    export interface ResourceConfigResourceLocParam {
        bucket: pulumi.Input<string>;
        path: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ResourceResourceLoc {
        param: pulumi.Input<inputs.Oceanus.ResourceResourceLocParam>;
        storageType: pulumi.Input<number>;
    }

    export interface ResourceResourceLocParam {
        bucket: pulumi.Input<string>;
        path: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface RunJobRunJobDescription {
        customTimestamp?: pulumi.Input<number>;
        jobConfigVersion?: pulumi.Input<number>;
        jobId: pulumi.Input<string>;
        runType: pulumi.Input<number>;
        savepointId?: pulumi.Input<string>;
        savepointPath?: pulumi.Input<string>;
        startMode?: pulumi.Input<string>;
        useOldSystemConnector?: pulumi.Input<boolean>;
    }

    export interface StopJobStopJobDescription {
        jobId: pulumi.Input<string>;
        stopType: pulumi.Input<number>;
    }
}

export namespace Organization {
    export interface GetNodesTag {
        tagKey: string;
        tagValue: string;
    }

    export interface GetNodesTagArgs {
        tagKey: pulumi.Input<string>;
        tagValue: pulumi.Input<string>;
    }

    export interface InstanceOrgPermission {
        id?: pulumi.Input<number>;
        name?: pulumi.Input<string>;
    }

    export interface OrgIdentityIdentityPolicy {
        policyDocument?: pulumi.Input<string>;
        policyId?: pulumi.Input<number>;
        policyName?: pulumi.Input<string>;
        policyType?: pulumi.Input<number>;
    }

    export interface OrgMemberOrgPermission {
        id?: pulumi.Input<number>;
        name?: pulumi.Input<string>;
    }

    export interface OrgShareUnitMemberMember {
        shareMemberUin: pulumi.Input<number>;
    }
}

export namespace Placement {
}

export namespace Postgresql {
    export interface AccountPrivilegesOperationModifyPrivilegeSet {
        databasePrivilege?: pulumi.Input<inputs.Postgresql.AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilege>;
        isCascade?: pulumi.Input<boolean>;
        modifyType?: pulumi.Input<string>;
    }

    export interface AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilege {
        object?: pulumi.Input<inputs.Postgresql.AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeObject>;
        privilegeSets?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeObject {
        databaseName?: pulumi.Input<string>;
        objectName: pulumi.Input<string>;
        objectType: pulumi.Input<string>;
        schemaName?: pulumi.Input<string>;
        tableName?: pulumi.Input<string>;
    }

    export interface CloneDbInstanceDbNodeSet {
        dedicatedClusterId?: pulumi.Input<string>;
        role: pulumi.Input<string>;
        zone: pulumi.Input<string>;
    }

    export interface CloneDbInstanceTagList {
        tagKey: pulumi.Input<string>;
        tagValue: pulumi.Input<string>;
    }

    export interface GetAccountPrivilegesDatabaseObjectSet {
        databaseName?: string;
        objectName: string;
        objectType: string;
        schemaName?: string;
        tableName?: string;
    }

    export interface GetAccountPrivilegesDatabaseObjectSetArgs {
        databaseName?: pulumi.Input<string>;
        objectName: pulumi.Input<string>;
        objectType: pulumi.Input<string>;
        schemaName?: pulumi.Input<string>;
        tableName?: pulumi.Input<string>;
    }

    export interface GetBackupDownloadUrlsBackupDownloadRestriction {
        ipRestrictionEffect?: string;
        ipSets?: string[];
        restrictionType?: string;
        vpcIdSets?: string[];
        vpcRestrictionEffect?: string;
    }

    export interface GetBackupDownloadUrlsBackupDownloadRestrictionArgs {
        ipRestrictionEffect?: pulumi.Input<string>;
        ipSets?: pulumi.Input<pulumi.Input<string>[]>;
        restrictionType?: pulumi.Input<string>;
        vpcIdSets?: pulumi.Input<pulumi.Input<string>[]>;
        vpcRestrictionEffect?: pulumi.Input<string>;
    }

    export interface GetBaseBackupsFilter {
        name?: string;
        values?: string[];
    }

    export interface GetBaseBackupsFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetDedicatedClustersFilter {
        name?: string;
        values?: string[];
    }

    export interface GetDedicatedClustersFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetLogBackupsFilter {
        name?: string;
        values?: string[];
    }

    export interface GetLogBackupsFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetParameterTemplatesFilter {
        name?: string;
        values?: string[];
    }

    export interface GetParameterTemplatesFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetReadonlyGroupsFilter {
        name?: string;
        values?: string[];
    }

    export interface GetReadonlyGroupsFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InstanceBackupPlan {
        backupPeriods?: pulumi.Input<pulumi.Input<string>[]>;
        baseBackupRetentionPeriod?: pulumi.Input<number>;
        maxBackupStartTime?: pulumi.Input<string>;
        minBackupStartTime?: pulumi.Input<string>;
    }

    export interface InstanceDbNodeSet {
        dedicatedClusterId?: pulumi.Input<string>;
        role?: pulumi.Input<string>;
        zone: pulumi.Input<string>;
    }

    export interface ParameterTemplateModifyParamEntrySet {
        expectedValue: pulumi.Input<string>;
        name: pulumi.Input<string>;
    }

    export interface ReadonlyGroupNetInfoList {
        ip?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
    }
}

export namespace PrivateDns {
    export interface GetEndPointsFilter {
        name: string;
        values: string[];
    }

    export interface GetEndPointsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetForwardRulesFilter {
        name: string;
        values: string[];
    }

    export interface GetForwardRulesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetPrivateZoneListFilter {
        name: string;
        values: string[];
    }

    export interface GetPrivateZoneListFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetRecordsFilter {
        name: string;
        values: string[];
    }

    export interface GetRecordsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ZoneAccountVpcSet {
        region: pulumi.Input<string>;
        uin: pulumi.Input<string>;
        uniqVpcId: pulumi.Input<string>;
        vpcName: pulumi.Input<string>;
    }

    export interface ZoneTagSet {
        tagKey: pulumi.Input<string>;
        tagValue: pulumi.Input<string>;
    }

    export interface ZoneVpcAttachmentAccountVpcSet {
        region: pulumi.Input<string>;
        uin: pulumi.Input<string>;
        uniqVpcId: pulumi.Input<string>;
    }

    export interface ZoneVpcAttachmentVpcSet {
        region: pulumi.Input<string>;
        uniqVpcId: pulumi.Input<string>;
    }

    export interface ZoneVpcSet {
        region: pulumi.Input<string>;
        uniqVpcId: pulumi.Input<string>;
    }
}

export namespace Projects {
}

export namespace Protocol {
}

export namespace Pts {
    export interface FileFileInfo {
        fileId?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface JobDataset {
        fileId?: pulumi.Input<string>;
        headLines?: pulumi.Input<pulumi.Input<string>[]>;
        headerColumns?: pulumi.Input<pulumi.Input<string>[]>;
        headerInFile: pulumi.Input<boolean>;
        lineCount?: pulumi.Input<number>;
        name: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        split: pulumi.Input<boolean>;
        tailLines?: pulumi.Input<pulumi.Input<string>[]>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface JobDomainNameConfig {
        dnsConfig?: pulumi.Input<inputs.Pts.JobDomainNameConfigDnsConfig>;
        hostAliases?: pulumi.Input<pulumi.Input<inputs.Pts.JobDomainNameConfigHostAlias>[]>;
    }

    export interface JobDomainNameConfigDnsConfig {
        nameservers?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface JobDomainNameConfigHostAlias {
        hostNames?: pulumi.Input<pulumi.Input<string>[]>;
        ip?: pulumi.Input<string>;
    }

    export interface JobLoad {
        geoRegionsLoadDistributions?: pulumi.Input<pulumi.Input<inputs.Pts.JobLoadGeoRegionsLoadDistribution>[]>;
        loadSpec?: pulumi.Input<inputs.Pts.JobLoadLoadSpec>;
        vpcLoadDistribution?: pulumi.Input<inputs.Pts.JobLoadVpcLoadDistribution>;
    }

    export interface JobLoadGeoRegionsLoadDistribution {
        percentage?: pulumi.Input<number>;
        region?: pulumi.Input<string>;
        regionId: pulumi.Input<number>;
    }

    export interface JobLoadLoadSpec {
        concurrency?: pulumi.Input<inputs.Pts.JobLoadLoadSpecConcurrency>;
        requestsPerSecond?: pulumi.Input<inputs.Pts.JobLoadLoadSpecRequestsPerSecond>;
        scriptOrigin?: pulumi.Input<inputs.Pts.JobLoadLoadSpecScriptOrigin>;
    }

    export interface JobLoadLoadSpecConcurrency {
        gracefulStopSeconds?: pulumi.Input<number>;
        iterationCount?: pulumi.Input<number>;
        maxRequestsPerSecond?: pulumi.Input<number>;
        stages?: pulumi.Input<pulumi.Input<inputs.Pts.JobLoadLoadSpecConcurrencyStage>[]>;
    }

    export interface JobLoadLoadSpecConcurrencyStage {
        durationSeconds?: pulumi.Input<number>;
        targetVirtualUsers?: pulumi.Input<number>;
    }

    export interface JobLoadLoadSpecRequestsPerSecond {
        durationSeconds?: pulumi.Input<number>;
        gracefulStopSeconds?: pulumi.Input<number>;
        maxRequestsPerSecond?: pulumi.Input<number>;
        resources?: pulumi.Input<number>;
        startRequestsPerSecond?: pulumi.Input<number>;
        targetRequestsPerSecond?: pulumi.Input<number>;
    }

    export interface JobLoadLoadSpecScriptOrigin {
        durationSeconds: pulumi.Input<number>;
        machineNumber: pulumi.Input<number>;
        machineSpecification: pulumi.Input<string>;
    }

    export interface JobLoadVpcLoadDistribution {
        region?: pulumi.Input<string>;
        regionId: pulumi.Input<number>;
        subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
        vpcId?: pulumi.Input<string>;
    }

    export interface JobPlugin {
        fileId?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface JobProtocol {
        fileId?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface JobRequestFile {
        fileId?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface JobTestScript {
        encodedContent?: pulumi.Input<string>;
        encodedHttpArchive?: pulumi.Input<string>;
        loadWeight?: pulumi.Input<number>;
        name?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface ProjectTag {
        tagKey?: pulumi.Input<string>;
        tagValue?: pulumi.Input<string>;
    }

    export interface ScenarioDataset {
        fileId?: pulumi.Input<string>;
        headLines?: pulumi.Input<pulumi.Input<string>[]>;
        headerColumns?: pulumi.Input<pulumi.Input<string>[]>;
        headerInFile: pulumi.Input<boolean>;
        lineCount?: pulumi.Input<number>;
        name: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        split: pulumi.Input<boolean>;
        tailLines?: pulumi.Input<pulumi.Input<string>[]>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface ScenarioDomainNameConfig {
        dnsConfig?: pulumi.Input<inputs.Pts.ScenarioDomainNameConfigDnsConfig>;
        hostAliases?: pulumi.Input<pulumi.Input<inputs.Pts.ScenarioDomainNameConfigHostAlias>[]>;
    }

    export interface ScenarioDomainNameConfigDnsConfig {
        nameservers?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ScenarioDomainNameConfigHostAlias {
        hostNames?: pulumi.Input<pulumi.Input<string>[]>;
        ip?: pulumi.Input<string>;
    }

    export interface ScenarioLoad {
        geoRegionsLoadDistributions?: pulumi.Input<pulumi.Input<inputs.Pts.ScenarioLoadGeoRegionsLoadDistribution>[]>;
        loadSpec?: pulumi.Input<inputs.Pts.ScenarioLoadLoadSpec>;
        vpcLoadDistribution?: pulumi.Input<inputs.Pts.ScenarioLoadVpcLoadDistribution>;
    }

    export interface ScenarioLoadGeoRegionsLoadDistribution {
        percentage?: pulumi.Input<number>;
        region?: pulumi.Input<string>;
        regionId: pulumi.Input<number>;
    }

    export interface ScenarioLoadLoadSpec {
        concurrency?: pulumi.Input<inputs.Pts.ScenarioLoadLoadSpecConcurrency>;
        requestsPerSecond?: pulumi.Input<inputs.Pts.ScenarioLoadLoadSpecRequestsPerSecond>;
        scriptOrigin?: pulumi.Input<inputs.Pts.ScenarioLoadLoadSpecScriptOrigin>;
    }

    export interface ScenarioLoadLoadSpecConcurrency {
        gracefulStopSeconds?: pulumi.Input<number>;
        iterationCount?: pulumi.Input<number>;
        maxRequestsPerSecond?: pulumi.Input<number>;
        stages?: pulumi.Input<pulumi.Input<inputs.Pts.ScenarioLoadLoadSpecConcurrencyStage>[]>;
    }

    export interface ScenarioLoadLoadSpecConcurrencyStage {
        durationSeconds?: pulumi.Input<number>;
        targetVirtualUsers?: pulumi.Input<number>;
    }

    export interface ScenarioLoadLoadSpecRequestsPerSecond {
        durationSeconds?: pulumi.Input<number>;
        gracefulStopSeconds?: pulumi.Input<number>;
        maxRequestsPerSecond?: pulumi.Input<number>;
        resources?: pulumi.Input<number>;
        startRequestsPerSecond?: pulumi.Input<number>;
        targetRequestsPerSecond?: pulumi.Input<number>;
    }

    export interface ScenarioLoadLoadSpecScriptOrigin {
        durationSeconds: pulumi.Input<number>;
        machineNumber: pulumi.Input<number>;
        machineSpecification: pulumi.Input<string>;
    }

    export interface ScenarioLoadVpcLoadDistribution {
        region?: pulumi.Input<string>;
        regionId: pulumi.Input<number>;
        subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
        vpcId?: pulumi.Input<string>;
    }

    export interface ScenarioPlugin {
        fileId?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface ScenarioProtocol {
        fileId?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface ScenarioRequestFile {
        fileId?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface ScenarioSlaPolicy {
        alertChannel?: pulumi.Input<inputs.Pts.ScenarioSlaPolicyAlertChannel>;
        slaRules?: pulumi.Input<pulumi.Input<inputs.Pts.ScenarioSlaPolicySlaRule>[]>;
    }

    export interface ScenarioSlaPolicyAlertChannel {
        ampConsumerId?: pulumi.Input<string>;
        noticeId?: pulumi.Input<string>;
    }

    export interface ScenarioSlaPolicySlaRule {
        abortFlag?: pulumi.Input<boolean>;
        aggregation?: pulumi.Input<string>;
        condition?: pulumi.Input<string>;
        for?: pulumi.Input<string>;
        labelFilters?: pulumi.Input<pulumi.Input<inputs.Pts.ScenarioSlaPolicySlaRuleLabelFilter>[]>;
        metric?: pulumi.Input<string>;
        value?: pulumi.Input<number>;
    }

    export interface ScenarioSlaPolicySlaRuleLabelFilter {
        labelName?: pulumi.Input<string>;
        labelValue?: pulumi.Input<string>;
    }

    export interface ScenarioTestScript {
        encodedContent?: pulumi.Input<string>;
        encodedHttpArchive?: pulumi.Input<string>;
        loadWeight?: pulumi.Input<number>;
        name?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        updatedAt?: pulumi.Input<string>;
    }

    export interface TmpKeyGenerateCredential {
        tmpSecretId?: pulumi.Input<string>;
        tmpSecretKey?: pulumi.Input<string>;
        token?: pulumi.Input<string>;
    }
}

export namespace Redis {
    export interface BackupDownloadRestrictionLimitVpc {
        region: pulumi.Input<string>;
        vpcLists: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetBackupDownloadInfoLimitVpc {
        region: string;
        vpcLists: string[];
    }

    export interface GetBackupDownloadInfoLimitVpcArgs {
        region: pulumi.Input<string>;
        vpcLists: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InstanceNodeInfo {
        id?: pulumi.Input<number>;
        master?: pulumi.Input<boolean>;
        zoneId?: pulumi.Input<number>;
    }

    export interface ParamTemplateParamDetail {
        currentValue?: pulumi.Input<string>;
        default?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        enumValues?: pulumi.Input<pulumi.Input<string>[]>;
        max?: pulumi.Input<string>;
        min?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        needReboot?: pulumi.Input<number>;
        paramType?: pulumi.Input<string>;
    }

    export interface ParamTemplateParamsOverride {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }
}

export namespace Reserved {
}

export namespace Rum {
}

export namespace Scf {
    export interface CustomDomainCertConfig {
        certificateId?: pulumi.Input<string>;
    }

    export interface CustomDomainEndpointsConfig {
        functionName: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        pathMatch: pulumi.Input<string>;
        pathRewrites?: pulumi.Input<pulumi.Input<inputs.Scf.CustomDomainEndpointsConfigPathRewrite>[]>;
        qualifier: pulumi.Input<string>;
    }

    export interface CustomDomainEndpointsConfigPathRewrite {
        path: pulumi.Input<string>;
        rewrite: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface CustomDomainWafConfig {
        wafInstanceId?: pulumi.Input<string>;
        wafOpen?: pulumi.Input<string>;
    }

    export interface FunctionAliasRoutingConfig {
        additionalVersionMatches?: pulumi.Input<pulumi.Input<inputs.Scf.FunctionAliasRoutingConfigAdditionalVersionMatch>[]>;
        additionalVersionWeights?: pulumi.Input<pulumi.Input<inputs.Scf.FunctionAliasRoutingConfigAdditionalVersionWeight>[]>;
    }

    export interface FunctionAliasRoutingConfigAdditionalVersionMatch {
        expression: pulumi.Input<string>;
        key: pulumi.Input<string>;
        method: pulumi.Input<string>;
        version: pulumi.Input<string>;
    }

    export interface FunctionAliasRoutingConfigAdditionalVersionWeight {
        version: pulumi.Input<string>;
        weight: pulumi.Input<number>;
    }

    export interface FunctionCfsConfig {
        cfsId: pulumi.Input<string>;
        ipAddress?: pulumi.Input<string>;
        localMountDir: pulumi.Input<string>;
        mountInsId: pulumi.Input<string>;
        mountSubnetId?: pulumi.Input<string>;
        mountVpcId?: pulumi.Input<string>;
        remoteMountDir: pulumi.Input<string>;
        userGroupId: pulumi.Input<string>;
        userId: pulumi.Input<string>;
    }

    export interface FunctionEventInvokeConfigAsyncTriggerConfig {
        msgTtl: pulumi.Input<number>;
        retryConfigs: pulumi.Input<pulumi.Input<inputs.Scf.FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig>[]>;
    }

    export interface FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig {
        retryNum: pulumi.Input<number>;
    }

    export interface FunctionImageConfig {
        args?: pulumi.Input<string>;
        command?: pulumi.Input<string>;
        containerImageAccelerate?: pulumi.Input<boolean>;
        entryPoint?: pulumi.Input<string>;
        imagePort?: pulumi.Input<number>;
        imageType: pulumi.Input<string>;
        imageUri: pulumi.Input<string>;
        registryId?: pulumi.Input<string>;
    }

    export interface FunctionIntranetConfig {
        ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        ipFixed: pulumi.Input<string>;
    }

    export interface FunctionLayer {
        layerName: pulumi.Input<string>;
        layerVersion: pulumi.Input<number>;
    }

    export interface FunctionTrigger {
        cosRegion?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        triggerDesc: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface FunctionTriggerInfo {
        createTime?: pulumi.Input<string>;
        customArgument?: pulumi.Input<string>;
        enable?: pulumi.Input<boolean>;
        modifyTime?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        triggerDesc?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface GetTriggersFilter {
        name: string;
        values: string[];
    }

    export interface GetTriggersFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface LayerContent {
        cosBucketName?: pulumi.Input<string>;
        cosBucketRegion?: pulumi.Input<string>;
        cosObjectName?: pulumi.Input<string>;
        zipFile?: pulumi.Input<string>;
    }

    export interface ProvisionedConcurrencyConfigTriggerAction {
        provisionedType?: pulumi.Input<string>;
        triggerCronConfig: pulumi.Input<string>;
        triggerName: pulumi.Input<string>;
        triggerProvisionedConcurrencyNum: pulumi.Input<number>;
    }
}

export namespace Security {
    export interface GroupRuleSetEgress {
        action: pulumi.Input<string>;
        addressTemplateGroup?: pulumi.Input<string>;
        addressTemplateId?: pulumi.Input<string>;
        cidrBlock?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        ipv6CidrBlock?: pulumi.Input<string>;
        policyIndex?: pulumi.Input<number>;
        port?: pulumi.Input<string>;
        protocol?: pulumi.Input<string>;
        serviceTemplateGroup?: pulumi.Input<string>;
        serviceTemplateId?: pulumi.Input<string>;
        sourceSecurityId?: pulumi.Input<string>;
    }

    export interface GroupRuleSetIngress {
        action: pulumi.Input<string>;
        addressTemplateGroup?: pulumi.Input<string>;
        addressTemplateId?: pulumi.Input<string>;
        cidrBlock?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        ipv6CidrBlock?: pulumi.Input<string>;
        policyIndex?: pulumi.Input<number>;
        port?: pulumi.Input<string>;
        protocol?: pulumi.Input<string>;
        serviceTemplateGroup?: pulumi.Input<string>;
        serviceTemplateId?: pulumi.Input<string>;
        sourceSecurityId?: pulumi.Input<string>;
    }
}

export namespace Ses {
    export interface BatchSendEmailAttachment {
        content: pulumi.Input<string>;
        fileName: pulumi.Input<string>;
    }

    export interface BatchSendEmailCycleParam {
        beginTime: pulumi.Input<string>;
        intervalTime: pulumi.Input<number>;
        termCycle?: pulumi.Input<number>;
    }

    export interface BatchSendEmailTemplate {
        templateData: pulumi.Input<string>;
        templateId: pulumi.Input<number>;
    }

    export interface BatchSendEmailTimedParam {
        beginTime: pulumi.Input<string>;
    }

    export interface DomainAttribute {
        expectedValue?: pulumi.Input<string>;
        sendDomain?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface ReceiverData {
        email: pulumi.Input<string>;
        templateData?: pulumi.Input<string>;
    }

    export interface SendEmailAttachment {
        content: pulumi.Input<string>;
        fileName: pulumi.Input<string>;
    }

    export interface SendEmailTemplate {
        templateData: pulumi.Input<string>;
        templateId: pulumi.Input<number>;
    }

    export interface TemplateTemplateContent {
        html?: pulumi.Input<string>;
        text?: pulumi.Input<string>;
    }
}

export namespace Sg {
    export interface RuleData {
        description: pulumi.Input<string>;
        destContent: pulumi.Input<string>;
        destType: pulumi.Input<string>;
        orderIndex?: pulumi.Input<string>;
        port?: pulumi.Input<string>;
        protocol?: pulumi.Input<string>;
        ruleAction: pulumi.Input<string>;
        serviceTemplateId?: pulumi.Input<string>;
        sourceContent: pulumi.Input<string>;
        sourceType: pulumi.Input<string>;
    }
}

export namespace Sqlserver {
    export interface BusinessIntelligenceInstanceResourceTag {
        tagKey?: pulumi.Input<string>;
        tagValue?: pulumi.Input<string>;
    }

    export interface ConfigInstanceParamParamList {
        currentValue?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
    }

    export interface ConfigInstanceRoGroupWeightPair {
        readOnlyInstanceId: pulumi.Input<string>;
        readOnlyWeight: pulumi.Input<number>;
    }

    export interface GeneralCloudInstanceResourceTag {
        tagKey?: pulumi.Input<string>;
        tagValue?: pulumi.Input<string>;
    }

    export interface MigrationMigrateDbSet {
        dbName?: pulumi.Input<string>;
    }

    export interface MigrationRenameRestore {
        newName?: pulumi.Input<string>;
        oldName?: pulumi.Input<string>;
    }

    export interface MigrationSource {
        cvmId?: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        ip?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        subnetId?: pulumi.Input<string>;
        urlPassword?: pulumi.Input<string>;
        urls?: pulumi.Input<pulumi.Input<string>[]>;
        userName?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface MigrationTarget {
        instanceId?: pulumi.Input<string>;
        password?: pulumi.Input<string>;
        userName?: pulumi.Input<string>;
    }

    export interface PublishSubscribeDatabaseTuple {
        publishDatabase: pulumi.Input<string>;
        subscribeDatabase: pulumi.Input<string>;
    }

    export interface RestoreInstanceEncryption {
        dbName?: pulumi.Input<string>;
        status?: pulumi.Input<string>;
    }

    export interface RestoreInstanceRenameRestore {
        newName: pulumi.Input<string>;
        oldName: pulumi.Input<string>;
    }

    export interface RollbackInstanceEncryption {
        dbName?: pulumi.Input<string>;
        status?: pulumi.Input<string>;
    }

    export interface RollbackInstanceRenameRestore {
        newName: pulumi.Input<string>;
        oldName: pulumi.Input<string>;
    }

    export interface StartXeventEventConfig {
        eventType: pulumi.Input<string>;
        threshold: pulumi.Input<number>;
    }
}

export namespace Ssl {
    export interface CheckCertificateDomainVerificationOperationVerificationResult {
        caCheck?: pulumi.Input<number>;
        checkValues?: pulumi.Input<pulumi.Input<string>[]>;
        domain?: pulumi.Input<string>;
        frequently?: pulumi.Input<boolean>;
        issued?: pulumi.Input<boolean>;
        localCheck?: pulumi.Input<number>;
        localCheckFailReason?: pulumi.Input<string>;
        verifyType?: pulumi.Input<string>;
    }

    export interface FreeCertificateDvAuth {
        dvAuthKey?: pulumi.Input<string>;
        dvAuthValue?: pulumi.Input<string>;
        dvAuthVerifyType?: pulumi.Input<string>;
    }

    export interface GetDescribeHostApiGatewayInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostApiGatewayInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface GetDescribeHostCdnInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostCdnInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface GetDescribeHostClbInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostClbInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface GetDescribeHostCosInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostCosInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface GetDescribeHostDdosInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostDdosInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface GetDescribeHostLighthouseInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostLighthouseInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface GetDescribeHostLiveInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostLiveInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface GetDescribeHostTeoInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostTeoInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface GetDescribeHostTkeInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostTkeInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface GetDescribeHostVodInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostVodInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface GetDescribeHostWafInstanceListFilter {
        filterKey: string;
        filterValue: string;
    }

    export interface GetDescribeHostWafInstanceListFilterArgs {
        filterKey: pulumi.Input<string>;
        filterValue: pulumi.Input<string>;
    }

    export interface PayCertificateDvAuth {
        dvAuthKey?: pulumi.Input<string>;
        dvAuthValue?: pulumi.Input<string>;
        dvAuthVerifyType?: pulumi.Input<string>;
    }

    export interface PayCertificateInformation {
        adminEmail: pulumi.Input<string>;
        adminFirstName: pulumi.Input<string>;
        adminLastName: pulumi.Input<string>;
        adminPhoneNum: pulumi.Input<string>;
        adminPosition: pulumi.Input<string>;
        certificateDomain: pulumi.Input<string>;
        contactEmail: pulumi.Input<string>;
        contactFirstName: pulumi.Input<string>;
        contactLastName: pulumi.Input<string>;
        contactNumber: pulumi.Input<string>;
        contactPosition: pulumi.Input<string>;
        csrContent?: pulumi.Input<string>;
        csrType?: pulumi.Input<string>;
        domainLists?: pulumi.Input<pulumi.Input<string>[]>;
        keyPassword?: pulumi.Input<string>;
        organizationAddress: pulumi.Input<string>;
        organizationCity: pulumi.Input<string>;
        organizationCountry: pulumi.Input<string>;
        organizationDivision: pulumi.Input<string>;
        organizationName: pulumi.Input<string>;
        organizationRegion: pulumi.Input<string>;
        phoneAreaCode: pulumi.Input<string>;
        phoneNumber: pulumi.Input<string>;
        postalCode: pulumi.Input<string>;
        verifyType: pulumi.Input<string>;
    }

    export interface UpdateCertificateInstanceOperationResourceTypesRegion {
        regions?: pulumi.Input<pulumi.Input<string>[]>;
        resourceType?: pulumi.Input<string>;
    }
}

export namespace Ssm {
    export interface ProductSecretPrivilegesList {
        columnName?: pulumi.Input<string>;
        database?: pulumi.Input<string>;
        privilegeName: pulumi.Input<string>;
        privileges: pulumi.Input<pulumi.Input<string>[]>;
        tableName?: pulumi.Input<string>;
    }
}

export namespace Tat {
    export interface CommandTag {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface GetAgentFilter {
        name: string;
        values: string[];
    }

    export interface GetAgentFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetInvocationTaskFilter {
        name: string;
        values: string[];
    }

    export interface GetInvocationTaskFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InvokerScheduleSettings {
        invokeTime?: pulumi.Input<string>;
        policy: pulumi.Input<string>;
        recurrence?: pulumi.Input<string>;
    }
}

export namespace Tcaplus {
    export interface IdlTableInfo {
        error?: pulumi.Input<string>;
        indexKeySet?: pulumi.Input<string>;
        keyFields?: pulumi.Input<string>;
        sumKeyFieldSize?: pulumi.Input<number>;
        sumValueFieldSize?: pulumi.Input<number>;
        tableName?: pulumi.Input<string>;
        valueFields?: pulumi.Input<string>;
    }
}

export namespace Tcm {
    export interface AccessLogConfigCls {
        enable: pulumi.Input<boolean>;
        logSet?: pulumi.Input<string>;
        topic?: pulumi.Input<string>;
    }

    export interface AccessLogConfigSelectedRange {
        all?: pulumi.Input<boolean>;
        items?: pulumi.Input<pulumi.Input<inputs.Tcm.AccessLogConfigSelectedRangeItem>[]>;
    }

    export interface AccessLogConfigSelectedRangeItem {
        gateways?: pulumi.Input<pulumi.Input<string>[]>;
        namespace?: pulumi.Input<string>;
    }

    export interface ClusterAttachmentClusterList {
        clusterId: pulumi.Input<string>;
        region: pulumi.Input<string>;
        role: pulumi.Input<string>;
        subnetId?: pulumi.Input<string>;
        type: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }

    export interface MeshConfig {
        inject?: pulumi.Input<inputs.Tcm.MeshConfigInject>;
        istio?: pulumi.Input<inputs.Tcm.MeshConfigIstio>;
        prometheus?: pulumi.Input<inputs.Tcm.MeshConfigPrometheus>;
        sidecarResources?: pulumi.Input<inputs.Tcm.MeshConfigSidecarResources>;
        tracing?: pulumi.Input<inputs.Tcm.MeshConfigTracing>;
    }

    export interface MeshConfigInject {
        excludeIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
        holdApplicationUntilProxyStarts?: pulumi.Input<boolean>;
        holdProxyUntilApplicationEnds?: pulumi.Input<boolean>;
    }

    export interface MeshConfigIstio {
        disableHttpRetry?: pulumi.Input<boolean>;
        disablePolicyChecks?: pulumi.Input<boolean>;
        enablePilotHttp?: pulumi.Input<boolean>;
        outboundTrafficPolicy: pulumi.Input<string>;
        smartDns?: pulumi.Input<inputs.Tcm.MeshConfigIstioSmartDns>;
        tracing?: pulumi.Input<inputs.Tcm.MeshConfigIstioTracing>;
    }

    export interface MeshConfigIstioSmartDns {
        istioMetaDnsAutoAllocate?: pulumi.Input<boolean>;
        istioMetaDnsCapture?: pulumi.Input<boolean>;
    }

    export interface MeshConfigIstioTracing {
        apm?: pulumi.Input<inputs.Tcm.MeshConfigIstioTracingApm>;
        enable?: pulumi.Input<boolean>;
        sampling?: pulumi.Input<number>;
        zipkin?: pulumi.Input<inputs.Tcm.MeshConfigIstioTracingZipkin>;
    }

    export interface MeshConfigIstioTracingApm {
        enable: pulumi.Input<boolean>;
        instanceId?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface MeshConfigIstioTracingZipkin {
        address: pulumi.Input<string>;
    }

    export interface MeshConfigPrometheus {
        customProm?: pulumi.Input<inputs.Tcm.MeshConfigPrometheusCustomProm>;
        instanceId?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
        subnetId?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface MeshConfigPrometheusCustomProm {
        authType: pulumi.Input<string>;
        isPublicAddr?: pulumi.Input<boolean>;
        password?: pulumi.Input<string>;
        url: pulumi.Input<string>;
        username?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface MeshConfigSidecarResources {
        limits?: pulumi.Input<pulumi.Input<inputs.Tcm.MeshConfigSidecarResourcesLimit>[]>;
        requests?: pulumi.Input<pulumi.Input<inputs.Tcm.MeshConfigSidecarResourcesRequest>[]>;
    }

    export interface MeshConfigSidecarResourcesLimit {
        name?: pulumi.Input<string>;
        quantity?: pulumi.Input<string>;
    }

    export interface MeshConfigSidecarResourcesRequest {
        name?: pulumi.Input<string>;
        quantity?: pulumi.Input<string>;
    }

    export interface MeshConfigTracing {
        apm?: pulumi.Input<inputs.Tcm.MeshConfigTracingApm>;
        enable?: pulumi.Input<boolean>;
        sampling?: pulumi.Input<number>;
        zipkin?: pulumi.Input<inputs.Tcm.MeshConfigTracingZipkin>;
    }

    export interface MeshConfigTracingApm {
        enable?: pulumi.Input<boolean>;
        instanceId?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface MeshConfigTracingZipkin {
        address: pulumi.Input<string>;
    }

    export interface MeshTagList {
        key: pulumi.Input<string>;
        passthrough?: pulumi.Input<boolean>;
        value: pulumi.Input<string>;
    }

    export interface PrometheusAttachmentPrometheus {
        customProm?: pulumi.Input<inputs.Tcm.PrometheusAttachmentPrometheusCustomProm>;
        instanceId?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
        subnetId?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface PrometheusAttachmentPrometheusCustomProm {
        authType: pulumi.Input<string>;
        isPublicAddr?: pulumi.Input<boolean>;
        password?: pulumi.Input<string>;
        url: pulumi.Input<string>;
        username?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface TracingConfigApm {
        enable?: pulumi.Input<boolean>;
        instanceId?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface TracingConfigZipkin {
        address: pulumi.Input<string>;
    }
}

export namespace Tcmq {
    export interface GetQueueFilter {
        name?: string;
        values?: string[];
    }

    export interface GetQueueFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetTopicFilter {
        name?: string;
        values?: string[];
    }

    export interface GetTopicFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace Tcr {
    export interface ImmutableTagRuleRule {
        disabled?: pulumi.Input<boolean>;
        id?: pulumi.Input<number>;
        nsName?: pulumi.Input<string>;
        repositoryDecoration: pulumi.Input<string>;
        repositoryPattern: pulumi.Input<string>;
        tagDecoration: pulumi.Input<string>;
        tagPattern: pulumi.Input<string>;
    }

    export interface InstanceReplication {
        id?: pulumi.Input<string>;
        regionId?: pulumi.Input<number>;
        regionName?: pulumi.Input<string>;
        synTag?: pulumi.Input<boolean>;
    }

    export interface InstanceSecurityPolicy {
        cidrBlock?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        index?: pulumi.Input<number>;
        version?: pulumi.Input<string>;
    }

    export interface ManageReplicationOperationPeerReplicationOption {
        enablePeerReplication: pulumi.Input<boolean>;
        peerRegistryToken: pulumi.Input<string>;
        peerRegistryUin: pulumi.Input<string>;
    }

    export interface ManageReplicationOperationRule {
        destNamespace: pulumi.Input<string>;
        filters: pulumi.Input<pulumi.Input<inputs.Tcr.ManageReplicationOperationRuleFilter>[]>;
        name: pulumi.Input<string>;
        override: pulumi.Input<boolean>;
    }

    export interface ManageReplicationOperationRuleFilter {
        type: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface NamespaceCveWhitelistItem {
        cveId?: pulumi.Input<string>;
    }

    export interface ServiceAccountPermission {
        actions: pulumi.Input<pulumi.Input<string>[]>;
        resource: pulumi.Input<string>;
    }

    export interface TagRetentionRuleRetentionRule {
        key: pulumi.Input<string>;
        value: pulumi.Input<number>;
    }

    export interface WebhookTriggerTrigger {
        condition: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        enabled: pulumi.Input<boolean>;
        eventTypes: pulumi.Input<pulumi.Input<string>[]>;
        id?: pulumi.Input<number>;
        name: pulumi.Input<string>;
        namespaceId?: pulumi.Input<number>;
        targets: pulumi.Input<pulumi.Input<inputs.Tcr.WebhookTriggerTriggerTarget>[]>;
    }

    export interface WebhookTriggerTriggerTarget {
        address: pulumi.Input<string>;
        headers?: pulumi.Input<pulumi.Input<inputs.Tcr.WebhookTriggerTriggerTargetHeader>[]>;
    }

    export interface WebhookTriggerTriggerTargetHeader {
        key: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace Tcss {
    export interface ImageRegistryConnDetectConfig {
        quuid?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }
}

export namespace Tdcpg {
}

export namespace Tdmq {
    export interface GetProInstancesFilter {
        name?: string;
        values?: string[];
    }

    export interface GetProInstancesFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetPublishersFilter {
        name?: string;
        values?: string[];
    }

    export interface GetPublishersFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetPublishersSort {
        name: string;
        order: string;
    }

    export interface GetPublishersSortArgs {
        name: pulumi.Input<string>;
        order: pulumi.Input<string>;
    }

    export interface GetRabbitmqNodeListFilter {
        name?: string;
        values?: string[];
    }

    export interface GetRabbitmqNodeListFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetRabbitmqVipInstanceFilter {
        name?: string;
        values?: string[];
    }

    export interface GetRabbitmqVipInstanceFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface NamespaceRetentionPolicy {
        sizeInMb?: pulumi.Input<number>;
        timeInMinutes?: pulumi.Input<number>;
    }

    export interface ProfessionalClusterVpc {
        subnetId: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }

    export interface RocketmqClusterVpc {
        subnetId?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface RocketmqVipInstanceIpRule {
        allow: pulumi.Input<boolean>;
        ipRule: pulumi.Input<string>;
        remark: pulumi.Input<string>;
    }

    export interface RocketmqVipInstanceVpcInfo {
        subnetId: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }
}

export namespace Tem {
    export interface AppConfigConfigData {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ApplicationServiceService {
        ip?: pulumi.Input<string>;
        portMappingItemLists?: pulumi.Input<pulumi.Input<inputs.Tem.ApplicationServiceServicePortMappingItemList>[]>;
        serviceName?: pulumi.Input<string>;
        subnetId?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface ApplicationServiceServicePortMappingItemList {
        port?: pulumi.Input<number>;
        protocol?: pulumi.Input<string>;
        targetPort?: pulumi.Input<number>;
    }

    export interface GatewayIngress {
        addressIpVersion: pulumi.Input<string>;
        clbId?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        environmentId: pulumi.Input<string>;
        ingressName: pulumi.Input<string>;
        mixed: pulumi.Input<boolean>;
        rewriteType?: pulumi.Input<string>;
        rules: pulumi.Input<pulumi.Input<inputs.Tem.GatewayIngressRule>[]>;
        tls?: pulumi.Input<pulumi.Input<inputs.Tem.GatewayIngressTl>[]>;
        vip?: pulumi.Input<string>;
    }

    export interface GatewayIngressRule {
        host?: pulumi.Input<string>;
        http: pulumi.Input<inputs.Tem.GatewayIngressRuleHttp>;
        protocol?: pulumi.Input<string>;
    }

    export interface GatewayIngressRuleHttp {
        paths: pulumi.Input<pulumi.Input<inputs.Tem.GatewayIngressRuleHttpPath>[]>;
    }

    export interface GatewayIngressRuleHttpPath {
        backend: pulumi.Input<inputs.Tem.GatewayIngressRuleHttpPathBackend>;
        path: pulumi.Input<string>;
    }

    export interface GatewayIngressRuleHttpPathBackend {
        serviceName: pulumi.Input<string>;
        servicePort: pulumi.Input<number>;
    }

    export interface GatewayIngressTl {
        certificateId: pulumi.Input<string>;
        hosts: pulumi.Input<pulumi.Input<string>[]>;
        secretName?: pulumi.Input<string>;
    }

    export interface ScaleRuleAutoscaler {
        autoscalerName: pulumi.Input<string>;
        cronHorizontalAutoscalers?: pulumi.Input<pulumi.Input<inputs.Tem.ScaleRuleAutoscalerCronHorizontalAutoscaler>[]>;
        description?: pulumi.Input<string>;
        enabled: pulumi.Input<boolean>;
        horizontalAutoscalers?: pulumi.Input<pulumi.Input<inputs.Tem.ScaleRuleAutoscalerHorizontalAutoscaler>[]>;
        maxReplicas: pulumi.Input<number>;
        minReplicas: pulumi.Input<number>;
    }

    export interface ScaleRuleAutoscalerCronHorizontalAutoscaler {
        enabled: pulumi.Input<boolean>;
        name: pulumi.Input<string>;
        period: pulumi.Input<string>;
        priority: pulumi.Input<number>;
        schedules: pulumi.Input<pulumi.Input<inputs.Tem.ScaleRuleAutoscalerCronHorizontalAutoscalerSchedule>[]>;
    }

    export interface ScaleRuleAutoscalerCronHorizontalAutoscalerSchedule {
        startAt: pulumi.Input<string>;
        targetReplicas: pulumi.Input<number>;
    }

    export interface ScaleRuleAutoscalerHorizontalAutoscaler {
        enabled: pulumi.Input<boolean>;
        maxReplicas: pulumi.Input<number>;
        metrics: pulumi.Input<string>;
        minReplicas: pulumi.Input<number>;
        threshold: pulumi.Input<number>;
    }

    export interface WorkloadDeployStrategyConf {
        batchInterval?: pulumi.Input<number>;
        betaBatchNum?: pulumi.Input<number>;
        deployStrategyType: pulumi.Input<number>;
        force?: pulumi.Input<boolean>;
        minAvailable?: pulumi.Input<number>;
        totalBatchCount: pulumi.Input<number>;
    }

    export interface WorkloadEnvConf {
        config?: pulumi.Input<string>;
        key: pulumi.Input<string>;
        secret?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface WorkloadLiveness {
        exec?: pulumi.Input<string>;
        initialDelaySeconds?: pulumi.Input<number>;
        path?: pulumi.Input<string>;
        periodSeconds?: pulumi.Input<number>;
        port?: pulumi.Input<number>;
        protocol?: pulumi.Input<string>;
        timeoutSeconds?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface WorkloadReadiness {
        exec?: pulumi.Input<string>;
        initialDelaySeconds?: pulumi.Input<number>;
        path?: pulumi.Input<string>;
        periodSeconds?: pulumi.Input<number>;
        port?: pulumi.Input<number>;
        protocol?: pulumi.Input<string>;
        timeoutSeconds?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface WorkloadStartupProbe {
        exec?: pulumi.Input<string>;
        initialDelaySeconds?: pulumi.Input<number>;
        path?: pulumi.Input<string>;
        periodSeconds?: pulumi.Input<number>;
        port?: pulumi.Input<number>;
        protocol?: pulumi.Input<string>;
        timeoutSeconds?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface WorkloadStorageConf {
        storageVolIp: pulumi.Input<string>;
        storageVolName: pulumi.Input<string>;
        storageVolPath: pulumi.Input<string>;
    }

    export interface WorkloadStorageMountConf {
        mountPath: pulumi.Input<string>;
        volumeName: pulumi.Input<string>;
    }
}

export namespace Teo {
    export interface AccelerationDomainOriginInfo {
        backupOrigin?: pulumi.Input<string>;
        origin: pulumi.Input<string>;
        originType: pulumi.Input<string>;
        privateAccess?: pulumi.Input<string>;
        privateParameters?: pulumi.Input<pulumi.Input<inputs.Teo.AccelerationDomainOriginInfoPrivateParameter>[]>;
    }

    export interface AccelerationDomainOriginInfoPrivateParameter {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ApplicationProxyIpv6 {
        switch: pulumi.Input<string>;
    }

    export interface CertificateConfigServerCertInfo {
        alias?: pulumi.Input<string>;
        certId: pulumi.Input<string>;
        commonName?: pulumi.Input<string>;
        deployTime?: pulumi.Input<string>;
        expireTime?: pulumi.Input<string>;
        signAlgo?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface FunctionRuleFunctionRuleCondition {
        ruleConditions: pulumi.Input<pulumi.Input<inputs.Teo.FunctionRuleFunctionRuleConditionRuleCondition>[]>;
    }

    export interface FunctionRuleFunctionRuleConditionRuleCondition {
        ignoreCase?: pulumi.Input<boolean>;
        name?: pulumi.Input<string>;
        operator: pulumi.Input<string>;
        target: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface FunctionRuntimeEnvironmentEnvironmentVariable {
        key: pulumi.Input<string>;
        type: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface L4ProxyDdosProtectionConfig {
        levelMainland?: pulumi.Input<string>;
        levelOverseas?: pulumi.Input<string>;
        maxBandwidthMainland?: pulumi.Input<number>;
    }

    export interface OriginGroupRecord {
        private?: pulumi.Input<boolean>;
        privateParameters?: pulumi.Input<pulumi.Input<inputs.Teo.OriginGroupRecordPrivateParameter>[]>;
        record: pulumi.Input<string>;
        recordId?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
        weight?: pulumi.Input<number>;
    }

    export interface OriginGroupRecordPrivateParameter {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface OriginGroupReference {
        instanceId?: pulumi.Input<string>;
        instanceName?: pulumi.Input<string>;
        instanceType?: pulumi.Input<string>;
    }

    export interface RealtimeLogDeliveryCls {
        logSetId: pulumi.Input<string>;
        logSetRegion: pulumi.Input<string>;
        topicId: pulumi.Input<string>;
    }

    export interface RealtimeLogDeliveryCustomEndpoint {
        accessId?: pulumi.Input<string>;
        accessKey?: pulumi.Input<string>;
        compressType?: pulumi.Input<string>;
        headers?: pulumi.Input<pulumi.Input<inputs.Teo.RealtimeLogDeliveryCustomEndpointHeader>[]>;
        protocol?: pulumi.Input<string>;
        url: pulumi.Input<string>;
    }

    export interface RealtimeLogDeliveryCustomEndpointHeader {
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface RealtimeLogDeliveryCustomField {
        enabled?: pulumi.Input<boolean>;
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface RealtimeLogDeliveryDeliveryCondition {
        conditions?: pulumi.Input<pulumi.Input<inputs.Teo.RealtimeLogDeliveryDeliveryConditionCondition>[]>;
    }

    export interface RealtimeLogDeliveryDeliveryConditionCondition {
        key: pulumi.Input<string>;
        operator: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RealtimeLogDeliveryLogFormat {
        batchPrefix?: pulumi.Input<string>;
        batchSuffix?: pulumi.Input<string>;
        fieldDelimiter?: pulumi.Input<string>;
        formatType: pulumi.Input<string>;
        recordDelimiter?: pulumi.Input<string>;
        recordPrefix?: pulumi.Input<string>;
        recordSuffix?: pulumi.Input<string>;
    }

    export interface RealtimeLogDeliveryS3 {
        accessId: pulumi.Input<string>;
        accessKey: pulumi.Input<string>;
        bucket: pulumi.Input<string>;
        compressType?: pulumi.Input<string>;
        endpoint: pulumi.Input<string>;
        region: pulumi.Input<string>;
    }

    export interface RuleEngineRule {
        actions?: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleAction>[]>;
        ors: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleOr>[]>;
        subRules?: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleSubRule>[]>;
    }

    export interface RuleEngineRuleAction {
        codeAction?: pulumi.Input<inputs.Teo.RuleEngineRuleActionCodeAction>;
        normalAction?: pulumi.Input<inputs.Teo.RuleEngineRuleActionNormalAction>;
        rewriteAction?: pulumi.Input<inputs.Teo.RuleEngineRuleActionRewriteAction>;
    }

    export interface RuleEngineRuleActionCodeAction {
        action: pulumi.Input<string>;
        parameters: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleActionCodeActionParameter>[]>;
    }

    export interface RuleEngineRuleActionCodeActionParameter {
        name: pulumi.Input<string>;
        statusCode: pulumi.Input<number>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RuleEngineRuleActionNormalAction {
        action: pulumi.Input<string>;
        parameters: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleActionNormalActionParameter>[]>;
    }

    export interface RuleEngineRuleActionNormalActionParameter {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RuleEngineRuleActionRewriteAction {
        action: pulumi.Input<string>;
        parameters: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleActionRewriteActionParameter>[]>;
    }

    export interface RuleEngineRuleActionRewriteActionParameter {
        action: pulumi.Input<string>;
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RuleEngineRuleOr {
        ands: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleOrAnd>[]>;
    }

    export interface RuleEngineRuleOrAnd {
        ignoreCase?: pulumi.Input<boolean>;
        name?: pulumi.Input<string>;
        operator: pulumi.Input<string>;
        target: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RuleEngineRuleSubRule {
        rules: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleSubRuleRule>[]>;
        tags?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RuleEngineRuleSubRuleRule {
        actions?: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleSubRuleRuleAction>[]>;
        ors: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleSubRuleRuleOr>[]>;
    }

    export interface RuleEngineRuleSubRuleRuleAction {
        codeAction?: pulumi.Input<inputs.Teo.RuleEngineRuleSubRuleRuleActionCodeAction>;
        normalAction?: pulumi.Input<inputs.Teo.RuleEngineRuleSubRuleRuleActionNormalAction>;
        rewriteAction?: pulumi.Input<inputs.Teo.RuleEngineRuleSubRuleRuleActionRewriteAction>;
    }

    export interface RuleEngineRuleSubRuleRuleActionCodeAction {
        action: pulumi.Input<string>;
        parameters: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleSubRuleRuleActionCodeActionParameter>[]>;
    }

    export interface RuleEngineRuleSubRuleRuleActionCodeActionParameter {
        name: pulumi.Input<string>;
        statusCode: pulumi.Input<number>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RuleEngineRuleSubRuleRuleActionNormalAction {
        action: pulumi.Input<string>;
        parameters: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleSubRuleRuleActionNormalActionParameter>[]>;
    }

    export interface RuleEngineRuleSubRuleRuleActionNormalActionParameter {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RuleEngineRuleSubRuleRuleActionRewriteAction {
        action: pulumi.Input<string>;
        parameters: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleSubRuleRuleActionRewriteActionParameter>[]>;
    }

    export interface RuleEngineRuleSubRuleRuleActionRewriteActionParameter {
        action: pulumi.Input<string>;
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RuleEngineRuleSubRuleRuleOr {
        ands: pulumi.Input<pulumi.Input<inputs.Teo.RuleEngineRuleSubRuleRuleOrAnd>[]>;
    }

    export interface RuleEngineRuleSubRuleRuleOrAnd {
        ignoreCase?: pulumi.Input<boolean>;
        name?: pulumi.Input<string>;
        operator: pulumi.Input<string>;
        target: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SecurityIpGroupIpGroup {
        contents: pulumi.Input<pulumi.Input<string>[]>;
        groupId?: pulumi.Input<number>;
        name: pulumi.Input<string>;
    }

    export interface ZoneOwnershipVerification {
        dnsVerifications?: pulumi.Input<pulumi.Input<inputs.Teo.ZoneOwnershipVerificationDnsVerification>[]>;
    }

    export interface ZoneOwnershipVerificationDnsVerification {
        recordType?: pulumi.Input<string>;
        recordValue?: pulumi.Input<string>;
        subdomain?: pulumi.Input<string>;
    }

    export interface ZoneSettingCache {
        cache?: pulumi.Input<inputs.Teo.ZoneSettingCacheCache>;
        followOrigin?: pulumi.Input<inputs.Teo.ZoneSettingCacheFollowOrigin>;
        noCache?: pulumi.Input<inputs.Teo.ZoneSettingCacheNoCache>;
    }

    export interface ZoneSettingCacheCache {
        cacheTime?: pulumi.Input<number>;
        switch?: pulumi.Input<string>;
    }

    export interface ZoneSettingCacheFollowOrigin {
        switch?: pulumi.Input<string>;
    }

    export interface ZoneSettingCacheKey {
        fullUrlCache?: pulumi.Input<string>;
        ignoreCase?: pulumi.Input<string>;
        queryString?: pulumi.Input<inputs.Teo.ZoneSettingCacheKeyQueryString>;
    }

    export interface ZoneSettingCacheKeyQueryString {
        action?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ZoneSettingCacheNoCache {
        switch?: pulumi.Input<string>;
    }

    export interface ZoneSettingCachePrefresh {
        percent?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingClientIpHeader {
        headerName?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingCompression {
        algorithms?: pulumi.Input<pulumi.Input<string>[]>;
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingForceRedirect {
        redirectStatusCode?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingHttps {
        hsts?: pulumi.Input<inputs.Teo.ZoneSettingHttpsHsts>;
        http2?: pulumi.Input<string>;
        ocspStapling?: pulumi.Input<string>;
        tlsVersions?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ZoneSettingHttpsHsts {
        includeSubDomains?: pulumi.Input<string>;
        maxAge?: pulumi.Input<number>;
        preload?: pulumi.Input<string>;
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingIpv6 {
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingMaxAge {
        followOrigin?: pulumi.Input<string>;
        maxAgeTime?: pulumi.Input<number>;
    }

    export interface ZoneSettingOfflineCache {
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingOrigin {
        backupOrigins?: pulumi.Input<pulumi.Input<string>[]>;
        originPullProtocol?: pulumi.Input<string>;
        origins?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ZoneSettingPostMaxSize {
        maxSize?: pulumi.Input<number>;
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingQuic {
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingSmartRouting {
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingUpstreamHttp2 {
        switch: pulumi.Input<string>;
    }

    export interface ZoneSettingWebSocket {
        switch: pulumi.Input<string>;
        timeout?: pulumi.Input<number>;
    }
}

export namespace Thpc {
    export interface WorkspacesDataDisk {
        burstPerformance?: pulumi.Input<boolean>;
        deleteWithInstance?: pulumi.Input<boolean>;
        diskId?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
        encrypt?: pulumi.Input<boolean>;
        kmsKeyId?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
        throughputPerformance?: pulumi.Input<number>;
    }

    export interface WorkspacesEnhancedService {
        automationService?: pulumi.Input<inputs.Thpc.WorkspacesEnhancedServiceAutomationService>;
        monitorService?: pulumi.Input<inputs.Thpc.WorkspacesEnhancedServiceMonitorService>;
        securityService?: pulumi.Input<inputs.Thpc.WorkspacesEnhancedServiceSecurityService>;
    }

    export interface WorkspacesEnhancedServiceAutomationService {
        enabled?: pulumi.Input<boolean>;
    }

    export interface WorkspacesEnhancedServiceMonitorService {
        enabled?: pulumi.Input<boolean>;
    }

    export interface WorkspacesEnhancedServiceSecurityService {
        enabled?: pulumi.Input<boolean>;
    }

    export interface WorkspacesInternetAccessible {
        bandwidthPackageId?: pulumi.Input<string>;
        internetChargeType?: pulumi.Input<string>;
        internetMaxBandwidthOut?: pulumi.Input<number>;
        publicIpAssigned?: pulumi.Input<boolean>;
    }

    export interface WorkspacesLoginSettings {
        keyIds?: pulumi.Input<pulumi.Input<string>[]>;
        password?: pulumi.Input<string>;
    }

    export interface WorkspacesPlacement {
        projectId?: pulumi.Input<number>;
        zone: pulumi.Input<string>;
    }

    export interface WorkspacesSpaceChargePrepaid {
        period?: pulumi.Input<number>;
        renewFlag?: pulumi.Input<string>;
    }

    export interface WorkspacesSystemDisk {
        diskId?: pulumi.Input<string>;
        diskSize?: pulumi.Input<number>;
        diskType?: pulumi.Input<string>;
    }

    export interface WorkspacesTagSpecification {
        tags: pulumi.Input<pulumi.Input<inputs.Thpc.WorkspacesTagSpecificationTag>[]>;
    }

    export interface WorkspacesTagSpecificationTag {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface WorkspacesVirtualPrivateCloud {
        asVpcGateway?: pulumi.Input<boolean>;
        ipv6AddressCount?: pulumi.Input<number>;
        privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        subnetId: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }
}

export namespace Trocket {
    export interface RocketmqInstanceIpRule {
        allow: pulumi.Input<boolean>;
        ip: pulumi.Input<string>;
        remark: pulumi.Input<string>;
    }
}

export namespace Tse {
    export interface CngwCanaryRuleCanaryRule {
        balancedServiceLists?: pulumi.Input<pulumi.Input<inputs.Tse.CngwCanaryRuleCanaryRuleBalancedServiceList>[]>;
        conditionLists?: pulumi.Input<pulumi.Input<inputs.Tse.CngwCanaryRuleCanaryRuleConditionList>[]>;
        enabled: pulumi.Input<boolean>;
        priority: pulumi.Input<number>;
        serviceId?: pulumi.Input<string>;
        serviceName?: pulumi.Input<string>;
    }

    export interface CngwCanaryRuleCanaryRuleBalancedServiceList {
        percent?: pulumi.Input<number>;
        serviceId?: pulumi.Input<string>;
        serviceName?: pulumi.Input<string>;
        upstreamName?: pulumi.Input<string>;
    }

    export interface CngwCanaryRuleCanaryRuleConditionList {
        delimiter?: pulumi.Input<string>;
        globalConfigId?: pulumi.Input<string>;
        globalConfigName?: pulumi.Input<string>;
        key?: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        type: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface CngwGatewayInstancePort {
        httpPort?: pulumi.Input<string>;
        httpsPort?: pulumi.Input<string>;
        tcpPort?: pulumi.Input<string>;
        udpPort?: pulumi.Input<string>;
    }

    export interface CngwGatewayInternetConfig {
        description?: pulumi.Input<string>;
        internetAddressVersion?: pulumi.Input<string>;
        internetMaxBandwidthOut?: pulumi.Input<number>;
        internetPayMode?: pulumi.Input<string>;
        masterZoneId?: pulumi.Input<string>;
        multiZoneFlag?: pulumi.Input<boolean>;
        slaType?: pulumi.Input<string>;
        slaveZoneId?: pulumi.Input<string>;
    }

    export interface CngwGatewayNodeConfig {
        number: pulumi.Input<number>;
        specification: pulumi.Input<string>;
    }

    export interface CngwGatewayVpcConfig {
        subnetId?: pulumi.Input<string>;
        vpcId?: pulumi.Input<string>;
    }

    export interface CngwGroupInternetConfig {
        description?: pulumi.Input<string>;
        internetAddressVersion?: pulumi.Input<string>;
        internetMaxBandwidthOut?: pulumi.Input<number>;
        internetPayMode?: pulumi.Input<string>;
        masterZoneId?: pulumi.Input<string>;
        multiZoneFlag?: pulumi.Input<boolean>;
        slaType?: pulumi.Input<string>;
        slaveZoneId?: pulumi.Input<string>;
    }

    export interface CngwGroupNodeConfig {
        number: pulumi.Input<number>;
        specification: pulumi.Input<string>;
    }

    export interface CngwNetworkAccessControlAccessControl {
        cidrBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
        cidrWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
        mode?: pulumi.Input<string>;
    }

    export interface CngwRouteHeader {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface CngwRouteRateLimitLimitDetail {
        enabled: pulumi.Input<boolean>;
        externalRedis?: pulumi.Input<inputs.Tse.CngwRouteRateLimitLimitDetailExternalRedis>;
        header?: pulumi.Input<string>;
        hideClientHeaders: pulumi.Input<boolean>;
        isDelay: pulumi.Input<boolean>;
        limitBy: pulumi.Input<string>;
        lineUpTime?: pulumi.Input<number>;
        path?: pulumi.Input<string>;
        policy?: pulumi.Input<string>;
        qpsThresholds: pulumi.Input<pulumi.Input<inputs.Tse.CngwRouteRateLimitLimitDetailQpsThreshold>[]>;
        rateLimitResponse?: pulumi.Input<inputs.Tse.CngwRouteRateLimitLimitDetailRateLimitResponse>;
        rateLimitResponseUrl?: pulumi.Input<string>;
        responseType: pulumi.Input<string>;
    }

    export interface CngwRouteRateLimitLimitDetailExternalRedis {
        redisHost: pulumi.Input<string>;
        redisPassword: pulumi.Input<string>;
        redisPort: pulumi.Input<number>;
        redisTimeout: pulumi.Input<number>;
    }

    export interface CngwRouteRateLimitLimitDetailQpsThreshold {
        max: pulumi.Input<number>;
        unit: pulumi.Input<string>;
    }

    export interface CngwRouteRateLimitLimitDetailRateLimitResponse {
        body?: pulumi.Input<string>;
        headers?: pulumi.Input<pulumi.Input<inputs.Tse.CngwRouteRateLimitLimitDetailRateLimitResponseHeader>[]>;
        httpStatus?: pulumi.Input<number>;
    }

    export interface CngwRouteRateLimitLimitDetailRateLimitResponseHeader {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface CngwServiceRateLimitLimitDetail {
        enabled: pulumi.Input<boolean>;
        externalRedis?: pulumi.Input<inputs.Tse.CngwServiceRateLimitLimitDetailExternalRedis>;
        header?: pulumi.Input<string>;
        hideClientHeaders: pulumi.Input<boolean>;
        isDelay: pulumi.Input<boolean>;
        limitBy: pulumi.Input<string>;
        lineUpTime?: pulumi.Input<number>;
        path?: pulumi.Input<string>;
        policy?: pulumi.Input<string>;
        qpsThresholds: pulumi.Input<pulumi.Input<inputs.Tse.CngwServiceRateLimitLimitDetailQpsThreshold>[]>;
        rateLimitResponse?: pulumi.Input<inputs.Tse.CngwServiceRateLimitLimitDetailRateLimitResponse>;
        rateLimitResponseUrl?: pulumi.Input<string>;
        responseType: pulumi.Input<string>;
    }

    export interface CngwServiceRateLimitLimitDetailExternalRedis {
        redisHost: pulumi.Input<string>;
        redisPassword: pulumi.Input<string>;
        redisPort: pulumi.Input<number>;
        redisTimeout: pulumi.Input<number>;
    }

    export interface CngwServiceRateLimitLimitDetailQpsThreshold {
        max: pulumi.Input<number>;
        unit: pulumi.Input<string>;
    }

    export interface CngwServiceRateLimitLimitDetailRateLimitResponse {
        body?: pulumi.Input<string>;
        headers?: pulumi.Input<pulumi.Input<inputs.Tse.CngwServiceRateLimitLimitDetailRateLimitResponseHeader>[]>;
        httpStatus?: pulumi.Input<number>;
    }

    export interface CngwServiceRateLimitLimitDetailRateLimitResponseHeader {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface CngwServiceUpstreamInfo {
        algorithm?: pulumi.Input<string>;
        autoScalingCvmPort?: pulumi.Input<number>;
        autoScalingGroupId?: pulumi.Input<string>;
        autoScalingHookStatus?: pulumi.Input<string>;
        autoScalingTatCmdStatus?: pulumi.Input<string>;
        host?: pulumi.Input<string>;
        namespace?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        realSourceType?: pulumi.Input<string>;
        scfLambdaName?: pulumi.Input<string>;
        scfLambdaQualifier?: pulumi.Input<string>;
        scfNamespace?: pulumi.Input<string>;
        scfType?: pulumi.Input<string>;
        serviceName?: pulumi.Input<string>;
        slowStart?: pulumi.Input<number>;
        sourceId?: pulumi.Input<string>;
        sourceName?: pulumi.Input<string>;
        sourceType?: pulumi.Input<string>;
        targets?: pulumi.Input<pulumi.Input<inputs.Tse.CngwServiceUpstreamInfoTarget>[]>;
    }

    export interface CngwServiceUpstreamInfoTarget {
        createdTime?: pulumi.Input<string>;
        health?: pulumi.Input<string>;
        host: pulumi.Input<string>;
        port: pulumi.Input<number>;
        source?: pulumi.Input<string>;
        weight: pulumi.Input<number>;
    }

    export interface CngwStrategyConfig {
        behavior?: pulumi.Input<inputs.Tse.CngwStrategyConfigBehavior>;
        createTime?: pulumi.Input<string>;
        maxReplicas?: pulumi.Input<number>;
        metrics?: pulumi.Input<pulumi.Input<inputs.Tse.CngwStrategyConfigMetric>[]>;
        modifyTime?: pulumi.Input<string>;
        strategyId?: pulumi.Input<string>;
    }

    export interface CngwStrategyConfigBehavior {
        scaleDown?: pulumi.Input<inputs.Tse.CngwStrategyConfigBehaviorScaleDown>;
        scaleUp?: pulumi.Input<inputs.Tse.CngwStrategyConfigBehaviorScaleUp>;
    }

    export interface CngwStrategyConfigBehaviorScaleDown {
        policies?: pulumi.Input<pulumi.Input<inputs.Tse.CngwStrategyConfigBehaviorScaleDownPolicy>[]>;
        selectPolicy?: pulumi.Input<string>;
        stabilizationWindowSeconds?: pulumi.Input<number>;
    }

    export interface CngwStrategyConfigBehaviorScaleDownPolicy {
        periodSeconds?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        value?: pulumi.Input<number>;
    }

    export interface CngwStrategyConfigBehaviorScaleUp {
        policies?: pulumi.Input<pulumi.Input<inputs.Tse.CngwStrategyConfigBehaviorScaleUpPolicy>[]>;
        selectPolicy?: pulumi.Input<string>;
        stabilizationWindowSeconds?: pulumi.Input<number>;
    }

    export interface CngwStrategyConfigBehaviorScaleUpPolicy {
        periodSeconds?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
        value?: pulumi.Input<number>;
    }

    export interface CngwStrategyConfigMetric {
        resourceName?: pulumi.Input<string>;
        targetType?: pulumi.Input<string>;
        targetValue?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
    }

    export interface CngwStrategyCronConfig {
        params?: pulumi.Input<pulumi.Input<inputs.Tse.CngwStrategyCronConfigParam>[]>;
        strategyId?: pulumi.Input<string>;
    }

    export interface CngwStrategyCronConfigParam {
        crontab?: pulumi.Input<string>;
        period?: pulumi.Input<string>;
        startAt?: pulumi.Input<string>;
        targetReplicas?: pulumi.Input<number>;
    }

    export interface GetGatewayCertificatesFilter {
        key?: string;
        value?: string;
    }

    export interface GetGatewayCertificatesFilterArgs {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface GetGatewayServicesFilter {
        key?: string;
        value?: string;
    }

    export interface GetGatewayServicesFilterArgs {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface GetGatewaysFilter {
        name: string;
        values: string[];
    }

    export interface GetGatewaysFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetGroupsFilter {
        name: string;
        values: string[];
    }

    export interface GetGroupsFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface InstanceEngineRegionInfo {
        engineRegion: pulumi.Input<string>;
        replica: pulumi.Input<number>;
        vpcInfos: pulumi.Input<pulumi.Input<inputs.Tse.InstanceEngineRegionInfoVpcInfo>[]>;
    }

    export interface InstanceEngineRegionInfoVpcInfo {
        intranetAddress?: pulumi.Input<string>;
        subnetId: pulumi.Input<string>;
        vpcId: pulumi.Input<string>;
    }
}

export namespace Tsf {
    export interface ApiGroupBindedGatewayDeployGroup {
        applicationId?: pulumi.Input<string>;
        applicationName?: pulumi.Input<string>;
        applicationType?: pulumi.Input<string>;
        clusterType?: pulumi.Input<string>;
        deployGroupId?: pulumi.Input<string>;
        deployGroupName?: pulumi.Input<string>;
        groupStatus?: pulumi.Input<string>;
    }

    export interface ApplicationServiceConfigList {
        healthCheck?: pulumi.Input<inputs.Tsf.ApplicationServiceConfigListHealthCheck>;
        name: pulumi.Input<string>;
        ports: pulumi.Input<pulumi.Input<inputs.Tsf.ApplicationServiceConfigListPort>[]>;
    }

    export interface ApplicationServiceConfigListHealthCheck {
        path?: pulumi.Input<string>;
    }

    export interface ApplicationServiceConfigListPort {
        protocol: pulumi.Input<string>;
        targetPort: pulumi.Input<number>;
    }

    export interface ClusterOperationInfo {
        addInstances?: pulumi.Input<pulumi.Input<inputs.Tsf.ClusterOperationInfoAddInstance>[]>;
        destroys?: pulumi.Input<pulumi.Input<inputs.Tsf.ClusterOperationInfoDestroy>[]>;
        inits?: pulumi.Input<pulumi.Input<inputs.Tsf.ClusterOperationInfoInit>[]>;
    }

    export interface ClusterOperationInfoAddInstance {
        disabledReason?: pulumi.Input<string>;
        enabled?: pulumi.Input<boolean>;
        supported?: pulumi.Input<boolean>;
    }

    export interface ClusterOperationInfoDestroy {
        disabledReason?: pulumi.Input<string>;
        enabled?: pulumi.Input<boolean>;
        supported?: pulumi.Input<boolean>;
    }

    export interface ClusterOperationInfoInit {
        disabledReason?: pulumi.Input<string>;
        enabled?: pulumi.Input<boolean>;
        supported?: pulumi.Input<boolean>;
    }

    export interface DeployContainerGroupAgentProfileList {
        agentType?: pulumi.Input<string>;
        agentVersion?: pulumi.Input<string>;
    }

    export interface DeployContainerGroupEnv {
        name: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        valueFrom?: pulumi.Input<inputs.Tsf.DeployContainerGroupEnvValueFrom>;
    }

    export interface DeployContainerGroupEnvValueFrom {
        fieldRef?: pulumi.Input<inputs.Tsf.DeployContainerGroupEnvValueFromFieldRef>;
        resourceFieldRef?: pulumi.Input<inputs.Tsf.DeployContainerGroupEnvValueFromResourceFieldRef>;
    }

    export interface DeployContainerGroupEnvValueFromFieldRef {
        fieldPath?: pulumi.Input<string>;
    }

    export interface DeployContainerGroupEnvValueFromResourceFieldRef {
        resource?: pulumi.Input<string>;
    }

    export interface DeployContainerGroupHealthCheckSettings {
        livenessProbe?: pulumi.Input<inputs.Tsf.DeployContainerGroupHealthCheckSettingsLivenessProbe>;
        readinessProbe?: pulumi.Input<inputs.Tsf.DeployContainerGroupHealthCheckSettingsReadinessProbe>;
    }

    export interface DeployContainerGroupHealthCheckSettingsLivenessProbe {
        actionType: pulumi.Input<string>;
        commands?: pulumi.Input<pulumi.Input<string>[]>;
        failureThreshold?: pulumi.Input<number>;
        initialDelaySeconds?: pulumi.Input<number>;
        path?: pulumi.Input<string>;
        periodSeconds?: pulumi.Input<number>;
        port?: pulumi.Input<number>;
        scheme?: pulumi.Input<string>;
        successThreshold?: pulumi.Input<number>;
        timeoutSeconds?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
    }

    export interface DeployContainerGroupHealthCheckSettingsReadinessProbe {
        actionType: pulumi.Input<string>;
        commands?: pulumi.Input<pulumi.Input<string>[]>;
        failureThreshold?: pulumi.Input<number>;
        initialDelaySeconds?: pulumi.Input<number>;
        path?: pulumi.Input<string>;
        periodSeconds?: pulumi.Input<number>;
        port?: pulumi.Input<number>;
        scheme?: pulumi.Input<string>;
        successThreshold?: pulumi.Input<number>;
        timeoutSeconds?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
    }

    export interface DeployContainerGroupSchedulingStrategy {
        type: pulumi.Input<string>;
    }

    export interface DeployContainerGroupServiceSetting {
        accessType: pulumi.Input<number>;
        allowDeleteService?: pulumi.Input<boolean>;
        disableService?: pulumi.Input<boolean>;
        headlessService?: pulumi.Input<boolean>;
        openSessionAffinity?: pulumi.Input<boolean>;
        protocolPorts: pulumi.Input<pulumi.Input<inputs.Tsf.DeployContainerGroupServiceSettingProtocolPort>[]>;
        sessionAffinityTimeoutSeconds?: pulumi.Input<number>;
        subnetId: pulumi.Input<string>;
    }

    export interface DeployContainerGroupServiceSettingProtocolPort {
        nodePort?: pulumi.Input<number>;
        port: pulumi.Input<number>;
        protocol: pulumi.Input<string>;
        targetPort: pulumi.Input<number>;
    }

    export interface DeployContainerGroupVolumeInfoList {
        volumeConfig?: pulumi.Input<string>;
        volumeName: pulumi.Input<string>;
        volumeType: pulumi.Input<string>;
    }

    export interface DeployContainerGroupVolumeMountInfoList {
        readOrWrite?: pulumi.Input<string>;
        volumeMountName: pulumi.Input<string>;
        volumeMountPath: pulumi.Input<string>;
        volumeMountSubPath?: pulumi.Input<string>;
    }

    export interface DeployContainerGroupWarmupSetting {
        curvature?: pulumi.Input<number>;
        enabled?: pulumi.Input<boolean>;
        enabledProtection?: pulumi.Input<boolean>;
        warmupTime?: pulumi.Input<number>;
    }

    export interface DeployVmGroupAgentProfileList {
        agentType?: pulumi.Input<string>;
        agentVersion?: pulumi.Input<string>;
    }

    export interface DeployVmGroupHealthCheckSettings {
        livenessProbe?: pulumi.Input<inputs.Tsf.DeployVmGroupHealthCheckSettingsLivenessProbe>;
        readinessProbe?: pulumi.Input<inputs.Tsf.DeployVmGroupHealthCheckSettingsReadinessProbe>;
    }

    export interface DeployVmGroupHealthCheckSettingsLivenessProbe {
        actionType: pulumi.Input<string>;
        commands?: pulumi.Input<pulumi.Input<string>[]>;
        failureThreshold?: pulumi.Input<number>;
        initialDelaySeconds?: pulumi.Input<number>;
        path?: pulumi.Input<string>;
        periodSeconds?: pulumi.Input<number>;
        port?: pulumi.Input<number>;
        scheme?: pulumi.Input<string>;
        successThreshold?: pulumi.Input<number>;
        timeoutSeconds?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
    }

    export interface DeployVmGroupHealthCheckSettingsReadinessProbe {
        actionType: pulumi.Input<string>;
        commands?: pulumi.Input<pulumi.Input<string>[]>;
        failureThreshold?: pulumi.Input<number>;
        initialDelaySeconds?: pulumi.Input<number>;
        path?: pulumi.Input<string>;
        periodSeconds?: pulumi.Input<number>;
        port?: pulumi.Input<number>;
        scheme?: pulumi.Input<string>;
        successThreshold?: pulumi.Input<number>;
        timeoutSeconds?: pulumi.Input<number>;
        type?: pulumi.Input<string>;
    }

    export interface DeployVmGroupWarmupSetting {
        curvature?: pulumi.Input<number>;
        enabled?: pulumi.Input<boolean>;
        enabledProtection?: pulumi.Input<boolean>;
        warmupTime?: pulumi.Input<number>;
    }

    export interface InstancesAttachmentInstanceAdvancedSettings {
        dockerGraphPath: pulumi.Input<string>;
        mountTarget: pulumi.Input<string>;
    }

    export interface LaneLaneGroupList {
        applicationId?: pulumi.Input<string>;
        applicationName?: pulumi.Input<string>;
        clusterType?: pulumi.Input<string>;
        createTime?: pulumi.Input<number>;
        entrance: pulumi.Input<boolean>;
        groupId: pulumi.Input<string>;
        groupName?: pulumi.Input<string>;
        laneGroupId?: pulumi.Input<string>;
        laneId?: pulumi.Input<string>;
        namespaceId?: pulumi.Input<string>;
        namespaceName?: pulumi.Input<string>;
        updateTime?: pulumi.Input<number>;
    }

    export interface LaneRuleRuleTagList {
        createTime?: pulumi.Input<number>;
        laneRuleId?: pulumi.Input<string>;
        tagId?: pulumi.Input<string>;
        tagName: pulumi.Input<string>;
        tagOperator: pulumi.Input<string>;
        tagValue: pulumi.Input<string>;
        updateTime?: pulumi.Input<number>;
    }

    export interface TaskAdvanceSettings {
        subTaskConcurrency?: pulumi.Input<number>;
    }

    export interface TaskShardArgument {
        shardKey: pulumi.Input<number>;
        shardValue: pulumi.Input<string>;
    }

    export interface TaskTaskRule {
        expression?: pulumi.Input<string>;
        repeatInterval?: pulumi.Input<number>;
        ruleType: pulumi.Input<string>;
    }

    export interface UnitRuleUnitRuleItemList {
        description?: pulumi.Input<string>;
        destNamespaceId: pulumi.Input<string>;
        destNamespaceName: pulumi.Input<string>;
        name: pulumi.Input<string>;
        priority?: pulumi.Input<number>;
        relationship: pulumi.Input<string>;
        ruleId?: pulumi.Input<string>;
        unitRuleId?: pulumi.Input<string>;
        unitRuleTagLists?: pulumi.Input<pulumi.Input<inputs.Tsf.UnitRuleUnitRuleItemListUnitRuleTagList>[]>;
    }

    export interface UnitRuleUnitRuleItemListUnitRuleTagList {
        ruleId?: pulumi.Input<string>;
        tagField: pulumi.Input<string>;
        tagOperator: pulumi.Input<string>;
        tagType: pulumi.Input<string>;
        tagValue: pulumi.Input<string>;
        unitRuleItemId?: pulumi.Input<string>;
    }
}

export namespace Vod {
    export interface AdaptiveDynamicStreamingTemplateStreamInfo {
        audio: pulumi.Input<inputs.Vod.AdaptiveDynamicStreamingTemplateStreamInfoAudio>;
        removeAudio?: pulumi.Input<boolean>;
        removeVideo?: pulumi.Input<boolean>;
        tehdConfig?: pulumi.Input<inputs.Vod.AdaptiveDynamicStreamingTemplateStreamInfoTehdConfig>;
        video: pulumi.Input<inputs.Vod.AdaptiveDynamicStreamingTemplateStreamInfoVideo>;
    }

    export interface AdaptiveDynamicStreamingTemplateStreamInfoAudio {
        audioChannel?: pulumi.Input<string>;
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        sampleRate: pulumi.Input<number>;
    }

    export interface AdaptiveDynamicStreamingTemplateStreamInfoTehdConfig {
        maxVideoBitrate?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface AdaptiveDynamicStreamingTemplateStreamInfoVideo {
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        codecTag?: pulumi.Input<string>;
        fillType?: pulumi.Input<string>;
        fps: pulumi.Input<number>;
        gop?: pulumi.Input<number>;
        height?: pulumi.Input<number>;
        preserveHdrSwitch?: pulumi.Input<string>;
        resolutionAdaptive?: pulumi.Input<boolean>;
        vcrf?: pulumi.Input<number>;
        width?: pulumi.Input<number>;
    }

    export interface ProcedureTemplateAiAnalysisTask {
        definition?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateAiRecognitionTask {
        definition?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateMediaProcessTask {
        adaptiveDynamicStreamingTaskLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskList>[]>;
        animatedGraphicTaskLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskAnimatedGraphicTaskList>[]>;
        coverBySnapshotTaskLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskCoverBySnapshotTaskList>[]>;
        imageSpriteTaskLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskImageSpriteTaskList>[]>;
        sampleSnapshotTaskLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskSampleSnapshotTaskList>[]>;
        snapshotByTimeOffsetTaskLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskList>[]>;
        transcodeTaskLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskTranscodeTaskList>[]>;
    }

    export interface ProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskList {
        definition: pulumi.Input<string>;
        subtitleLists?: pulumi.Input<pulumi.Input<string>[]>;
        watermarkLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskListWatermarkList>[]>;
    }

    export interface ProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskListWatermarkList {
        definition: pulumi.Input<string>;
        endTimeOffset?: pulumi.Input<number>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateMediaProcessTaskAnimatedGraphicTaskList {
        definition: pulumi.Input<string>;
        endTimeOffset: pulumi.Input<number>;
        startTimeOffset: pulumi.Input<number>;
    }

    export interface ProcedureTemplateMediaProcessTaskCoverBySnapshotTaskList {
        definition: pulumi.Input<string>;
        positionType: pulumi.Input<string>;
        positionValue: pulumi.Input<number>;
        watermarkLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskCoverBySnapshotTaskListWatermarkList>[]>;
    }

    export interface ProcedureTemplateMediaProcessTaskCoverBySnapshotTaskListWatermarkList {
        definition: pulumi.Input<string>;
        endTimeOffset?: pulumi.Input<number>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateMediaProcessTaskImageSpriteTaskList {
        definition: pulumi.Input<string>;
    }

    export interface ProcedureTemplateMediaProcessTaskSampleSnapshotTaskList {
        definition: pulumi.Input<string>;
        watermarkLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskSampleSnapshotTaskListWatermarkList>[]>;
    }

    export interface ProcedureTemplateMediaProcessTaskSampleSnapshotTaskListWatermarkList {
        definition: pulumi.Input<string>;
        endTimeOffset?: pulumi.Input<number>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskList {
        definition: pulumi.Input<string>;
        extTimeOffsetLists?: pulumi.Input<pulumi.Input<string>[]>;
        timeOffsetLists?: pulumi.Input<pulumi.Input<number>[]>;
        watermarkLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskListWatermarkList>[]>;
    }

    export interface ProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskListWatermarkList {
        definition: pulumi.Input<string>;
        endTimeOffset?: pulumi.Input<number>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateMediaProcessTaskTranscodeTaskList {
        copyRightWatermark?: pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskTranscodeTaskListCopyRightWatermark>;
        definition: pulumi.Input<string>;
        endTimeOffset?: pulumi.Input<number>;
        headTailLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskTranscodeTaskListHeadTailList>[]>;
        mosaicLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskTranscodeTaskListMosaicList>[]>;
        startTimeOffset?: pulumi.Input<number>;
        traceWatermark?: pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskTranscodeTaskListTraceWatermark>;
        watermarkLists?: pulumi.Input<pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTaskTranscodeTaskListWatermarkList>[]>;
    }

    export interface ProcedureTemplateMediaProcessTaskTranscodeTaskListCopyRightWatermark {
        text?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateMediaProcessTaskTranscodeTaskListHeadTailList {
        definition?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateMediaProcessTaskTranscodeTaskListMosaicList {
        coordinateOrigin?: pulumi.Input<string>;
        endTimeOffset?: pulumi.Input<number>;
        height?: pulumi.Input<string>;
        startTimeOffset?: pulumi.Input<number>;
        width?: pulumi.Input<string>;
        xPos?: pulumi.Input<string>;
        yPos?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateMediaProcessTaskTranscodeTaskListTraceWatermark {
        switch?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateMediaProcessTaskTranscodeTaskListWatermarkList {
        definition: pulumi.Input<string>;
        endTimeOffset?: pulumi.Input<number>;
        startTimeOffset?: pulumi.Input<number>;
        svgContent?: pulumi.Input<string>;
        textContent?: pulumi.Input<string>;
    }

    export interface ProcedureTemplateReviewAudioVideoTask {
        definition?: pulumi.Input<string>;
        reviewContents?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SuperPlayerConfigDrmStreamingInfo {
        simpleAesDefinition?: pulumi.Input<string>;
    }

    export interface SuperPlayerConfigResolutionName {
        minEdgeLength: pulumi.Input<number>;
        name: pulumi.Input<string>;
    }

    export interface TranscodeTemplateAudioTemplate {
        audioChannel?: pulumi.Input<number>;
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        sampleRate: pulumi.Input<number>;
    }

    export interface TranscodeTemplateTehdConfig {
        maxVideoBitrate?: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface TranscodeTemplateVideoTemplate {
        bitrate: pulumi.Input<number>;
        codec: pulumi.Input<string>;
        codecTag?: pulumi.Input<string>;
        fillType?: pulumi.Input<string>;
        fps: pulumi.Input<number>;
        gop?: pulumi.Input<number>;
        height?: pulumi.Input<number>;
        preserveHdrSwitch?: pulumi.Input<string>;
        resolutionAdaptive?: pulumi.Input<string>;
        vcrf?: pulumi.Input<number>;
        width?: pulumi.Input<number>;
    }

    export interface WatermarkTemplateImageTemplate {
        height?: pulumi.Input<string>;
        imageContent: pulumi.Input<string>;
        repeatType?: pulumi.Input<string>;
        transparency?: pulumi.Input<number>;
        width?: pulumi.Input<string>;
    }

    export interface WatermarkTemplateSvgTemplate {
        height?: pulumi.Input<string>;
        width?: pulumi.Input<string>;
    }

    export interface WatermarkTemplateTextTemplate {
        fontAlpha: pulumi.Input<number>;
        fontColor: pulumi.Input<string>;
        fontSize: pulumi.Input<string>;
        fontType: pulumi.Input<string>;
    }
}

export namespace Vpc {
    export interface FlowLogFlowLogStorage {
        storageId?: pulumi.Input<string>;
        storageTopic?: pulumi.Input<string>;
    }

    export interface GetClassicLinkInstancesFilter {
        name: string;
        values: string[];
    }

    export interface GetClassicLinkInstancesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetCvmInstancesFilter {
        name: string;
        values: string[];
    }

    export interface GetCvmInstancesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetNetDetectStatesFilter {
        name: string;
        values: string[];
    }

    export interface GetNetDetectStatesFilterArgs {
        name: pulumi.Input<string>;
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface Ipv6SubnetCidrBlockIpv6SubnetCidrBlocks {
        ipv6CidrBlock: pulumi.Input<string>;
        subnetId: pulumi.Input<string>;
    }

    export interface NetworkAclQuintupleNetworkAclQuintupleSet {
        egresses?: pulumi.Input<pulumi.Input<inputs.Vpc.NetworkAclQuintupleNetworkAclQuintupleSetEgress>[]>;
        ingresses?: pulumi.Input<pulumi.Input<inputs.Vpc.NetworkAclQuintupleNetworkAclQuintupleSetIngress>[]>;
    }

    export interface NetworkAclQuintupleNetworkAclQuintupleSetEgress {
        action?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        destinationCidr?: pulumi.Input<string>;
        destinationPort?: pulumi.Input<string>;
        networkAclDirection?: pulumi.Input<string>;
        networkAclQuintupleEntryId?: pulumi.Input<string>;
        priority?: pulumi.Input<number>;
        protocol?: pulumi.Input<string>;
        sourceCidr?: pulumi.Input<string>;
        sourcePort?: pulumi.Input<string>;
    }

    export interface NetworkAclQuintupleNetworkAclQuintupleSetIngress {
        action?: pulumi.Input<string>;
        createTime?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        destinationCidr?: pulumi.Input<string>;
        destinationPort?: pulumi.Input<string>;
        networkAclDirection?: pulumi.Input<string>;
        networkAclQuintupleEntryId?: pulumi.Input<string>;
        priority?: pulumi.Input<number>;
        protocol?: pulumi.Input<string>;
        sourceCidr?: pulumi.Input<string>;
        sourcePort?: pulumi.Input<string>;
    }

    export interface SnapshotPolicyAttachmentInstance {
        instanceId: pulumi.Input<string>;
        instanceName?: pulumi.Input<string>;
        instanceRegion: pulumi.Input<string>;
        instanceType: pulumi.Input<string>;
        snapshotPolicyId?: pulumi.Input<string>;
    }

    export interface SnapshotPolicyBackupPolicy {
        backupDay: pulumi.Input<string>;
        backupTime: pulumi.Input<string>;
    }
}

export namespace Vpn {
    export interface ConnectionBgpConfig {
        localBgpIp: pulumi.Input<string>;
        remoteBgpIp: pulumi.Input<string>;
        tunnelCidr: pulumi.Input<string>;
    }

    export interface ConnectionHealthCheckConfig {
        probeInterval?: pulumi.Input<number>;
        probeThreshold?: pulumi.Input<number>;
        probeTimeout?: pulumi.Input<number>;
        probeType?: pulumi.Input<string>;
    }

    export interface ConnectionSecurityGroupPolicy {
        localCidrBlock: pulumi.Input<string>;
        remoteCidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface CustomerGatewayConfigurationDownloadCustomerGatewayVendor {
        platform: pulumi.Input<string>;
        softwareVersion: pulumi.Input<string>;
        vendorName: pulumi.Input<string>;
    }

}

export namespace Waf {
    export interface AntiInfoLeakStrategy {
        content: pulumi.Input<string>;
        field: pulumi.Input<string>;
    }

    export interface ClbDomainLoadBalancerSet {
        listenerId: pulumi.Input<string>;
        listenerName: pulumi.Input<string>;
        loadBalancerId: pulumi.Input<string>;
        loadBalancerName: pulumi.Input<string>;
        loadBalancerType?: pulumi.Input<string>;
        numericalVpcId?: pulumi.Input<number>;
        protocol: pulumi.Input<string>;
        region: pulumi.Input<string>;
        vip: pulumi.Input<string>;
        vport: pulumi.Input<number>;
        zone: pulumi.Input<string>;
    }

    export interface CustomRuleStrategy {
        arg: pulumi.Input<string>;
        compareFunc: pulumi.Input<string>;
        content: pulumi.Input<string>;
        field: pulumi.Input<string>;
    }

    export interface CustomWhiteRuleStrategy {
        arg: pulumi.Input<string>;
        compareFunc: pulumi.Input<string>;
        content: pulumi.Input<string>;
        field: pulumi.Input<string>;
    }

    export interface IpAccessControlItem {
        action: pulumi.Input<number>;
        id?: pulumi.Input<string>;
        ip: pulumi.Input<string>;
        note: pulumi.Input<string>;
        source?: pulumi.Input<string>;
        validStatus?: pulumi.Input<number>;
        validTs: pulumi.Input<number>;
    }

    export interface IpAccessControlV2JobDateTime {
        crons?: pulumi.Input<pulumi.Input<inputs.Waf.IpAccessControlV2JobDateTimeCron>[]>;
        timeTZone?: pulumi.Input<string>;
        timeds?: pulumi.Input<pulumi.Input<inputs.Waf.IpAccessControlV2JobDateTimeTimed>[]>;
    }

    export interface IpAccessControlV2JobDateTimeCron {
        days?: pulumi.Input<pulumi.Input<number>[]>;
        endTime?: pulumi.Input<string>;
        startTime?: pulumi.Input<string>;
        wDays?: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface IpAccessControlV2JobDateTimeTimed {
        endDateTime?: pulumi.Input<number>;
        startDateTime?: pulumi.Input<number>;
    }

    export interface SaasDomainPort {
        nginxServerId?: pulumi.Input<string>;
        port: pulumi.Input<string>;
        protocol: pulumi.Input<string>;
        upstreamPort: pulumi.Input<string>;
        upstreamProtocol: pulumi.Input<string>;
    }
}

export namespace Wedata {
    export interface BaselineAlarmRuleDto {
        alarmLevelType?: pulumi.Input<string>;
        alarmRuleId?: pulumi.Input<string>;
    }

    export interface BaselineBaselineCreateAlarmRuleRequest {
        alarmLevel?: pulumi.Input<number>;
        alarmRecipientIds?: pulumi.Input<pulumi.Input<string>[]>;
        alarmRecipientType?: pulumi.Input<number>;
        alarmRecipients?: pulumi.Input<pulumi.Input<string>[]>;
        alarmTypes?: pulumi.Input<pulumi.Input<string>[]>;
        alarmWays?: pulumi.Input<pulumi.Input<string>[]>;
        creator?: pulumi.Input<string>;
        creatorId?: pulumi.Input<string>;
        extInfo?: pulumi.Input<string>;
        monitorObjectIds?: pulumi.Input<pulumi.Input<string>[]>;
        monitorType?: pulumi.Input<number>;
        projectId?: pulumi.Input<string>;
        ruleName?: pulumi.Input<string>;
    }

    export interface BaselinePromiseTask {
        projectId?: pulumi.Input<string>;
        taskCycle?: pulumi.Input<string>;
        taskId?: pulumi.Input<string>;
        taskInChargeName?: pulumi.Input<string>;
        taskInChargeUin?: pulumi.Input<string>;
        taskName?: pulumi.Input<string>;
        workflowId?: pulumi.Input<string>;
        workflowName?: pulumi.Input<string>;
    }

    export interface DqRuleCompareRule {
        cycleStep?: pulumi.Input<number>;
        items?: pulumi.Input<pulumi.Input<inputs.Wedata.DqRuleCompareRuleItem>[]>;
    }

    export interface DqRuleCompareRuleItem {
        compareType?: pulumi.Input<number>;
        operator?: pulumi.Input<string>;
        valueComputeType?: pulumi.Input<number>;
        valueLists?: pulumi.Input<pulumi.Input<inputs.Wedata.DqRuleCompareRuleItemValueList>[]>;
    }

    export interface DqRuleCompareRuleItemValueList {
        value?: pulumi.Input<string>;
        valueType?: pulumi.Input<number>;
    }

    export interface DqRuleFieldConfig {
        tableConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.DqRuleFieldConfigTableConfig>[]>;
        whereConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.DqRuleFieldConfigWhereConfig>[]>;
    }

    export interface DqRuleFieldConfigTableConfig {
        databaseId?: pulumi.Input<string>;
        databaseName?: pulumi.Input<string>;
        fieldConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.DqRuleFieldConfigTableConfigFieldConfig>[]>;
        tableId?: pulumi.Input<string>;
        tableKey?: pulumi.Input<string>;
        tableName?: pulumi.Input<string>;
    }

    export interface DqRuleFieldConfigTableConfigFieldConfig {
        fieldDataType?: pulumi.Input<string>;
        fieldKey?: pulumi.Input<string>;
        fieldValue?: pulumi.Input<string>;
    }

    export interface DqRuleFieldConfigWhereConfig {
        fieldDataType?: pulumi.Input<string>;
        fieldKey?: pulumi.Input<string>;
        fieldValue?: pulumi.Input<string>;
    }

    export interface FunctionResourceList {
        id?: pulumi.Input<string>;
        md5?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        path: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface GetDataSourceListFilter {
        name?: string;
        values?: string[];
    }

    export interface GetDataSourceListFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetDataSourceListOrderField {
        direction: string;
        name: string;
    }

    export interface GetDataSourceListOrderFieldArgs {
        direction: pulumi.Input<string>;
        name: pulumi.Input<string>;
    }

    export interface GetDataSourceWithoutInfoFilter {
        name?: string;
        values?: string[];
    }

    export interface GetDataSourceWithoutInfoFilterArgs {
        name?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetDataSourceWithoutInfoOrderField {
        direction: string;
        name: string;
    }

    export interface GetDataSourceWithoutInfoOrderFieldArgs {
        direction: pulumi.Input<string>;
        name: pulumi.Input<string>;
    }

    export interface IntegrationOfflineTaskTaskInfo {
        appId?: pulumi.Input<string>;
        configs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationOfflineTaskTaskInfoConfig>[]>;
        createTime?: pulumi.Input<string>;
        creatorUin?: pulumi.Input<string>;
        dataProxyUrls?: pulumi.Input<pulumi.Input<string>[]>;
        executeContexts?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationOfflineTaskTaskInfoExecuteContext>[]>;
        executorGroupName?: pulumi.Input<string>;
        executorId?: pulumi.Input<string>;
        extConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationOfflineTaskTaskInfoExtConfig>[]>;
        hasVersion?: pulumi.Input<boolean>;
        inLongManagerUrl?: pulumi.Input<string>;
        inLongManagerVersion?: pulumi.Input<string>;
        inLongStreamId?: pulumi.Input<string>;
        incharge?: pulumi.Input<string>;
        inputDatasourceType?: pulumi.Input<string>;
        instanceVersion?: pulumi.Input<number>;
        lastRunTime?: pulumi.Input<string>;
        locked?: pulumi.Input<boolean>;
        locker?: pulumi.Input<string>;
        mappings?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationOfflineTaskTaskInfoMapping>[]>;
        numRecordsIn?: pulumi.Input<number>;
        numRecordsOut?: pulumi.Input<number>;
        numRestarts?: pulumi.Input<number>;
        offlineTaskAddEntity?: pulumi.Input<inputs.Wedata.IntegrationOfflineTaskTaskInfoOfflineTaskAddEntity>;
        operatorUin?: pulumi.Input<string>;
        outputDatasourceType?: pulumi.Input<string>;
        ownerUin?: pulumi.Input<string>;
        readPhase?: pulumi.Input<number>;
        readerDelay?: pulumi.Input<number>;
        runningCu?: pulumi.Input<number>;
        scheduleTaskId?: pulumi.Input<string>;
        status?: pulumi.Input<number>;
        stopTime?: pulumi.Input<string>;
        submit?: pulumi.Input<boolean>;
        switchResource?: pulumi.Input<number>;
        syncType?: pulumi.Input<number>;
        taskAlarmRegularLists?: pulumi.Input<pulumi.Input<string>[]>;
        taskGroupId?: pulumi.Input<string>;
        taskMode?: pulumi.Input<string>;
        updateTime?: pulumi.Input<string>;
        workflowId?: pulumi.Input<string>;
    }

    export interface IntegrationOfflineTaskTaskInfoConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationOfflineTaskTaskInfoExecuteContext {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationOfflineTaskTaskInfoExtConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationOfflineTaskTaskInfoMapping {
        extConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationOfflineTaskTaskInfoMappingExtConfig>[]>;
        schemaMappings?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationOfflineTaskTaskInfoMappingSchemaMapping>[]>;
        sinkId?: pulumi.Input<string>;
        sourceId?: pulumi.Input<string>;
        sourceSchemas?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationOfflineTaskTaskInfoMappingSourceSchema>[]>;
    }

    export interface IntegrationOfflineTaskTaskInfoMappingExtConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationOfflineTaskTaskInfoMappingSchemaMapping {
        sinkSchemaId: pulumi.Input<string>;
        sourceSchemaId: pulumi.Input<string>;
    }

    export interface IntegrationOfflineTaskTaskInfoMappingSourceSchema {
        alias?: pulumi.Input<string>;
        comment?: pulumi.Input<string>;
        id: pulumi.Input<string>;
        name: pulumi.Input<string>;
        properties?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationOfflineTaskTaskInfoMappingSourceSchemaProperty>[]>;
        type: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationOfflineTaskTaskInfoMappingSourceSchemaProperty {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationOfflineTaskTaskInfoOfflineTaskAddEntity {
        crontabExpression?: pulumi.Input<string>;
        cycleType?: pulumi.Input<number>;
        executionEndTime?: pulumi.Input<string>;
        executionStartTime?: pulumi.Input<string>;
        retriable?: pulumi.Input<number>;
        retryWait?: pulumi.Input<number>;
        selfDepend?: pulumi.Input<number>;
        tryLimit?: pulumi.Input<number>;
    }

    export interface IntegrationRealtimeTaskTaskInfo {
        appId?: pulumi.Input<string>;
        configs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoConfig>[]>;
        createTime?: pulumi.Input<string>;
        creatorUin?: pulumi.Input<string>;
        dataProxyUrls?: pulumi.Input<pulumi.Input<string>[]>;
        executeContexts?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoExecuteContext>[]>;
        executorGroupName?: pulumi.Input<string>;
        executorId?: pulumi.Input<string>;
        extConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoExtConfig>[]>;
        hasVersion?: pulumi.Input<boolean>;
        inLongManagerUrl?: pulumi.Input<string>;
        inLongManagerVersion?: pulumi.Input<string>;
        inLongStreamId?: pulumi.Input<string>;
        incharge?: pulumi.Input<string>;
        inputDatasourceType?: pulumi.Input<string>;
        instanceVersion?: pulumi.Input<number>;
        lastRunTime?: pulumi.Input<string>;
        locked?: pulumi.Input<boolean>;
        locker?: pulumi.Input<string>;
        mappings?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoMapping>[]>;
        nodes?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoNode>[]>;
        numRecordsIn?: pulumi.Input<number>;
        numRecordsOut?: pulumi.Input<number>;
        numRestarts?: pulumi.Input<number>;
        operatorUin?: pulumi.Input<string>;
        outputDatasourceType?: pulumi.Input<string>;
        ownerUin?: pulumi.Input<string>;
        readPhase?: pulumi.Input<number>;
        readerDelay?: pulumi.Input<number>;
        runningCu?: pulumi.Input<number>;
        scheduleTaskId?: pulumi.Input<string>;
        status?: pulumi.Input<number>;
        stopTime?: pulumi.Input<string>;
        submit?: pulumi.Input<boolean>;
        switchResource?: pulumi.Input<number>;
        taskAlarmRegularLists?: pulumi.Input<pulumi.Input<string>[]>;
        taskGroupId?: pulumi.Input<string>;
        updateTime?: pulumi.Input<string>;
        workflowId?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoExecuteContext {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoExtConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoMapping {
        extConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoMappingExtConfig>[]>;
        schemaMappings?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoMappingSchemaMapping>[]>;
        sinkId?: pulumi.Input<string>;
        sourceId?: pulumi.Input<string>;
        sourceSchemas?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoMappingSourceSchema>[]>;
    }

    export interface IntegrationRealtimeTaskTaskInfoMappingExtConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoMappingSchemaMapping {
        sinkSchemaId: pulumi.Input<string>;
        sourceSchemaId: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoMappingSourceSchema {
        alias?: pulumi.Input<string>;
        comment?: pulumi.Input<string>;
        id: pulumi.Input<string>;
        name: pulumi.Input<string>;
        properties?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoMappingSourceSchemaProperty>[]>;
        type: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoMappingSourceSchemaProperty {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoNode {
        appId?: pulumi.Input<string>;
        configs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoNodeConfig>[]>;
        createTime?: pulumi.Input<string>;
        creatorUin?: pulumi.Input<string>;
        dataSourceType?: pulumi.Input<string>;
        datasourceId?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        extConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoNodeExtConfig>[]>;
        id?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        nodeMapping?: pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoNodeNodeMapping>;
        nodeType?: pulumi.Input<string>;
        operatorUin?: pulumi.Input<string>;
        ownerUin?: pulumi.Input<string>;
        projectId?: pulumi.Input<string>;
        schemas?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoNodeSchema>[]>;
        taskId?: pulumi.Input<string>;
        updateTime?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoNodeConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoNodeExtConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoNodeNodeMapping {
        extConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfig>[]>;
        schemaMappings?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping>[]>;
        sinkId?: pulumi.Input<string>;
        sourceId?: pulumi.Input<string>;
        sourceSchemas?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchema>[]>;
    }

    export interface IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping {
        sinkSchemaId: pulumi.Input<string>;
        sourceSchemaId: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchema {
        alias?: pulumi.Input<string>;
        comment?: pulumi.Input<string>;
        id: pulumi.Input<string>;
        name: pulumi.Input<string>;
        properties?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaProperty>[]>;
        type: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaProperty {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoNodeSchema {
        alias?: pulumi.Input<string>;
        comment?: pulumi.Input<string>;
        id: pulumi.Input<string>;
        name: pulumi.Input<string>;
        properties?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfoNodeSchemaProperty>[]>;
        type: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationRealtimeTaskTaskInfoNodeSchemaProperty {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationTaskNodeNodeInfo {
        appId?: pulumi.Input<string>;
        configs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfoConfig>[]>;
        createTime?: pulumi.Input<string>;
        creatorUin?: pulumi.Input<string>;
        datasourceId?: pulumi.Input<string>;
        extConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfoExtConfig>[]>;
        nodeMapping?: pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfoNodeMapping>;
        operatorUin?: pulumi.Input<string>;
        ownerUin?: pulumi.Input<string>;
        schemas?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfoSchema>[]>;
        updateTime?: pulumi.Input<string>;
    }

    export interface IntegrationTaskNodeNodeInfoConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationTaskNodeNodeInfoExtConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationTaskNodeNodeInfoNodeMapping {
        extConfigs?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfoNodeMappingExtConfig>[]>;
        schemaMappings?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfoNodeMappingSchemaMapping>[]>;
        sinkId?: pulumi.Input<string>;
        sourceId?: pulumi.Input<string>;
        sourceSchemas?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfoNodeMappingSourceSchema>[]>;
    }

    export interface IntegrationTaskNodeNodeInfoNodeMappingExtConfig {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationTaskNodeNodeInfoNodeMappingSchemaMapping {
        sinkSchemaId: pulumi.Input<string>;
        sourceSchemaId: pulumi.Input<string>;
    }

    export interface IntegrationTaskNodeNodeInfoNodeMappingSourceSchema {
        alias?: pulumi.Input<string>;
        comment?: pulumi.Input<string>;
        id: pulumi.Input<string>;
        name: pulumi.Input<string>;
        properties?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaProperty>[]>;
        type: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaProperty {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationTaskNodeNodeInfoSchema {
        alias?: pulumi.Input<string>;
        comment?: pulumi.Input<string>;
        id: pulumi.Input<string>;
        name: pulumi.Input<string>;
        properties?: pulumi.Input<pulumi.Input<inputs.Wedata.IntegrationTaskNodeNodeInfoSchemaProperty>[]>;
        type: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface IntegrationTaskNodeNodeInfoSchemaProperty {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }
}

export namespace config {
}
