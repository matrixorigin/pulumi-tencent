// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AlertChannelArgs, AlertChannelState } from "./alertChannel";
export type AlertChannel = import("./alertChannel").AlertChannel;
export const AlertChannel: typeof import("./alertChannel").AlertChannel = null as any;
utilities.lazyLoad(exports, ["AlertChannel"], () => require("./alertChannel"));

export { CronJobArgs, CronJobState } from "./cronJob";
export type CronJob = import("./cronJob").CronJob;
export const CronJob: typeof import("./cronJob").CronJob = null as any;
utilities.lazyLoad(exports, ["CronJob"], () => require("./cronJob"));

export { CronJobAbortArgs, CronJobAbortState } from "./cronJobAbort";
export type CronJobAbort = import("./cronJobAbort").CronJobAbort;
export const CronJobAbort: typeof import("./cronJobAbort").CronJobAbort = null as any;
utilities.lazyLoad(exports, ["CronJobAbort"], () => require("./cronJobAbort"));

export { CronJobRestartArgs, CronJobRestartState } from "./cronJobRestart";
export type CronJobRestart = import("./cronJobRestart").CronJobRestart;
export const CronJobRestart: typeof import("./cronJobRestart").CronJobRestart = null as any;
utilities.lazyLoad(exports, ["CronJobRestart"], () => require("./cronJobRestart"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { GetScenarioWithJobsArgs, GetScenarioWithJobsResult, GetScenarioWithJobsOutputArgs } from "./getScenarioWithJobs";
export const getScenarioWithJobs: typeof import("./getScenarioWithJobs").getScenarioWithJobs = null as any;
export const getScenarioWithJobsOutput: typeof import("./getScenarioWithJobs").getScenarioWithJobsOutput = null as any;
utilities.lazyLoad(exports, ["getScenarioWithJobs","getScenarioWithJobsOutput"], () => require("./getScenarioWithJobs"));

export { JobArgs, JobState } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { JobAbortArgs, JobAbortState } from "./jobAbort";
export type JobAbort = import("./jobAbort").JobAbort;
export const JobAbort: typeof import("./jobAbort").JobAbort = null as any;
utilities.lazyLoad(exports, ["JobAbort"], () => require("./jobAbort"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ScenarioArgs, ScenarioState } from "./scenario";
export type Scenario = import("./scenario").Scenario;
export const Scenario: typeof import("./scenario").Scenario = null as any;
utilities.lazyLoad(exports, ["Scenario"], () => require("./scenario"));

export { TmpKeyGenerateArgs, TmpKeyGenerateState } from "./tmpKeyGenerate";
export type TmpKeyGenerate = import("./tmpKeyGenerate").TmpKeyGenerate;
export const TmpKeyGenerate: typeof import("./tmpKeyGenerate").TmpKeyGenerate = null as any;
utilities.lazyLoad(exports, ["TmpKeyGenerate"], () => require("./tmpKeyGenerate"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Pts/alertChannel:AlertChannel":
                return new AlertChannel(name, <any>undefined, { urn })
            case "tencentcloud:Pts/cronJob:CronJob":
                return new CronJob(name, <any>undefined, { urn })
            case "tencentcloud:Pts/cronJobAbort:CronJobAbort":
                return new CronJobAbort(name, <any>undefined, { urn })
            case "tencentcloud:Pts/cronJobRestart:CronJobRestart":
                return new CronJobRestart(name, <any>undefined, { urn })
            case "tencentcloud:Pts/file:File":
                return new File(name, <any>undefined, { urn })
            case "tencentcloud:Pts/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "tencentcloud:Pts/jobAbort:JobAbort":
                return new JobAbort(name, <any>undefined, { urn })
            case "tencentcloud:Pts/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "tencentcloud:Pts/scenario:Scenario":
                return new Scenario(name, <any>undefined, { urn })
            case "tencentcloud:Pts/tmpKeyGenerate:TmpKeyGenerate":
                return new TmpKeyGenerate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Pts/alertChannel", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Pts/cronJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Pts/cronJobAbort", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Pts/cronJobRestart", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Pts/file", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Pts/job", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Pts/jobAbort", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Pts/project", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Pts/scenario", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Pts/tmpKeyGenerate", _module)
