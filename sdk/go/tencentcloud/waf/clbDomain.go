// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClbDomain struct {
	pulumi.CustomResourceState

	// Load balancer type: clb, apisix or tsegw, default clb.
	AlbType pulumi.StringPtrOutput `pulumi:"albType"`
	// Whether to enable api safe, 1 enable, 0 disable.
	ApiSafeStatus pulumi.IntPtrOutput `pulumi:"apiSafeStatus"`
	// Whether to enable bot, 1 enable, 0 disable.
	BotStatus pulumi.IntPtrOutput `pulumi:"botStatus"`
	// Whether to enable access logs, 1 enable, 0 disable.
	ClsStatus pulumi.IntPtrOutput `pulumi:"clsStatus"`
	// Domain name.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Domain id.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule
	// Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22:
	// Rule Interception&&AI Interception Mode, Default 20.
	Engine pulumi.IntPtrOutput `pulumi:"engine"`
	// WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
	FlowMode pulumi.IntPtrOutput `pulumi:"flowMode"`
	// Instance unique ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
	IpHeaders pulumi.StringArrayOutput `pulumi:"ipHeaders"`
	// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client
	// IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
	IsCdn pulumi.IntPtrOutput `pulumi:"isCdn"`
	// List of bound LB.
	LoadBalancerSets ClbDomainLoadBalancerSetArrayOutput `pulumi:"loadBalancerSets"`
	// Regions of LB bound by domain.
	Region pulumi.StringOutput `pulumi:"region"`
	// Binding status between waf and LB, 0:not bind, 1:binding.
	Status pulumi.IntPtrOutput `pulumi:"status"`
}

// NewClbDomain registers a new resource with the given unique name, arguments, and options.
func NewClbDomain(ctx *pulumi.Context,
	name string, args *ClbDomainArgs, opts ...pulumi.ResourceOption) (*ClbDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClbDomain
	err := ctx.RegisterResource("tencentcloud:Waf/clbDomain:ClbDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClbDomain gets an existing ClbDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClbDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClbDomainState, opts ...pulumi.ResourceOption) (*ClbDomain, error) {
	var resource ClbDomain
	err := ctx.ReadResource("tencentcloud:Waf/clbDomain:ClbDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClbDomain resources.
type clbDomainState struct {
	// Load balancer type: clb, apisix or tsegw, default clb.
	AlbType *string `pulumi:"albType"`
	// Whether to enable api safe, 1 enable, 0 disable.
	ApiSafeStatus *int `pulumi:"apiSafeStatus"`
	// Whether to enable bot, 1 enable, 0 disable.
	BotStatus *int `pulumi:"botStatus"`
	// Whether to enable access logs, 1 enable, 0 disable.
	ClsStatus *int `pulumi:"clsStatus"`
	// Domain name.
	Domain *string `pulumi:"domain"`
	// Domain id.
	DomainId *string `pulumi:"domainId"`
	// Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule
	// Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22:
	// Rule Interception&&AI Interception Mode, Default 20.
	Engine *int `pulumi:"engine"`
	// WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
	FlowMode *int `pulumi:"flowMode"`
	// Instance unique ID.
	InstanceId *string `pulumi:"instanceId"`
	// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
	IpHeaders []string `pulumi:"ipHeaders"`
	// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client
	// IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
	IsCdn *int `pulumi:"isCdn"`
	// List of bound LB.
	LoadBalancerSets []ClbDomainLoadBalancerSet `pulumi:"loadBalancerSets"`
	// Regions of LB bound by domain.
	Region *string `pulumi:"region"`
	// Binding status between waf and LB, 0:not bind, 1:binding.
	Status *int `pulumi:"status"`
}

type ClbDomainState struct {
	// Load balancer type: clb, apisix or tsegw, default clb.
	AlbType pulumi.StringPtrInput
	// Whether to enable api safe, 1 enable, 0 disable.
	ApiSafeStatus pulumi.IntPtrInput
	// Whether to enable bot, 1 enable, 0 disable.
	BotStatus pulumi.IntPtrInput
	// Whether to enable access logs, 1 enable, 0 disable.
	ClsStatus pulumi.IntPtrInput
	// Domain name.
	Domain pulumi.StringPtrInput
	// Domain id.
	DomainId pulumi.StringPtrInput
	// Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule
	// Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22:
	// Rule Interception&&AI Interception Mode, Default 20.
	Engine pulumi.IntPtrInput
	// WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
	FlowMode pulumi.IntPtrInput
	// Instance unique ID.
	InstanceId pulumi.StringPtrInput
	// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
	IpHeaders pulumi.StringArrayInput
	// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client
	// IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
	IsCdn pulumi.IntPtrInput
	// List of bound LB.
	LoadBalancerSets ClbDomainLoadBalancerSetArrayInput
	// Regions of LB bound by domain.
	Region pulumi.StringPtrInput
	// Binding status between waf and LB, 0:not bind, 1:binding.
	Status pulumi.IntPtrInput
}

func (ClbDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*clbDomainState)(nil)).Elem()
}

type clbDomainArgs struct {
	// Load balancer type: clb, apisix or tsegw, default clb.
	AlbType *string `pulumi:"albType"`
	// Whether to enable api safe, 1 enable, 0 disable.
	ApiSafeStatus *int `pulumi:"apiSafeStatus"`
	// Whether to enable bot, 1 enable, 0 disable.
	BotStatus *int `pulumi:"botStatus"`
	// Whether to enable access logs, 1 enable, 0 disable.
	ClsStatus *int `pulumi:"clsStatus"`
	// Domain name.
	Domain string `pulumi:"domain"`
	// Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule
	// Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22:
	// Rule Interception&&AI Interception Mode, Default 20.
	Engine *int `pulumi:"engine"`
	// WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
	FlowMode *int `pulumi:"flowMode"`
	// Instance unique ID.
	InstanceId string `pulumi:"instanceId"`
	// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
	IpHeaders []string `pulumi:"ipHeaders"`
	// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client
	// IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
	IsCdn *int `pulumi:"isCdn"`
	// List of bound LB.
	LoadBalancerSets []ClbDomainLoadBalancerSet `pulumi:"loadBalancerSets"`
	// Regions of LB bound by domain.
	Region string `pulumi:"region"`
	// Binding status between waf and LB, 0:not bind, 1:binding.
	Status *int `pulumi:"status"`
}

// The set of arguments for constructing a ClbDomain resource.
type ClbDomainArgs struct {
	// Load balancer type: clb, apisix or tsegw, default clb.
	AlbType pulumi.StringPtrInput
	// Whether to enable api safe, 1 enable, 0 disable.
	ApiSafeStatus pulumi.IntPtrInput
	// Whether to enable bot, 1 enable, 0 disable.
	BotStatus pulumi.IntPtrInput
	// Whether to enable access logs, 1 enable, 0 disable.
	ClsStatus pulumi.IntPtrInput
	// Domain name.
	Domain pulumi.StringInput
	// Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule
	// Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22:
	// Rule Interception&&AI Interception Mode, Default 20.
	Engine pulumi.IntPtrInput
	// WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
	FlowMode pulumi.IntPtrInput
	// Instance unique ID.
	InstanceId pulumi.StringInput
	// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
	IpHeaders pulumi.StringArrayInput
	// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client
	// IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
	IsCdn pulumi.IntPtrInput
	// List of bound LB.
	LoadBalancerSets ClbDomainLoadBalancerSetArrayInput
	// Regions of LB bound by domain.
	Region pulumi.StringInput
	// Binding status between waf and LB, 0:not bind, 1:binding.
	Status pulumi.IntPtrInput
}

func (ClbDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clbDomainArgs)(nil)).Elem()
}

type ClbDomainInput interface {
	pulumi.Input

	ToClbDomainOutput() ClbDomainOutput
	ToClbDomainOutputWithContext(ctx context.Context) ClbDomainOutput
}

func (*ClbDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbDomain)(nil)).Elem()
}

func (i *ClbDomain) ToClbDomainOutput() ClbDomainOutput {
	return i.ToClbDomainOutputWithContext(context.Background())
}

func (i *ClbDomain) ToClbDomainOutputWithContext(ctx context.Context) ClbDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbDomainOutput)
}

// ClbDomainArrayInput is an input type that accepts ClbDomainArray and ClbDomainArrayOutput values.
// You can construct a concrete instance of `ClbDomainArrayInput` via:
//
//	ClbDomainArray{ ClbDomainArgs{...} }
type ClbDomainArrayInput interface {
	pulumi.Input

	ToClbDomainArrayOutput() ClbDomainArrayOutput
	ToClbDomainArrayOutputWithContext(context.Context) ClbDomainArrayOutput
}

type ClbDomainArray []ClbDomainInput

func (ClbDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClbDomain)(nil)).Elem()
}

func (i ClbDomainArray) ToClbDomainArrayOutput() ClbDomainArrayOutput {
	return i.ToClbDomainArrayOutputWithContext(context.Background())
}

func (i ClbDomainArray) ToClbDomainArrayOutputWithContext(ctx context.Context) ClbDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbDomainArrayOutput)
}

// ClbDomainMapInput is an input type that accepts ClbDomainMap and ClbDomainMapOutput values.
// You can construct a concrete instance of `ClbDomainMapInput` via:
//
//	ClbDomainMap{ "key": ClbDomainArgs{...} }
type ClbDomainMapInput interface {
	pulumi.Input

	ToClbDomainMapOutput() ClbDomainMapOutput
	ToClbDomainMapOutputWithContext(context.Context) ClbDomainMapOutput
}

type ClbDomainMap map[string]ClbDomainInput

func (ClbDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClbDomain)(nil)).Elem()
}

func (i ClbDomainMap) ToClbDomainMapOutput() ClbDomainMapOutput {
	return i.ToClbDomainMapOutputWithContext(context.Background())
}

func (i ClbDomainMap) ToClbDomainMapOutputWithContext(ctx context.Context) ClbDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbDomainMapOutput)
}

type ClbDomainOutput struct{ *pulumi.OutputState }

func (ClbDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbDomain)(nil)).Elem()
}

func (o ClbDomainOutput) ToClbDomainOutput() ClbDomainOutput {
	return o
}

func (o ClbDomainOutput) ToClbDomainOutputWithContext(ctx context.Context) ClbDomainOutput {
	return o
}

// Load balancer type: clb, apisix or tsegw, default clb.
func (o ClbDomainOutput) AlbType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.StringPtrOutput { return v.AlbType }).(pulumi.StringPtrOutput)
}

// Whether to enable api safe, 1 enable, 0 disable.
func (o ClbDomainOutput) ApiSafeStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.IntPtrOutput { return v.ApiSafeStatus }).(pulumi.IntPtrOutput)
}

// Whether to enable bot, 1 enable, 0 disable.
func (o ClbDomainOutput) BotStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.IntPtrOutput { return v.BotStatus }).(pulumi.IntPtrOutput)
}

// Whether to enable access logs, 1 enable, 0 disable.
func (o ClbDomainOutput) ClsStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.IntPtrOutput { return v.ClsStatus }).(pulumi.IntPtrOutput)
}

// Domain name.
func (o ClbDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Domain id.
func (o ClbDomainOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule
// Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22:
// Rule Interception&&AI Interception Mode, Default 20.
func (o ClbDomainOutput) Engine() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.IntPtrOutput { return v.Engine }).(pulumi.IntPtrOutput)
}

// WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
func (o ClbDomainOutput) FlowMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.IntPtrOutput { return v.FlowMode }).(pulumi.IntPtrOutput)
}

// Instance unique ID.
func (o ClbDomainOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
func (o ClbDomainOutput) IpHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.StringArrayOutput { return v.IpHeaders }).(pulumi.StringArrayOutput)
}

// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client
// IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
func (o ClbDomainOutput) IsCdn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.IntPtrOutput { return v.IsCdn }).(pulumi.IntPtrOutput)
}

// List of bound LB.
func (o ClbDomainOutput) LoadBalancerSets() ClbDomainLoadBalancerSetArrayOutput {
	return o.ApplyT(func(v *ClbDomain) ClbDomainLoadBalancerSetArrayOutput { return v.LoadBalancerSets }).(ClbDomainLoadBalancerSetArrayOutput)
}

// Regions of LB bound by domain.
func (o ClbDomainOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Binding status between waf and LB, 0:not bind, 1:binding.
func (o ClbDomainOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClbDomain) pulumi.IntPtrOutput { return v.Status }).(pulumi.IntPtrOutput)
}

type ClbDomainArrayOutput struct{ *pulumi.OutputState }

func (ClbDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClbDomain)(nil)).Elem()
}

func (o ClbDomainArrayOutput) ToClbDomainArrayOutput() ClbDomainArrayOutput {
	return o
}

func (o ClbDomainArrayOutput) ToClbDomainArrayOutputWithContext(ctx context.Context) ClbDomainArrayOutput {
	return o
}

func (o ClbDomainArrayOutput) Index(i pulumi.IntInput) ClbDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClbDomain {
		return vs[0].([]*ClbDomain)[vs[1].(int)]
	}).(ClbDomainOutput)
}

type ClbDomainMapOutput struct{ *pulumi.OutputState }

func (ClbDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClbDomain)(nil)).Elem()
}

func (o ClbDomainMapOutput) ToClbDomainMapOutput() ClbDomainMapOutput {
	return o
}

func (o ClbDomainMapOutput) ToClbDomainMapOutputWithContext(ctx context.Context) ClbDomainMapOutput {
	return o
}

func (o ClbDomainMapOutput) MapIndex(k pulumi.StringInput) ClbDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClbDomain {
		return vs[0].(map[string]*ClbDomain)[vs[1].(string)]
	}).(ClbDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClbDomainInput)(nil)).Elem(), &ClbDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbDomainArrayInput)(nil)).Elem(), ClbDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbDomainMapInput)(nil)).Elem(), ClbDomainMap{})
	pulumi.RegisterOutputType(ClbDomainOutput{})
	pulumi.RegisterOutputType(ClbDomainArrayOutput{})
	pulumi.RegisterOutputType(ClbDomainMapOutput{})
}
