// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdwdoris

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WorkloadGroup struct {
	pulumi.CustomResourceState

	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Resource group configuration.
	WorkloadGroup WorkloadGroupWorkloadGroupPtrOutput `pulumi:"workloadGroup"`
}

// NewWorkloadGroup registers a new resource with the given unique name, arguments, and options.
func NewWorkloadGroup(ctx *pulumi.Context,
	name string, args *WorkloadGroupArgs, opts ...pulumi.ResourceOption) (*WorkloadGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkloadGroup
	err := ctx.RegisterResource("tencentcloud:Cdwdoris/workloadGroup:WorkloadGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkloadGroup gets an existing WorkloadGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkloadGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkloadGroupState, opts ...pulumi.ResourceOption) (*WorkloadGroup, error) {
	var resource WorkloadGroup
	err := ctx.ReadResource("tencentcloud:Cdwdoris/workloadGroup:WorkloadGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkloadGroup resources.
type workloadGroupState struct {
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Resource group configuration.
	WorkloadGroup *WorkloadGroupWorkloadGroup `pulumi:"workloadGroup"`
}

type WorkloadGroupState struct {
	// Instance id.
	InstanceId pulumi.StringPtrInput
	// Resource group configuration.
	WorkloadGroup WorkloadGroupWorkloadGroupPtrInput
}

func (WorkloadGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadGroupState)(nil)).Elem()
}

type workloadGroupArgs struct {
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
	// Resource group configuration.
	WorkloadGroup *WorkloadGroupWorkloadGroup `pulumi:"workloadGroup"`
}

// The set of arguments for constructing a WorkloadGroup resource.
type WorkloadGroupArgs struct {
	// Instance id.
	InstanceId pulumi.StringInput
	// Resource group configuration.
	WorkloadGroup WorkloadGroupWorkloadGroupPtrInput
}

func (WorkloadGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadGroupArgs)(nil)).Elem()
}

type WorkloadGroupInput interface {
	pulumi.Input

	ToWorkloadGroupOutput() WorkloadGroupOutput
	ToWorkloadGroupOutputWithContext(ctx context.Context) WorkloadGroupOutput
}

func (*WorkloadGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroup)(nil)).Elem()
}

func (i *WorkloadGroup) ToWorkloadGroupOutput() WorkloadGroupOutput {
	return i.ToWorkloadGroupOutputWithContext(context.Background())
}

func (i *WorkloadGroup) ToWorkloadGroupOutputWithContext(ctx context.Context) WorkloadGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupOutput)
}

// WorkloadGroupArrayInput is an input type that accepts WorkloadGroupArray and WorkloadGroupArrayOutput values.
// You can construct a concrete instance of `WorkloadGroupArrayInput` via:
//
//	WorkloadGroupArray{ WorkloadGroupArgs{...} }
type WorkloadGroupArrayInput interface {
	pulumi.Input

	ToWorkloadGroupArrayOutput() WorkloadGroupArrayOutput
	ToWorkloadGroupArrayOutputWithContext(context.Context) WorkloadGroupArrayOutput
}

type WorkloadGroupArray []WorkloadGroupInput

func (WorkloadGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkloadGroup)(nil)).Elem()
}

func (i WorkloadGroupArray) ToWorkloadGroupArrayOutput() WorkloadGroupArrayOutput {
	return i.ToWorkloadGroupArrayOutputWithContext(context.Background())
}

func (i WorkloadGroupArray) ToWorkloadGroupArrayOutputWithContext(ctx context.Context) WorkloadGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupArrayOutput)
}

// WorkloadGroupMapInput is an input type that accepts WorkloadGroupMap and WorkloadGroupMapOutput values.
// You can construct a concrete instance of `WorkloadGroupMapInput` via:
//
//	WorkloadGroupMap{ "key": WorkloadGroupArgs{...} }
type WorkloadGroupMapInput interface {
	pulumi.Input

	ToWorkloadGroupMapOutput() WorkloadGroupMapOutput
	ToWorkloadGroupMapOutputWithContext(context.Context) WorkloadGroupMapOutput
}

type WorkloadGroupMap map[string]WorkloadGroupInput

func (WorkloadGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkloadGroup)(nil)).Elem()
}

func (i WorkloadGroupMap) ToWorkloadGroupMapOutput() WorkloadGroupMapOutput {
	return i.ToWorkloadGroupMapOutputWithContext(context.Background())
}

func (i WorkloadGroupMap) ToWorkloadGroupMapOutputWithContext(ctx context.Context) WorkloadGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupMapOutput)
}

type WorkloadGroupOutput struct{ *pulumi.OutputState }

func (WorkloadGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroup)(nil)).Elem()
}

func (o WorkloadGroupOutput) ToWorkloadGroupOutput() WorkloadGroupOutput {
	return o
}

func (o WorkloadGroupOutput) ToWorkloadGroupOutputWithContext(ctx context.Context) WorkloadGroupOutput {
	return o
}

// Instance id.
func (o WorkloadGroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadGroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Resource group configuration.
func (o WorkloadGroupOutput) WorkloadGroup() WorkloadGroupWorkloadGroupPtrOutput {
	return o.ApplyT(func(v *WorkloadGroup) WorkloadGroupWorkloadGroupPtrOutput { return v.WorkloadGroup }).(WorkloadGroupWorkloadGroupPtrOutput)
}

type WorkloadGroupArrayOutput struct{ *pulumi.OutputState }

func (WorkloadGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkloadGroup)(nil)).Elem()
}

func (o WorkloadGroupArrayOutput) ToWorkloadGroupArrayOutput() WorkloadGroupArrayOutput {
	return o
}

func (o WorkloadGroupArrayOutput) ToWorkloadGroupArrayOutputWithContext(ctx context.Context) WorkloadGroupArrayOutput {
	return o
}

func (o WorkloadGroupArrayOutput) Index(i pulumi.IntInput) WorkloadGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkloadGroup {
		return vs[0].([]*WorkloadGroup)[vs[1].(int)]
	}).(WorkloadGroupOutput)
}

type WorkloadGroupMapOutput struct{ *pulumi.OutputState }

func (WorkloadGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkloadGroup)(nil)).Elem()
}

func (o WorkloadGroupMapOutput) ToWorkloadGroupMapOutput() WorkloadGroupMapOutput {
	return o
}

func (o WorkloadGroupMapOutput) ToWorkloadGroupMapOutputWithContext(ctx context.Context) WorkloadGroupMapOutput {
	return o
}

func (o WorkloadGroupMapOutput) MapIndex(k pulumi.StringInput) WorkloadGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkloadGroup {
		return vs[0].(map[string]*WorkloadGroup)[vs[1].(string)]
	}).(WorkloadGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupInput)(nil)).Elem(), &WorkloadGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupArrayInput)(nil)).Elem(), WorkloadGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupMapInput)(nil)).Elem(), WorkloadGroupMap{})
	pulumi.RegisterOutputType(WorkloadGroupOutput{})
	pulumi.RegisterOutputType(WorkloadGroupArrayOutput{})
	pulumi.RegisterOutputType(WorkloadGroupMapOutput{})
}
