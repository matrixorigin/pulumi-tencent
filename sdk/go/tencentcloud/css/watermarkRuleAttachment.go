// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WatermarkRuleAttachment struct {
	pulumi.CustomResourceState

	// rule app name.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// rule domain name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// rule stream name.
	StreamName pulumi.StringOutput `pulumi:"streamName"`
	// The template Id can be acquired by the Id of `tencentcloud_css_watermark`.
	TemplateId pulumi.IntOutput `pulumi:"templateId"`
	// update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewWatermarkRuleAttachment registers a new resource with the given unique name, arguments, and options.
func NewWatermarkRuleAttachment(ctx *pulumi.Context,
	name string, args *WatermarkRuleAttachmentArgs, opts ...pulumi.ResourceOption) (*WatermarkRuleAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.StreamName == nil {
		return nil, errors.New("invalid value for required argument 'StreamName'")
	}
	if args.TemplateId == nil {
		return nil, errors.New("invalid value for required argument 'TemplateId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WatermarkRuleAttachment
	err := ctx.RegisterResource("tencentcloud:Css/watermarkRuleAttachment:WatermarkRuleAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWatermarkRuleAttachment gets an existing WatermarkRuleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWatermarkRuleAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WatermarkRuleAttachmentState, opts ...pulumi.ResourceOption) (*WatermarkRuleAttachment, error) {
	var resource WatermarkRuleAttachment
	err := ctx.ReadResource("tencentcloud:Css/watermarkRuleAttachment:WatermarkRuleAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WatermarkRuleAttachment resources.
type watermarkRuleAttachmentState struct {
	// rule app name.
	AppName *string `pulumi:"appName"`
	// create time.
	CreateTime *string `pulumi:"createTime"`
	// rule domain name.
	DomainName *string `pulumi:"domainName"`
	// rule stream name.
	StreamName *string `pulumi:"streamName"`
	// The template Id can be acquired by the Id of `tencentcloud_css_watermark`.
	TemplateId *int `pulumi:"templateId"`
	// update time.
	UpdateTime *string `pulumi:"updateTime"`
}

type WatermarkRuleAttachmentState struct {
	// rule app name.
	AppName pulumi.StringPtrInput
	// create time.
	CreateTime pulumi.StringPtrInput
	// rule domain name.
	DomainName pulumi.StringPtrInput
	// rule stream name.
	StreamName pulumi.StringPtrInput
	// The template Id can be acquired by the Id of `tencentcloud_css_watermark`.
	TemplateId pulumi.IntPtrInput
	// update time.
	UpdateTime pulumi.StringPtrInput
}

func (WatermarkRuleAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*watermarkRuleAttachmentState)(nil)).Elem()
}

type watermarkRuleAttachmentArgs struct {
	// rule app name.
	AppName string `pulumi:"appName"`
	// rule domain name.
	DomainName string `pulumi:"domainName"`
	// rule stream name.
	StreamName string `pulumi:"streamName"`
	// The template Id can be acquired by the Id of `tencentcloud_css_watermark`.
	TemplateId int `pulumi:"templateId"`
}

// The set of arguments for constructing a WatermarkRuleAttachment resource.
type WatermarkRuleAttachmentArgs struct {
	// rule app name.
	AppName pulumi.StringInput
	// rule domain name.
	DomainName pulumi.StringInput
	// rule stream name.
	StreamName pulumi.StringInput
	// The template Id can be acquired by the Id of `tencentcloud_css_watermark`.
	TemplateId pulumi.IntInput
}

func (WatermarkRuleAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*watermarkRuleAttachmentArgs)(nil)).Elem()
}

type WatermarkRuleAttachmentInput interface {
	pulumi.Input

	ToWatermarkRuleAttachmentOutput() WatermarkRuleAttachmentOutput
	ToWatermarkRuleAttachmentOutputWithContext(ctx context.Context) WatermarkRuleAttachmentOutput
}

func (*WatermarkRuleAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**WatermarkRuleAttachment)(nil)).Elem()
}

func (i *WatermarkRuleAttachment) ToWatermarkRuleAttachmentOutput() WatermarkRuleAttachmentOutput {
	return i.ToWatermarkRuleAttachmentOutputWithContext(context.Background())
}

func (i *WatermarkRuleAttachment) ToWatermarkRuleAttachmentOutputWithContext(ctx context.Context) WatermarkRuleAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatermarkRuleAttachmentOutput)
}

// WatermarkRuleAttachmentArrayInput is an input type that accepts WatermarkRuleAttachmentArray and WatermarkRuleAttachmentArrayOutput values.
// You can construct a concrete instance of `WatermarkRuleAttachmentArrayInput` via:
//
//	WatermarkRuleAttachmentArray{ WatermarkRuleAttachmentArgs{...} }
type WatermarkRuleAttachmentArrayInput interface {
	pulumi.Input

	ToWatermarkRuleAttachmentArrayOutput() WatermarkRuleAttachmentArrayOutput
	ToWatermarkRuleAttachmentArrayOutputWithContext(context.Context) WatermarkRuleAttachmentArrayOutput
}

type WatermarkRuleAttachmentArray []WatermarkRuleAttachmentInput

func (WatermarkRuleAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WatermarkRuleAttachment)(nil)).Elem()
}

func (i WatermarkRuleAttachmentArray) ToWatermarkRuleAttachmentArrayOutput() WatermarkRuleAttachmentArrayOutput {
	return i.ToWatermarkRuleAttachmentArrayOutputWithContext(context.Background())
}

func (i WatermarkRuleAttachmentArray) ToWatermarkRuleAttachmentArrayOutputWithContext(ctx context.Context) WatermarkRuleAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatermarkRuleAttachmentArrayOutput)
}

// WatermarkRuleAttachmentMapInput is an input type that accepts WatermarkRuleAttachmentMap and WatermarkRuleAttachmentMapOutput values.
// You can construct a concrete instance of `WatermarkRuleAttachmentMapInput` via:
//
//	WatermarkRuleAttachmentMap{ "key": WatermarkRuleAttachmentArgs{...} }
type WatermarkRuleAttachmentMapInput interface {
	pulumi.Input

	ToWatermarkRuleAttachmentMapOutput() WatermarkRuleAttachmentMapOutput
	ToWatermarkRuleAttachmentMapOutputWithContext(context.Context) WatermarkRuleAttachmentMapOutput
}

type WatermarkRuleAttachmentMap map[string]WatermarkRuleAttachmentInput

func (WatermarkRuleAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WatermarkRuleAttachment)(nil)).Elem()
}

func (i WatermarkRuleAttachmentMap) ToWatermarkRuleAttachmentMapOutput() WatermarkRuleAttachmentMapOutput {
	return i.ToWatermarkRuleAttachmentMapOutputWithContext(context.Background())
}

func (i WatermarkRuleAttachmentMap) ToWatermarkRuleAttachmentMapOutputWithContext(ctx context.Context) WatermarkRuleAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatermarkRuleAttachmentMapOutput)
}

type WatermarkRuleAttachmentOutput struct{ *pulumi.OutputState }

func (WatermarkRuleAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WatermarkRuleAttachment)(nil)).Elem()
}

func (o WatermarkRuleAttachmentOutput) ToWatermarkRuleAttachmentOutput() WatermarkRuleAttachmentOutput {
	return o
}

func (o WatermarkRuleAttachmentOutput) ToWatermarkRuleAttachmentOutputWithContext(ctx context.Context) WatermarkRuleAttachmentOutput {
	return o
}

// rule app name.
func (o WatermarkRuleAttachmentOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkRuleAttachment) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// create time.
func (o WatermarkRuleAttachmentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkRuleAttachment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// rule domain name.
func (o WatermarkRuleAttachmentOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkRuleAttachment) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// rule stream name.
func (o WatermarkRuleAttachmentOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkRuleAttachment) pulumi.StringOutput { return v.StreamName }).(pulumi.StringOutput)
}

// The template Id can be acquired by the Id of `tencentcloud_css_watermark`.
func (o WatermarkRuleAttachmentOutput) TemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *WatermarkRuleAttachment) pulumi.IntOutput { return v.TemplateId }).(pulumi.IntOutput)
}

// update time.
func (o WatermarkRuleAttachmentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WatermarkRuleAttachment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type WatermarkRuleAttachmentArrayOutput struct{ *pulumi.OutputState }

func (WatermarkRuleAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WatermarkRuleAttachment)(nil)).Elem()
}

func (o WatermarkRuleAttachmentArrayOutput) ToWatermarkRuleAttachmentArrayOutput() WatermarkRuleAttachmentArrayOutput {
	return o
}

func (o WatermarkRuleAttachmentArrayOutput) ToWatermarkRuleAttachmentArrayOutputWithContext(ctx context.Context) WatermarkRuleAttachmentArrayOutput {
	return o
}

func (o WatermarkRuleAttachmentArrayOutput) Index(i pulumi.IntInput) WatermarkRuleAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WatermarkRuleAttachment {
		return vs[0].([]*WatermarkRuleAttachment)[vs[1].(int)]
	}).(WatermarkRuleAttachmentOutput)
}

type WatermarkRuleAttachmentMapOutput struct{ *pulumi.OutputState }

func (WatermarkRuleAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WatermarkRuleAttachment)(nil)).Elem()
}

func (o WatermarkRuleAttachmentMapOutput) ToWatermarkRuleAttachmentMapOutput() WatermarkRuleAttachmentMapOutput {
	return o
}

func (o WatermarkRuleAttachmentMapOutput) ToWatermarkRuleAttachmentMapOutputWithContext(ctx context.Context) WatermarkRuleAttachmentMapOutput {
	return o
}

func (o WatermarkRuleAttachmentMapOutput) MapIndex(k pulumi.StringInput) WatermarkRuleAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WatermarkRuleAttachment {
		return vs[0].(map[string]*WatermarkRuleAttachment)[vs[1].(string)]
	}).(WatermarkRuleAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WatermarkRuleAttachmentInput)(nil)).Elem(), &WatermarkRuleAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*WatermarkRuleAttachmentArrayInput)(nil)).Elem(), WatermarkRuleAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WatermarkRuleAttachmentMapInput)(nil)).Elem(), WatermarkRuleAttachmentMap{})
	pulumi.RegisterOutputType(WatermarkRuleAttachmentOutput{})
	pulumi.RegisterOutputType(WatermarkRuleAttachmentArrayOutput{})
	pulumi.RegisterOutputType(WatermarkRuleAttachmentMapOutput{})
}
