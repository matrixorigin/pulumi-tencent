// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tse

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CngwStrategyBindGroup struct {
	pulumi.CustomResourceState

	// gateway ID.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// group ID.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// `bind` or `unbind`.
	Option pulumi.StringOutput `pulumi:"option"`
	// Binding status.
	Status pulumi.StringOutput `pulumi:"status"`
	// strategy ID.
	StrategyId pulumi.StringOutput `pulumi:"strategyId"`
}

// NewCngwStrategyBindGroup registers a new resource with the given unique name, arguments, and options.
func NewCngwStrategyBindGroup(ctx *pulumi.Context,
	name string, args *CngwStrategyBindGroupArgs, opts ...pulumi.ResourceOption) (*CngwStrategyBindGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Option == nil {
		return nil, errors.New("invalid value for required argument 'Option'")
	}
	if args.StrategyId == nil {
		return nil, errors.New("invalid value for required argument 'StrategyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CngwStrategyBindGroup
	err := ctx.RegisterResource("tencentcloud:Tse/cngwStrategyBindGroup:CngwStrategyBindGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCngwStrategyBindGroup gets an existing CngwStrategyBindGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCngwStrategyBindGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CngwStrategyBindGroupState, opts ...pulumi.ResourceOption) (*CngwStrategyBindGroup, error) {
	var resource CngwStrategyBindGroup
	err := ctx.ReadResource("tencentcloud:Tse/cngwStrategyBindGroup:CngwStrategyBindGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CngwStrategyBindGroup resources.
type cngwStrategyBindGroupState struct {
	// gateway ID.
	GatewayId *string `pulumi:"gatewayId"`
	// group ID.
	GroupId *string `pulumi:"groupId"`
	// `bind` or `unbind`.
	Option *string `pulumi:"option"`
	// Binding status.
	Status *string `pulumi:"status"`
	// strategy ID.
	StrategyId *string `pulumi:"strategyId"`
}

type CngwStrategyBindGroupState struct {
	// gateway ID.
	GatewayId pulumi.StringPtrInput
	// group ID.
	GroupId pulumi.StringPtrInput
	// `bind` or `unbind`.
	Option pulumi.StringPtrInput
	// Binding status.
	Status pulumi.StringPtrInput
	// strategy ID.
	StrategyId pulumi.StringPtrInput
}

func (CngwStrategyBindGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwStrategyBindGroupState)(nil)).Elem()
}

type cngwStrategyBindGroupArgs struct {
	// gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// group ID.
	GroupId string `pulumi:"groupId"`
	// `bind` or `unbind`.
	Option string `pulumi:"option"`
	// strategy ID.
	StrategyId string `pulumi:"strategyId"`
}

// The set of arguments for constructing a CngwStrategyBindGroup resource.
type CngwStrategyBindGroupArgs struct {
	// gateway ID.
	GatewayId pulumi.StringInput
	// group ID.
	GroupId pulumi.StringInput
	// `bind` or `unbind`.
	Option pulumi.StringInput
	// strategy ID.
	StrategyId pulumi.StringInput
}

func (CngwStrategyBindGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwStrategyBindGroupArgs)(nil)).Elem()
}

type CngwStrategyBindGroupInput interface {
	pulumi.Input

	ToCngwStrategyBindGroupOutput() CngwStrategyBindGroupOutput
	ToCngwStrategyBindGroupOutputWithContext(ctx context.Context) CngwStrategyBindGroupOutput
}

func (*CngwStrategyBindGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwStrategyBindGroup)(nil)).Elem()
}

func (i *CngwStrategyBindGroup) ToCngwStrategyBindGroupOutput() CngwStrategyBindGroupOutput {
	return i.ToCngwStrategyBindGroupOutputWithContext(context.Background())
}

func (i *CngwStrategyBindGroup) ToCngwStrategyBindGroupOutputWithContext(ctx context.Context) CngwStrategyBindGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwStrategyBindGroupOutput)
}

// CngwStrategyBindGroupArrayInput is an input type that accepts CngwStrategyBindGroupArray and CngwStrategyBindGroupArrayOutput values.
// You can construct a concrete instance of `CngwStrategyBindGroupArrayInput` via:
//
//	CngwStrategyBindGroupArray{ CngwStrategyBindGroupArgs{...} }
type CngwStrategyBindGroupArrayInput interface {
	pulumi.Input

	ToCngwStrategyBindGroupArrayOutput() CngwStrategyBindGroupArrayOutput
	ToCngwStrategyBindGroupArrayOutputWithContext(context.Context) CngwStrategyBindGroupArrayOutput
}

type CngwStrategyBindGroupArray []CngwStrategyBindGroupInput

func (CngwStrategyBindGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwStrategyBindGroup)(nil)).Elem()
}

func (i CngwStrategyBindGroupArray) ToCngwStrategyBindGroupArrayOutput() CngwStrategyBindGroupArrayOutput {
	return i.ToCngwStrategyBindGroupArrayOutputWithContext(context.Background())
}

func (i CngwStrategyBindGroupArray) ToCngwStrategyBindGroupArrayOutputWithContext(ctx context.Context) CngwStrategyBindGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwStrategyBindGroupArrayOutput)
}

// CngwStrategyBindGroupMapInput is an input type that accepts CngwStrategyBindGroupMap and CngwStrategyBindGroupMapOutput values.
// You can construct a concrete instance of `CngwStrategyBindGroupMapInput` via:
//
//	CngwStrategyBindGroupMap{ "key": CngwStrategyBindGroupArgs{...} }
type CngwStrategyBindGroupMapInput interface {
	pulumi.Input

	ToCngwStrategyBindGroupMapOutput() CngwStrategyBindGroupMapOutput
	ToCngwStrategyBindGroupMapOutputWithContext(context.Context) CngwStrategyBindGroupMapOutput
}

type CngwStrategyBindGroupMap map[string]CngwStrategyBindGroupInput

func (CngwStrategyBindGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwStrategyBindGroup)(nil)).Elem()
}

func (i CngwStrategyBindGroupMap) ToCngwStrategyBindGroupMapOutput() CngwStrategyBindGroupMapOutput {
	return i.ToCngwStrategyBindGroupMapOutputWithContext(context.Background())
}

func (i CngwStrategyBindGroupMap) ToCngwStrategyBindGroupMapOutputWithContext(ctx context.Context) CngwStrategyBindGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwStrategyBindGroupMapOutput)
}

type CngwStrategyBindGroupOutput struct{ *pulumi.OutputState }

func (CngwStrategyBindGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwStrategyBindGroup)(nil)).Elem()
}

func (o CngwStrategyBindGroupOutput) ToCngwStrategyBindGroupOutput() CngwStrategyBindGroupOutput {
	return o
}

func (o CngwStrategyBindGroupOutput) ToCngwStrategyBindGroupOutputWithContext(ctx context.Context) CngwStrategyBindGroupOutput {
	return o
}

// gateway ID.
func (o CngwStrategyBindGroupOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwStrategyBindGroup) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// group ID.
func (o CngwStrategyBindGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwStrategyBindGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// `bind` or `unbind`.
func (o CngwStrategyBindGroupOutput) Option() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwStrategyBindGroup) pulumi.StringOutput { return v.Option }).(pulumi.StringOutput)
}

// Binding status.
func (o CngwStrategyBindGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwStrategyBindGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// strategy ID.
func (o CngwStrategyBindGroupOutput) StrategyId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwStrategyBindGroup) pulumi.StringOutput { return v.StrategyId }).(pulumi.StringOutput)
}

type CngwStrategyBindGroupArrayOutput struct{ *pulumi.OutputState }

func (CngwStrategyBindGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwStrategyBindGroup)(nil)).Elem()
}

func (o CngwStrategyBindGroupArrayOutput) ToCngwStrategyBindGroupArrayOutput() CngwStrategyBindGroupArrayOutput {
	return o
}

func (o CngwStrategyBindGroupArrayOutput) ToCngwStrategyBindGroupArrayOutputWithContext(ctx context.Context) CngwStrategyBindGroupArrayOutput {
	return o
}

func (o CngwStrategyBindGroupArrayOutput) Index(i pulumi.IntInput) CngwStrategyBindGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CngwStrategyBindGroup {
		return vs[0].([]*CngwStrategyBindGroup)[vs[1].(int)]
	}).(CngwStrategyBindGroupOutput)
}

type CngwStrategyBindGroupMapOutput struct{ *pulumi.OutputState }

func (CngwStrategyBindGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwStrategyBindGroup)(nil)).Elem()
}

func (o CngwStrategyBindGroupMapOutput) ToCngwStrategyBindGroupMapOutput() CngwStrategyBindGroupMapOutput {
	return o
}

func (o CngwStrategyBindGroupMapOutput) ToCngwStrategyBindGroupMapOutputWithContext(ctx context.Context) CngwStrategyBindGroupMapOutput {
	return o
}

func (o CngwStrategyBindGroupMapOutput) MapIndex(k pulumi.StringInput) CngwStrategyBindGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CngwStrategyBindGroup {
		return vs[0].(map[string]*CngwStrategyBindGroup)[vs[1].(string)]
	}).(CngwStrategyBindGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CngwStrategyBindGroupInput)(nil)).Elem(), &CngwStrategyBindGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwStrategyBindGroupArrayInput)(nil)).Elem(), CngwStrategyBindGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwStrategyBindGroupMapInput)(nil)).Elem(), CngwStrategyBindGroupMap{})
	pulumi.RegisterOutputType(CngwStrategyBindGroupOutput{})
	pulumi.RegisterOutputType(CngwStrategyBindGroupArrayOutput{})
	pulumi.RegisterOutputType(CngwStrategyBindGroupMapOutput{})
}
