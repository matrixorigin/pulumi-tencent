// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tse

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CngwNetwork struct {
	pulumi.CustomResourceState

	// description of clb.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// gateway ID.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// gateway group ID.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// internet type. Reference value:`IPV4` (default value), `IPV6`.
	InternetAddressVersion pulumi.StringPtrOutput `pulumi:"internetAddressVersion"`
	// public network bandwidth.
	InternetMaxBandwidthOut pulumi.IntPtrOutput `pulumi:"internetMaxBandwidthOut"`
	// trade type of internet. Reference value:`BANDWIDTH` (default value), `TRAFFIC`.
	InternetPayMode pulumi.StringPtrOutput `pulumi:"internetPayMode"`
	// primary availability zone.
	MasterZoneId pulumi.StringPtrOutput `pulumi:"masterZoneId"`
	// Whether load balancing has multiple availability zones.
	MultiZoneFlag pulumi.BoolPtrOutput `pulumi:"multiZoneFlag"`
	// network id.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// specification type of clb. Default `shared` type when this parameter is empty, Note: input `shared` is not supported
	// when creating. Reference value:`clb.c2.medium`, `clb.c3.small`, `clb.c3.medium`, `clb.c4.small`, `clb.c4.medium`,
	// `clb.c4.large`, `clb.c4.xlarge`.
	SlaType pulumi.StringPtrOutput `pulumi:"slaType"`
	// alternate availability zone.
	SlaveZoneId pulumi.StringPtrOutput `pulumi:"slaveZoneId"`
	// clb vip.
	Vip pulumi.StringOutput `pulumi:"vip"`
}

// NewCngwNetwork registers a new resource with the given unique name, arguments, and options.
func NewCngwNetwork(ctx *pulumi.Context,
	name string, args *CngwNetworkArgs, opts ...pulumi.ResourceOption) (*CngwNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CngwNetwork
	err := ctx.RegisterResource("tencentcloud:Tse/cngwNetwork:CngwNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCngwNetwork gets an existing CngwNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCngwNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CngwNetworkState, opts ...pulumi.ResourceOption) (*CngwNetwork, error) {
	var resource CngwNetwork
	err := ctx.ReadResource("tencentcloud:Tse/cngwNetwork:CngwNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CngwNetwork resources.
type cngwNetworkState struct {
	// description of clb.
	Description *string `pulumi:"description"`
	// gateway ID.
	GatewayId *string `pulumi:"gatewayId"`
	// gateway group ID.
	GroupId *string `pulumi:"groupId"`
	// internet type. Reference value:`IPV4` (default value), `IPV6`.
	InternetAddressVersion *string `pulumi:"internetAddressVersion"`
	// public network bandwidth.
	InternetMaxBandwidthOut *int `pulumi:"internetMaxBandwidthOut"`
	// trade type of internet. Reference value:`BANDWIDTH` (default value), `TRAFFIC`.
	InternetPayMode *string `pulumi:"internetPayMode"`
	// primary availability zone.
	MasterZoneId *string `pulumi:"masterZoneId"`
	// Whether load balancing has multiple availability zones.
	MultiZoneFlag *bool `pulumi:"multiZoneFlag"`
	// network id.
	NetworkId *string `pulumi:"networkId"`
	// specification type of clb. Default `shared` type when this parameter is empty, Note: input `shared` is not supported
	// when creating. Reference value:`clb.c2.medium`, `clb.c3.small`, `clb.c3.medium`, `clb.c4.small`, `clb.c4.medium`,
	// `clb.c4.large`, `clb.c4.xlarge`.
	SlaType *string `pulumi:"slaType"`
	// alternate availability zone.
	SlaveZoneId *string `pulumi:"slaveZoneId"`
	// clb vip.
	Vip *string `pulumi:"vip"`
}

type CngwNetworkState struct {
	// description of clb.
	Description pulumi.StringPtrInput
	// gateway ID.
	GatewayId pulumi.StringPtrInput
	// gateway group ID.
	GroupId pulumi.StringPtrInput
	// internet type. Reference value:`IPV4` (default value), `IPV6`.
	InternetAddressVersion pulumi.StringPtrInput
	// public network bandwidth.
	InternetMaxBandwidthOut pulumi.IntPtrInput
	// trade type of internet. Reference value:`BANDWIDTH` (default value), `TRAFFIC`.
	InternetPayMode pulumi.StringPtrInput
	// primary availability zone.
	MasterZoneId pulumi.StringPtrInput
	// Whether load balancing has multiple availability zones.
	MultiZoneFlag pulumi.BoolPtrInput
	// network id.
	NetworkId pulumi.StringPtrInput
	// specification type of clb. Default `shared` type when this parameter is empty, Note: input `shared` is not supported
	// when creating. Reference value:`clb.c2.medium`, `clb.c3.small`, `clb.c3.medium`, `clb.c4.small`, `clb.c4.medium`,
	// `clb.c4.large`, `clb.c4.xlarge`.
	SlaType pulumi.StringPtrInput
	// alternate availability zone.
	SlaveZoneId pulumi.StringPtrInput
	// clb vip.
	Vip pulumi.StringPtrInput
}

func (CngwNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwNetworkState)(nil)).Elem()
}

type cngwNetworkArgs struct {
	// description of clb.
	Description *string `pulumi:"description"`
	// gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// gateway group ID.
	GroupId string `pulumi:"groupId"`
	// internet type. Reference value:`IPV4` (default value), `IPV6`.
	InternetAddressVersion *string `pulumi:"internetAddressVersion"`
	// public network bandwidth.
	InternetMaxBandwidthOut *int `pulumi:"internetMaxBandwidthOut"`
	// trade type of internet. Reference value:`BANDWIDTH` (default value), `TRAFFIC`.
	InternetPayMode *string `pulumi:"internetPayMode"`
	// primary availability zone.
	MasterZoneId *string `pulumi:"masterZoneId"`
	// Whether load balancing has multiple availability zones.
	MultiZoneFlag *bool `pulumi:"multiZoneFlag"`
	// specification type of clb. Default `shared` type when this parameter is empty, Note: input `shared` is not supported
	// when creating. Reference value:`clb.c2.medium`, `clb.c3.small`, `clb.c3.medium`, `clb.c4.small`, `clb.c4.medium`,
	// `clb.c4.large`, `clb.c4.xlarge`.
	SlaType *string `pulumi:"slaType"`
	// alternate availability zone.
	SlaveZoneId *string `pulumi:"slaveZoneId"`
}

// The set of arguments for constructing a CngwNetwork resource.
type CngwNetworkArgs struct {
	// description of clb.
	Description pulumi.StringPtrInput
	// gateway ID.
	GatewayId pulumi.StringInput
	// gateway group ID.
	GroupId pulumi.StringInput
	// internet type. Reference value:`IPV4` (default value), `IPV6`.
	InternetAddressVersion pulumi.StringPtrInput
	// public network bandwidth.
	InternetMaxBandwidthOut pulumi.IntPtrInput
	// trade type of internet. Reference value:`BANDWIDTH` (default value), `TRAFFIC`.
	InternetPayMode pulumi.StringPtrInput
	// primary availability zone.
	MasterZoneId pulumi.StringPtrInput
	// Whether load balancing has multiple availability zones.
	MultiZoneFlag pulumi.BoolPtrInput
	// specification type of clb. Default `shared` type when this parameter is empty, Note: input `shared` is not supported
	// when creating. Reference value:`clb.c2.medium`, `clb.c3.small`, `clb.c3.medium`, `clb.c4.small`, `clb.c4.medium`,
	// `clb.c4.large`, `clb.c4.xlarge`.
	SlaType pulumi.StringPtrInput
	// alternate availability zone.
	SlaveZoneId pulumi.StringPtrInput
}

func (CngwNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwNetworkArgs)(nil)).Elem()
}

type CngwNetworkInput interface {
	pulumi.Input

	ToCngwNetworkOutput() CngwNetworkOutput
	ToCngwNetworkOutputWithContext(ctx context.Context) CngwNetworkOutput
}

func (*CngwNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwNetwork)(nil)).Elem()
}

func (i *CngwNetwork) ToCngwNetworkOutput() CngwNetworkOutput {
	return i.ToCngwNetworkOutputWithContext(context.Background())
}

func (i *CngwNetwork) ToCngwNetworkOutputWithContext(ctx context.Context) CngwNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwNetworkOutput)
}

// CngwNetworkArrayInput is an input type that accepts CngwNetworkArray and CngwNetworkArrayOutput values.
// You can construct a concrete instance of `CngwNetworkArrayInput` via:
//
//	CngwNetworkArray{ CngwNetworkArgs{...} }
type CngwNetworkArrayInput interface {
	pulumi.Input

	ToCngwNetworkArrayOutput() CngwNetworkArrayOutput
	ToCngwNetworkArrayOutputWithContext(context.Context) CngwNetworkArrayOutput
}

type CngwNetworkArray []CngwNetworkInput

func (CngwNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwNetwork)(nil)).Elem()
}

func (i CngwNetworkArray) ToCngwNetworkArrayOutput() CngwNetworkArrayOutput {
	return i.ToCngwNetworkArrayOutputWithContext(context.Background())
}

func (i CngwNetworkArray) ToCngwNetworkArrayOutputWithContext(ctx context.Context) CngwNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwNetworkArrayOutput)
}

// CngwNetworkMapInput is an input type that accepts CngwNetworkMap and CngwNetworkMapOutput values.
// You can construct a concrete instance of `CngwNetworkMapInput` via:
//
//	CngwNetworkMap{ "key": CngwNetworkArgs{...} }
type CngwNetworkMapInput interface {
	pulumi.Input

	ToCngwNetworkMapOutput() CngwNetworkMapOutput
	ToCngwNetworkMapOutputWithContext(context.Context) CngwNetworkMapOutput
}

type CngwNetworkMap map[string]CngwNetworkInput

func (CngwNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwNetwork)(nil)).Elem()
}

func (i CngwNetworkMap) ToCngwNetworkMapOutput() CngwNetworkMapOutput {
	return i.ToCngwNetworkMapOutputWithContext(context.Background())
}

func (i CngwNetworkMap) ToCngwNetworkMapOutputWithContext(ctx context.Context) CngwNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwNetworkMapOutput)
}

type CngwNetworkOutput struct{ *pulumi.OutputState }

func (CngwNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwNetwork)(nil)).Elem()
}

func (o CngwNetworkOutput) ToCngwNetworkOutput() CngwNetworkOutput {
	return o
}

func (o CngwNetworkOutput) ToCngwNetworkOutputWithContext(ctx context.Context) CngwNetworkOutput {
	return o
}

// description of clb.
func (o CngwNetworkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// gateway ID.
func (o CngwNetworkOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// gateway group ID.
func (o CngwNetworkOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// internet type. Reference value:`IPV4` (default value), `IPV6`.
func (o CngwNetworkOutput) InternetAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.StringPtrOutput { return v.InternetAddressVersion }).(pulumi.StringPtrOutput)
}

// public network bandwidth.
func (o CngwNetworkOutput) InternetMaxBandwidthOut() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.IntPtrOutput { return v.InternetMaxBandwidthOut }).(pulumi.IntPtrOutput)
}

// trade type of internet. Reference value:`BANDWIDTH` (default value), `TRAFFIC`.
func (o CngwNetworkOutput) InternetPayMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.StringPtrOutput { return v.InternetPayMode }).(pulumi.StringPtrOutput)
}

// primary availability zone.
func (o CngwNetworkOutput) MasterZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.StringPtrOutput { return v.MasterZoneId }).(pulumi.StringPtrOutput)
}

// Whether load balancing has multiple availability zones.
func (o CngwNetworkOutput) MultiZoneFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.BoolPtrOutput { return v.MultiZoneFlag }).(pulumi.BoolPtrOutput)
}

// network id.
func (o CngwNetworkOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// specification type of clb. Default `shared` type when this parameter is empty, Note: input `shared` is not supported
// when creating. Reference value:`clb.c2.medium`, `clb.c3.small`, `clb.c3.medium`, `clb.c4.small`, `clb.c4.medium`,
// `clb.c4.large`, `clb.c4.xlarge`.
func (o CngwNetworkOutput) SlaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.StringPtrOutput { return v.SlaType }).(pulumi.StringPtrOutput)
}

// alternate availability zone.
func (o CngwNetworkOutput) SlaveZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.StringPtrOutput { return v.SlaveZoneId }).(pulumi.StringPtrOutput)
}

// clb vip.
func (o CngwNetworkOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwNetwork) pulumi.StringOutput { return v.Vip }).(pulumi.StringOutput)
}

type CngwNetworkArrayOutput struct{ *pulumi.OutputState }

func (CngwNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwNetwork)(nil)).Elem()
}

func (o CngwNetworkArrayOutput) ToCngwNetworkArrayOutput() CngwNetworkArrayOutput {
	return o
}

func (o CngwNetworkArrayOutput) ToCngwNetworkArrayOutputWithContext(ctx context.Context) CngwNetworkArrayOutput {
	return o
}

func (o CngwNetworkArrayOutput) Index(i pulumi.IntInput) CngwNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CngwNetwork {
		return vs[0].([]*CngwNetwork)[vs[1].(int)]
	}).(CngwNetworkOutput)
}

type CngwNetworkMapOutput struct{ *pulumi.OutputState }

func (CngwNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwNetwork)(nil)).Elem()
}

func (o CngwNetworkMapOutput) ToCngwNetworkMapOutput() CngwNetworkMapOutput {
	return o
}

func (o CngwNetworkMapOutput) ToCngwNetworkMapOutputWithContext(ctx context.Context) CngwNetworkMapOutput {
	return o
}

func (o CngwNetworkMapOutput) MapIndex(k pulumi.StringInput) CngwNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CngwNetwork {
		return vs[0].(map[string]*CngwNetwork)[vs[1].(string)]
	}).(CngwNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CngwNetworkInput)(nil)).Elem(), &CngwNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwNetworkArrayInput)(nil)).Elem(), CngwNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwNetworkMapInput)(nil)).Elem(), CngwNetworkMap{})
	pulumi.RegisterOutputType(CngwNetworkOutput{})
	pulumi.RegisterOutputType(CngwNetworkArrayOutput{})
	pulumi.RegisterOutputType(CngwNetworkMapOutput{})
}
