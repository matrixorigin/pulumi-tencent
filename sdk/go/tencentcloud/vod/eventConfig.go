// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vod

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventConfig struct {
	pulumi.CustomResourceState

	// Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON`
	// is to receive event notification.
	DeleteMediaCompleteEventSwitch pulumi.StringOutput `pulumi:"deleteMediaCompleteEventSwitch"`
	// How to receive event notifications. Valid values: - Push: HTTP callback notification; - PULL: Reliable notification
	// based on message queuing.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the
	// NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
	NotificationUrl pulumi.StringPtrOutput `pulumi:"notificationUrl"`
	// Sub app id.
	SubAppId pulumi.IntOutput `pulumi:"subAppId"`
	// Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification,
	// `ON` means to receive event notification.
	UploadMediaCompleteEventSwitch pulumi.StringOutput `pulumi:"uploadMediaCompleteEventSwitch"`
}

// NewEventConfig registers a new resource with the given unique name, arguments, and options.
func NewEventConfig(ctx *pulumi.Context,
	name string, args *EventConfigArgs, opts ...pulumi.ResourceOption) (*EventConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubAppId == nil {
		return nil, errors.New("invalid value for required argument 'SubAppId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventConfig
	err := ctx.RegisterResource("tencentcloud:Vod/eventConfig:EventConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventConfig gets an existing EventConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventConfigState, opts ...pulumi.ResourceOption) (*EventConfig, error) {
	var resource EventConfig
	err := ctx.ReadResource("tencentcloud:Vod/eventConfig:EventConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventConfig resources.
type eventConfigState struct {
	// Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON`
	// is to receive event notification.
	DeleteMediaCompleteEventSwitch *string `pulumi:"deleteMediaCompleteEventSwitch"`
	// How to receive event notifications. Valid values: - Push: HTTP callback notification; - PULL: Reliable notification
	// based on message queuing.
	Mode *string `pulumi:"mode"`
	// The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the
	// NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
	NotificationUrl *string `pulumi:"notificationUrl"`
	// Sub app id.
	SubAppId *int `pulumi:"subAppId"`
	// Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification,
	// `ON` means to receive event notification.
	UploadMediaCompleteEventSwitch *string `pulumi:"uploadMediaCompleteEventSwitch"`
}

type EventConfigState struct {
	// Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON`
	// is to receive event notification.
	DeleteMediaCompleteEventSwitch pulumi.StringPtrInput
	// How to receive event notifications. Valid values: - Push: HTTP callback notification; - PULL: Reliable notification
	// based on message queuing.
	Mode pulumi.StringPtrInput
	// The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the
	// NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
	NotificationUrl pulumi.StringPtrInput
	// Sub app id.
	SubAppId pulumi.IntPtrInput
	// Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification,
	// `ON` means to receive event notification.
	UploadMediaCompleteEventSwitch pulumi.StringPtrInput
}

func (EventConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventConfigState)(nil)).Elem()
}

type eventConfigArgs struct {
	// Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON`
	// is to receive event notification.
	DeleteMediaCompleteEventSwitch *string `pulumi:"deleteMediaCompleteEventSwitch"`
	// How to receive event notifications. Valid values: - Push: HTTP callback notification; - PULL: Reliable notification
	// based on message queuing.
	Mode *string `pulumi:"mode"`
	// The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the
	// NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
	NotificationUrl *string `pulumi:"notificationUrl"`
	// Sub app id.
	SubAppId int `pulumi:"subAppId"`
	// Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification,
	// `ON` means to receive event notification.
	UploadMediaCompleteEventSwitch *string `pulumi:"uploadMediaCompleteEventSwitch"`
}

// The set of arguments for constructing a EventConfig resource.
type EventConfigArgs struct {
	// Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON`
	// is to receive event notification.
	DeleteMediaCompleteEventSwitch pulumi.StringPtrInput
	// How to receive event notifications. Valid values: - Push: HTTP callback notification; - PULL: Reliable notification
	// based on message queuing.
	Mode pulumi.StringPtrInput
	// The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the
	// NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
	NotificationUrl pulumi.StringPtrInput
	// Sub app id.
	SubAppId pulumi.IntInput
	// Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification,
	// `ON` means to receive event notification.
	UploadMediaCompleteEventSwitch pulumi.StringPtrInput
}

func (EventConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventConfigArgs)(nil)).Elem()
}

type EventConfigInput interface {
	pulumi.Input

	ToEventConfigOutput() EventConfigOutput
	ToEventConfigOutputWithContext(ctx context.Context) EventConfigOutput
}

func (*EventConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**EventConfig)(nil)).Elem()
}

func (i *EventConfig) ToEventConfigOutput() EventConfigOutput {
	return i.ToEventConfigOutputWithContext(context.Background())
}

func (i *EventConfig) ToEventConfigOutputWithContext(ctx context.Context) EventConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConfigOutput)
}

// EventConfigArrayInput is an input type that accepts EventConfigArray and EventConfigArrayOutput values.
// You can construct a concrete instance of `EventConfigArrayInput` via:
//
//	EventConfigArray{ EventConfigArgs{...} }
type EventConfigArrayInput interface {
	pulumi.Input

	ToEventConfigArrayOutput() EventConfigArrayOutput
	ToEventConfigArrayOutputWithContext(context.Context) EventConfigArrayOutput
}

type EventConfigArray []EventConfigInput

func (EventConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventConfig)(nil)).Elem()
}

func (i EventConfigArray) ToEventConfigArrayOutput() EventConfigArrayOutput {
	return i.ToEventConfigArrayOutputWithContext(context.Background())
}

func (i EventConfigArray) ToEventConfigArrayOutputWithContext(ctx context.Context) EventConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConfigArrayOutput)
}

// EventConfigMapInput is an input type that accepts EventConfigMap and EventConfigMapOutput values.
// You can construct a concrete instance of `EventConfigMapInput` via:
//
//	EventConfigMap{ "key": EventConfigArgs{...} }
type EventConfigMapInput interface {
	pulumi.Input

	ToEventConfigMapOutput() EventConfigMapOutput
	ToEventConfigMapOutputWithContext(context.Context) EventConfigMapOutput
}

type EventConfigMap map[string]EventConfigInput

func (EventConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventConfig)(nil)).Elem()
}

func (i EventConfigMap) ToEventConfigMapOutput() EventConfigMapOutput {
	return i.ToEventConfigMapOutputWithContext(context.Background())
}

func (i EventConfigMap) ToEventConfigMapOutputWithContext(ctx context.Context) EventConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConfigMapOutput)
}

type EventConfigOutput struct{ *pulumi.OutputState }

func (EventConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventConfig)(nil)).Elem()
}

func (o EventConfigOutput) ToEventConfigOutput() EventConfigOutput {
	return o
}

func (o EventConfigOutput) ToEventConfigOutputWithContext(ctx context.Context) EventConfigOutput {
	return o
}

// Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON`
// is to receive event notification.
func (o EventConfigOutput) DeleteMediaCompleteEventSwitch() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConfig) pulumi.StringOutput { return v.DeleteMediaCompleteEventSwitch }).(pulumi.StringOutput)
}

// How to receive event notifications. Valid values: - Push: HTTP callback notification; - PULL: Reliable notification
// based on message queuing.
func (o EventConfigOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConfig) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the
// NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
func (o EventConfigOutput) NotificationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventConfig) pulumi.StringPtrOutput { return v.NotificationUrl }).(pulumi.StringPtrOutput)
}

// Sub app id.
func (o EventConfigOutput) SubAppId() pulumi.IntOutput {
	return o.ApplyT(func(v *EventConfig) pulumi.IntOutput { return v.SubAppId }).(pulumi.IntOutput)
}

// Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification,
// `ON` means to receive event notification.
func (o EventConfigOutput) UploadMediaCompleteEventSwitch() pulumi.StringOutput {
	return o.ApplyT(func(v *EventConfig) pulumi.StringOutput { return v.UploadMediaCompleteEventSwitch }).(pulumi.StringOutput)
}

type EventConfigArrayOutput struct{ *pulumi.OutputState }

func (EventConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventConfig)(nil)).Elem()
}

func (o EventConfigArrayOutput) ToEventConfigArrayOutput() EventConfigArrayOutput {
	return o
}

func (o EventConfigArrayOutput) ToEventConfigArrayOutputWithContext(ctx context.Context) EventConfigArrayOutput {
	return o
}

func (o EventConfigArrayOutput) Index(i pulumi.IntInput) EventConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventConfig {
		return vs[0].([]*EventConfig)[vs[1].(int)]
	}).(EventConfigOutput)
}

type EventConfigMapOutput struct{ *pulumi.OutputState }

func (EventConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventConfig)(nil)).Elem()
}

func (o EventConfigMapOutput) ToEventConfigMapOutput() EventConfigMapOutput {
	return o
}

func (o EventConfigMapOutput) ToEventConfigMapOutputWithContext(ctx context.Context) EventConfigMapOutput {
	return o
}

func (o EventConfigMapOutput) MapIndex(k pulumi.StringInput) EventConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventConfig {
		return vs[0].(map[string]*EventConfig)[vs[1].(string)]
	}).(EventConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventConfigInput)(nil)).Elem(), &EventConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventConfigArrayInput)(nil)).Elem(), EventConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventConfigMapInput)(nil)).Elem(), EventConfigMap{})
	pulumi.RegisterOutputType(EventConfigOutput{})
	pulumi.RegisterOutputType(EventConfigArrayOutput{})
	pulumi.RegisterOutputType(EventConfigMapOutput{})
}
