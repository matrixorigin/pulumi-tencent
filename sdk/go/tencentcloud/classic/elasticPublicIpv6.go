// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package classic

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ElasticPublicIpv6 struct {
	pulumi.CustomResourceState

	// Bandwidth package id, move the account up, and you need to pass in the ipv6 address to apply for bandwidth package
	// charging mode.
	BandwidthPackageId pulumi.StringOutput `pulumi:"bandwidthPackageId"`
	// Network billing model. IPV6 currently supports `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`. The default network
	// charging mode is `TRAFFIC_POSTPAID_BY_HOUR`.
	InternetChargeType pulumi.StringOutput `pulumi:"internetChargeType"`
	// Bandwidth in Mbps. Default is 1Mbps.
	InternetMaxBandwidthOut pulumi.IntOutput `pulumi:"internetMaxBandwidthOut"`
	// IPV6 addresses that require public network access.
	Ip6Address pulumi.StringOutput `pulumi:"ip6Address"`
	// Tags.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewElasticPublicIpv6 registers a new resource with the given unique name, arguments, and options.
func NewElasticPublicIpv6(ctx *pulumi.Context,
	name string, args *ElasticPublicIpv6Args, opts ...pulumi.ResourceOption) (*ElasticPublicIpv6, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip6Address == nil {
		return nil, errors.New("invalid value for required argument 'Ip6Address'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElasticPublicIpv6
	err := ctx.RegisterResource("tencentcloud:Classic/elasticPublicIpv6:ElasticPublicIpv6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticPublicIpv6 gets an existing ElasticPublicIpv6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticPublicIpv6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticPublicIpv6State, opts ...pulumi.ResourceOption) (*ElasticPublicIpv6, error) {
	var resource ElasticPublicIpv6
	err := ctx.ReadResource("tencentcloud:Classic/elasticPublicIpv6:ElasticPublicIpv6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticPublicIpv6 resources.
type elasticPublicIpv6State struct {
	// Bandwidth package id, move the account up, and you need to pass in the ipv6 address to apply for bandwidth package
	// charging mode.
	BandwidthPackageId *string `pulumi:"bandwidthPackageId"`
	// Network billing model. IPV6 currently supports `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`. The default network
	// charging mode is `TRAFFIC_POSTPAID_BY_HOUR`.
	InternetChargeType *string `pulumi:"internetChargeType"`
	// Bandwidth in Mbps. Default is 1Mbps.
	InternetMaxBandwidthOut *int `pulumi:"internetMaxBandwidthOut"`
	// IPV6 addresses that require public network access.
	Ip6Address *string `pulumi:"ip6Address"`
	// Tags.
	Tags map[string]interface{} `pulumi:"tags"`
}

type ElasticPublicIpv6State struct {
	// Bandwidth package id, move the account up, and you need to pass in the ipv6 address to apply for bandwidth package
	// charging mode.
	BandwidthPackageId pulumi.StringPtrInput
	// Network billing model. IPV6 currently supports `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`. The default network
	// charging mode is `TRAFFIC_POSTPAID_BY_HOUR`.
	InternetChargeType pulumi.StringPtrInput
	// Bandwidth in Mbps. Default is 1Mbps.
	InternetMaxBandwidthOut pulumi.IntPtrInput
	// IPV6 addresses that require public network access.
	Ip6Address pulumi.StringPtrInput
	// Tags.
	Tags pulumi.MapInput
}

func (ElasticPublicIpv6State) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticPublicIpv6State)(nil)).Elem()
}

type elasticPublicIpv6Args struct {
	// Bandwidth package id, move the account up, and you need to pass in the ipv6 address to apply for bandwidth package
	// charging mode.
	BandwidthPackageId *string `pulumi:"bandwidthPackageId"`
	// Network billing model. IPV6 currently supports `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`. The default network
	// charging mode is `TRAFFIC_POSTPAID_BY_HOUR`.
	InternetChargeType *string `pulumi:"internetChargeType"`
	// Bandwidth in Mbps. Default is 1Mbps.
	InternetMaxBandwidthOut *int `pulumi:"internetMaxBandwidthOut"`
	// IPV6 addresses that require public network access.
	Ip6Address string `pulumi:"ip6Address"`
	// Tags.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a ElasticPublicIpv6 resource.
type ElasticPublicIpv6Args struct {
	// Bandwidth package id, move the account up, and you need to pass in the ipv6 address to apply for bandwidth package
	// charging mode.
	BandwidthPackageId pulumi.StringPtrInput
	// Network billing model. IPV6 currently supports `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`. The default network
	// charging mode is `TRAFFIC_POSTPAID_BY_HOUR`.
	InternetChargeType pulumi.StringPtrInput
	// Bandwidth in Mbps. Default is 1Mbps.
	InternetMaxBandwidthOut pulumi.IntPtrInput
	// IPV6 addresses that require public network access.
	Ip6Address pulumi.StringInput
	// Tags.
	Tags pulumi.MapInput
}

func (ElasticPublicIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticPublicIpv6Args)(nil)).Elem()
}

type ElasticPublicIpv6Input interface {
	pulumi.Input

	ToElasticPublicIpv6Output() ElasticPublicIpv6Output
	ToElasticPublicIpv6OutputWithContext(ctx context.Context) ElasticPublicIpv6Output
}

func (*ElasticPublicIpv6) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticPublicIpv6)(nil)).Elem()
}

func (i *ElasticPublicIpv6) ToElasticPublicIpv6Output() ElasticPublicIpv6Output {
	return i.ToElasticPublicIpv6OutputWithContext(context.Background())
}

func (i *ElasticPublicIpv6) ToElasticPublicIpv6OutputWithContext(ctx context.Context) ElasticPublicIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticPublicIpv6Output)
}

// ElasticPublicIpv6ArrayInput is an input type that accepts ElasticPublicIpv6Array and ElasticPublicIpv6ArrayOutput values.
// You can construct a concrete instance of `ElasticPublicIpv6ArrayInput` via:
//
//	ElasticPublicIpv6Array{ ElasticPublicIpv6Args{...} }
type ElasticPublicIpv6ArrayInput interface {
	pulumi.Input

	ToElasticPublicIpv6ArrayOutput() ElasticPublicIpv6ArrayOutput
	ToElasticPublicIpv6ArrayOutputWithContext(context.Context) ElasticPublicIpv6ArrayOutput
}

type ElasticPublicIpv6Array []ElasticPublicIpv6Input

func (ElasticPublicIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticPublicIpv6)(nil)).Elem()
}

func (i ElasticPublicIpv6Array) ToElasticPublicIpv6ArrayOutput() ElasticPublicIpv6ArrayOutput {
	return i.ToElasticPublicIpv6ArrayOutputWithContext(context.Background())
}

func (i ElasticPublicIpv6Array) ToElasticPublicIpv6ArrayOutputWithContext(ctx context.Context) ElasticPublicIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticPublicIpv6ArrayOutput)
}

// ElasticPublicIpv6MapInput is an input type that accepts ElasticPublicIpv6Map and ElasticPublicIpv6MapOutput values.
// You can construct a concrete instance of `ElasticPublicIpv6MapInput` via:
//
//	ElasticPublicIpv6Map{ "key": ElasticPublicIpv6Args{...} }
type ElasticPublicIpv6MapInput interface {
	pulumi.Input

	ToElasticPublicIpv6MapOutput() ElasticPublicIpv6MapOutput
	ToElasticPublicIpv6MapOutputWithContext(context.Context) ElasticPublicIpv6MapOutput
}

type ElasticPublicIpv6Map map[string]ElasticPublicIpv6Input

func (ElasticPublicIpv6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticPublicIpv6)(nil)).Elem()
}

func (i ElasticPublicIpv6Map) ToElasticPublicIpv6MapOutput() ElasticPublicIpv6MapOutput {
	return i.ToElasticPublicIpv6MapOutputWithContext(context.Background())
}

func (i ElasticPublicIpv6Map) ToElasticPublicIpv6MapOutputWithContext(ctx context.Context) ElasticPublicIpv6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticPublicIpv6MapOutput)
}

type ElasticPublicIpv6Output struct{ *pulumi.OutputState }

func (ElasticPublicIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticPublicIpv6)(nil)).Elem()
}

func (o ElasticPublicIpv6Output) ToElasticPublicIpv6Output() ElasticPublicIpv6Output {
	return o
}

func (o ElasticPublicIpv6Output) ToElasticPublicIpv6OutputWithContext(ctx context.Context) ElasticPublicIpv6Output {
	return o
}

// Bandwidth package id, move the account up, and you need to pass in the ipv6 address to apply for bandwidth package
// charging mode.
func (o ElasticPublicIpv6Output) BandwidthPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticPublicIpv6) pulumi.StringOutput { return v.BandwidthPackageId }).(pulumi.StringOutput)
}

// Network billing model. IPV6 currently supports `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`. The default network
// charging mode is `TRAFFIC_POSTPAID_BY_HOUR`.
func (o ElasticPublicIpv6Output) InternetChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticPublicIpv6) pulumi.StringOutput { return v.InternetChargeType }).(pulumi.StringOutput)
}

// Bandwidth in Mbps. Default is 1Mbps.
func (o ElasticPublicIpv6Output) InternetMaxBandwidthOut() pulumi.IntOutput {
	return o.ApplyT(func(v *ElasticPublicIpv6) pulumi.IntOutput { return v.InternetMaxBandwidthOut }).(pulumi.IntOutput)
}

// IPV6 addresses that require public network access.
func (o ElasticPublicIpv6Output) Ip6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticPublicIpv6) pulumi.StringOutput { return v.Ip6Address }).(pulumi.StringOutput)
}

// Tags.
func (o ElasticPublicIpv6Output) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *ElasticPublicIpv6) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type ElasticPublicIpv6ArrayOutput struct{ *pulumi.OutputState }

func (ElasticPublicIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticPublicIpv6)(nil)).Elem()
}

func (o ElasticPublicIpv6ArrayOutput) ToElasticPublicIpv6ArrayOutput() ElasticPublicIpv6ArrayOutput {
	return o
}

func (o ElasticPublicIpv6ArrayOutput) ToElasticPublicIpv6ArrayOutputWithContext(ctx context.Context) ElasticPublicIpv6ArrayOutput {
	return o
}

func (o ElasticPublicIpv6ArrayOutput) Index(i pulumi.IntInput) ElasticPublicIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticPublicIpv6 {
		return vs[0].([]*ElasticPublicIpv6)[vs[1].(int)]
	}).(ElasticPublicIpv6Output)
}

type ElasticPublicIpv6MapOutput struct{ *pulumi.OutputState }

func (ElasticPublicIpv6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticPublicIpv6)(nil)).Elem()
}

func (o ElasticPublicIpv6MapOutput) ToElasticPublicIpv6MapOutput() ElasticPublicIpv6MapOutput {
	return o
}

func (o ElasticPublicIpv6MapOutput) ToElasticPublicIpv6MapOutputWithContext(ctx context.Context) ElasticPublicIpv6MapOutput {
	return o
}

func (o ElasticPublicIpv6MapOutput) MapIndex(k pulumi.StringInput) ElasticPublicIpv6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticPublicIpv6 {
		return vs[0].(map[string]*ElasticPublicIpv6)[vs[1].(string)]
	}).(ElasticPublicIpv6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticPublicIpv6Input)(nil)).Elem(), &ElasticPublicIpv6{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticPublicIpv6ArrayInput)(nil)).Elem(), ElasticPublicIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticPublicIpv6MapInput)(nil)).Elem(), ElasticPublicIpv6Map{})
	pulumi.RegisterOutputType(ElasticPublicIpv6Output{})
	pulumi.RegisterOutputType(ElasticPublicIpv6ArrayOutput{})
	pulumi.RegisterOutputType(ElasticPublicIpv6MapOutput{})
}
