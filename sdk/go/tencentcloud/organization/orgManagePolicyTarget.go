// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organization

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrgManagePolicyTarget struct {
	pulumi.CustomResourceState

	// Policy Id.
	PolicyId pulumi.IntOutput `pulumi:"policyId"`
	// Policy type. Default value is SERVICE_CONTROL_POLICY. Valid values: - `SERVICE_CONTROL_POLICY`: Service control policy.
	// - `TAG_POLICY`: Tag policy.
	PolicyType pulumi.StringPtrOutput `pulumi:"policyType"`
	// Binding target ID of the policy. Member Uin or Department ID.
	TargetId pulumi.IntOutput `pulumi:"targetId"`
	// Target type. Valid values: - `NODE`: Department. - `MEMBER`: Check Member.
	TargetType pulumi.StringOutput `pulumi:"targetType"`
}

// NewOrgManagePolicyTarget registers a new resource with the given unique name, arguments, and options.
func NewOrgManagePolicyTarget(ctx *pulumi.Context,
	name string, args *OrgManagePolicyTargetArgs, opts ...pulumi.ResourceOption) (*OrgManagePolicyTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.TargetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetId'")
	}
	if args.TargetType == nil {
		return nil, errors.New("invalid value for required argument 'TargetType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgManagePolicyTarget
	err := ctx.RegisterResource("tencentcloud:Organization/orgManagePolicyTarget:OrgManagePolicyTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgManagePolicyTarget gets an existing OrgManagePolicyTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgManagePolicyTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgManagePolicyTargetState, opts ...pulumi.ResourceOption) (*OrgManagePolicyTarget, error) {
	var resource OrgManagePolicyTarget
	err := ctx.ReadResource("tencentcloud:Organization/orgManagePolicyTarget:OrgManagePolicyTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgManagePolicyTarget resources.
type orgManagePolicyTargetState struct {
	// Policy Id.
	PolicyId *int `pulumi:"policyId"`
	// Policy type. Default value is SERVICE_CONTROL_POLICY. Valid values: - `SERVICE_CONTROL_POLICY`: Service control policy.
	// - `TAG_POLICY`: Tag policy.
	PolicyType *string `pulumi:"policyType"`
	// Binding target ID of the policy. Member Uin or Department ID.
	TargetId *int `pulumi:"targetId"`
	// Target type. Valid values: - `NODE`: Department. - `MEMBER`: Check Member.
	TargetType *string `pulumi:"targetType"`
}

type OrgManagePolicyTargetState struct {
	// Policy Id.
	PolicyId pulumi.IntPtrInput
	// Policy type. Default value is SERVICE_CONTROL_POLICY. Valid values: - `SERVICE_CONTROL_POLICY`: Service control policy.
	// - `TAG_POLICY`: Tag policy.
	PolicyType pulumi.StringPtrInput
	// Binding target ID of the policy. Member Uin or Department ID.
	TargetId pulumi.IntPtrInput
	// Target type. Valid values: - `NODE`: Department. - `MEMBER`: Check Member.
	TargetType pulumi.StringPtrInput
}

func (OrgManagePolicyTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgManagePolicyTargetState)(nil)).Elem()
}

type orgManagePolicyTargetArgs struct {
	// Policy Id.
	PolicyId int `pulumi:"policyId"`
	// Policy type. Default value is SERVICE_CONTROL_POLICY. Valid values: - `SERVICE_CONTROL_POLICY`: Service control policy.
	// - `TAG_POLICY`: Tag policy.
	PolicyType *string `pulumi:"policyType"`
	// Binding target ID of the policy. Member Uin or Department ID.
	TargetId int `pulumi:"targetId"`
	// Target type. Valid values: - `NODE`: Department. - `MEMBER`: Check Member.
	TargetType string `pulumi:"targetType"`
}

// The set of arguments for constructing a OrgManagePolicyTarget resource.
type OrgManagePolicyTargetArgs struct {
	// Policy Id.
	PolicyId pulumi.IntInput
	// Policy type. Default value is SERVICE_CONTROL_POLICY. Valid values: - `SERVICE_CONTROL_POLICY`: Service control policy.
	// - `TAG_POLICY`: Tag policy.
	PolicyType pulumi.StringPtrInput
	// Binding target ID of the policy. Member Uin or Department ID.
	TargetId pulumi.IntInput
	// Target type. Valid values: - `NODE`: Department. - `MEMBER`: Check Member.
	TargetType pulumi.StringInput
}

func (OrgManagePolicyTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgManagePolicyTargetArgs)(nil)).Elem()
}

type OrgManagePolicyTargetInput interface {
	pulumi.Input

	ToOrgManagePolicyTargetOutput() OrgManagePolicyTargetOutput
	ToOrgManagePolicyTargetOutputWithContext(ctx context.Context) OrgManagePolicyTargetOutput
}

func (*OrgManagePolicyTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgManagePolicyTarget)(nil)).Elem()
}

func (i *OrgManagePolicyTarget) ToOrgManagePolicyTargetOutput() OrgManagePolicyTargetOutput {
	return i.ToOrgManagePolicyTargetOutputWithContext(context.Background())
}

func (i *OrgManagePolicyTarget) ToOrgManagePolicyTargetOutputWithContext(ctx context.Context) OrgManagePolicyTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgManagePolicyTargetOutput)
}

// OrgManagePolicyTargetArrayInput is an input type that accepts OrgManagePolicyTargetArray and OrgManagePolicyTargetArrayOutput values.
// You can construct a concrete instance of `OrgManagePolicyTargetArrayInput` via:
//
//	OrgManagePolicyTargetArray{ OrgManagePolicyTargetArgs{...} }
type OrgManagePolicyTargetArrayInput interface {
	pulumi.Input

	ToOrgManagePolicyTargetArrayOutput() OrgManagePolicyTargetArrayOutput
	ToOrgManagePolicyTargetArrayOutputWithContext(context.Context) OrgManagePolicyTargetArrayOutput
}

type OrgManagePolicyTargetArray []OrgManagePolicyTargetInput

func (OrgManagePolicyTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgManagePolicyTarget)(nil)).Elem()
}

func (i OrgManagePolicyTargetArray) ToOrgManagePolicyTargetArrayOutput() OrgManagePolicyTargetArrayOutput {
	return i.ToOrgManagePolicyTargetArrayOutputWithContext(context.Background())
}

func (i OrgManagePolicyTargetArray) ToOrgManagePolicyTargetArrayOutputWithContext(ctx context.Context) OrgManagePolicyTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgManagePolicyTargetArrayOutput)
}

// OrgManagePolicyTargetMapInput is an input type that accepts OrgManagePolicyTargetMap and OrgManagePolicyTargetMapOutput values.
// You can construct a concrete instance of `OrgManagePolicyTargetMapInput` via:
//
//	OrgManagePolicyTargetMap{ "key": OrgManagePolicyTargetArgs{...} }
type OrgManagePolicyTargetMapInput interface {
	pulumi.Input

	ToOrgManagePolicyTargetMapOutput() OrgManagePolicyTargetMapOutput
	ToOrgManagePolicyTargetMapOutputWithContext(context.Context) OrgManagePolicyTargetMapOutput
}

type OrgManagePolicyTargetMap map[string]OrgManagePolicyTargetInput

func (OrgManagePolicyTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgManagePolicyTarget)(nil)).Elem()
}

func (i OrgManagePolicyTargetMap) ToOrgManagePolicyTargetMapOutput() OrgManagePolicyTargetMapOutput {
	return i.ToOrgManagePolicyTargetMapOutputWithContext(context.Background())
}

func (i OrgManagePolicyTargetMap) ToOrgManagePolicyTargetMapOutputWithContext(ctx context.Context) OrgManagePolicyTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgManagePolicyTargetMapOutput)
}

type OrgManagePolicyTargetOutput struct{ *pulumi.OutputState }

func (OrgManagePolicyTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgManagePolicyTarget)(nil)).Elem()
}

func (o OrgManagePolicyTargetOutput) ToOrgManagePolicyTargetOutput() OrgManagePolicyTargetOutput {
	return o
}

func (o OrgManagePolicyTargetOutput) ToOrgManagePolicyTargetOutputWithContext(ctx context.Context) OrgManagePolicyTargetOutput {
	return o
}

// Policy Id.
func (o OrgManagePolicyTargetOutput) PolicyId() pulumi.IntOutput {
	return o.ApplyT(func(v *OrgManagePolicyTarget) pulumi.IntOutput { return v.PolicyId }).(pulumi.IntOutput)
}

// Policy type. Default value is SERVICE_CONTROL_POLICY. Valid values: - `SERVICE_CONTROL_POLICY`: Service control policy.
// - `TAG_POLICY`: Tag policy.
func (o OrgManagePolicyTargetOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgManagePolicyTarget) pulumi.StringPtrOutput { return v.PolicyType }).(pulumi.StringPtrOutput)
}

// Binding target ID of the policy. Member Uin or Department ID.
func (o OrgManagePolicyTargetOutput) TargetId() pulumi.IntOutput {
	return o.ApplyT(func(v *OrgManagePolicyTarget) pulumi.IntOutput { return v.TargetId }).(pulumi.IntOutput)
}

// Target type. Valid values: - `NODE`: Department. - `MEMBER`: Check Member.
func (o OrgManagePolicyTargetOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgManagePolicyTarget) pulumi.StringOutput { return v.TargetType }).(pulumi.StringOutput)
}

type OrgManagePolicyTargetArrayOutput struct{ *pulumi.OutputState }

func (OrgManagePolicyTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgManagePolicyTarget)(nil)).Elem()
}

func (o OrgManagePolicyTargetArrayOutput) ToOrgManagePolicyTargetArrayOutput() OrgManagePolicyTargetArrayOutput {
	return o
}

func (o OrgManagePolicyTargetArrayOutput) ToOrgManagePolicyTargetArrayOutputWithContext(ctx context.Context) OrgManagePolicyTargetArrayOutput {
	return o
}

func (o OrgManagePolicyTargetArrayOutput) Index(i pulumi.IntInput) OrgManagePolicyTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgManagePolicyTarget {
		return vs[0].([]*OrgManagePolicyTarget)[vs[1].(int)]
	}).(OrgManagePolicyTargetOutput)
}

type OrgManagePolicyTargetMapOutput struct{ *pulumi.OutputState }

func (OrgManagePolicyTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgManagePolicyTarget)(nil)).Elem()
}

func (o OrgManagePolicyTargetMapOutput) ToOrgManagePolicyTargetMapOutput() OrgManagePolicyTargetMapOutput {
	return o
}

func (o OrgManagePolicyTargetMapOutput) ToOrgManagePolicyTargetMapOutputWithContext(ctx context.Context) OrgManagePolicyTargetMapOutput {
	return o
}

func (o OrgManagePolicyTargetMapOutput) MapIndex(k pulumi.StringInput) OrgManagePolicyTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgManagePolicyTarget {
		return vs[0].(map[string]*OrgManagePolicyTarget)[vs[1].(string)]
	}).(OrgManagePolicyTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgManagePolicyTargetInput)(nil)).Elem(), &OrgManagePolicyTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgManagePolicyTargetArrayInput)(nil)).Elem(), OrgManagePolicyTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgManagePolicyTargetMapInput)(nil)).Elem(), OrgManagePolicyTargetMap{})
	pulumi.RegisterOutputType(OrgManagePolicyTargetOutput{})
	pulumi.RegisterOutputType(OrgManagePolicyTargetArrayOutput{})
	pulumi.RegisterOutputType(OrgManagePolicyTargetMapOutput{})
}
