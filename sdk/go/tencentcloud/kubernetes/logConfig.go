// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LogConfig struct {
	pulumi.CustomResourceState

	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The current cluster type supports tke and eks, default is tke.
	ClusterType pulumi.StringPtrOutput `pulumi:"clusterType"`
	// JSON expression of log collection configuration.
	LogConfig pulumi.StringOutput `pulumi:"logConfig"`
	// Log config name.
	LogConfigName pulumi.StringOutput `pulumi:"logConfigName"`
	// CLS log set ID.
	LogsetId pulumi.StringPtrOutput `pulumi:"logsetId"`
}

// NewLogConfig registers a new resource with the given unique name, arguments, and options.
func NewLogConfig(ctx *pulumi.Context,
	name string, args *LogConfigArgs, opts ...pulumi.ResourceOption) (*LogConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.LogConfig == nil {
		return nil, errors.New("invalid value for required argument 'LogConfig'")
	}
	if args.LogConfigName == nil {
		return nil, errors.New("invalid value for required argument 'LogConfigName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogConfig
	err := ctx.RegisterResource("tencentcloud:Kubernetes/logConfig:LogConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogConfig gets an existing LogConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogConfigState, opts ...pulumi.ResourceOption) (*LogConfig, error) {
	var resource LogConfig
	err := ctx.ReadResource("tencentcloud:Kubernetes/logConfig:LogConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogConfig resources.
type logConfigState struct {
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// The current cluster type supports tke and eks, default is tke.
	ClusterType *string `pulumi:"clusterType"`
	// JSON expression of log collection configuration.
	LogConfig *string `pulumi:"logConfig"`
	// Log config name.
	LogConfigName *string `pulumi:"logConfigName"`
	// CLS log set ID.
	LogsetId *string `pulumi:"logsetId"`
}

type LogConfigState struct {
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// The current cluster type supports tke and eks, default is tke.
	ClusterType pulumi.StringPtrInput
	// JSON expression of log collection configuration.
	LogConfig pulumi.StringPtrInput
	// Log config name.
	LogConfigName pulumi.StringPtrInput
	// CLS log set ID.
	LogsetId pulumi.StringPtrInput
}

func (LogConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*logConfigState)(nil)).Elem()
}

type logConfigArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// The current cluster type supports tke and eks, default is tke.
	ClusterType *string `pulumi:"clusterType"`
	// JSON expression of log collection configuration.
	LogConfig string `pulumi:"logConfig"`
	// Log config name.
	LogConfigName string `pulumi:"logConfigName"`
	// CLS log set ID.
	LogsetId *string `pulumi:"logsetId"`
}

// The set of arguments for constructing a LogConfig resource.
type LogConfigArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput
	// The current cluster type supports tke and eks, default is tke.
	ClusterType pulumi.StringPtrInput
	// JSON expression of log collection configuration.
	LogConfig pulumi.StringInput
	// Log config name.
	LogConfigName pulumi.StringInput
	// CLS log set ID.
	LogsetId pulumi.StringPtrInput
}

func (LogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logConfigArgs)(nil)).Elem()
}

type LogConfigInput interface {
	pulumi.Input

	ToLogConfigOutput() LogConfigOutput
	ToLogConfigOutputWithContext(ctx context.Context) LogConfigOutput
}

func (*LogConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfig)(nil)).Elem()
}

func (i *LogConfig) ToLogConfigOutput() LogConfigOutput {
	return i.ToLogConfigOutputWithContext(context.Background())
}

func (i *LogConfig) ToLogConfigOutputWithContext(ctx context.Context) LogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigOutput)
}

// LogConfigArrayInput is an input type that accepts LogConfigArray and LogConfigArrayOutput values.
// You can construct a concrete instance of `LogConfigArrayInput` via:
//
//	LogConfigArray{ LogConfigArgs{...} }
type LogConfigArrayInput interface {
	pulumi.Input

	ToLogConfigArrayOutput() LogConfigArrayOutput
	ToLogConfigArrayOutputWithContext(context.Context) LogConfigArrayOutput
}

type LogConfigArray []LogConfigInput

func (LogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogConfig)(nil)).Elem()
}

func (i LogConfigArray) ToLogConfigArrayOutput() LogConfigArrayOutput {
	return i.ToLogConfigArrayOutputWithContext(context.Background())
}

func (i LogConfigArray) ToLogConfigArrayOutputWithContext(ctx context.Context) LogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigArrayOutput)
}

// LogConfigMapInput is an input type that accepts LogConfigMap and LogConfigMapOutput values.
// You can construct a concrete instance of `LogConfigMapInput` via:
//
//	LogConfigMap{ "key": LogConfigArgs{...} }
type LogConfigMapInput interface {
	pulumi.Input

	ToLogConfigMapOutput() LogConfigMapOutput
	ToLogConfigMapOutputWithContext(context.Context) LogConfigMapOutput
}

type LogConfigMap map[string]LogConfigInput

func (LogConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogConfig)(nil)).Elem()
}

func (i LogConfigMap) ToLogConfigMapOutput() LogConfigMapOutput {
	return i.ToLogConfigMapOutputWithContext(context.Background())
}

func (i LogConfigMap) ToLogConfigMapOutputWithContext(ctx context.Context) LogConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigMapOutput)
}

type LogConfigOutput struct{ *pulumi.OutputState }

func (LogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfig)(nil)).Elem()
}

func (o LogConfigOutput) ToLogConfigOutput() LogConfigOutput {
	return o
}

func (o LogConfigOutput) ToLogConfigOutputWithContext(ctx context.Context) LogConfigOutput {
	return o
}

// Cluster ID.
func (o LogConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The current cluster type supports tke and eks, default is tke.
func (o LogConfigOutput) ClusterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.StringPtrOutput { return v.ClusterType }).(pulumi.StringPtrOutput)
}

// JSON expression of log collection configuration.
func (o LogConfigOutput) LogConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.StringOutput { return v.LogConfig }).(pulumi.StringOutput)
}

// Log config name.
func (o LogConfigOutput) LogConfigName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.StringOutput { return v.LogConfigName }).(pulumi.StringOutput)
}

// CLS log set ID.
func (o LogConfigOutput) LogsetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.StringPtrOutput { return v.LogsetId }).(pulumi.StringPtrOutput)
}

type LogConfigArrayOutput struct{ *pulumi.OutputState }

func (LogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogConfig)(nil)).Elem()
}

func (o LogConfigArrayOutput) ToLogConfigArrayOutput() LogConfigArrayOutput {
	return o
}

func (o LogConfigArrayOutput) ToLogConfigArrayOutputWithContext(ctx context.Context) LogConfigArrayOutput {
	return o
}

func (o LogConfigArrayOutput) Index(i pulumi.IntInput) LogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogConfig {
		return vs[0].([]*LogConfig)[vs[1].(int)]
	}).(LogConfigOutput)
}

type LogConfigMapOutput struct{ *pulumi.OutputState }

func (LogConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogConfig)(nil)).Elem()
}

func (o LogConfigMapOutput) ToLogConfigMapOutput() LogConfigMapOutput {
	return o
}

func (o LogConfigMapOutput) ToLogConfigMapOutputWithContext(ctx context.Context) LogConfigMapOutput {
	return o
}

func (o LogConfigMapOutput) MapIndex(k pulumi.StringInput) LogConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogConfig {
		return vs[0].(map[string]*LogConfig)[vs[1].(string)]
	}).(LogConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigInput)(nil)).Elem(), &LogConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigArrayInput)(nil)).Elem(), LogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigMapInput)(nil)).Elem(), LogConfigMap{})
	pulumi.RegisterOutputType(LogConfigOutput{})
	pulumi.RegisterOutputType(LogConfigArrayOutput{})
	pulumi.RegisterOutputType(LogConfigMapOutput{})
}
