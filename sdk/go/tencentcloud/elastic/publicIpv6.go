// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elastic

import (
	"context"
	"reflect"

	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PublicIpv6 struct {
	pulumi.CustomResourceState

	// External network IP address.
	AddressIp pulumi.StringOutput `pulumi:"addressIp"`
	// EIP name, used to customize the personalized name of the EIP when applying for EIP. Default value: unnamed.
	AddressName pulumi.StringOutput `pulumi:"addressName"`
	// Elastic IPv6 type, optional values: - EIPv6: Ordinary IPv6 - HighQualityEIPv6: Premium IPv6 Note: You need to contact
	// the product to open a premium IPv6 white list, and only some regions support premium IPv6 Default value: EIPv6.
	AddressType pulumi.StringOutput `pulumi:"addressType"`
	// Bandwidth packet unique ID parameter. If this parameter is set and the InternetChargeType is BANDWIDTH_PACKAGE, it means
	// that the EIP created is added to the BGP bandwidth packet and the bandwidth packet is charged.
	BandwidthPackageId pulumi.StringOutput `pulumi:"bandwidthPackageId"`
	// Elastic IPv6 network exit, optional values: - CENTER_EGRESS_1: Center Exit 1 - CENTER_EGRESS_2: Center Exit 2 -
	// CENTER_EGRESS_3: Center Exit 3 Note: Network exports corresponding to different operators or resource types need to
	// contact the product for clarification Default value: CENTER_EGRESS_1.
	Egress pulumi.StringOutput `pulumi:"egress"`
	// Elastic IPv6 charging method, optional values: - BANDWIDTH_PACKAGE: Payment for Shared Bandwidth Package -
	// TRAFFIC_POSTPAID_BY_HOUR: Traffic is paid by the hour Default value: TRAFFIC_POSTPAID_BY_HOUR.
	InternetChargeType pulumi.StringOutput `pulumi:"internetChargeType"`
	// Elastic IPv6 bandwidth limit in Mbps. The range of selectable values depends on the EIP billing method: -
	// BANDWIDTH_PACKAGE: 1 Mbps to 2000 Mbps - TRAFFIC_POSTPAID_BY_HOUR: 1 Mbps to 100 Mbps Default value: 1 Mbps.
	InternetMaxBandwidthOut pulumi.IntOutput `pulumi:"internetMaxBandwidthOut"`
	// Elastic IPv6 line type, default value: BGP. For users who have activated a static single-line IP whitelist, selectable
	// values: - CMCC: China Mobile - CTCC: China Telecom - CUCC: China Unicom Note: Static single-wire IP is only supported in
	// some regions.
	InternetServiceProvider pulumi.StringOutput `pulumi:"internetServiceProvider"`
	// Tags.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewPublicIpv6 registers a new resource with the given unique name, arguments, and options.
func NewPublicIpv6(ctx *pulumi.Context,
	name string, args *PublicIpv6Args, opts ...pulumi.ResourceOption) (*PublicIpv6, error) {
	if args == nil {
		args = &PublicIpv6Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicIpv6
	err := ctx.RegisterResource("tencentcloud:Elastic/publicIpv6:PublicIpv6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicIpv6 gets an existing PublicIpv6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicIpv6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicIpv6State, opts ...pulumi.ResourceOption) (*PublicIpv6, error) {
	var resource PublicIpv6
	err := ctx.ReadResource("tencentcloud:Elastic/publicIpv6:PublicIpv6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicIpv6 resources.
type publicIpv6State struct {
	// External network IP address.
	AddressIp *string `pulumi:"addressIp"`
	// EIP name, used to customize the personalized name of the EIP when applying for EIP. Default value: unnamed.
	AddressName *string `pulumi:"addressName"`
	// Elastic IPv6 type, optional values: - EIPv6: Ordinary IPv6 - HighQualityEIPv6: Premium IPv6 Note: You need to contact
	// the product to open a premium IPv6 white list, and only some regions support premium IPv6 Default value: EIPv6.
	AddressType *string `pulumi:"addressType"`
	// Bandwidth packet unique ID parameter. If this parameter is set and the InternetChargeType is BANDWIDTH_PACKAGE, it means
	// that the EIP created is added to the BGP bandwidth packet and the bandwidth packet is charged.
	BandwidthPackageId *string `pulumi:"bandwidthPackageId"`
	// Elastic IPv6 network exit, optional values: - CENTER_EGRESS_1: Center Exit 1 - CENTER_EGRESS_2: Center Exit 2 -
	// CENTER_EGRESS_3: Center Exit 3 Note: Network exports corresponding to different operators or resource types need to
	// contact the product for clarification Default value: CENTER_EGRESS_1.
	Egress *string `pulumi:"egress"`
	// Elastic IPv6 charging method, optional values: - BANDWIDTH_PACKAGE: Payment for Shared Bandwidth Package -
	// TRAFFIC_POSTPAID_BY_HOUR: Traffic is paid by the hour Default value: TRAFFIC_POSTPAID_BY_HOUR.
	InternetChargeType *string `pulumi:"internetChargeType"`
	// Elastic IPv6 bandwidth limit in Mbps. The range of selectable values depends on the EIP billing method: -
	// BANDWIDTH_PACKAGE: 1 Mbps to 2000 Mbps - TRAFFIC_POSTPAID_BY_HOUR: 1 Mbps to 100 Mbps Default value: 1 Mbps.
	InternetMaxBandwidthOut *int `pulumi:"internetMaxBandwidthOut"`
	// Elastic IPv6 line type, default value: BGP. For users who have activated a static single-line IP whitelist, selectable
	// values: - CMCC: China Mobile - CTCC: China Telecom - CUCC: China Unicom Note: Static single-wire IP is only supported in
	// some regions.
	InternetServiceProvider *string `pulumi:"internetServiceProvider"`
	// Tags.
	Tags map[string]interface{} `pulumi:"tags"`
}

type PublicIpv6State struct {
	// External network IP address.
	AddressIp pulumi.StringPtrInput
	// EIP name, used to customize the personalized name of the EIP when applying for EIP. Default value: unnamed.
	AddressName pulumi.StringPtrInput
	// Elastic IPv6 type, optional values: - EIPv6: Ordinary IPv6 - HighQualityEIPv6: Premium IPv6 Note: You need to contact
	// the product to open a premium IPv6 white list, and only some regions support premium IPv6 Default value: EIPv6.
	AddressType pulumi.StringPtrInput
	// Bandwidth packet unique ID parameter. If this parameter is set and the InternetChargeType is BANDWIDTH_PACKAGE, it means
	// that the EIP created is added to the BGP bandwidth packet and the bandwidth packet is charged.
	BandwidthPackageId pulumi.StringPtrInput
	// Elastic IPv6 network exit, optional values: - CENTER_EGRESS_1: Center Exit 1 - CENTER_EGRESS_2: Center Exit 2 -
	// CENTER_EGRESS_3: Center Exit 3 Note: Network exports corresponding to different operators or resource types need to
	// contact the product for clarification Default value: CENTER_EGRESS_1.
	Egress pulumi.StringPtrInput
	// Elastic IPv6 charging method, optional values: - BANDWIDTH_PACKAGE: Payment for Shared Bandwidth Package -
	// TRAFFIC_POSTPAID_BY_HOUR: Traffic is paid by the hour Default value: TRAFFIC_POSTPAID_BY_HOUR.
	InternetChargeType pulumi.StringPtrInput
	// Elastic IPv6 bandwidth limit in Mbps. The range of selectable values depends on the EIP billing method: -
	// BANDWIDTH_PACKAGE: 1 Mbps to 2000 Mbps - TRAFFIC_POSTPAID_BY_HOUR: 1 Mbps to 100 Mbps Default value: 1 Mbps.
	InternetMaxBandwidthOut pulumi.IntPtrInput
	// Elastic IPv6 line type, default value: BGP. For users who have activated a static single-line IP whitelist, selectable
	// values: - CMCC: China Mobile - CTCC: China Telecom - CUCC: China Unicom Note: Static single-wire IP is only supported in
	// some regions.
	InternetServiceProvider pulumi.StringPtrInput
	// Tags.
	Tags pulumi.MapInput
}

func (PublicIpv6State) ElementType() reflect.Type {
	return reflect.TypeOf((*publicIpv6State)(nil)).Elem()
}

type publicIpv6Args struct {
	// External network IP address.
	AddressIp *string `pulumi:"addressIp"`
	// EIP name, used to customize the personalized name of the EIP when applying for EIP. Default value: unnamed.
	AddressName *string `pulumi:"addressName"`
	// Elastic IPv6 type, optional values: - EIPv6: Ordinary IPv6 - HighQualityEIPv6: Premium IPv6 Note: You need to contact
	// the product to open a premium IPv6 white list, and only some regions support premium IPv6 Default value: EIPv6.
	AddressType *string `pulumi:"addressType"`
	// Bandwidth packet unique ID parameter. If this parameter is set and the InternetChargeType is BANDWIDTH_PACKAGE, it means
	// that the EIP created is added to the BGP bandwidth packet and the bandwidth packet is charged.
	BandwidthPackageId *string `pulumi:"bandwidthPackageId"`
	// Elastic IPv6 network exit, optional values: - CENTER_EGRESS_1: Center Exit 1 - CENTER_EGRESS_2: Center Exit 2 -
	// CENTER_EGRESS_3: Center Exit 3 Note: Network exports corresponding to different operators or resource types need to
	// contact the product for clarification Default value: CENTER_EGRESS_1.
	Egress *string `pulumi:"egress"`
	// Elastic IPv6 charging method, optional values: - BANDWIDTH_PACKAGE: Payment for Shared Bandwidth Package -
	// TRAFFIC_POSTPAID_BY_HOUR: Traffic is paid by the hour Default value: TRAFFIC_POSTPAID_BY_HOUR.
	InternetChargeType *string `pulumi:"internetChargeType"`
	// Elastic IPv6 bandwidth limit in Mbps. The range of selectable values depends on the EIP billing method: -
	// BANDWIDTH_PACKAGE: 1 Mbps to 2000 Mbps - TRAFFIC_POSTPAID_BY_HOUR: 1 Mbps to 100 Mbps Default value: 1 Mbps.
	InternetMaxBandwidthOut *int `pulumi:"internetMaxBandwidthOut"`
	// Elastic IPv6 line type, default value: BGP. For users who have activated a static single-line IP whitelist, selectable
	// values: - CMCC: China Mobile - CTCC: China Telecom - CUCC: China Unicom Note: Static single-wire IP is only supported in
	// some regions.
	InternetServiceProvider *string `pulumi:"internetServiceProvider"`
	// Tags.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a PublicIpv6 resource.
type PublicIpv6Args struct {
	// External network IP address.
	AddressIp pulumi.StringPtrInput
	// EIP name, used to customize the personalized name of the EIP when applying for EIP. Default value: unnamed.
	AddressName pulumi.StringPtrInput
	// Elastic IPv6 type, optional values: - EIPv6: Ordinary IPv6 - HighQualityEIPv6: Premium IPv6 Note: You need to contact
	// the product to open a premium IPv6 white list, and only some regions support premium IPv6 Default value: EIPv6.
	AddressType pulumi.StringPtrInput
	// Bandwidth packet unique ID parameter. If this parameter is set and the InternetChargeType is BANDWIDTH_PACKAGE, it means
	// that the EIP created is added to the BGP bandwidth packet and the bandwidth packet is charged.
	BandwidthPackageId pulumi.StringPtrInput
	// Elastic IPv6 network exit, optional values: - CENTER_EGRESS_1: Center Exit 1 - CENTER_EGRESS_2: Center Exit 2 -
	// CENTER_EGRESS_3: Center Exit 3 Note: Network exports corresponding to different operators or resource types need to
	// contact the product for clarification Default value: CENTER_EGRESS_1.
	Egress pulumi.StringPtrInput
	// Elastic IPv6 charging method, optional values: - BANDWIDTH_PACKAGE: Payment for Shared Bandwidth Package -
	// TRAFFIC_POSTPAID_BY_HOUR: Traffic is paid by the hour Default value: TRAFFIC_POSTPAID_BY_HOUR.
	InternetChargeType pulumi.StringPtrInput
	// Elastic IPv6 bandwidth limit in Mbps. The range of selectable values depends on the EIP billing method: -
	// BANDWIDTH_PACKAGE: 1 Mbps to 2000 Mbps - TRAFFIC_POSTPAID_BY_HOUR: 1 Mbps to 100 Mbps Default value: 1 Mbps.
	InternetMaxBandwidthOut pulumi.IntPtrInput
	// Elastic IPv6 line type, default value: BGP. For users who have activated a static single-line IP whitelist, selectable
	// values: - CMCC: China Mobile - CTCC: China Telecom - CUCC: China Unicom Note: Static single-wire IP is only supported in
	// some regions.
	InternetServiceProvider pulumi.StringPtrInput
	// Tags.
	Tags pulumi.MapInput
}

func (PublicIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*publicIpv6Args)(nil)).Elem()
}

type PublicIpv6Input interface {
	pulumi.Input

	ToPublicIpv6Output() PublicIpv6Output
	ToPublicIpv6OutputWithContext(ctx context.Context) PublicIpv6Output
}

func (*PublicIpv6) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIpv6)(nil)).Elem()
}

func (i *PublicIpv6) ToPublicIpv6Output() PublicIpv6Output {
	return i.ToPublicIpv6OutputWithContext(context.Background())
}

func (i *PublicIpv6) ToPublicIpv6OutputWithContext(ctx context.Context) PublicIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpv6Output)
}

// PublicIpv6ArrayInput is an input type that accepts PublicIpv6Array and PublicIpv6ArrayOutput values.
// You can construct a concrete instance of `PublicIpv6ArrayInput` via:
//
//	PublicIpv6Array{ PublicIpv6Args{...} }
type PublicIpv6ArrayInput interface {
	pulumi.Input

	ToPublicIpv6ArrayOutput() PublicIpv6ArrayOutput
	ToPublicIpv6ArrayOutputWithContext(context.Context) PublicIpv6ArrayOutput
}

type PublicIpv6Array []PublicIpv6Input

func (PublicIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicIpv6)(nil)).Elem()
}

func (i PublicIpv6Array) ToPublicIpv6ArrayOutput() PublicIpv6ArrayOutput {
	return i.ToPublicIpv6ArrayOutputWithContext(context.Background())
}

func (i PublicIpv6Array) ToPublicIpv6ArrayOutputWithContext(ctx context.Context) PublicIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpv6ArrayOutput)
}

// PublicIpv6MapInput is an input type that accepts PublicIpv6Map and PublicIpv6MapOutput values.
// You can construct a concrete instance of `PublicIpv6MapInput` via:
//
//	PublicIpv6Map{ "key": PublicIpv6Args{...} }
type PublicIpv6MapInput interface {
	pulumi.Input

	ToPublicIpv6MapOutput() PublicIpv6MapOutput
	ToPublicIpv6MapOutputWithContext(context.Context) PublicIpv6MapOutput
}

type PublicIpv6Map map[string]PublicIpv6Input

func (PublicIpv6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicIpv6)(nil)).Elem()
}

func (i PublicIpv6Map) ToPublicIpv6MapOutput() PublicIpv6MapOutput {
	return i.ToPublicIpv6MapOutputWithContext(context.Background())
}

func (i PublicIpv6Map) ToPublicIpv6MapOutputWithContext(ctx context.Context) PublicIpv6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpv6MapOutput)
}

type PublicIpv6Output struct{ *pulumi.OutputState }

func (PublicIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIpv6)(nil)).Elem()
}

func (o PublicIpv6Output) ToPublicIpv6Output() PublicIpv6Output {
	return o
}

func (o PublicIpv6Output) ToPublicIpv6OutputWithContext(ctx context.Context) PublicIpv6Output {
	return o
}

// External network IP address.
func (o PublicIpv6Output) AddressIp() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpv6) pulumi.StringOutput { return v.AddressIp }).(pulumi.StringOutput)
}

// EIP name, used to customize the personalized name of the EIP when applying for EIP. Default value: unnamed.
func (o PublicIpv6Output) AddressName() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpv6) pulumi.StringOutput { return v.AddressName }).(pulumi.StringOutput)
}

// Elastic IPv6 type, optional values: - EIPv6: Ordinary IPv6 - HighQualityEIPv6: Premium IPv6 Note: You need to contact
// the product to open a premium IPv6 white list, and only some regions support premium IPv6 Default value: EIPv6.
func (o PublicIpv6Output) AddressType() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpv6) pulumi.StringOutput { return v.AddressType }).(pulumi.StringOutput)
}

// Bandwidth packet unique ID parameter. If this parameter is set and the InternetChargeType is BANDWIDTH_PACKAGE, it means
// that the EIP created is added to the BGP bandwidth packet and the bandwidth packet is charged.
func (o PublicIpv6Output) BandwidthPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpv6) pulumi.StringOutput { return v.BandwidthPackageId }).(pulumi.StringOutput)
}

// Elastic IPv6 network exit, optional values: - CENTER_EGRESS_1: Center Exit 1 - CENTER_EGRESS_2: Center Exit 2 -
// CENTER_EGRESS_3: Center Exit 3 Note: Network exports corresponding to different operators or resource types need to
// contact the product for clarification Default value: CENTER_EGRESS_1.
func (o PublicIpv6Output) Egress() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpv6) pulumi.StringOutput { return v.Egress }).(pulumi.StringOutput)
}

// Elastic IPv6 charging method, optional values: - BANDWIDTH_PACKAGE: Payment for Shared Bandwidth Package -
// TRAFFIC_POSTPAID_BY_HOUR: Traffic is paid by the hour Default value: TRAFFIC_POSTPAID_BY_HOUR.
func (o PublicIpv6Output) InternetChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpv6) pulumi.StringOutput { return v.InternetChargeType }).(pulumi.StringOutput)
}

// Elastic IPv6 bandwidth limit in Mbps. The range of selectable values depends on the EIP billing method: -
// BANDWIDTH_PACKAGE: 1 Mbps to 2000 Mbps - TRAFFIC_POSTPAID_BY_HOUR: 1 Mbps to 100 Mbps Default value: 1 Mbps.
func (o PublicIpv6Output) InternetMaxBandwidthOut() pulumi.IntOutput {
	return o.ApplyT(func(v *PublicIpv6) pulumi.IntOutput { return v.InternetMaxBandwidthOut }).(pulumi.IntOutput)
}

// Elastic IPv6 line type, default value: BGP. For users who have activated a static single-line IP whitelist, selectable
// values: - CMCC: China Mobile - CTCC: China Telecom - CUCC: China Unicom Note: Static single-wire IP is only supported in
// some regions.
func (o PublicIpv6Output) InternetServiceProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpv6) pulumi.StringOutput { return v.InternetServiceProvider }).(pulumi.StringOutput)
}

// Tags.
func (o PublicIpv6Output) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *PublicIpv6) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type PublicIpv6ArrayOutput struct{ *pulumi.OutputState }

func (PublicIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicIpv6)(nil)).Elem()
}

func (o PublicIpv6ArrayOutput) ToPublicIpv6ArrayOutput() PublicIpv6ArrayOutput {
	return o
}

func (o PublicIpv6ArrayOutput) ToPublicIpv6ArrayOutputWithContext(ctx context.Context) PublicIpv6ArrayOutput {
	return o
}

func (o PublicIpv6ArrayOutput) Index(i pulumi.IntInput) PublicIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicIpv6 {
		return vs[0].([]*PublicIpv6)[vs[1].(int)]
	}).(PublicIpv6Output)
}

type PublicIpv6MapOutput struct{ *pulumi.OutputState }

func (PublicIpv6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicIpv6)(nil)).Elem()
}

func (o PublicIpv6MapOutput) ToPublicIpv6MapOutput() PublicIpv6MapOutput {
	return o
}

func (o PublicIpv6MapOutput) ToPublicIpv6MapOutputWithContext(ctx context.Context) PublicIpv6MapOutput {
	return o
}

func (o PublicIpv6MapOutput) MapIndex(k pulumi.StringInput) PublicIpv6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicIpv6 {
		return vs[0].(map[string]*PublicIpv6)[vs[1].(string)]
	}).(PublicIpv6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpv6Input)(nil)).Elem(), &PublicIpv6{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpv6ArrayInput)(nil)).Elem(), PublicIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpv6MapInput)(nil)).Elem(), PublicIpv6Map{})
	pulumi.RegisterOutputType(PublicIpv6Output{})
	pulumi.RegisterOutputType(PublicIpv6ArrayOutput{})
	pulumi.RegisterOutputType(PublicIpv6MapOutput{})
}
