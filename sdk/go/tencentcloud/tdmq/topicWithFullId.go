// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tdmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TopicWithFullId struct {
	pulumi.CustomResourceState

	// The Dedicated Cluster Id.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Creation time of resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The name of tdmq namespace.
	EnvironId pulumi.StringOutput `pulumi:"environId"`
	// The partitions of topic.
	Partitions pulumi.IntOutput `pulumi:"partitions"`
	// Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3:
	// Persistent partitioned.
	PulsarTopicType pulumi.IntOutput `pulumi:"pulsarTopicType"`
	// Description of the namespace.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// The name of topic to be created.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
	// The type of topic.
	//
	// Deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.
	TopicType pulumi.IntOutput `pulumi:"topicType"`
}

// NewTopicWithFullId registers a new resource with the given unique name, arguments, and options.
func NewTopicWithFullId(ctx *pulumi.Context,
	name string, args *TopicWithFullIdArgs, opts ...pulumi.ResourceOption) (*TopicWithFullId, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.EnvironId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironId'")
	}
	if args.Partitions == nil {
		return nil, errors.New("invalid value for required argument 'Partitions'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TopicWithFullId
	err := ctx.RegisterResource("tencentcloud:Tdmq/topicWithFullId:TopicWithFullId", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicWithFullId gets an existing TopicWithFullId resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicWithFullId(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicWithFullIdState, opts ...pulumi.ResourceOption) (*TopicWithFullId, error) {
	var resource TopicWithFullId
	err := ctx.ReadResource("tencentcloud:Tdmq/topicWithFullId:TopicWithFullId", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicWithFullId resources.
type topicWithFullIdState struct {
	// The Dedicated Cluster Id.
	ClusterId *string `pulumi:"clusterId"`
	// Creation time of resource.
	CreateTime *string `pulumi:"createTime"`
	// The name of tdmq namespace.
	EnvironId *string `pulumi:"environId"`
	// The partitions of topic.
	Partitions *int `pulumi:"partitions"`
	// Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3:
	// Persistent partitioned.
	PulsarTopicType *int `pulumi:"pulsarTopicType"`
	// Description of the namespace.
	Remark *string `pulumi:"remark"`
	// The name of topic to be created.
	TopicName *string `pulumi:"topicName"`
	// The type of topic.
	//
	// Deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.
	TopicType *int `pulumi:"topicType"`
}

type TopicWithFullIdState struct {
	// The Dedicated Cluster Id.
	ClusterId pulumi.StringPtrInput
	// Creation time of resource.
	CreateTime pulumi.StringPtrInput
	// The name of tdmq namespace.
	EnvironId pulumi.StringPtrInput
	// The partitions of topic.
	Partitions pulumi.IntPtrInput
	// Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3:
	// Persistent partitioned.
	PulsarTopicType pulumi.IntPtrInput
	// Description of the namespace.
	Remark pulumi.StringPtrInput
	// The name of topic to be created.
	TopicName pulumi.StringPtrInput
	// The type of topic.
	//
	// Deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.
	TopicType pulumi.IntPtrInput
}

func (TopicWithFullIdState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicWithFullIdState)(nil)).Elem()
}

type topicWithFullIdArgs struct {
	// The Dedicated Cluster Id.
	ClusterId string `pulumi:"clusterId"`
	// The name of tdmq namespace.
	EnvironId string `pulumi:"environId"`
	// The partitions of topic.
	Partitions int `pulumi:"partitions"`
	// Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3:
	// Persistent partitioned.
	PulsarTopicType *int `pulumi:"pulsarTopicType"`
	// Description of the namespace.
	Remark *string `pulumi:"remark"`
	// The name of topic to be created.
	TopicName string `pulumi:"topicName"`
	// The type of topic.
	//
	// Deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.
	TopicType *int `pulumi:"topicType"`
}

// The set of arguments for constructing a TopicWithFullId resource.
type TopicWithFullIdArgs struct {
	// The Dedicated Cluster Id.
	ClusterId pulumi.StringInput
	// The name of tdmq namespace.
	EnvironId pulumi.StringInput
	// The partitions of topic.
	Partitions pulumi.IntInput
	// Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3:
	// Persistent partitioned.
	PulsarTopicType pulumi.IntPtrInput
	// Description of the namespace.
	Remark pulumi.StringPtrInput
	// The name of topic to be created.
	TopicName pulumi.StringInput
	// The type of topic.
	//
	// Deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.
	TopicType pulumi.IntPtrInput
}

func (TopicWithFullIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicWithFullIdArgs)(nil)).Elem()
}

type TopicWithFullIdInput interface {
	pulumi.Input

	ToTopicWithFullIdOutput() TopicWithFullIdOutput
	ToTopicWithFullIdOutputWithContext(ctx context.Context) TopicWithFullIdOutput
}

func (*TopicWithFullId) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicWithFullId)(nil)).Elem()
}

func (i *TopicWithFullId) ToTopicWithFullIdOutput() TopicWithFullIdOutput {
	return i.ToTopicWithFullIdOutputWithContext(context.Background())
}

func (i *TopicWithFullId) ToTopicWithFullIdOutputWithContext(ctx context.Context) TopicWithFullIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicWithFullIdOutput)
}

// TopicWithFullIdArrayInput is an input type that accepts TopicWithFullIdArray and TopicWithFullIdArrayOutput values.
// You can construct a concrete instance of `TopicWithFullIdArrayInput` via:
//
//	TopicWithFullIdArray{ TopicWithFullIdArgs{...} }
type TopicWithFullIdArrayInput interface {
	pulumi.Input

	ToTopicWithFullIdArrayOutput() TopicWithFullIdArrayOutput
	ToTopicWithFullIdArrayOutputWithContext(context.Context) TopicWithFullIdArrayOutput
}

type TopicWithFullIdArray []TopicWithFullIdInput

func (TopicWithFullIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicWithFullId)(nil)).Elem()
}

func (i TopicWithFullIdArray) ToTopicWithFullIdArrayOutput() TopicWithFullIdArrayOutput {
	return i.ToTopicWithFullIdArrayOutputWithContext(context.Background())
}

func (i TopicWithFullIdArray) ToTopicWithFullIdArrayOutputWithContext(ctx context.Context) TopicWithFullIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicWithFullIdArrayOutput)
}

// TopicWithFullIdMapInput is an input type that accepts TopicWithFullIdMap and TopicWithFullIdMapOutput values.
// You can construct a concrete instance of `TopicWithFullIdMapInput` via:
//
//	TopicWithFullIdMap{ "key": TopicWithFullIdArgs{...} }
type TopicWithFullIdMapInput interface {
	pulumi.Input

	ToTopicWithFullIdMapOutput() TopicWithFullIdMapOutput
	ToTopicWithFullIdMapOutputWithContext(context.Context) TopicWithFullIdMapOutput
}

type TopicWithFullIdMap map[string]TopicWithFullIdInput

func (TopicWithFullIdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicWithFullId)(nil)).Elem()
}

func (i TopicWithFullIdMap) ToTopicWithFullIdMapOutput() TopicWithFullIdMapOutput {
	return i.ToTopicWithFullIdMapOutputWithContext(context.Background())
}

func (i TopicWithFullIdMap) ToTopicWithFullIdMapOutputWithContext(ctx context.Context) TopicWithFullIdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicWithFullIdMapOutput)
}

type TopicWithFullIdOutput struct{ *pulumi.OutputState }

func (TopicWithFullIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicWithFullId)(nil)).Elem()
}

func (o TopicWithFullIdOutput) ToTopicWithFullIdOutput() TopicWithFullIdOutput {
	return o
}

func (o TopicWithFullIdOutput) ToTopicWithFullIdOutputWithContext(ctx context.Context) TopicWithFullIdOutput {
	return o
}

// The Dedicated Cluster Id.
func (o TopicWithFullIdOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicWithFullId) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Creation time of resource.
func (o TopicWithFullIdOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicWithFullId) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The name of tdmq namespace.
func (o TopicWithFullIdOutput) EnvironId() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicWithFullId) pulumi.StringOutput { return v.EnvironId }).(pulumi.StringOutput)
}

// The partitions of topic.
func (o TopicWithFullIdOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v *TopicWithFullId) pulumi.IntOutput { return v.Partitions }).(pulumi.IntOutput)
}

// Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3:
// Persistent partitioned.
func (o TopicWithFullIdOutput) PulsarTopicType() pulumi.IntOutput {
	return o.ApplyT(func(v *TopicWithFullId) pulumi.IntOutput { return v.PulsarTopicType }).(pulumi.IntOutput)
}

// Description of the namespace.
func (o TopicWithFullIdOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicWithFullId) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// The name of topic to be created.
func (o TopicWithFullIdOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicWithFullId) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

// The type of topic.
//
// Deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.
func (o TopicWithFullIdOutput) TopicType() pulumi.IntOutput {
	return o.ApplyT(func(v *TopicWithFullId) pulumi.IntOutput { return v.TopicType }).(pulumi.IntOutput)
}

type TopicWithFullIdArrayOutput struct{ *pulumi.OutputState }

func (TopicWithFullIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicWithFullId)(nil)).Elem()
}

func (o TopicWithFullIdArrayOutput) ToTopicWithFullIdArrayOutput() TopicWithFullIdArrayOutput {
	return o
}

func (o TopicWithFullIdArrayOutput) ToTopicWithFullIdArrayOutputWithContext(ctx context.Context) TopicWithFullIdArrayOutput {
	return o
}

func (o TopicWithFullIdArrayOutput) Index(i pulumi.IntInput) TopicWithFullIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TopicWithFullId {
		return vs[0].([]*TopicWithFullId)[vs[1].(int)]
	}).(TopicWithFullIdOutput)
}

type TopicWithFullIdMapOutput struct{ *pulumi.OutputState }

func (TopicWithFullIdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicWithFullId)(nil)).Elem()
}

func (o TopicWithFullIdMapOutput) ToTopicWithFullIdMapOutput() TopicWithFullIdMapOutput {
	return o
}

func (o TopicWithFullIdMapOutput) ToTopicWithFullIdMapOutputWithContext(ctx context.Context) TopicWithFullIdMapOutput {
	return o
}

func (o TopicWithFullIdMapOutput) MapIndex(k pulumi.StringInput) TopicWithFullIdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TopicWithFullId {
		return vs[0].(map[string]*TopicWithFullId)[vs[1].(string)]
	}).(TopicWithFullIdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicWithFullIdInput)(nil)).Elem(), &TopicWithFullId{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicWithFullIdArrayInput)(nil)).Elem(), TopicWithFullIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicWithFullIdMapInput)(nil)).Elem(), TopicWithFullIdMap{})
	pulumi.RegisterOutputType(TopicWithFullIdOutput{})
	pulumi.RegisterOutputType(TopicWithFullIdArrayOutput{})
	pulumi.RegisterOutputType(TopicWithFullIdMapOutput{})
}
