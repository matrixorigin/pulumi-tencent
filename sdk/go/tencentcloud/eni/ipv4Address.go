// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eni

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Ipv4Address struct {
	pulumi.CustomResourceState

	// The ID of the ENI instance, such as `eni-m6dyj72l`.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either
	// this parameter or SecondaryPrivateIpAddressCount, or both.
	PrivateIpAddresses Ipv4AddressPrivateIpAddressArrayOutput `pulumi:"privateIpAddresses"`
	// IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT` (Gold),  `AU` (Silver),  `AG
	// `(Bronze) and DEFAULT (Default).
	QosLevel pulumi.StringOutput `pulumi:"qosLevel"`
	// The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or
	// both. The total number of private IP addresses cannot exceed the quota.
	SecondaryPrivateIpAddressCount pulumi.IntOutput `pulumi:"secondaryPrivateIpAddressCount"`
}

// NewIpv4Address registers a new resource with the given unique name, arguments, and options.
func NewIpv4Address(ctx *pulumi.Context,
	name string, args *Ipv4AddressArgs, opts ...pulumi.ResourceOption) (*Ipv4Address, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv4Address
	err := ctx.RegisterResource("tencentcloud:Eni/ipv4Address:Ipv4Address", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv4Address gets an existing Ipv4Address resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv4Address(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv4AddressState, opts ...pulumi.ResourceOption) (*Ipv4Address, error) {
	var resource Ipv4Address
	err := ctx.ReadResource("tencentcloud:Eni/ipv4Address:Ipv4Address", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv4Address resources.
type ipv4AddressState struct {
	// The ID of the ENI instance, such as `eni-m6dyj72l`.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either
	// this parameter or SecondaryPrivateIpAddressCount, or both.
	PrivateIpAddresses []Ipv4AddressPrivateIpAddress `pulumi:"privateIpAddresses"`
	// IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT` (Gold),  `AU` (Silver),  `AG
	// `(Bronze) and DEFAULT (Default).
	QosLevel *string `pulumi:"qosLevel"`
	// The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or
	// both. The total number of private IP addresses cannot exceed the quota.
	SecondaryPrivateIpAddressCount *int `pulumi:"secondaryPrivateIpAddressCount"`
}

type Ipv4AddressState struct {
	// The ID of the ENI instance, such as `eni-m6dyj72l`.
	NetworkInterfaceId pulumi.StringPtrInput
	// The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either
	// this parameter or SecondaryPrivateIpAddressCount, or both.
	PrivateIpAddresses Ipv4AddressPrivateIpAddressArrayInput
	// IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT` (Gold),  `AU` (Silver),  `AG
	// `(Bronze) and DEFAULT (Default).
	QosLevel pulumi.StringPtrInput
	// The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or
	// both. The total number of private IP addresses cannot exceed the quota.
	SecondaryPrivateIpAddressCount pulumi.IntPtrInput
}

func (Ipv4AddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4AddressState)(nil)).Elem()
}

type ipv4AddressArgs struct {
	// The ID of the ENI instance, such as `eni-m6dyj72l`.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either
	// this parameter or SecondaryPrivateIpAddressCount, or both.
	PrivateIpAddresses []Ipv4AddressPrivateIpAddress `pulumi:"privateIpAddresses"`
	// IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT` (Gold),  `AU` (Silver),  `AG
	// `(Bronze) and DEFAULT (Default).
	QosLevel *string `pulumi:"qosLevel"`
	// The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or
	// both. The total number of private IP addresses cannot exceed the quota.
	SecondaryPrivateIpAddressCount *int `pulumi:"secondaryPrivateIpAddressCount"`
}

// The set of arguments for constructing a Ipv4Address resource.
type Ipv4AddressArgs struct {
	// The ID of the ENI instance, such as `eni-m6dyj72l`.
	NetworkInterfaceId pulumi.StringInput
	// The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either
	// this parameter or SecondaryPrivateIpAddressCount, or both.
	PrivateIpAddresses Ipv4AddressPrivateIpAddressArrayInput
	// IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT` (Gold),  `AU` (Silver),  `AG
	// `(Bronze) and DEFAULT (Default).
	QosLevel pulumi.StringPtrInput
	// The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or
	// both. The total number of private IP addresses cannot exceed the quota.
	SecondaryPrivateIpAddressCount pulumi.IntPtrInput
}

func (Ipv4AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4AddressArgs)(nil)).Elem()
}

type Ipv4AddressInput interface {
	pulumi.Input

	ToIpv4AddressOutput() Ipv4AddressOutput
	ToIpv4AddressOutputWithContext(ctx context.Context) Ipv4AddressOutput
}

func (*Ipv4Address) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4Address)(nil)).Elem()
}

func (i *Ipv4Address) ToIpv4AddressOutput() Ipv4AddressOutput {
	return i.ToIpv4AddressOutputWithContext(context.Background())
}

func (i *Ipv4Address) ToIpv4AddressOutputWithContext(ctx context.Context) Ipv4AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AddressOutput)
}

// Ipv4AddressArrayInput is an input type that accepts Ipv4AddressArray and Ipv4AddressArrayOutput values.
// You can construct a concrete instance of `Ipv4AddressArrayInput` via:
//
//	Ipv4AddressArray{ Ipv4AddressArgs{...} }
type Ipv4AddressArrayInput interface {
	pulumi.Input

	ToIpv4AddressArrayOutput() Ipv4AddressArrayOutput
	ToIpv4AddressArrayOutputWithContext(context.Context) Ipv4AddressArrayOutput
}

type Ipv4AddressArray []Ipv4AddressInput

func (Ipv4AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4Address)(nil)).Elem()
}

func (i Ipv4AddressArray) ToIpv4AddressArrayOutput() Ipv4AddressArrayOutput {
	return i.ToIpv4AddressArrayOutputWithContext(context.Background())
}

func (i Ipv4AddressArray) ToIpv4AddressArrayOutputWithContext(ctx context.Context) Ipv4AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AddressArrayOutput)
}

// Ipv4AddressMapInput is an input type that accepts Ipv4AddressMap and Ipv4AddressMapOutput values.
// You can construct a concrete instance of `Ipv4AddressMapInput` via:
//
//	Ipv4AddressMap{ "key": Ipv4AddressArgs{...} }
type Ipv4AddressMapInput interface {
	pulumi.Input

	ToIpv4AddressMapOutput() Ipv4AddressMapOutput
	ToIpv4AddressMapOutputWithContext(context.Context) Ipv4AddressMapOutput
}

type Ipv4AddressMap map[string]Ipv4AddressInput

func (Ipv4AddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4Address)(nil)).Elem()
}

func (i Ipv4AddressMap) ToIpv4AddressMapOutput() Ipv4AddressMapOutput {
	return i.ToIpv4AddressMapOutputWithContext(context.Background())
}

func (i Ipv4AddressMap) ToIpv4AddressMapOutputWithContext(ctx context.Context) Ipv4AddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AddressMapOutput)
}

type Ipv4AddressOutput struct{ *pulumi.OutputState }

func (Ipv4AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4Address)(nil)).Elem()
}

func (o Ipv4AddressOutput) ToIpv4AddressOutput() Ipv4AddressOutput {
	return o
}

func (o Ipv4AddressOutput) ToIpv4AddressOutputWithContext(ctx context.Context) Ipv4AddressOutput {
	return o
}

// The ID of the ENI instance, such as `eni-m6dyj72l`.
func (o Ipv4AddressOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4Address) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either
// this parameter or SecondaryPrivateIpAddressCount, or both.
func (o Ipv4AddressOutput) PrivateIpAddresses() Ipv4AddressPrivateIpAddressArrayOutput {
	return o.ApplyT(func(v *Ipv4Address) Ipv4AddressPrivateIpAddressArrayOutput { return v.PrivateIpAddresses }).(Ipv4AddressPrivateIpAddressArrayOutput)
}

// IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT` (Gold),  `AU` (Silver),  `AG
// `(Bronze) and DEFAULT (Default).
func (o Ipv4AddressOutput) QosLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4Address) pulumi.StringOutput { return v.QosLevel }).(pulumi.StringOutput)
}

// The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or
// both. The total number of private IP addresses cannot exceed the quota.
func (o Ipv4AddressOutput) SecondaryPrivateIpAddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv4Address) pulumi.IntOutput { return v.SecondaryPrivateIpAddressCount }).(pulumi.IntOutput)
}

type Ipv4AddressArrayOutput struct{ *pulumi.OutputState }

func (Ipv4AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4Address)(nil)).Elem()
}

func (o Ipv4AddressArrayOutput) ToIpv4AddressArrayOutput() Ipv4AddressArrayOutput {
	return o
}

func (o Ipv4AddressArrayOutput) ToIpv4AddressArrayOutputWithContext(ctx context.Context) Ipv4AddressArrayOutput {
	return o
}

func (o Ipv4AddressArrayOutput) Index(i pulumi.IntInput) Ipv4AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv4Address {
		return vs[0].([]*Ipv4Address)[vs[1].(int)]
	}).(Ipv4AddressOutput)
}

type Ipv4AddressMapOutput struct{ *pulumi.OutputState }

func (Ipv4AddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4Address)(nil)).Elem()
}

func (o Ipv4AddressMapOutput) ToIpv4AddressMapOutput() Ipv4AddressMapOutput {
	return o
}

func (o Ipv4AddressMapOutput) ToIpv4AddressMapOutputWithContext(ctx context.Context) Ipv4AddressMapOutput {
	return o
}

func (o Ipv4AddressMapOutput) MapIndex(k pulumi.StringInput) Ipv4AddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv4Address {
		return vs[0].(map[string]*Ipv4Address)[vs[1].(string)]
	}).(Ipv4AddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AddressInput)(nil)).Elem(), &Ipv4Address{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AddressArrayInput)(nil)).Elem(), Ipv4AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AddressMapInput)(nil)).Elem(), Ipv4AddressMap{})
	pulumi.RegisterOutputType(Ipv4AddressOutput{})
	pulumi.RegisterOutputType(Ipv4AddressArrayOutput{})
	pulumi.RegisterOutputType(Ipv4AddressMapOutput{})
}
