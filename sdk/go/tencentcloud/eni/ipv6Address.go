// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eni

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Ipv6Address struct {
	pulumi.CustomResourceState

	// The number of automatically assigned IPv6 addresses and the total number of private IP addresses cannot exceed the
	// quota. This should be combined with the input parameter `ipv6_addresses` for quota calculation. At least one of them,
	// either this or 'Ipv6Addresses', must be provided.
	Ipv6AddressCount pulumi.IntOutput `pulumi:"ipv6AddressCount"`
	// The specified `IPv6` address list, up to 10 can be specified at a time. Combined with the input parameter
	// `Ipv6AddressCount` to calculate the quota. Mandatory one with Ipv6AddressCount.
	Ipv6Addresses Ipv6AddressIpv6AddressArrayOutput `pulumi:"ipv6Addresses"`
	// ENI instance `ID`, in the form of `eni-m6dyj72l`.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
}

// NewIpv6Address registers a new resource with the given unique name, arguments, and options.
func NewIpv6Address(ctx *pulumi.Context,
	name string, args *Ipv6AddressArgs, opts ...pulumi.ResourceOption) (*Ipv6Address, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv6Address
	err := ctx.RegisterResource("tencentcloud:Eni/ipv6Address:Ipv6Address", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv6Address gets an existing Ipv6Address resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv6Address(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv6AddressState, opts ...pulumi.ResourceOption) (*Ipv6Address, error) {
	var resource Ipv6Address
	err := ctx.ReadResource("tencentcloud:Eni/ipv6Address:Ipv6Address", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv6Address resources.
type ipv6AddressState struct {
	// The number of automatically assigned IPv6 addresses and the total number of private IP addresses cannot exceed the
	// quota. This should be combined with the input parameter `ipv6_addresses` for quota calculation. At least one of them,
	// either this or 'Ipv6Addresses', must be provided.
	Ipv6AddressCount *int `pulumi:"ipv6AddressCount"`
	// The specified `IPv6` address list, up to 10 can be specified at a time. Combined with the input parameter
	// `Ipv6AddressCount` to calculate the quota. Mandatory one with Ipv6AddressCount.
	Ipv6Addresses []Ipv6AddressIpv6Address `pulumi:"ipv6Addresses"`
	// ENI instance `ID`, in the form of `eni-m6dyj72l`.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
}

type Ipv6AddressState struct {
	// The number of automatically assigned IPv6 addresses and the total number of private IP addresses cannot exceed the
	// quota. This should be combined with the input parameter `ipv6_addresses` for quota calculation. At least one of them,
	// either this or 'Ipv6Addresses', must be provided.
	Ipv6AddressCount pulumi.IntPtrInput
	// The specified `IPv6` address list, up to 10 can be specified at a time. Combined with the input parameter
	// `Ipv6AddressCount` to calculate the quota. Mandatory one with Ipv6AddressCount.
	Ipv6Addresses Ipv6AddressIpv6AddressArrayInput
	// ENI instance `ID`, in the form of `eni-m6dyj72l`.
	NetworkInterfaceId pulumi.StringPtrInput
}

func (Ipv6AddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv6AddressState)(nil)).Elem()
}

type ipv6AddressArgs struct {
	// The number of automatically assigned IPv6 addresses and the total number of private IP addresses cannot exceed the
	// quota. This should be combined with the input parameter `ipv6_addresses` for quota calculation. At least one of them,
	// either this or 'Ipv6Addresses', must be provided.
	Ipv6AddressCount *int `pulumi:"ipv6AddressCount"`
	// The specified `IPv6` address list, up to 10 can be specified at a time. Combined with the input parameter
	// `Ipv6AddressCount` to calculate the quota. Mandatory one with Ipv6AddressCount.
	Ipv6Addresses []Ipv6AddressIpv6Address `pulumi:"ipv6Addresses"`
	// ENI instance `ID`, in the form of `eni-m6dyj72l`.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
}

// The set of arguments for constructing a Ipv6Address resource.
type Ipv6AddressArgs struct {
	// The number of automatically assigned IPv6 addresses and the total number of private IP addresses cannot exceed the
	// quota. This should be combined with the input parameter `ipv6_addresses` for quota calculation. At least one of them,
	// either this or 'Ipv6Addresses', must be provided.
	Ipv6AddressCount pulumi.IntPtrInput
	// The specified `IPv6` address list, up to 10 can be specified at a time. Combined with the input parameter
	// `Ipv6AddressCount` to calculate the quota. Mandatory one with Ipv6AddressCount.
	Ipv6Addresses Ipv6AddressIpv6AddressArrayInput
	// ENI instance `ID`, in the form of `eni-m6dyj72l`.
	NetworkInterfaceId pulumi.StringInput
}

func (Ipv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv6AddressArgs)(nil)).Elem()
}

type Ipv6AddressInput interface {
	pulumi.Input

	ToIpv6AddressOutput() Ipv6AddressOutput
	ToIpv6AddressOutputWithContext(ctx context.Context) Ipv6AddressOutput
}

func (*Ipv6Address) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv6Address)(nil)).Elem()
}

func (i *Ipv6Address) ToIpv6AddressOutput() Ipv6AddressOutput {
	return i.ToIpv6AddressOutputWithContext(context.Background())
}

func (i *Ipv6Address) ToIpv6AddressOutputWithContext(ctx context.Context) Ipv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6AddressOutput)
}

// Ipv6AddressArrayInput is an input type that accepts Ipv6AddressArray and Ipv6AddressArrayOutput values.
// You can construct a concrete instance of `Ipv6AddressArrayInput` via:
//
//	Ipv6AddressArray{ Ipv6AddressArgs{...} }
type Ipv6AddressArrayInput interface {
	pulumi.Input

	ToIpv6AddressArrayOutput() Ipv6AddressArrayOutput
	ToIpv6AddressArrayOutputWithContext(context.Context) Ipv6AddressArrayOutput
}

type Ipv6AddressArray []Ipv6AddressInput

func (Ipv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv6Address)(nil)).Elem()
}

func (i Ipv6AddressArray) ToIpv6AddressArrayOutput() Ipv6AddressArrayOutput {
	return i.ToIpv6AddressArrayOutputWithContext(context.Background())
}

func (i Ipv6AddressArray) ToIpv6AddressArrayOutputWithContext(ctx context.Context) Ipv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6AddressArrayOutput)
}

// Ipv6AddressMapInput is an input type that accepts Ipv6AddressMap and Ipv6AddressMapOutput values.
// You can construct a concrete instance of `Ipv6AddressMapInput` via:
//
//	Ipv6AddressMap{ "key": Ipv6AddressArgs{...} }
type Ipv6AddressMapInput interface {
	pulumi.Input

	ToIpv6AddressMapOutput() Ipv6AddressMapOutput
	ToIpv6AddressMapOutputWithContext(context.Context) Ipv6AddressMapOutput
}

type Ipv6AddressMap map[string]Ipv6AddressInput

func (Ipv6AddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv6Address)(nil)).Elem()
}

func (i Ipv6AddressMap) ToIpv6AddressMapOutput() Ipv6AddressMapOutput {
	return i.ToIpv6AddressMapOutputWithContext(context.Background())
}

func (i Ipv6AddressMap) ToIpv6AddressMapOutputWithContext(ctx context.Context) Ipv6AddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6AddressMapOutput)
}

type Ipv6AddressOutput struct{ *pulumi.OutputState }

func (Ipv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv6Address)(nil)).Elem()
}

func (o Ipv6AddressOutput) ToIpv6AddressOutput() Ipv6AddressOutput {
	return o
}

func (o Ipv6AddressOutput) ToIpv6AddressOutputWithContext(ctx context.Context) Ipv6AddressOutput {
	return o
}

// The number of automatically assigned IPv6 addresses and the total number of private IP addresses cannot exceed the
// quota. This should be combined with the input parameter `ipv6_addresses` for quota calculation. At least one of them,
// either this or 'Ipv6Addresses', must be provided.
func (o Ipv6AddressOutput) Ipv6AddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv6Address) pulumi.IntOutput { return v.Ipv6AddressCount }).(pulumi.IntOutput)
}

// The specified `IPv6` address list, up to 10 can be specified at a time. Combined with the input parameter
// `Ipv6AddressCount` to calculate the quota. Mandatory one with Ipv6AddressCount.
func (o Ipv6AddressOutput) Ipv6Addresses() Ipv6AddressIpv6AddressArrayOutput {
	return o.ApplyT(func(v *Ipv6Address) Ipv6AddressIpv6AddressArrayOutput { return v.Ipv6Addresses }).(Ipv6AddressIpv6AddressArrayOutput)
}

// ENI instance `ID`, in the form of `eni-m6dyj72l`.
func (o Ipv6AddressOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6Address) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

type Ipv6AddressArrayOutput struct{ *pulumi.OutputState }

func (Ipv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv6Address)(nil)).Elem()
}

func (o Ipv6AddressArrayOutput) ToIpv6AddressArrayOutput() Ipv6AddressArrayOutput {
	return o
}

func (o Ipv6AddressArrayOutput) ToIpv6AddressArrayOutputWithContext(ctx context.Context) Ipv6AddressArrayOutput {
	return o
}

func (o Ipv6AddressArrayOutput) Index(i pulumi.IntInput) Ipv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv6Address {
		return vs[0].([]*Ipv6Address)[vs[1].(int)]
	}).(Ipv6AddressOutput)
}

type Ipv6AddressMapOutput struct{ *pulumi.OutputState }

func (Ipv6AddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv6Address)(nil)).Elem()
}

func (o Ipv6AddressMapOutput) ToIpv6AddressMapOutput() Ipv6AddressMapOutput {
	return o
}

func (o Ipv6AddressMapOutput) ToIpv6AddressMapOutputWithContext(ctx context.Context) Ipv6AddressMapOutput {
	return o
}

func (o Ipv6AddressMapOutput) MapIndex(k pulumi.StringInput) Ipv6AddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv6Address {
		return vs[0].(map[string]*Ipv6Address)[vs[1].(string)]
	}).(Ipv6AddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6AddressInput)(nil)).Elem(), &Ipv6Address{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6AddressArrayInput)(nil)).Elem(), Ipv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6AddressMapInput)(nil)).Elem(), Ipv6AddressMap{})
	pulumi.RegisterOutputType(Ipv6AddressOutput{})
	pulumi.RegisterOutputType(Ipv6AddressArrayOutput{})
	pulumi.RegisterOutputType(Ipv6AddressMapOutput{})
}
