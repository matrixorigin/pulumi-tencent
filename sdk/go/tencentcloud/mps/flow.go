// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Flow struct {
	pulumi.CustomResourceState

	// The event ID associated with this Flow. Each flow can only be associated with one Event.
	EventId pulumi.StringPtrOutput `pulumi:"eventId"`
	// Flow name.
	FlowName pulumi.StringOutput `pulumi:"flowName"`
	// The input group for the flow.
	InputGroups FlowInputGroupArrayOutput `pulumi:"inputGroups"`
	// Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
	MaxBandwidth pulumi.IntOutput `pulumi:"maxBandwidth"`
}

// NewFlow registers a new resource with the given unique name, arguments, and options.
func NewFlow(ctx *pulumi.Context,
	name string, args *FlowArgs, opts ...pulumi.ResourceOption) (*Flow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlowName == nil {
		return nil, errors.New("invalid value for required argument 'FlowName'")
	}
	if args.MaxBandwidth == nil {
		return nil, errors.New("invalid value for required argument 'MaxBandwidth'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Flow
	err := ctx.RegisterResource("tencentcloud:Mps/flow:Flow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlow gets an existing Flow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowState, opts ...pulumi.ResourceOption) (*Flow, error) {
	var resource Flow
	err := ctx.ReadResource("tencentcloud:Mps/flow:Flow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Flow resources.
type flowState struct {
	// The event ID associated with this Flow. Each flow can only be associated with one Event.
	EventId *string `pulumi:"eventId"`
	// Flow name.
	FlowName *string `pulumi:"flowName"`
	// The input group for the flow.
	InputGroups []FlowInputGroup `pulumi:"inputGroups"`
	// Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
	MaxBandwidth *int `pulumi:"maxBandwidth"`
}

type FlowState struct {
	// The event ID associated with this Flow. Each flow can only be associated with one Event.
	EventId pulumi.StringPtrInput
	// Flow name.
	FlowName pulumi.StringPtrInput
	// The input group for the flow.
	InputGroups FlowInputGroupArrayInput
	// Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
	MaxBandwidth pulumi.IntPtrInput
}

func (FlowState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowState)(nil)).Elem()
}

type flowArgs struct {
	// The event ID associated with this Flow. Each flow can only be associated with one Event.
	EventId *string `pulumi:"eventId"`
	// Flow name.
	FlowName string `pulumi:"flowName"`
	// The input group for the flow.
	InputGroups []FlowInputGroup `pulumi:"inputGroups"`
	// Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
	MaxBandwidth int `pulumi:"maxBandwidth"`
}

// The set of arguments for constructing a Flow resource.
type FlowArgs struct {
	// The event ID associated with this Flow. Each flow can only be associated with one Event.
	EventId pulumi.StringPtrInput
	// Flow name.
	FlowName pulumi.StringInput
	// The input group for the flow.
	InputGroups FlowInputGroupArrayInput
	// Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
	MaxBandwidth pulumi.IntInput
}

func (FlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowArgs)(nil)).Elem()
}

type FlowInput interface {
	pulumi.Input

	ToFlowOutput() FlowOutput
	ToFlowOutputWithContext(ctx context.Context) FlowOutput
}

func (*Flow) ElementType() reflect.Type {
	return reflect.TypeOf((**Flow)(nil)).Elem()
}

func (i *Flow) ToFlowOutput() FlowOutput {
	return i.ToFlowOutputWithContext(context.Background())
}

func (i *Flow) ToFlowOutputWithContext(ctx context.Context) FlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutput)
}

// FlowArrayInput is an input type that accepts FlowArray and FlowArrayOutput values.
// You can construct a concrete instance of `FlowArrayInput` via:
//
//	FlowArray{ FlowArgs{...} }
type FlowArrayInput interface {
	pulumi.Input

	ToFlowArrayOutput() FlowArrayOutput
	ToFlowArrayOutputWithContext(context.Context) FlowArrayOutput
}

type FlowArray []FlowInput

func (FlowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Flow)(nil)).Elem()
}

func (i FlowArray) ToFlowArrayOutput() FlowArrayOutput {
	return i.ToFlowArrayOutputWithContext(context.Background())
}

func (i FlowArray) ToFlowArrayOutputWithContext(ctx context.Context) FlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowArrayOutput)
}

// FlowMapInput is an input type that accepts FlowMap and FlowMapOutput values.
// You can construct a concrete instance of `FlowMapInput` via:
//
//	FlowMap{ "key": FlowArgs{...} }
type FlowMapInput interface {
	pulumi.Input

	ToFlowMapOutput() FlowMapOutput
	ToFlowMapOutputWithContext(context.Context) FlowMapOutput
}

type FlowMap map[string]FlowInput

func (FlowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Flow)(nil)).Elem()
}

func (i FlowMap) ToFlowMapOutput() FlowMapOutput {
	return i.ToFlowMapOutputWithContext(context.Background())
}

func (i FlowMap) ToFlowMapOutputWithContext(ctx context.Context) FlowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMapOutput)
}

type FlowOutput struct{ *pulumi.OutputState }

func (FlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Flow)(nil)).Elem()
}

func (o FlowOutput) ToFlowOutput() FlowOutput {
	return o
}

func (o FlowOutput) ToFlowOutputWithContext(ctx context.Context) FlowOutput {
	return o
}

// The event ID associated with this Flow. Each flow can only be associated with one Event.
func (o FlowOutput) EventId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Flow) pulumi.StringPtrOutput { return v.EventId }).(pulumi.StringPtrOutput)
}

// Flow name.
func (o FlowOutput) FlowName() pulumi.StringOutput {
	return o.ApplyT(func(v *Flow) pulumi.StringOutput { return v.FlowName }).(pulumi.StringOutput)
}

// The input group for the flow.
func (o FlowOutput) InputGroups() FlowInputGroupArrayOutput {
	return o.ApplyT(func(v *Flow) FlowInputGroupArrayOutput { return v.InputGroups }).(FlowInputGroupArrayOutput)
}

// Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
func (o FlowOutput) MaxBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Flow) pulumi.IntOutput { return v.MaxBandwidth }).(pulumi.IntOutput)
}

type FlowArrayOutput struct{ *pulumi.OutputState }

func (FlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Flow)(nil)).Elem()
}

func (o FlowArrayOutput) ToFlowArrayOutput() FlowArrayOutput {
	return o
}

func (o FlowArrayOutput) ToFlowArrayOutputWithContext(ctx context.Context) FlowArrayOutput {
	return o
}

func (o FlowArrayOutput) Index(i pulumi.IntInput) FlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Flow {
		return vs[0].([]*Flow)[vs[1].(int)]
	}).(FlowOutput)
}

type FlowMapOutput struct{ *pulumi.OutputState }

func (FlowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Flow)(nil)).Elem()
}

func (o FlowMapOutput) ToFlowMapOutput() FlowMapOutput {
	return o
}

func (o FlowMapOutput) ToFlowMapOutputWithContext(ctx context.Context) FlowMapOutput {
	return o
}

func (o FlowMapOutput) MapIndex(k pulumi.StringInput) FlowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Flow {
		return vs[0].(map[string]*Flow)[vs[1].(string)]
	}).(FlowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowInput)(nil)).Elem(), &Flow{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowArrayInput)(nil)).Elem(), FlowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowMapInput)(nil)).Elem(), FlowMap{})
	pulumi.RegisterOutputType(FlowOutput{})
	pulumi.RegisterOutputType(FlowArrayOutput{})
	pulumi.RegisterOutputType(FlowMapOutput{})
}
