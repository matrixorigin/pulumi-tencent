// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type XmlConfig struct {
	pulumi.CustomResourceState

	// Cluster ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Configuration file modification information.
	ModifyConfContext XmlConfigModifyConfContextOutput `pulumi:"modifyConfContext"`
}

// NewXmlConfig registers a new resource with the given unique name, arguments, and options.
func NewXmlConfig(ctx *pulumi.Context,
	name string, args *XmlConfigArgs, opts ...pulumi.ResourceOption) (*XmlConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ModifyConfContext == nil {
		return nil, errors.New("invalid value for required argument 'ModifyConfContext'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource XmlConfig
	err := ctx.RegisterResource("tencentcloud:Clickhouse/xmlConfig:XmlConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetXmlConfig gets an existing XmlConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetXmlConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *XmlConfigState, opts ...pulumi.ResourceOption) (*XmlConfig, error) {
	var resource XmlConfig
	err := ctx.ReadResource("tencentcloud:Clickhouse/xmlConfig:XmlConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering XmlConfig resources.
type xmlConfigState struct {
	// Cluster ID.
	InstanceId *string `pulumi:"instanceId"`
	// Configuration file modification information.
	ModifyConfContext *XmlConfigModifyConfContext `pulumi:"modifyConfContext"`
}

type XmlConfigState struct {
	// Cluster ID.
	InstanceId pulumi.StringPtrInput
	// Configuration file modification information.
	ModifyConfContext XmlConfigModifyConfContextPtrInput
}

func (XmlConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*xmlConfigState)(nil)).Elem()
}

type xmlConfigArgs struct {
	// Cluster ID.
	InstanceId string `pulumi:"instanceId"`
	// Configuration file modification information.
	ModifyConfContext XmlConfigModifyConfContext `pulumi:"modifyConfContext"`
}

// The set of arguments for constructing a XmlConfig resource.
type XmlConfigArgs struct {
	// Cluster ID.
	InstanceId pulumi.StringInput
	// Configuration file modification information.
	ModifyConfContext XmlConfigModifyConfContextInput
}

func (XmlConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*xmlConfigArgs)(nil)).Elem()
}

type XmlConfigInput interface {
	pulumi.Input

	ToXmlConfigOutput() XmlConfigOutput
	ToXmlConfigOutputWithContext(ctx context.Context) XmlConfigOutput
}

func (*XmlConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**XmlConfig)(nil)).Elem()
}

func (i *XmlConfig) ToXmlConfigOutput() XmlConfigOutput {
	return i.ToXmlConfigOutputWithContext(context.Background())
}

func (i *XmlConfig) ToXmlConfigOutputWithContext(ctx context.Context) XmlConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XmlConfigOutput)
}

// XmlConfigArrayInput is an input type that accepts XmlConfigArray and XmlConfigArrayOutput values.
// You can construct a concrete instance of `XmlConfigArrayInput` via:
//
//	XmlConfigArray{ XmlConfigArgs{...} }
type XmlConfigArrayInput interface {
	pulumi.Input

	ToXmlConfigArrayOutput() XmlConfigArrayOutput
	ToXmlConfigArrayOutputWithContext(context.Context) XmlConfigArrayOutput
}

type XmlConfigArray []XmlConfigInput

func (XmlConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*XmlConfig)(nil)).Elem()
}

func (i XmlConfigArray) ToXmlConfigArrayOutput() XmlConfigArrayOutput {
	return i.ToXmlConfigArrayOutputWithContext(context.Background())
}

func (i XmlConfigArray) ToXmlConfigArrayOutputWithContext(ctx context.Context) XmlConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XmlConfigArrayOutput)
}

// XmlConfigMapInput is an input type that accepts XmlConfigMap and XmlConfigMapOutput values.
// You can construct a concrete instance of `XmlConfigMapInput` via:
//
//	XmlConfigMap{ "key": XmlConfigArgs{...} }
type XmlConfigMapInput interface {
	pulumi.Input

	ToXmlConfigMapOutput() XmlConfigMapOutput
	ToXmlConfigMapOutputWithContext(context.Context) XmlConfigMapOutput
}

type XmlConfigMap map[string]XmlConfigInput

func (XmlConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*XmlConfig)(nil)).Elem()
}

func (i XmlConfigMap) ToXmlConfigMapOutput() XmlConfigMapOutput {
	return i.ToXmlConfigMapOutputWithContext(context.Background())
}

func (i XmlConfigMap) ToXmlConfigMapOutputWithContext(ctx context.Context) XmlConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XmlConfigMapOutput)
}

type XmlConfigOutput struct{ *pulumi.OutputState }

func (XmlConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**XmlConfig)(nil)).Elem()
}

func (o XmlConfigOutput) ToXmlConfigOutput() XmlConfigOutput {
	return o
}

func (o XmlConfigOutput) ToXmlConfigOutputWithContext(ctx context.Context) XmlConfigOutput {
	return o
}

// Cluster ID.
func (o XmlConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *XmlConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Configuration file modification information.
func (o XmlConfigOutput) ModifyConfContext() XmlConfigModifyConfContextOutput {
	return o.ApplyT(func(v *XmlConfig) XmlConfigModifyConfContextOutput { return v.ModifyConfContext }).(XmlConfigModifyConfContextOutput)
}

type XmlConfigArrayOutput struct{ *pulumi.OutputState }

func (XmlConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*XmlConfig)(nil)).Elem()
}

func (o XmlConfigArrayOutput) ToXmlConfigArrayOutput() XmlConfigArrayOutput {
	return o
}

func (o XmlConfigArrayOutput) ToXmlConfigArrayOutputWithContext(ctx context.Context) XmlConfigArrayOutput {
	return o
}

func (o XmlConfigArrayOutput) Index(i pulumi.IntInput) XmlConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *XmlConfig {
		return vs[0].([]*XmlConfig)[vs[1].(int)]
	}).(XmlConfigOutput)
}

type XmlConfigMapOutput struct{ *pulumi.OutputState }

func (XmlConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*XmlConfig)(nil)).Elem()
}

func (o XmlConfigMapOutput) ToXmlConfigMapOutput() XmlConfigMapOutput {
	return o
}

func (o XmlConfigMapOutput) ToXmlConfigMapOutputWithContext(ctx context.Context) XmlConfigMapOutput {
	return o
}

func (o XmlConfigMapOutput) MapIndex(k pulumi.StringInput) XmlConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *XmlConfig {
		return vs[0].(map[string]*XmlConfig)[vs[1].(string)]
	}).(XmlConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*XmlConfigInput)(nil)).Elem(), &XmlConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*XmlConfigArrayInput)(nil)).Elem(), XmlConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*XmlConfigMapInput)(nil)).Elem(), XmlConfigMap{})
	pulumi.RegisterOutputType(XmlConfigOutput{})
	pulumi.RegisterOutputType(XmlConfigArrayOutput{})
	pulumi.RegisterOutputType(XmlConfigMapOutput{})
}
