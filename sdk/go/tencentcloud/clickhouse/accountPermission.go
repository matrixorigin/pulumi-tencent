// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"errors"
	"github.com/matrixorigin/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccountPermission struct {
	pulumi.CustomResourceState

	// Whether all database tables.
	AllDatabase pulumi.BoolOutput `pulumi:"allDatabase"`
	// Cluster name.
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// Database privilege list.
	DatabasePrivilegeLists AccountPermissionDatabasePrivilegeListArrayOutput `pulumi:"databasePrivilegeLists"`
	// Global privileges.
	GlobalPrivileges pulumi.StringArrayOutput `pulumi:"globalPrivileges"`
	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// User name.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewAccountPermission registers a new resource with the given unique name, arguments, and options.
func NewAccountPermission(ctx *pulumi.Context,
	name string, args *AccountPermissionArgs, opts ...pulumi.ResourceOption) (*AccountPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllDatabase == nil {
		return nil, errors.New("invalid value for required argument 'AllDatabase'")
	}
	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountPermission
	err := ctx.RegisterResource("tencentcloud:Clickhouse/accountPermission:AccountPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountPermission gets an existing AccountPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountPermissionState, opts ...pulumi.ResourceOption) (*AccountPermission, error) {
	var resource AccountPermission
	err := ctx.ReadResource("tencentcloud:Clickhouse/accountPermission:AccountPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountPermission resources.
type accountPermissionState struct {
	// Whether all database tables.
	AllDatabase *bool `pulumi:"allDatabase"`
	// Cluster name.
	Cluster *string `pulumi:"cluster"`
	// Database privilege list.
	DatabasePrivilegeLists []AccountPermissionDatabasePrivilegeList `pulumi:"databasePrivilegeLists"`
	// Global privileges.
	GlobalPrivileges []string `pulumi:"globalPrivileges"`
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
	// User name.
	UserName *string `pulumi:"userName"`
}

type AccountPermissionState struct {
	// Whether all database tables.
	AllDatabase pulumi.BoolPtrInput
	// Cluster name.
	Cluster pulumi.StringPtrInput
	// Database privilege list.
	DatabasePrivilegeLists AccountPermissionDatabasePrivilegeListArrayInput
	// Global privileges.
	GlobalPrivileges pulumi.StringArrayInput
	// Instance id.
	InstanceId pulumi.StringPtrInput
	// User name.
	UserName pulumi.StringPtrInput
}

func (AccountPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPermissionState)(nil)).Elem()
}

type accountPermissionArgs struct {
	// Whether all database tables.
	AllDatabase bool `pulumi:"allDatabase"`
	// Cluster name.
	Cluster string `pulumi:"cluster"`
	// Database privilege list.
	DatabasePrivilegeLists []AccountPermissionDatabasePrivilegeList `pulumi:"databasePrivilegeLists"`
	// Global privileges.
	GlobalPrivileges []string `pulumi:"globalPrivileges"`
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
	// User name.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a AccountPermission resource.
type AccountPermissionArgs struct {
	// Whether all database tables.
	AllDatabase pulumi.BoolInput
	// Cluster name.
	Cluster pulumi.StringInput
	// Database privilege list.
	DatabasePrivilegeLists AccountPermissionDatabasePrivilegeListArrayInput
	// Global privileges.
	GlobalPrivileges pulumi.StringArrayInput
	// Instance id.
	InstanceId pulumi.StringInput
	// User name.
	UserName pulumi.StringInput
}

func (AccountPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPermissionArgs)(nil)).Elem()
}

type AccountPermissionInput interface {
	pulumi.Input

	ToAccountPermissionOutput() AccountPermissionOutput
	ToAccountPermissionOutputWithContext(ctx context.Context) AccountPermissionOutput
}

func (*AccountPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPermission)(nil)).Elem()
}

func (i *AccountPermission) ToAccountPermissionOutput() AccountPermissionOutput {
	return i.ToAccountPermissionOutputWithContext(context.Background())
}

func (i *AccountPermission) ToAccountPermissionOutputWithContext(ctx context.Context) AccountPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPermissionOutput)
}

// AccountPermissionArrayInput is an input type that accepts AccountPermissionArray and AccountPermissionArrayOutput values.
// You can construct a concrete instance of `AccountPermissionArrayInput` via:
//
//	AccountPermissionArray{ AccountPermissionArgs{...} }
type AccountPermissionArrayInput interface {
	pulumi.Input

	ToAccountPermissionArrayOutput() AccountPermissionArrayOutput
	ToAccountPermissionArrayOutputWithContext(context.Context) AccountPermissionArrayOutput
}

type AccountPermissionArray []AccountPermissionInput

func (AccountPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountPermission)(nil)).Elem()
}

func (i AccountPermissionArray) ToAccountPermissionArrayOutput() AccountPermissionArrayOutput {
	return i.ToAccountPermissionArrayOutputWithContext(context.Background())
}

func (i AccountPermissionArray) ToAccountPermissionArrayOutputWithContext(ctx context.Context) AccountPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPermissionArrayOutput)
}

// AccountPermissionMapInput is an input type that accepts AccountPermissionMap and AccountPermissionMapOutput values.
// You can construct a concrete instance of `AccountPermissionMapInput` via:
//
//	AccountPermissionMap{ "key": AccountPermissionArgs{...} }
type AccountPermissionMapInput interface {
	pulumi.Input

	ToAccountPermissionMapOutput() AccountPermissionMapOutput
	ToAccountPermissionMapOutputWithContext(context.Context) AccountPermissionMapOutput
}

type AccountPermissionMap map[string]AccountPermissionInput

func (AccountPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountPermission)(nil)).Elem()
}

func (i AccountPermissionMap) ToAccountPermissionMapOutput() AccountPermissionMapOutput {
	return i.ToAccountPermissionMapOutputWithContext(context.Background())
}

func (i AccountPermissionMap) ToAccountPermissionMapOutputWithContext(ctx context.Context) AccountPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPermissionMapOutput)
}

type AccountPermissionOutput struct{ *pulumi.OutputState }

func (AccountPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPermission)(nil)).Elem()
}

func (o AccountPermissionOutput) ToAccountPermissionOutput() AccountPermissionOutput {
	return o
}

func (o AccountPermissionOutput) ToAccountPermissionOutputWithContext(ctx context.Context) AccountPermissionOutput {
	return o
}

// Whether all database tables.
func (o AccountPermissionOutput) AllDatabase() pulumi.BoolOutput {
	return o.ApplyT(func(v *AccountPermission) pulumi.BoolOutput { return v.AllDatabase }).(pulumi.BoolOutput)
}

// Cluster name.
func (o AccountPermissionOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountPermission) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

// Database privilege list.
func (o AccountPermissionOutput) DatabasePrivilegeLists() AccountPermissionDatabasePrivilegeListArrayOutput {
	return o.ApplyT(func(v *AccountPermission) AccountPermissionDatabasePrivilegeListArrayOutput {
		return v.DatabasePrivilegeLists
	}).(AccountPermissionDatabasePrivilegeListArrayOutput)
}

// Global privileges.
func (o AccountPermissionOutput) GlobalPrivileges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccountPermission) pulumi.StringArrayOutput { return v.GlobalPrivileges }).(pulumi.StringArrayOutput)
}

// Instance id.
func (o AccountPermissionOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountPermission) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// User name.
func (o AccountPermissionOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountPermission) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type AccountPermissionArrayOutput struct{ *pulumi.OutputState }

func (AccountPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountPermission)(nil)).Elem()
}

func (o AccountPermissionArrayOutput) ToAccountPermissionArrayOutput() AccountPermissionArrayOutput {
	return o
}

func (o AccountPermissionArrayOutput) ToAccountPermissionArrayOutputWithContext(ctx context.Context) AccountPermissionArrayOutput {
	return o
}

func (o AccountPermissionArrayOutput) Index(i pulumi.IntInput) AccountPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountPermission {
		return vs[0].([]*AccountPermission)[vs[1].(int)]
	}).(AccountPermissionOutput)
}

type AccountPermissionMapOutput struct{ *pulumi.OutputState }

func (AccountPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountPermission)(nil)).Elem()
}

func (o AccountPermissionMapOutput) ToAccountPermissionMapOutput() AccountPermissionMapOutput {
	return o
}

func (o AccountPermissionMapOutput) ToAccountPermissionMapOutputWithContext(ctx context.Context) AccountPermissionMapOutput {
	return o
}

func (o AccountPermissionMapOutput) MapIndex(k pulumi.StringInput) AccountPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountPermission {
		return vs[0].(map[string]*AccountPermission)[vs[1].(string)]
	}).(AccountPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPermissionInput)(nil)).Elem(), &AccountPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPermissionArrayInput)(nil)).Elem(), AccountPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPermissionMapInput)(nil)).Elem(), AccountPermissionMap{})
	pulumi.RegisterOutputType(AccountPermissionOutput{})
	pulumi.RegisterOutputType(AccountPermissionArrayOutput{})
	pulumi.RegisterOutputType(AccountPermissionMapOutput{})
}
