# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPublicIpv6sResult',
    'AwaitableGetPublicIpv6sResult',
    'get_public_ipv6s',
    'get_public_ipv6s_output',
]

@pulumi.output_type
class GetPublicIpv6sResult:
    """
    A collection of values returned by getPublicIpv6s.
    """
    def __init__(__self__, address_sets=None, filters=None, id=None, ipv6_address_ids=None, result_output_file=None, traditional=None):
        if address_sets and not isinstance(address_sets, list):
            raise TypeError("Expected argument 'address_sets' to be a list")
        pulumi.set(__self__, "address_sets", address_sets)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv6_address_ids and not isinstance(ipv6_address_ids, list):
            raise TypeError("Expected argument 'ipv6_address_ids' to be a list")
        pulumi.set(__self__, "ipv6_address_ids", ipv6_address_ids)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if traditional and not isinstance(traditional, bool):
            raise TypeError("Expected argument 'traditional' to be a bool")
        pulumi.set(__self__, "traditional", traditional)

    @property
    @pulumi.getter(name="addressSets")
    def address_sets(self) -> Sequence['outputs.GetPublicIpv6sAddressSetResult']:
        return pulumi.get(self, "address_sets")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetPublicIpv6sFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv6AddressIds")
    def ipv6_address_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ipv6_address_ids")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def traditional(self) -> Optional[bool]:
        return pulumi.get(self, "traditional")


class AwaitableGetPublicIpv6sResult(GetPublicIpv6sResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicIpv6sResult(
            address_sets=self.address_sets,
            filters=self.filters,
            id=self.id,
            ipv6_address_ids=self.ipv6_address_ids,
            result_output_file=self.result_output_file,
            traditional=self.traditional)


def get_public_ipv6s(filters: Optional[Sequence[pulumi.InputType['GetPublicIpv6sFilterArgs']]] = None,
                     ipv6_address_ids: Optional[Sequence[str]] = None,
                     result_output_file: Optional[str] = None,
                     traditional: Optional[bool] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicIpv6sResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['ipv6AddressIds'] = ipv6_address_ids
    __args__['resultOutputFile'] = result_output_file
    __args__['traditional'] = traditional
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Elastic/getPublicIpv6s:getPublicIpv6s', __args__, opts=opts, typ=GetPublicIpv6sResult).value

    return AwaitableGetPublicIpv6sResult(
        address_sets=pulumi.get(__ret__, 'address_sets'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        ipv6_address_ids=pulumi.get(__ret__, 'ipv6_address_ids'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        traditional=pulumi.get(__ret__, 'traditional'))


@_utilities.lift_output_func(get_public_ipv6s)
def get_public_ipv6s_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPublicIpv6sFilterArgs']]]]] = None,
                            ipv6_address_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            traditional: Optional[pulumi.Input[Optional[bool]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPublicIpv6sResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
