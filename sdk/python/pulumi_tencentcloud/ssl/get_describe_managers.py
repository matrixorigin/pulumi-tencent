# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDescribeManagersResult',
    'AwaitableGetDescribeManagersResult',
    'get_describe_managers',
    'get_describe_managers_output',
]

@pulumi.output_type
class GetDescribeManagersResult:
    """
    A collection of values returned by getDescribeManagers.
    """
    def __init__(__self__, company_id=None, id=None, manager_mail=None, manager_name=None, managers=None, result_output_file=None, search_key=None, status=None):
        if company_id and not isinstance(company_id, int):
            raise TypeError("Expected argument 'company_id' to be a int")
        pulumi.set(__self__, "company_id", company_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if manager_mail and not isinstance(manager_mail, str):
            raise TypeError("Expected argument 'manager_mail' to be a str")
        pulumi.set(__self__, "manager_mail", manager_mail)
        if manager_name and not isinstance(manager_name, str):
            raise TypeError("Expected argument 'manager_name' to be a str")
        pulumi.set(__self__, "manager_name", manager_name)
        if managers and not isinstance(managers, list):
            raise TypeError("Expected argument 'managers' to be a list")
        pulumi.set(__self__, "managers", managers)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if search_key and not isinstance(search_key, str):
            raise TypeError("Expected argument 'search_key' to be a str")
        pulumi.set(__self__, "search_key", search_key)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="companyId")
    def company_id(self) -> int:
        return pulumi.get(self, "company_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managerMail")
    def manager_mail(self) -> Optional[str]:
        return pulumi.get(self, "manager_mail")

    @property
    @pulumi.getter(name="managerName")
    def manager_name(self) -> Optional[str]:
        return pulumi.get(self, "manager_name")

    @property
    @pulumi.getter
    def managers(self) -> Sequence['outputs.GetDescribeManagersManagerResult']:
        return pulumi.get(self, "managers")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="searchKey")
    def search_key(self) -> Optional[str]:
        return pulumi.get(self, "search_key")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


class AwaitableGetDescribeManagersResult(GetDescribeManagersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDescribeManagersResult(
            company_id=self.company_id,
            id=self.id,
            manager_mail=self.manager_mail,
            manager_name=self.manager_name,
            managers=self.managers,
            result_output_file=self.result_output_file,
            search_key=self.search_key,
            status=self.status)


def get_describe_managers(company_id: Optional[int] = None,
                          manager_mail: Optional[str] = None,
                          manager_name: Optional[str] = None,
                          result_output_file: Optional[str] = None,
                          search_key: Optional[str] = None,
                          status: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDescribeManagersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['companyId'] = company_id
    __args__['managerMail'] = manager_mail
    __args__['managerName'] = manager_name
    __args__['resultOutputFile'] = result_output_file
    __args__['searchKey'] = search_key
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ssl/getDescribeManagers:getDescribeManagers', __args__, opts=opts, typ=GetDescribeManagersResult).value

    return AwaitableGetDescribeManagersResult(
        company_id=pulumi.get(__ret__, 'company_id'),
        id=pulumi.get(__ret__, 'id'),
        manager_mail=pulumi.get(__ret__, 'manager_mail'),
        manager_name=pulumi.get(__ret__, 'manager_name'),
        managers=pulumi.get(__ret__, 'managers'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        search_key=pulumi.get(__ret__, 'search_key'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_describe_managers)
def get_describe_managers_output(company_id: Optional[pulumi.Input[int]] = None,
                                 manager_mail: Optional[pulumi.Input[Optional[str]]] = None,
                                 manager_name: Optional[pulumi.Input[Optional[str]]] = None,
                                 result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                 search_key: Optional[pulumi.Input[Optional[str]]] = None,
                                 status: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDescribeManagersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
