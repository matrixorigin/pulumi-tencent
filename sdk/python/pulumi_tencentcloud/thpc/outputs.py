# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'WorkspacesDataDisk',
    'WorkspacesEnhancedService',
    'WorkspacesEnhancedServiceAutomationService',
    'WorkspacesEnhancedServiceMonitorService',
    'WorkspacesEnhancedServiceSecurityService',
    'WorkspacesInternetAccessible',
    'WorkspacesLoginSettings',
    'WorkspacesPlacement',
    'WorkspacesSpaceChargePrepaid',
    'WorkspacesSystemDisk',
    'WorkspacesTagSpecification',
    'WorkspacesTagSpecificationTag',
    'WorkspacesVirtualPrivateCloud',
]

@pulumi.output_type
class WorkspacesDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "burstPerformance":
            suggest = "burst_performance"
        elif key == "deleteWithInstance":
            suggest = "delete_with_instance"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "throughputPerformance":
            suggest = "throughput_performance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacesDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacesDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacesDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst_performance: Optional[bool] = None,
                 delete_with_instance: Optional[bool] = None,
                 disk_id: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 encrypt: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 snapshot_id: Optional[str] = None,
                 throughput_performance: Optional[int] = None):
        if burst_performance is not None:
            pulumi.set(__self__, "burst_performance", burst_performance)
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="burstPerformance")
    def burst_performance(self) -> Optional[bool]:
        return pulumi.get(self, "burst_performance")

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[bool]:
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[bool]:
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[int]:
        return pulumi.get(self, "throughput_performance")


@pulumi.output_type
class WorkspacesEnhancedService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automationService":
            suggest = "automation_service"
        elif key == "monitorService":
            suggest = "monitor_service"
        elif key == "securityService":
            suggest = "security_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacesEnhancedService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacesEnhancedService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacesEnhancedService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automation_service: Optional['outputs.WorkspacesEnhancedServiceAutomationService'] = None,
                 monitor_service: Optional['outputs.WorkspacesEnhancedServiceMonitorService'] = None,
                 security_service: Optional['outputs.WorkspacesEnhancedServiceSecurityService'] = None):
        if automation_service is not None:
            pulumi.set(__self__, "automation_service", automation_service)
        if monitor_service is not None:
            pulumi.set(__self__, "monitor_service", monitor_service)
        if security_service is not None:
            pulumi.set(__self__, "security_service", security_service)

    @property
    @pulumi.getter(name="automationService")
    def automation_service(self) -> Optional['outputs.WorkspacesEnhancedServiceAutomationService']:
        return pulumi.get(self, "automation_service")

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional['outputs.WorkspacesEnhancedServiceMonitorService']:
        return pulumi.get(self, "monitor_service")

    @property
    @pulumi.getter(name="securityService")
    def security_service(self) -> Optional['outputs.WorkspacesEnhancedServiceSecurityService']:
        return pulumi.get(self, "security_service")


@pulumi.output_type
class WorkspacesEnhancedServiceAutomationService(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WorkspacesEnhancedServiceMonitorService(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WorkspacesEnhancedServiceSecurityService(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WorkspacesInternetAccessible(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthPackageId":
            suggest = "bandwidth_package_id"
        elif key == "internetChargeType":
            suggest = "internet_charge_type"
        elif key == "internetMaxBandwidthOut":
            suggest = "internet_max_bandwidth_out"
        elif key == "publicIpAssigned":
            suggest = "public_ip_assigned"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacesInternetAccessible. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacesInternetAccessible.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacesInternetAccessible.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_package_id: Optional[str] = None,
                 internet_charge_type: Optional[str] = None,
                 internet_max_bandwidth_out: Optional[int] = None,
                 public_ip_assigned: Optional[bool] = None):
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[str]:
        return pulumi.get(self, "bandwidth_package_id")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[str]:
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[int]:
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[bool]:
        return pulumi.get(self, "public_ip_assigned")


@pulumi.output_type
class WorkspacesLoginSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyIds":
            suggest = "key_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacesLoginSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacesLoginSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacesLoginSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_ids: Optional[Sequence[str]] = None,
                 password: Optional[str] = None):
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")


@pulumi.output_type
class WorkspacesPlacement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacesPlacement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacesPlacement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacesPlacement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zone: str,
                 project_id: Optional[int] = None):
        pulumi.set(__self__, "zone", zone)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        return pulumi.get(self, "project_id")


@pulumi.output_type
class WorkspacesSpaceChargePrepaid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewFlag":
            suggest = "renew_flag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacesSpaceChargePrepaid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacesSpaceChargePrepaid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacesSpaceChargePrepaid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period: Optional[int] = None,
                 renew_flag: Optional[str] = None):
        if period is not None:
            pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[str]:
        return pulumi.get(self, "renew_flag")


@pulumi.output_type
class WorkspacesSystemDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacesSystemDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacesSystemDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacesSystemDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None):
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")


@pulumi.output_type
class WorkspacesTagSpecification(dict):
    def __init__(__self__, *,
                 tags: Sequence['outputs.WorkspacesTagSpecificationTag']):
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.WorkspacesTagSpecificationTag']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class WorkspacesTagSpecificationTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkspacesVirtualPrivateCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "asVpcGateway":
            suggest = "as_vpc_gateway"
        elif key == "ipv6AddressCount":
            suggest = "ipv6_address_count"
        elif key == "privateIpAddresses":
            suggest = "private_ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacesVirtualPrivateCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacesVirtualPrivateCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacesVirtualPrivateCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str,
                 as_vpc_gateway: Optional[bool] = None,
                 ipv6_address_count: Optional[int] = None,
                 private_ip_addresses: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if as_vpc_gateway is not None:
            pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        if ipv6_address_count is not None:
            pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> Optional[bool]:
        return pulumi.get(self, "as_vpc_gateway")

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_address_count")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_ip_addresses")


