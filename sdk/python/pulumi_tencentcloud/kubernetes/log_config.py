# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LogConfigArgs', 'LogConfig']

@pulumi.input_type
class LogConfigArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 log_config: pulumi.Input[str],
                 log_config_name: pulumi.Input[str],
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LogConfig resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] log_config: JSON expression of log collection configuration.
        :param pulumi.Input[str] log_config_name: Log config name.
        :param pulumi.Input[str] cluster_type: The current cluster type supports tke and eks, default is tke.
        :param pulumi.Input[str] logset_id: CLS log set ID.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "log_config", log_config)
        pulumi.set(__self__, "log_config_name", log_config_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if logset_id is not None:
            pulumi.set(__self__, "logset_id", logset_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="logConfig")
    def log_config(self) -> pulumi.Input[str]:
        """
        JSON expression of log collection configuration.
        """
        return pulumi.get(self, "log_config")

    @log_config.setter
    def log_config(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_config", value)

    @property
    @pulumi.getter(name="logConfigName")
    def log_config_name(self) -> pulumi.Input[str]:
        """
        Log config name.
        """
        return pulumi.get(self, "log_config_name")

    @log_config_name.setter
    def log_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_config_name", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        The current cluster type supports tke and eks, default is tke.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLS log set ID.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_id", value)


@pulumi.input_type
class _LogConfigState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 log_config: Optional[pulumi.Input[str]] = None,
                 log_config_name: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LogConfig resources.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] cluster_type: The current cluster type supports tke and eks, default is tke.
        :param pulumi.Input[str] log_config: JSON expression of log collection configuration.
        :param pulumi.Input[str] log_config_name: Log config name.
        :param pulumi.Input[str] logset_id: CLS log set ID.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if log_config is not None:
            pulumi.set(__self__, "log_config", log_config)
        if log_config_name is not None:
            pulumi.set(__self__, "log_config_name", log_config_name)
        if logset_id is not None:
            pulumi.set(__self__, "logset_id", logset_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        The current cluster type supports tke and eks, default is tke.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="logConfig")
    def log_config(self) -> Optional[pulumi.Input[str]]:
        """
        JSON expression of log collection configuration.
        """
        return pulumi.get(self, "log_config")

    @log_config.setter
    def log_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_config", value)

    @property
    @pulumi.getter(name="logConfigName")
    def log_config_name(self) -> Optional[pulumi.Input[str]]:
        """
        Log config name.
        """
        return pulumi.get(self, "log_config_name")

    @log_config_name.setter
    def log_config_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_config_name", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLS log set ID.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_id", value)


class LogConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 log_config: Optional[pulumi.Input[str]] = None,
                 log_config_name: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LogConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] cluster_type: The current cluster type supports tke and eks, default is tke.
        :param pulumi.Input[str] log_config: JSON expression of log collection configuration.
        :param pulumi.Input[str] log_config_name: Log config name.
        :param pulumi.Input[str] logset_id: CLS log set ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 log_config: Optional[pulumi.Input[str]] = None,
                 log_config_name: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogConfigArgs.__new__(LogConfigArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["cluster_type"] = cluster_type
            if log_config is None and not opts.urn:
                raise TypeError("Missing required property 'log_config'")
            __props__.__dict__["log_config"] = log_config
            if log_config_name is None and not opts.urn:
                raise TypeError("Missing required property 'log_config_name'")
            __props__.__dict__["log_config_name"] = log_config_name
            __props__.__dict__["logset_id"] = logset_id
        super(LogConfig, __self__).__init__(
            'tencentcloud:Kubernetes/logConfig:LogConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            cluster_type: Optional[pulumi.Input[str]] = None,
            log_config: Optional[pulumi.Input[str]] = None,
            log_config_name: Optional[pulumi.Input[str]] = None,
            logset_id: Optional[pulumi.Input[str]] = None) -> 'LogConfig':
        """
        Get an existing LogConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] cluster_type: The current cluster type supports tke and eks, default is tke.
        :param pulumi.Input[str] log_config: JSON expression of log collection configuration.
        :param pulumi.Input[str] log_config_name: Log config name.
        :param pulumi.Input[str] logset_id: CLS log set ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogConfigState.__new__(_LogConfigState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["log_config"] = log_config
        __props__.__dict__["log_config_name"] = log_config_name
        __props__.__dict__["logset_id"] = logset_id
        return LogConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[Optional[str]]:
        """
        The current cluster type supports tke and eks, default is tke.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="logConfig")
    def log_config(self) -> pulumi.Output[str]:
        """
        JSON expression of log collection configuration.
        """
        return pulumi.get(self, "log_config")

    @property
    @pulumi.getter(name="logConfigName")
    def log_config_name(self) -> pulumi.Output[str]:
        """
        Log config name.
        """
        return pulumi.get(self, "log_config_name")

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> pulumi.Output[Optional[str]]:
        """
        CLS log set ID.
        """
        return pulumi.get(self, "logset_id")

