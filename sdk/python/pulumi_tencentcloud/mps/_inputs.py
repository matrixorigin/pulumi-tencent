# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AdaptiveDynamicStreamingTemplateStreamInfoArgs',
    'AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs',
    'AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs',
    'AiAnalysisTemplateClassificationConfigureArgs',
    'AiAnalysisTemplateCoverConfigureArgs',
    'AiAnalysisTemplateFrameTagConfigureArgs',
    'AiAnalysisTemplateTagConfigureArgs',
    'AiRecognitionTemplateAsrFullTextConfigureArgs',
    'AiRecognitionTemplateAsrWordsConfigureArgs',
    'AiRecognitionTemplateFaceConfigureArgs',
    'AiRecognitionTemplateOcrFullTextConfigureArgs',
    'AiRecognitionTemplateOcrWordsConfigureArgs',
    'ContentReviewTemplatePoliticalConfigureArgs',
    'ContentReviewTemplatePoliticalConfigureAsrReviewInfoArgs',
    'ContentReviewTemplatePoliticalConfigureImgReviewInfoArgs',
    'ContentReviewTemplatePoliticalConfigureOcrReviewInfoArgs',
    'ContentReviewTemplatePornConfigureArgs',
    'ContentReviewTemplatePornConfigureAsrReviewInfoArgs',
    'ContentReviewTemplatePornConfigureImgReviewInfoArgs',
    'ContentReviewTemplatePornConfigureOcrReviewInfoArgs',
    'ContentReviewTemplateProhibitedConfigureArgs',
    'ContentReviewTemplateProhibitedConfigureAsrReviewInfoArgs',
    'ContentReviewTemplateProhibitedConfigureOcrReviewInfoArgs',
    'ContentReviewTemplateTerrorismConfigureArgs',
    'ContentReviewTemplateTerrorismConfigureImgReviewInfoArgs',
    'ContentReviewTemplateTerrorismConfigureOcrReviewInfoArgs',
    'ContentReviewTemplateUserDefineConfigureArgs',
    'ContentReviewTemplateUserDefineConfigureAsrReviewInfoArgs',
    'ContentReviewTemplateUserDefineConfigureFaceReviewInfoArgs',
    'ContentReviewTemplateUserDefineConfigureOcrReviewInfoArgs',
    'EditMediaOperationFileInfoArgs',
    'EditMediaOperationFileInfoInputInfoArgs',
    'EditMediaOperationFileInfoInputInfoCosInputInfoArgs',
    'EditMediaOperationFileInfoInputInfoS3InputInfoArgs',
    'EditMediaOperationFileInfoInputInfoUrlInputInfoArgs',
    'EditMediaOperationOutputConfigArgs',
    'EditMediaOperationOutputStorageArgs',
    'EditMediaOperationOutputStorageCosOutputStorageArgs',
    'EditMediaOperationOutputStorageS3OutputStorageArgs',
    'EditMediaOperationTaskNotifyConfigArgs',
    'EditMediaOperationTaskNotifyConfigAwsSqsArgs',
    'FlowInputGroupArgs',
    'FlowInputGroupHlsPullSettingsArgs',
    'FlowInputGroupHlsPullSettingsSourceAddressArgs',
    'FlowInputGroupResilientStreamArgs',
    'FlowInputGroupRtmpPullSettingsArgs',
    'FlowInputGroupRtmpPullSettingsSourceAddressArgs',
    'FlowInputGroupRtpSettingsArgs',
    'FlowInputGroupRtspPullSettingsArgs',
    'FlowInputGroupRtspPullSettingsSourceAddressArgs',
    'FlowInputGroupSrtSettingsArgs',
    'FlowInputGroupSrtSettingsSourceAddressArgs',
    'InputInputGroupArgs',
    'InputInputGroupHlsPullSettingsArgs',
    'InputInputGroupHlsPullSettingsSourceAddressArgs',
    'InputInputGroupResilientStreamArgs',
    'InputInputGroupRtmpPullSettingsArgs',
    'InputInputGroupRtmpPullSettingsSourceAddressArgs',
    'InputInputGroupRtpSettingsArgs',
    'InputInputGroupRtspPullSettingsArgs',
    'InputInputGroupRtspPullSettingsSourceAddressArgs',
    'InputInputGroupSrtSettingsArgs',
    'InputInputGroupSrtSettingsSourceAddressArgs',
    'OutputOutputArgs',
    'OutputOutputRtmpSettingsArgs',
    'OutputOutputRtmpSettingsDestinationArgs',
    'OutputOutputRtpSettingsArgs',
    'OutputOutputRtpSettingsDestinationArgs',
    'OutputOutputSrtSettingsArgs',
    'OutputOutputSrtSettingsDestinationArgs',
    'ProcessLiveStreamOperationAiAnalysisTaskArgs',
    'ProcessLiveStreamOperationAiContentReviewTaskArgs',
    'ProcessLiveStreamOperationAiQualityControlTaskArgs',
    'ProcessLiveStreamOperationAiRecognitionTaskArgs',
    'ProcessLiveStreamOperationOutputStorageArgs',
    'ProcessLiveStreamOperationOutputStorageCosOutputStorageArgs',
    'ProcessLiveStreamOperationOutputStorageS3OutputStorageArgs',
    'ProcessLiveStreamOperationTaskNotifyConfigArgs',
    'ProcessMediaOperationAiAnalysisTaskArgs',
    'ProcessMediaOperationAiContentReviewTaskArgs',
    'ProcessMediaOperationAiQualityControlTaskArgs',
    'ProcessMediaOperationAiRecognitionTaskArgs',
    'ProcessMediaOperationInputInfoArgs',
    'ProcessMediaOperationInputInfoCosInputInfoArgs',
    'ProcessMediaOperationInputInfoS3InputInfoArgs',
    'ProcessMediaOperationInputInfoUrlInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetArgs',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetArgs',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSetArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorageArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'ProcessMediaOperationOutputStorageArgs',
    'ProcessMediaOperationOutputStorageCosOutputStorageArgs',
    'ProcessMediaOperationOutputStorageS3OutputStorageArgs',
    'ProcessMediaOperationTaskNotifyConfigArgs',
    'ProcessMediaOperationTaskNotifyConfigAwsSqaArgs',
    'ScheduleActivityArgs',
    'ScheduleActivityActivityParaArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'ScheduleActivityActivityParaAiAnalysisTaskArgs',
    'ScheduleActivityActivityParaAiContentReviewTaskArgs',
    'ScheduleActivityActivityParaAiRecognitionTaskArgs',
    'ScheduleActivityActivityParaAnimatedGraphicTaskArgs',
    'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageArgs',
    'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageArgs',
    'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageArgs',
    'ScheduleActivityActivityParaImageSpriteTaskArgs',
    'ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormatArgs',
    'ScheduleActivityActivityParaImageSpriteTaskOutputStorageArgs',
    'ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageArgs',
    'ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormatArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskArgs',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterArgs',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetArgs',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetArgs',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskMosaicSetArgs',
    'ScheduleActivityActivityParaTranscodeTaskObjectNumberFormatArgs',
    'ScheduleActivityActivityParaTranscodeTaskOutputStorageArgs',
    'ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageArgs',
    'ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfigArgs',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateArgs',
    'ScheduleActivityActivityParaTranscodeTaskRawParameterArgs',
    'ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplateArgs',
    'ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfigArgs',
    'ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplateArgs',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetArgs',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterArgs',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateArgs',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentArgs',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'ScheduleOutputStorageArgs',
    'ScheduleOutputStorageCosOutputStorageArgs',
    'ScheduleOutputStorageS3OutputStorageArgs',
    'ScheduleTaskNotifyConfigArgs',
    'ScheduleTaskNotifyConfigAwsSqsArgs',
    'ScheduleTriggerArgs',
    'ScheduleTriggerAwsS3FileUploadTriggerArgs',
    'ScheduleTriggerAwsS3FileUploadTriggerAwsSqsArgs',
    'ScheduleTriggerCosFileUploadTriggerArgs',
    'TranscodeTemplateAudioTemplateArgs',
    'TranscodeTemplateEnhanceConfigArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs',
    'TranscodeTemplateTehdConfigArgs',
    'TranscodeTemplateVideoTemplateArgs',
    'WatermarkTemplateImageTemplateArgs',
    'WatermarkTemplateSvgTemplateArgs',
    'WatermarkTemplateTextTemplateArgs',
    'WithdrawsWatermarkOperationInputInfoArgs',
    'WithdrawsWatermarkOperationInputInfoCosInputInfoArgs',
    'WithdrawsWatermarkOperationInputInfoS3InputInfoArgs',
    'WithdrawsWatermarkOperationInputInfoUrlInputInfoArgs',
    'WithdrawsWatermarkOperationTaskNotifyConfigArgs',
    'WithdrawsWatermarkOperationTaskNotifyConfigAwsSqsArgs',
    'WorkflowAiAnalysisTaskArgs',
    'WorkflowAiContentReviewTaskArgs',
    'WorkflowAiRecognitionTaskArgs',
    'WorkflowMediaProcessTaskArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskImageSpriteTaskSetArgs',
    'WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs',
    'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'WorkflowOutputStorageArgs',
    'WorkflowOutputStorageCosOutputStorageArgs',
    'WorkflowTaskNotifyConfigArgs',
    'WorkflowTriggerArgs',
    'WorkflowTriggerCosFileUploadTriggerArgs',
    'GetMediaMetaDataInputInfoArgs',
    'GetMediaMetaDataInputInfoCosInputInfoArgs',
    'GetMediaMetaDataInputInfoS3InputInfoArgs',
    'GetMediaMetaDataInputInfoUrlInputInfoArgs',
]

@pulumi.input_type
class AdaptiveDynamicStreamingTemplateStreamInfoArgs:
    def __init__(__self__, *,
                 audio: pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs'],
                 video: pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs'],
                 remove_audio: Optional[pulumi.Input[int]] = None,
                 remove_video: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "audio", audio)
        pulumi.set(__self__, "video", video)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)

    @property
    @pulumi.getter
    def audio(self) -> pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs']:
        return pulumi.get(self, "audio")

    @audio.setter
    def audio(self, value: pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs']):
        pulumi.set(self, "audio", value)

    @property
    @pulumi.getter
    def video(self) -> pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs']:
        return pulumi.get(self, "video")

    @video.setter
    def video(self, value: pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs']):
        pulumi.set(self, "video", value)

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_audio")

    @remove_audio.setter
    def remove_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_audio", value)

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_video")

    @remove_video.setter
    def remove_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_video", value)


@pulumi.input_type
class AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 sample_rate: pulumi.Input[int],
                 audio_channel: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)


@pulumi.input_type
class AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 fps: pulumi.Input[int],
                 fill_type: Optional[pulumi.Input[str]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def fps(self) -> pulumi.Input[int]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: pulumi.Input[int]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class AiAnalysisTemplateClassificationConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class AiAnalysisTemplateCoverConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class AiAnalysisTemplateFrameTagConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class AiAnalysisTemplateTagConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class AiRecognitionTemplateAsrFullTextConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 subtitle_format: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if subtitle_format is not None:
            pulumi.set(__self__, "subtitle_format", subtitle_format)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="subtitleFormat")
    def subtitle_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle_format")

    @subtitle_format.setter
    def subtitle_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle_format", value)


@pulumi.input_type
class AiRecognitionTemplateAsrWordsConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "switch", switch)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_sets")

    @label_sets.setter
    def label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_sets", value)


@pulumi.input_type
class AiRecognitionTemplateFaceConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 default_library_label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 face_library: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[float]] = None,
                 user_define_library_label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "switch", switch)
        if default_library_label_sets is not None:
            pulumi.set(__self__, "default_library_label_sets", default_library_label_sets)
        if face_library is not None:
            pulumi.set(__self__, "face_library", face_library)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if user_define_library_label_sets is not None:
            pulumi.set(__self__, "user_define_library_label_sets", user_define_library_label_sets)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="defaultLibraryLabelSets")
    def default_library_label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "default_library_label_sets")

    @default_library_label_sets.setter
    def default_library_label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_library_label_sets", value)

    @property
    @pulumi.getter(name="faceLibrary")
    def face_library(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "face_library")

    @face_library.setter
    def face_library(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "face_library", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter(name="userDefineLibraryLabelSets")
    def user_define_library_label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_define_library_label_sets")

    @user_define_library_label_sets.setter
    def user_define_library_label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_define_library_label_sets", value)


@pulumi.input_type
class AiRecognitionTemplateOcrFullTextConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class AiRecognitionTemplateOcrWordsConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "switch", switch)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_sets")

    @label_sets.setter
    def label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_sets", value)


@pulumi.input_type
class ContentReviewTemplatePoliticalConfigureArgs:
    def __init__(__self__, *,
                 asr_review_info: Optional[pulumi.Input['ContentReviewTemplatePoliticalConfigureAsrReviewInfoArgs']] = None,
                 img_review_info: Optional[pulumi.Input['ContentReviewTemplatePoliticalConfigureImgReviewInfoArgs']] = None,
                 ocr_review_info: Optional[pulumi.Input['ContentReviewTemplatePoliticalConfigureOcrReviewInfoArgs']] = None):
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if img_review_info is not None:
            pulumi.set(__self__, "img_review_info", img_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplatePoliticalConfigureAsrReviewInfoArgs']]:
        return pulumi.get(self, "asr_review_info")

    @asr_review_info.setter
    def asr_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplatePoliticalConfigureAsrReviewInfoArgs']]):
        pulumi.set(self, "asr_review_info", value)

    @property
    @pulumi.getter(name="imgReviewInfo")
    def img_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplatePoliticalConfigureImgReviewInfoArgs']]:
        return pulumi.get(self, "img_review_info")

    @img_review_info.setter
    def img_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplatePoliticalConfigureImgReviewInfoArgs']]):
        pulumi.set(self, "img_review_info", value)

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplatePoliticalConfigureOcrReviewInfoArgs']]:
        return pulumi.get(self, "ocr_review_info")

    @ocr_review_info.setter
    def ocr_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplatePoliticalConfigureOcrReviewInfoArgs']]):
        pulumi.set(self, "ocr_review_info", value)


@pulumi.input_type
class ContentReviewTemplatePoliticalConfigureAsrReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplatePoliticalConfigureImgReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_sets")

    @label_sets.setter
    def label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_sets", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplatePoliticalConfigureOcrReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplatePornConfigureArgs:
    def __init__(__self__, *,
                 asr_review_info: Optional[pulumi.Input['ContentReviewTemplatePornConfigureAsrReviewInfoArgs']] = None,
                 img_review_info: Optional[pulumi.Input['ContentReviewTemplatePornConfigureImgReviewInfoArgs']] = None,
                 ocr_review_info: Optional[pulumi.Input['ContentReviewTemplatePornConfigureOcrReviewInfoArgs']] = None):
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if img_review_info is not None:
            pulumi.set(__self__, "img_review_info", img_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplatePornConfigureAsrReviewInfoArgs']]:
        return pulumi.get(self, "asr_review_info")

    @asr_review_info.setter
    def asr_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplatePornConfigureAsrReviewInfoArgs']]):
        pulumi.set(self, "asr_review_info", value)

    @property
    @pulumi.getter(name="imgReviewInfo")
    def img_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplatePornConfigureImgReviewInfoArgs']]:
        return pulumi.get(self, "img_review_info")

    @img_review_info.setter
    def img_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplatePornConfigureImgReviewInfoArgs']]):
        pulumi.set(self, "img_review_info", value)

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplatePornConfigureOcrReviewInfoArgs']]:
        return pulumi.get(self, "ocr_review_info")

    @ocr_review_info.setter
    def ocr_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplatePornConfigureOcrReviewInfoArgs']]):
        pulumi.set(self, "ocr_review_info", value)


@pulumi.input_type
class ContentReviewTemplatePornConfigureAsrReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplatePornConfigureImgReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_sets")

    @label_sets.setter
    def label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_sets", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplatePornConfigureOcrReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplateProhibitedConfigureArgs:
    def __init__(__self__, *,
                 asr_review_info: Optional[pulumi.Input['ContentReviewTemplateProhibitedConfigureAsrReviewInfoArgs']] = None,
                 ocr_review_info: Optional[pulumi.Input['ContentReviewTemplateProhibitedConfigureOcrReviewInfoArgs']] = None):
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplateProhibitedConfigureAsrReviewInfoArgs']]:
        return pulumi.get(self, "asr_review_info")

    @asr_review_info.setter
    def asr_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplateProhibitedConfigureAsrReviewInfoArgs']]):
        pulumi.set(self, "asr_review_info", value)

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplateProhibitedConfigureOcrReviewInfoArgs']]:
        return pulumi.get(self, "ocr_review_info")

    @ocr_review_info.setter
    def ocr_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplateProhibitedConfigureOcrReviewInfoArgs']]):
        pulumi.set(self, "ocr_review_info", value)


@pulumi.input_type
class ContentReviewTemplateProhibitedConfigureAsrReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplateProhibitedConfigureOcrReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplateTerrorismConfigureArgs:
    def __init__(__self__, *,
                 ocr_review_info: pulumi.Input['ContentReviewTemplateTerrorismConfigureOcrReviewInfoArgs'],
                 img_review_info: Optional[pulumi.Input['ContentReviewTemplateTerrorismConfigureImgReviewInfoArgs']] = None):
        pulumi.set(__self__, "ocr_review_info", ocr_review_info)
        if img_review_info is not None:
            pulumi.set(__self__, "img_review_info", img_review_info)

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> pulumi.Input['ContentReviewTemplateTerrorismConfigureOcrReviewInfoArgs']:
        return pulumi.get(self, "ocr_review_info")

    @ocr_review_info.setter
    def ocr_review_info(self, value: pulumi.Input['ContentReviewTemplateTerrorismConfigureOcrReviewInfoArgs']):
        pulumi.set(self, "ocr_review_info", value)

    @property
    @pulumi.getter(name="imgReviewInfo")
    def img_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplateTerrorismConfigureImgReviewInfoArgs']]:
        return pulumi.get(self, "img_review_info")

    @img_review_info.setter
    def img_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplateTerrorismConfigureImgReviewInfoArgs']]):
        pulumi.set(self, "img_review_info", value)


@pulumi.input_type
class ContentReviewTemplateTerrorismConfigureImgReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_sets")

    @label_sets.setter
    def label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_sets", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplateTerrorismConfigureOcrReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplateUserDefineConfigureArgs:
    def __init__(__self__, *,
                 asr_review_info: Optional[pulumi.Input['ContentReviewTemplateUserDefineConfigureAsrReviewInfoArgs']] = None,
                 face_review_info: Optional[pulumi.Input['ContentReviewTemplateUserDefineConfigureFaceReviewInfoArgs']] = None,
                 ocr_review_info: Optional[pulumi.Input['ContentReviewTemplateUserDefineConfigureOcrReviewInfoArgs']] = None):
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if face_review_info is not None:
            pulumi.set(__self__, "face_review_info", face_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplateUserDefineConfigureAsrReviewInfoArgs']]:
        return pulumi.get(self, "asr_review_info")

    @asr_review_info.setter
    def asr_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplateUserDefineConfigureAsrReviewInfoArgs']]):
        pulumi.set(self, "asr_review_info", value)

    @property
    @pulumi.getter(name="faceReviewInfo")
    def face_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplateUserDefineConfigureFaceReviewInfoArgs']]:
        return pulumi.get(self, "face_review_info")

    @face_review_info.setter
    def face_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplateUserDefineConfigureFaceReviewInfoArgs']]):
        pulumi.set(self, "face_review_info", value)

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional[pulumi.Input['ContentReviewTemplateUserDefineConfigureOcrReviewInfoArgs']]:
        return pulumi.get(self, "ocr_review_info")

    @ocr_review_info.setter
    def ocr_review_info(self, value: Optional[pulumi.Input['ContentReviewTemplateUserDefineConfigureOcrReviewInfoArgs']]):
        pulumi.set(self, "ocr_review_info", value)


@pulumi.input_type
class ContentReviewTemplateUserDefineConfigureAsrReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_sets")

    @label_sets.setter
    def label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_sets", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplateUserDefineConfigureFaceReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_sets")

    @label_sets.setter
    def label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_sets", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class ContentReviewTemplateUserDefineConfigureOcrReviewInfoArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 block_confidence: Optional[pulumi.Input[int]] = None,
                 label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 review_confidence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_confidence")

    @block_confidence.setter
    def block_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_confidence", value)

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_sets")

    @label_sets.setter
    def label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_sets", value)

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "review_confidence")

    @review_confidence.setter
    def review_confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "review_confidence", value)


@pulumi.input_type
class EditMediaOperationFileInfoArgs:
    def __init__(__self__, *,
                 input_info: pulumi.Input['EditMediaOperationFileInfoInputInfoArgs'],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "input_info", input_info)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="inputInfo")
    def input_info(self) -> pulumi.Input['EditMediaOperationFileInfoInputInfoArgs']:
        return pulumi.get(self, "input_info")

    @input_info.setter
    def input_info(self, value: pulumi.Input['EditMediaOperationFileInfoInputInfoArgs']):
        pulumi.set(self, "input_info", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)


@pulumi.input_type
class EditMediaOperationFileInfoInputInfoArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['EditMediaOperationFileInfoInputInfoCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['EditMediaOperationFileInfoInputInfoS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['EditMediaOperationFileInfoInputInfoUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['EditMediaOperationFileInfoInputInfoCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['EditMediaOperationFileInfoInputInfoCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['EditMediaOperationFileInfoInputInfoS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['EditMediaOperationFileInfoInputInfoS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['EditMediaOperationFileInfoInputInfoUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['EditMediaOperationFileInfoInputInfoUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class EditMediaOperationFileInfoInputInfoCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class EditMediaOperationFileInfoInputInfoS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class EditMediaOperationFileInfoInputInfoUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class EditMediaOperationOutputConfigArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class EditMediaOperationOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['EditMediaOperationOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['EditMediaOperationOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['EditMediaOperationOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['EditMediaOperationOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['EditMediaOperationOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['EditMediaOperationOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class EditMediaOperationOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class EditMediaOperationOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class EditMediaOperationTaskNotifyConfigArgs:
    def __init__(__self__, *,
                 aws_sqs: Optional[pulumi.Input['EditMediaOperationTaskNotifyConfigAwsSqsArgs']] = None,
                 cmq_model: Optional[pulumi.Input[str]] = None,
                 cmq_region: Optional[pulumi.Input[str]] = None,
                 notify_mode: Optional[pulumi.Input[str]] = None,
                 notify_type: Optional[pulumi.Input[str]] = None,
                 notify_url: Optional[pulumi.Input[str]] = None,
                 queue_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional[pulumi.Input['EditMediaOperationTaskNotifyConfigAwsSqsArgs']]:
        return pulumi.get(self, "aws_sqs")

    @aws_sqs.setter
    def aws_sqs(self, value: Optional[pulumi.Input['EditMediaOperationTaskNotifyConfigAwsSqsArgs']]):
        pulumi.set(self, "aws_sqs", value)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_model")

    @cmq_model.setter
    def cmq_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_model", value)

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_region")

    @cmq_region.setter
    def cmq_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_region", value)

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_mode")

    @notify_mode.setter
    def notify_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_mode", value)

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_type")

    @notify_type.setter
    def notify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_type", value)

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_url")

    @notify_url.setter
    def notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_url", value)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class EditMediaOperationTaskNotifyConfigAwsSqsArgs:
    def __init__(__self__, *,
                 sqs_queue_name: pulumi.Input[str],
                 sqs_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sqs_queue_name")

    @sqs_queue_name.setter
    def sqs_queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sqs_queue_name", value)

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sqs_region")

    @sqs_region.setter
    def sqs_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "sqs_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class FlowInputGroupArgs:
    def __init__(__self__, *,
                 input_name: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 allow_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fail_over: Optional[pulumi.Input[str]] = None,
                 hls_pull_settings: Optional[pulumi.Input['FlowInputGroupHlsPullSettingsArgs']] = None,
                 resilient_stream: Optional[pulumi.Input['FlowInputGroupResilientStreamArgs']] = None,
                 rtmp_pull_settings: Optional[pulumi.Input['FlowInputGroupRtmpPullSettingsArgs']] = None,
                 rtp_settings: Optional[pulumi.Input['FlowInputGroupRtpSettingsArgs']] = None,
                 rtsp_pull_settings: Optional[pulumi.Input['FlowInputGroupRtspPullSettingsArgs']] = None,
                 srt_settings: Optional[pulumi.Input['FlowInputGroupSrtSettingsArgs']] = None):
        pulumi.set(__self__, "input_name", input_name)
        pulumi.set(__self__, "protocol", protocol)
        if allow_ip_lists is not None:
            pulumi.set(__self__, "allow_ip_lists", allow_ip_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fail_over is not None:
            pulumi.set(__self__, "fail_over", fail_over)
        if hls_pull_settings is not None:
            pulumi.set(__self__, "hls_pull_settings", hls_pull_settings)
        if resilient_stream is not None:
            pulumi.set(__self__, "resilient_stream", resilient_stream)
        if rtmp_pull_settings is not None:
            pulumi.set(__self__, "rtmp_pull_settings", rtmp_pull_settings)
        if rtp_settings is not None:
            pulumi.set(__self__, "rtp_settings", rtp_settings)
        if rtsp_pull_settings is not None:
            pulumi.set(__self__, "rtsp_pull_settings", rtsp_pull_settings)
        if srt_settings is not None:
            pulumi.set(__self__, "srt_settings", srt_settings)

    @property
    @pulumi.getter(name="inputName")
    def input_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "input_name")

    @input_name.setter
    def input_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "input_name", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="allowIpLists")
    def allow_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allow_ip_lists")

    @allow_ip_lists.setter
    def allow_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_ip_lists", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="failOver")
    def fail_over(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fail_over")

    @fail_over.setter
    def fail_over(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_over", value)

    @property
    @pulumi.getter(name="hlsPullSettings")
    def hls_pull_settings(self) -> Optional[pulumi.Input['FlowInputGroupHlsPullSettingsArgs']]:
        return pulumi.get(self, "hls_pull_settings")

    @hls_pull_settings.setter
    def hls_pull_settings(self, value: Optional[pulumi.Input['FlowInputGroupHlsPullSettingsArgs']]):
        pulumi.set(self, "hls_pull_settings", value)

    @property
    @pulumi.getter(name="resilientStream")
    def resilient_stream(self) -> Optional[pulumi.Input['FlowInputGroupResilientStreamArgs']]:
        return pulumi.get(self, "resilient_stream")

    @resilient_stream.setter
    def resilient_stream(self, value: Optional[pulumi.Input['FlowInputGroupResilientStreamArgs']]):
        pulumi.set(self, "resilient_stream", value)

    @property
    @pulumi.getter(name="rtmpPullSettings")
    def rtmp_pull_settings(self) -> Optional[pulumi.Input['FlowInputGroupRtmpPullSettingsArgs']]:
        return pulumi.get(self, "rtmp_pull_settings")

    @rtmp_pull_settings.setter
    def rtmp_pull_settings(self, value: Optional[pulumi.Input['FlowInputGroupRtmpPullSettingsArgs']]):
        pulumi.set(self, "rtmp_pull_settings", value)

    @property
    @pulumi.getter(name="rtpSettings")
    def rtp_settings(self) -> Optional[pulumi.Input['FlowInputGroupRtpSettingsArgs']]:
        return pulumi.get(self, "rtp_settings")

    @rtp_settings.setter
    def rtp_settings(self, value: Optional[pulumi.Input['FlowInputGroupRtpSettingsArgs']]):
        pulumi.set(self, "rtp_settings", value)

    @property
    @pulumi.getter(name="rtspPullSettings")
    def rtsp_pull_settings(self) -> Optional[pulumi.Input['FlowInputGroupRtspPullSettingsArgs']]:
        return pulumi.get(self, "rtsp_pull_settings")

    @rtsp_pull_settings.setter
    def rtsp_pull_settings(self, value: Optional[pulumi.Input['FlowInputGroupRtspPullSettingsArgs']]):
        pulumi.set(self, "rtsp_pull_settings", value)

    @property
    @pulumi.getter(name="srtSettings")
    def srt_settings(self) -> Optional[pulumi.Input['FlowInputGroupSrtSettingsArgs']]:
        return pulumi.get(self, "srt_settings")

    @srt_settings.setter
    def srt_settings(self, value: Optional[pulumi.Input['FlowInputGroupSrtSettingsArgs']]):
        pulumi.set(self, "srt_settings", value)


@pulumi.input_type
class FlowInputGroupHlsPullSettingsArgs:
    def __init__(__self__, *,
                 source_addresses: pulumi.Input[Sequence[pulumi.Input['FlowInputGroupHlsPullSettingsSourceAddressArgs']]]):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> pulumi.Input[Sequence[pulumi.Input['FlowInputGroupHlsPullSettingsSourceAddressArgs']]]:
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: pulumi.Input[Sequence[pulumi.Input['FlowInputGroupHlsPullSettingsSourceAddressArgs']]]):
        pulumi.set(self, "source_addresses", value)


@pulumi.input_type
class FlowInputGroupHlsPullSettingsSourceAddressArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class FlowInputGroupResilientStreamArgs:
    def __init__(__self__, *,
                 buffer_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[bool]] = None):
        if buffer_time is not None:
            pulumi.set(__self__, "buffer_time", buffer_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="bufferTime")
    def buffer_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "buffer_time")

    @buffer_time.setter
    def buffer_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "buffer_time", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class FlowInputGroupRtmpPullSettingsArgs:
    def __init__(__self__, *,
                 source_addresses: pulumi.Input[Sequence[pulumi.Input['FlowInputGroupRtmpPullSettingsSourceAddressArgs']]]):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> pulumi.Input[Sequence[pulumi.Input['FlowInputGroupRtmpPullSettingsSourceAddressArgs']]]:
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: pulumi.Input[Sequence[pulumi.Input['FlowInputGroupRtmpPullSettingsSourceAddressArgs']]]):
        pulumi.set(self, "source_addresses", value)


@pulumi.input_type
class FlowInputGroupRtmpPullSettingsSourceAddressArgs:
    def __init__(__self__, *,
                 stream_key: pulumi.Input[str],
                 tc_url: pulumi.Input[str]):
        pulumi.set(__self__, "stream_key", stream_key)
        pulumi.set(__self__, "tc_url", tc_url)

    @property
    @pulumi.getter(name="streamKey")
    def stream_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_key")

    @stream_key.setter
    def stream_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_key", value)

    @property
    @pulumi.getter(name="tcUrl")
    def tc_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tc_url")

    @tc_url.setter
    def tc_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "tc_url", value)


@pulumi.input_type
class FlowInputGroupRtpSettingsArgs:
    def __init__(__self__, *,
                 fec: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None):
        if fec is not None:
            pulumi.set(__self__, "fec", fec)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter
    def fec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec")

    @fec.setter
    def fec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)


@pulumi.input_type
class FlowInputGroupRtspPullSettingsArgs:
    def __init__(__self__, *,
                 source_addresses: pulumi.Input[Sequence[pulumi.Input['FlowInputGroupRtspPullSettingsSourceAddressArgs']]]):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> pulumi.Input[Sequence[pulumi.Input['FlowInputGroupRtspPullSettingsSourceAddressArgs']]]:
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: pulumi.Input[Sequence[pulumi.Input['FlowInputGroupRtspPullSettingsSourceAddressArgs']]]):
        pulumi.set(self, "source_addresses", value)


@pulumi.input_type
class FlowInputGroupRtspPullSettingsSourceAddressArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class FlowInputGroupSrtSettingsArgs:
    def __init__(__self__, *,
                 latency: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pb_key_len: Optional[pulumi.Input[int]] = None,
                 peer_idle_timeout: Optional[pulumi.Input[int]] = None,
                 peer_latency: Optional[pulumi.Input[int]] = None,
                 recv_latency: Optional[pulumi.Input[int]] = None,
                 source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['FlowInputGroupSrtSettingsSourceAddressArgs']]]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None):
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pb_key_len is not None:
            pulumi.set(__self__, "pb_key_len", pb_key_len)
        if peer_idle_timeout is not None:
            pulumi.set(__self__, "peer_idle_timeout", peer_idle_timeout)
        if peer_latency is not None:
            pulumi.set(__self__, "peer_latency", peer_latency)
        if recv_latency is not None:
            pulumi.set(__self__, "recv_latency", recv_latency)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="pbKeyLen")
    def pb_key_len(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pb_key_len")

    @pb_key_len.setter
    def pb_key_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pb_key_len", value)

    @property
    @pulumi.getter(name="peerIdleTimeout")
    def peer_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "peer_idle_timeout")

    @peer_idle_timeout.setter
    def peer_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_idle_timeout", value)

    @property
    @pulumi.getter(name="peerLatency")
    def peer_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "peer_latency")

    @peer_latency.setter
    def peer_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_latency", value)

    @property
    @pulumi.getter(name="recvLatency")
    def recv_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "recv_latency")

    @recv_latency.setter
    def recv_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recv_latency", value)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowInputGroupSrtSettingsSourceAddressArgs']]]]:
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowInputGroupSrtSettingsSourceAddressArgs']]]]):
        pulumi.set(self, "source_addresses", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)


@pulumi.input_type
class FlowInputGroupSrtSettingsSourceAddressArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class InputInputGroupArgs:
    def __init__(__self__, *,
                 input_name: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 allow_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fail_over: Optional[pulumi.Input[str]] = None,
                 hls_pull_settings: Optional[pulumi.Input['InputInputGroupHlsPullSettingsArgs']] = None,
                 resilient_stream: Optional[pulumi.Input['InputInputGroupResilientStreamArgs']] = None,
                 rtmp_pull_settings: Optional[pulumi.Input['InputInputGroupRtmpPullSettingsArgs']] = None,
                 rtp_settings: Optional[pulumi.Input['InputInputGroupRtpSettingsArgs']] = None,
                 rtsp_pull_settings: Optional[pulumi.Input['InputInputGroupRtspPullSettingsArgs']] = None,
                 srt_settings: Optional[pulumi.Input['InputInputGroupSrtSettingsArgs']] = None):
        pulumi.set(__self__, "input_name", input_name)
        pulumi.set(__self__, "protocol", protocol)
        if allow_ip_lists is not None:
            pulumi.set(__self__, "allow_ip_lists", allow_ip_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fail_over is not None:
            pulumi.set(__self__, "fail_over", fail_over)
        if hls_pull_settings is not None:
            pulumi.set(__self__, "hls_pull_settings", hls_pull_settings)
        if resilient_stream is not None:
            pulumi.set(__self__, "resilient_stream", resilient_stream)
        if rtmp_pull_settings is not None:
            pulumi.set(__self__, "rtmp_pull_settings", rtmp_pull_settings)
        if rtp_settings is not None:
            pulumi.set(__self__, "rtp_settings", rtp_settings)
        if rtsp_pull_settings is not None:
            pulumi.set(__self__, "rtsp_pull_settings", rtsp_pull_settings)
        if srt_settings is not None:
            pulumi.set(__self__, "srt_settings", srt_settings)

    @property
    @pulumi.getter(name="inputName")
    def input_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "input_name")

    @input_name.setter
    def input_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "input_name", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="allowIpLists")
    def allow_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allow_ip_lists")

    @allow_ip_lists.setter
    def allow_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_ip_lists", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="failOver")
    def fail_over(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fail_over")

    @fail_over.setter
    def fail_over(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_over", value)

    @property
    @pulumi.getter(name="hlsPullSettings")
    def hls_pull_settings(self) -> Optional[pulumi.Input['InputInputGroupHlsPullSettingsArgs']]:
        return pulumi.get(self, "hls_pull_settings")

    @hls_pull_settings.setter
    def hls_pull_settings(self, value: Optional[pulumi.Input['InputInputGroupHlsPullSettingsArgs']]):
        pulumi.set(self, "hls_pull_settings", value)

    @property
    @pulumi.getter(name="resilientStream")
    def resilient_stream(self) -> Optional[pulumi.Input['InputInputGroupResilientStreamArgs']]:
        return pulumi.get(self, "resilient_stream")

    @resilient_stream.setter
    def resilient_stream(self, value: Optional[pulumi.Input['InputInputGroupResilientStreamArgs']]):
        pulumi.set(self, "resilient_stream", value)

    @property
    @pulumi.getter(name="rtmpPullSettings")
    def rtmp_pull_settings(self) -> Optional[pulumi.Input['InputInputGroupRtmpPullSettingsArgs']]:
        return pulumi.get(self, "rtmp_pull_settings")

    @rtmp_pull_settings.setter
    def rtmp_pull_settings(self, value: Optional[pulumi.Input['InputInputGroupRtmpPullSettingsArgs']]):
        pulumi.set(self, "rtmp_pull_settings", value)

    @property
    @pulumi.getter(name="rtpSettings")
    def rtp_settings(self) -> Optional[pulumi.Input['InputInputGroupRtpSettingsArgs']]:
        return pulumi.get(self, "rtp_settings")

    @rtp_settings.setter
    def rtp_settings(self, value: Optional[pulumi.Input['InputInputGroupRtpSettingsArgs']]):
        pulumi.set(self, "rtp_settings", value)

    @property
    @pulumi.getter(name="rtspPullSettings")
    def rtsp_pull_settings(self) -> Optional[pulumi.Input['InputInputGroupRtspPullSettingsArgs']]:
        return pulumi.get(self, "rtsp_pull_settings")

    @rtsp_pull_settings.setter
    def rtsp_pull_settings(self, value: Optional[pulumi.Input['InputInputGroupRtspPullSettingsArgs']]):
        pulumi.set(self, "rtsp_pull_settings", value)

    @property
    @pulumi.getter(name="srtSettings")
    def srt_settings(self) -> Optional[pulumi.Input['InputInputGroupSrtSettingsArgs']]:
        return pulumi.get(self, "srt_settings")

    @srt_settings.setter
    def srt_settings(self, value: Optional[pulumi.Input['InputInputGroupSrtSettingsArgs']]):
        pulumi.set(self, "srt_settings", value)


@pulumi.input_type
class InputInputGroupHlsPullSettingsArgs:
    def __init__(__self__, *,
                 source_addresses: pulumi.Input[Sequence[pulumi.Input['InputInputGroupHlsPullSettingsSourceAddressArgs']]]):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> pulumi.Input[Sequence[pulumi.Input['InputInputGroupHlsPullSettingsSourceAddressArgs']]]:
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: pulumi.Input[Sequence[pulumi.Input['InputInputGroupHlsPullSettingsSourceAddressArgs']]]):
        pulumi.set(self, "source_addresses", value)


@pulumi.input_type
class InputInputGroupHlsPullSettingsSourceAddressArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class InputInputGroupResilientStreamArgs:
    def __init__(__self__, *,
                 buffer_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[bool]] = None):
        if buffer_time is not None:
            pulumi.set(__self__, "buffer_time", buffer_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="bufferTime")
    def buffer_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "buffer_time")

    @buffer_time.setter
    def buffer_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "buffer_time", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class InputInputGroupRtmpPullSettingsArgs:
    def __init__(__self__, *,
                 source_addresses: pulumi.Input[Sequence[pulumi.Input['InputInputGroupRtmpPullSettingsSourceAddressArgs']]]):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> pulumi.Input[Sequence[pulumi.Input['InputInputGroupRtmpPullSettingsSourceAddressArgs']]]:
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: pulumi.Input[Sequence[pulumi.Input['InputInputGroupRtmpPullSettingsSourceAddressArgs']]]):
        pulumi.set(self, "source_addresses", value)


@pulumi.input_type
class InputInputGroupRtmpPullSettingsSourceAddressArgs:
    def __init__(__self__, *,
                 stream_key: pulumi.Input[str],
                 tc_url: pulumi.Input[str]):
        pulumi.set(__self__, "stream_key", stream_key)
        pulumi.set(__self__, "tc_url", tc_url)

    @property
    @pulumi.getter(name="streamKey")
    def stream_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_key")

    @stream_key.setter
    def stream_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_key", value)

    @property
    @pulumi.getter(name="tcUrl")
    def tc_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tc_url")

    @tc_url.setter
    def tc_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "tc_url", value)


@pulumi.input_type
class InputInputGroupRtpSettingsArgs:
    def __init__(__self__, *,
                 fec: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None):
        if fec is not None:
            pulumi.set(__self__, "fec", fec)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter
    def fec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec")

    @fec.setter
    def fec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)


@pulumi.input_type
class InputInputGroupRtspPullSettingsArgs:
    def __init__(__self__, *,
                 source_addresses: pulumi.Input[Sequence[pulumi.Input['InputInputGroupRtspPullSettingsSourceAddressArgs']]]):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> pulumi.Input[Sequence[pulumi.Input['InputInputGroupRtspPullSettingsSourceAddressArgs']]]:
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: pulumi.Input[Sequence[pulumi.Input['InputInputGroupRtspPullSettingsSourceAddressArgs']]]):
        pulumi.set(self, "source_addresses", value)


@pulumi.input_type
class InputInputGroupRtspPullSettingsSourceAddressArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class InputInputGroupSrtSettingsArgs:
    def __init__(__self__, *,
                 latency: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pb_key_len: Optional[pulumi.Input[int]] = None,
                 peer_idle_timeout: Optional[pulumi.Input[int]] = None,
                 peer_latency: Optional[pulumi.Input[int]] = None,
                 recv_latency: Optional[pulumi.Input[int]] = None,
                 source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InputInputGroupSrtSettingsSourceAddressArgs']]]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None):
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pb_key_len is not None:
            pulumi.set(__self__, "pb_key_len", pb_key_len)
        if peer_idle_timeout is not None:
            pulumi.set(__self__, "peer_idle_timeout", peer_idle_timeout)
        if peer_latency is not None:
            pulumi.set(__self__, "peer_latency", peer_latency)
        if recv_latency is not None:
            pulumi.set(__self__, "recv_latency", recv_latency)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="pbKeyLen")
    def pb_key_len(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pb_key_len")

    @pb_key_len.setter
    def pb_key_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pb_key_len", value)

    @property
    @pulumi.getter(name="peerIdleTimeout")
    def peer_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "peer_idle_timeout")

    @peer_idle_timeout.setter
    def peer_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_idle_timeout", value)

    @property
    @pulumi.getter(name="peerLatency")
    def peer_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "peer_latency")

    @peer_latency.setter
    def peer_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_latency", value)

    @property
    @pulumi.getter(name="recvLatency")
    def recv_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "recv_latency")

    @recv_latency.setter
    def recv_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recv_latency", value)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InputInputGroupSrtSettingsSourceAddressArgs']]]]:
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InputInputGroupSrtSettingsSourceAddressArgs']]]]):
        pulumi.set(self, "source_addresses", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)


@pulumi.input_type
class InputInputGroupSrtSettingsSourceAddressArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class OutputOutputArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 output_name: pulumi.Input[str],
                 output_region: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 allow_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_concurrent: Optional[pulumi.Input[int]] = None,
                 rtmp_settings: Optional[pulumi.Input['OutputOutputRtmpSettingsArgs']] = None,
                 rtp_settings: Optional[pulumi.Input['OutputOutputRtpSettingsArgs']] = None,
                 srt_settings: Optional[pulumi.Input['OutputOutputSrtSettingsArgs']] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "output_name", output_name)
        pulumi.set(__self__, "output_region", output_region)
        pulumi.set(__self__, "protocol", protocol)
        if allow_ip_lists is not None:
            pulumi.set(__self__, "allow_ip_lists", allow_ip_lists)
        if max_concurrent is not None:
            pulumi.set(__self__, "max_concurrent", max_concurrent)
        if rtmp_settings is not None:
            pulumi.set(__self__, "rtmp_settings", rtmp_settings)
        if rtp_settings is not None:
            pulumi.set(__self__, "rtp_settings", rtp_settings)
        if srt_settings is not None:
            pulumi.set(__self__, "srt_settings", srt_settings)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="outputName")
    def output_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "output_name")

    @output_name.setter
    def output_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "output_name", value)

    @property
    @pulumi.getter(name="outputRegion")
    def output_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "output_region")

    @output_region.setter
    def output_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "output_region", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="allowIpLists")
    def allow_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allow_ip_lists")

    @allow_ip_lists.setter
    def allow_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_ip_lists", value)

    @property
    @pulumi.getter(name="maxConcurrent")
    def max_concurrent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent")

    @max_concurrent.setter
    def max_concurrent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent", value)

    @property
    @pulumi.getter(name="rtmpSettings")
    def rtmp_settings(self) -> Optional[pulumi.Input['OutputOutputRtmpSettingsArgs']]:
        return pulumi.get(self, "rtmp_settings")

    @rtmp_settings.setter
    def rtmp_settings(self, value: Optional[pulumi.Input['OutputOutputRtmpSettingsArgs']]):
        pulumi.set(self, "rtmp_settings", value)

    @property
    @pulumi.getter(name="rtpSettings")
    def rtp_settings(self) -> Optional[pulumi.Input['OutputOutputRtpSettingsArgs']]:
        return pulumi.get(self, "rtp_settings")

    @rtp_settings.setter
    def rtp_settings(self, value: Optional[pulumi.Input['OutputOutputRtpSettingsArgs']]):
        pulumi.set(self, "rtp_settings", value)

    @property
    @pulumi.getter(name="srtSettings")
    def srt_settings(self) -> Optional[pulumi.Input['OutputOutputSrtSettingsArgs']]:
        return pulumi.get(self, "srt_settings")

    @srt_settings.setter
    def srt_settings(self, value: Optional[pulumi.Input['OutputOutputSrtSettingsArgs']]):
        pulumi.set(self, "srt_settings", value)


@pulumi.input_type
class OutputOutputRtmpSettingsArgs:
    def __init__(__self__, *,
                 destinations: pulumi.Input[Sequence[pulumi.Input['OutputOutputRtmpSettingsDestinationArgs']]],
                 chunk_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "destinations", destinations)
        if chunk_size is not None:
            pulumi.set(__self__, "chunk_size", chunk_size)

    @property
    @pulumi.getter
    def destinations(self) -> pulumi.Input[Sequence[pulumi.Input['OutputOutputRtmpSettingsDestinationArgs']]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: pulumi.Input[Sequence[pulumi.Input['OutputOutputRtmpSettingsDestinationArgs']]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="chunkSize")
    def chunk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "chunk_size")

    @chunk_size.setter
    def chunk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "chunk_size", value)


@pulumi.input_type
class OutputOutputRtmpSettingsDestinationArgs:
    def __init__(__self__, *,
                 stream_key: pulumi.Input[str],
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "stream_key", stream_key)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="streamKey")
    def stream_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_key")

    @stream_key.setter
    def stream_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_key", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class OutputOutputRtpSettingsArgs:
    def __init__(__self__, *,
                 destinations: pulumi.Input[Sequence[pulumi.Input['OutputOutputRtpSettingsDestinationArgs']]],
                 fec: pulumi.Input[str],
                 idle_timeout: pulumi.Input[int]):
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "fec", fec)
        pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter
    def destinations(self) -> pulumi.Input[Sequence[pulumi.Input['OutputOutputRtpSettingsDestinationArgs']]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: pulumi.Input[Sequence[pulumi.Input['OutputOutputRtpSettingsDestinationArgs']]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def fec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fec")

    @fec.setter
    def fec(self, value: pulumi.Input[str]):
        pulumi.set(self, "fec", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "idle_timeout", value)


@pulumi.input_type
class OutputOutputRtpSettingsDestinationArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class OutputOutputSrtSettingsArgs:
    def __init__(__self__, *,
                 destinations: pulumi.Input[Sequence[pulumi.Input['OutputOutputSrtSettingsDestinationArgs']]],
                 latency: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 pb_key_len: Optional[pulumi.Input[int]] = None,
                 peer_idle_timeout: Optional[pulumi.Input[int]] = None,
                 peer_latency: Optional[pulumi.Input[int]] = None,
                 recv_latency: Optional[pulumi.Input[int]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destinations", destinations)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pb_key_len is not None:
            pulumi.set(__self__, "pb_key_len", pb_key_len)
        if peer_idle_timeout is not None:
            pulumi.set(__self__, "peer_idle_timeout", peer_idle_timeout)
        if peer_latency is not None:
            pulumi.set(__self__, "peer_latency", peer_latency)
        if recv_latency is not None:
            pulumi.set(__self__, "recv_latency", recv_latency)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def destinations(self) -> pulumi.Input[Sequence[pulumi.Input['OutputOutputSrtSettingsDestinationArgs']]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: pulumi.Input[Sequence[pulumi.Input['OutputOutputSrtSettingsDestinationArgs']]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="pbKeyLen")
    def pb_key_len(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pb_key_len")

    @pb_key_len.setter
    def pb_key_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pb_key_len", value)

    @property
    @pulumi.getter(name="peerIdleTimeout")
    def peer_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "peer_idle_timeout")

    @peer_idle_timeout.setter
    def peer_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_idle_timeout", value)

    @property
    @pulumi.getter(name="peerLatency")
    def peer_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "peer_latency")

    @peer_latency.setter
    def peer_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_latency", value)

    @property
    @pulumi.getter(name="recvLatency")
    def recv_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "recv_latency")

    @recv_latency.setter
    def recv_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recv_latency", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)


@pulumi.input_type
class OutputOutputSrtSettingsDestinationArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ProcessLiveStreamOperationAiAnalysisTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 extended_parameter: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_parameter")

    @extended_parameter.setter
    def extended_parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_parameter", value)


@pulumi.input_type
class ProcessLiveStreamOperationAiContentReviewTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int]):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class ProcessLiveStreamOperationAiQualityControlTaskArgs:
    def __init__(__self__, *,
                 channel_ext_para: Optional[pulumi.Input[str]] = None,
                 definition: Optional[pulumi.Input[int]] = None):
        if channel_ext_para is not None:
            pulumi.set(__self__, "channel_ext_para", channel_ext_para)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter(name="channelExtPara")
    def channel_ext_para(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_ext_para")

    @channel_ext_para.setter
    def channel_ext_para(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_ext_para", value)

    @property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class ProcessLiveStreamOperationAiRecognitionTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int]):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class ProcessLiveStreamOperationOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ProcessLiveStreamOperationOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessLiveStreamOperationOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessLiveStreamOperationTaskNotifyConfigArgs:
    def __init__(__self__, *,
                 cmq_model: Optional[pulumi.Input[str]] = None,
                 cmq_region: Optional[pulumi.Input[str]] = None,
                 notify_type: Optional[pulumi.Input[str]] = None,
                 notify_url: Optional[pulumi.Input[str]] = None,
                 queue_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_model")

    @cmq_model.setter
    def cmq_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_model", value)

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_region")

    @cmq_region.setter
    def cmq_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_region", value)

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_type")

    @notify_type.setter
    def notify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_type", value)

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_url")

    @notify_url.setter
    def notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_url", value)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class ProcessMediaOperationAiAnalysisTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 extended_parameter: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_parameter")

    @extended_parameter.setter
    def extended_parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_parameter", value)


@pulumi.input_type
class ProcessMediaOperationAiContentReviewTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int]):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class ProcessMediaOperationAiQualityControlTaskArgs:
    def __init__(__self__, *,
                 channel_ext_para: Optional[pulumi.Input[str]] = None,
                 definition: Optional[pulumi.Input[int]] = None):
        if channel_ext_para is not None:
            pulumi.set(__self__, "channel_ext_para", channel_ext_para)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter(name="channelExtPara")
    def channel_ext_para(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_ext_para")

    @channel_ext_para.setter
    def channel_ext_para(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_ext_para", value)

    @property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class ProcessMediaOperationAiRecognitionTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int]):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class ProcessMediaOperationInputInfoArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ProcessMediaOperationInputInfoCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ProcessMediaOperationInputInfoS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ProcessMediaOperationInputInfoUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationInputInfoCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationInputInfoCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationInputInfoS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationInputInfoS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationInputInfoUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationInputInfoUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ProcessMediaOperationInputInfoCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationInputInfoS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationInputInfoUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskArgs:
    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs']]]] = None,
                 animated_graphic_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetArgs']]]] = None,
                 image_sprite_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetArgs']]]] = None,
                 sample_snapshot_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetArgs']]]] = None,
                 snapshot_by_time_offset_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs']]]] = None,
                 transcode_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetArgs']]]] = None):
        if adaptive_dynamic_streaming_task_sets is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task_sets", adaptive_dynamic_streaming_task_sets)
        if animated_graphic_task_sets is not None:
            pulumi.set(__self__, "animated_graphic_task_sets", animated_graphic_task_sets)
        if image_sprite_task_sets is not None:
            pulumi.set(__self__, "image_sprite_task_sets", image_sprite_task_sets)
        if sample_snapshot_task_sets is not None:
            pulumi.set(__self__, "sample_snapshot_task_sets", sample_snapshot_task_sets)
        if snapshot_by_time_offset_task_sets is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task_sets", snapshot_by_time_offset_task_sets)
        if transcode_task_sets is not None:
            pulumi.set(__self__, "transcode_task_sets", transcode_task_sets)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTaskSets")
    def adaptive_dynamic_streaming_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs']]]]:
        return pulumi.get(self, "adaptive_dynamic_streaming_task_sets")

    @adaptive_dynamic_streaming_task_sets.setter
    def adaptive_dynamic_streaming_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs']]]]):
        pulumi.set(self, "adaptive_dynamic_streaming_task_sets", value)

    @property
    @pulumi.getter(name="animatedGraphicTaskSets")
    def animated_graphic_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetArgs']]]]:
        return pulumi.get(self, "animated_graphic_task_sets")

    @animated_graphic_task_sets.setter
    def animated_graphic_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetArgs']]]]):
        pulumi.set(self, "animated_graphic_task_sets", value)

    @property
    @pulumi.getter(name="imageSpriteTaskSets")
    def image_sprite_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetArgs']]]]:
        return pulumi.get(self, "image_sprite_task_sets")

    @image_sprite_task_sets.setter
    def image_sprite_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetArgs']]]]):
        pulumi.set(self, "image_sprite_task_sets", value)

    @property
    @pulumi.getter(name="sampleSnapshotTaskSets")
    def sample_snapshot_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetArgs']]]]:
        return pulumi.get(self, "sample_snapshot_task_sets")

    @sample_snapshot_task_sets.setter
    def sample_snapshot_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetArgs']]]]):
        pulumi.set(self, "sample_snapshot_task_sets", value)

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTaskSets")
    def snapshot_by_time_offset_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs']]]]:
        return pulumi.get(self, "snapshot_by_time_offset_task_sets")

    @snapshot_by_time_offset_task_sets.setter
    def snapshot_by_time_offset_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs']]]]):
        pulumi.set(self, "snapshot_by_time_offset_task_sets", value)

    @property
    @pulumi.getter(name="transcodeTaskSets")
    def transcode_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetArgs']]]]:
        return pulumi.get(self, "transcode_task_sets")

    @transcode_task_sets.setter
    def transcode_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetArgs']]]]):
        pulumi.set(self, "transcode_task_sets", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 add_on_subtitles: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleArgs']]]] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs']] = None,
                 segment_object_name: Optional[pulumi.Input[str]] = None,
                 sub_stream_object_name: Optional[pulumi.Input[str]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleArgs']]]]:
        return pulumi.get(self, "add_on_subtitles")

    @add_on_subtitles.setter
    def add_on_subtitles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleArgs']]]]):
        pulumi.set(self, "add_on_subtitles", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_object_name")

    @segment_object_name.setter
    def segment_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_object_name", value)

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_stream_object_name")

    @sub_stream_object_name.setter
    def sub_stream_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_stream_object_name", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleArgs:
    def __init__(__self__, *,
                 subtitle: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: pulumi.Input[float],
                 start_time_offset: pulumi.Input[float],
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs']] = None):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 object_number_format: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageArgs']] = None,
                 web_vtt_object_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_vtt_object_name")

    @web_vtt_object_name.setter
    def web_vtt_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_vtt_object_name", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 object_number_format: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs']] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 ext_time_offset_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 object_number_format: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs']] = None,
                 time_offset_sets: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if time_offset_sets is not None:
            pulumi.set(__self__, "time_offset_sets", time_offset_sets)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ext_time_offset_sets")

    @ext_time_offset_sets.setter
    def ext_time_offset_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ext_time_offset_sets", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="timeOffsetSets")
    def time_offset_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "time_offset_sets")

    @time_offset_sets.setter
    def time_offset_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "time_offset_sets", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 head_tail_parameter: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs']] = None,
                 mosaic_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSetArgs']]]] = None,
                 object_number_format: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageArgs']] = None,
                 override_parameter: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterArgs']] = None,
                 raw_parameter: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterArgs']] = None,
                 segment_object_name: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs']]:
        return pulumi.get(self, "head_tail_parameter")

    @head_tail_parameter.setter
    def head_tail_parameter(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs']]):
        pulumi.set(self, "head_tail_parameter", value)

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSetArgs']]]]:
        return pulumi.get(self, "mosaic_sets")

    @mosaic_sets.setter
    def mosaic_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSetArgs']]]]):
        pulumi.set(self, "mosaic_sets", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterArgs']]:
        return pulumi.get(self, "override_parameter")

    @override_parameter.setter
    def override_parameter(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterArgs']]):
        pulumi.set(self, "override_parameter", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_object_name")

    @segment_object_name.setter
    def segment_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_object_name", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs:
    def __init__(__self__, *,
                 head_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs']]]] = None,
                 tail_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs']]]] = None):
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs']]]]:
        return pulumi.get(self, "head_sets")

    @head_sets.setter
    def head_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs']]]]):
        pulumi.set(self, "head_sets", value)

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs']]]]:
        return pulumi.get(self, "tail_sets")

    @tail_sets.setter
    def tail_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs']]]]):
        pulumi.set(self, "tail_sets", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSetArgs:
    def __init__(__self__, *,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 width: Optional[pulumi.Input[str]] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterArgs:
    def __init__(__self__, *,
                 add_on_subtitles: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleArgs']]]] = None,
                 addon_audio_streams: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamArgs']]]] = None,
                 audio_template: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs']] = None,
                 container: Optional[pulumi.Input[str]] = None,
                 remove_audio: Optional[pulumi.Input[int]] = None,
                 remove_video: Optional[pulumi.Input[int]] = None,
                 std_ext_info: Optional[pulumi.Input[str]] = None,
                 subtitle_template: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs']] = None,
                 tehd_config: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs']] = None,
                 video_template: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs']] = None):
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if addon_audio_streams is not None:
            pulumi.set(__self__, "addon_audio_streams", addon_audio_streams)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if std_ext_info is not None:
            pulumi.set(__self__, "std_ext_info", std_ext_info)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleArgs']]]]:
        return pulumi.get(self, "add_on_subtitles")

    @add_on_subtitles.setter
    def add_on_subtitles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleArgs']]]]):
        pulumi.set(self, "add_on_subtitles", value)

    @property
    @pulumi.getter(name="addonAudioStreams")
    def addon_audio_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamArgs']]]]:
        return pulumi.get(self, "addon_audio_streams")

    @addon_audio_streams.setter
    def addon_audio_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamArgs']]]]):
        pulumi.set(self, "addon_audio_streams", value)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs']]:
        return pulumi.get(self, "audio_template")

    @audio_template.setter
    def audio_template(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs']]):
        pulumi.set(self, "audio_template", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_audio")

    @remove_audio.setter
    def remove_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_audio", value)

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_video")

    @remove_video.setter
    def remove_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_video", value)

    @property
    @pulumi.getter(name="stdExtInfo")
    def std_ext_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "std_ext_info")

    @std_ext_info.setter
    def std_ext_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "std_ext_info", value)

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs']]:
        return pulumi.get(self, "subtitle_template")

    @subtitle_template.setter
    def subtitle_template(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs']]):
        pulumi.set(self, "subtitle_template", value)

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs']]:
        return pulumi.get(self, "tehd_config")

    @tehd_config.setter
    def tehd_config(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs']]):
        pulumi.set(self, "tehd_config", value)

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs']]:
        return pulumi.get(self, "video_template")

    @video_template.setter
    def video_template(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs']]):
        pulumi.set(self, "video_template", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleArgs:
    def __init__(__self__, *,
                 subtitle: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs:
    def __init__(__self__, *,
                 audio_channel: Optional[pulumi.Input[int]] = None,
                 bitrate: Optional[pulumi.Input[int]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 stream_selects: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "stream_selects")

    @stream_selects.setter
    def stream_selects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "stream_selects", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs:
    def __init__(__self__, *,
                 font_alpha: Optional[pulumi.Input[float]] = None,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 font_type: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 stream_index: Optional[pulumi.Input[int]] = None):
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "font_alpha")

    @font_alpha.setter
    def font_alpha(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "font_alpha", value)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_type")

    @font_type.setter
    def font_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_type", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stream_index")

    @stream_index.setter
    def stream_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_index", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs:
    def __init__(__self__, *,
                 max_video_bitrate: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_video_bitrate")

    @max_video_bitrate.setter
    def max_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_video_bitrate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs:
    def __init__(__self__, *,
                 bitrate: Optional[pulumi.Input[int]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 content_adapt_stream: Optional[pulumi.Input[int]] = None,
                 fill_type: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[int]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "content_adapt_stream")

    @content_adapt_stream.setter
    def content_adapt_stream(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_adapt_stream", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterArgs:
    def __init__(__self__, *,
                 container: pulumi.Input[str],
                 audio_template: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs']] = None,
                 remove_audio: Optional[pulumi.Input[int]] = None,
                 remove_video: Optional[pulumi.Input[int]] = None,
                 tehd_config: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs']] = None,
                 video_template: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs']] = None):
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs']]:
        return pulumi.get(self, "audio_template")

    @audio_template.setter
    def audio_template(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs']]):
        pulumi.set(self, "audio_template", value)

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_audio")

    @remove_audio.setter
    def remove_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_audio", value)

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_video")

    @remove_video.setter
    def remove_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_video", value)

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs']]:
        return pulumi.get(self, "tehd_config")

    @tehd_config.setter
    def tehd_config(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs']]):
        pulumi.set(self, "tehd_config", value)

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs']]:
        return pulumi.get(self, "video_template")

    @video_template.setter
    def video_template(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs']]):
        pulumi.set(self, "video_template", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 sample_rate: pulumi.Input[int],
                 audio_channel: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 max_video_bitrate: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_video_bitrate")

    @max_video_bitrate.setter
    def max_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_video_bitrate", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 fps: pulumi.Input[int],
                 fill_type: Optional[pulumi.Input[str]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def fps(self) -> pulumi.Input[int]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: pulumi.Input[int]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProcessMediaOperationOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ProcessMediaOperationOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ProcessMediaOperationOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ProcessMediaOperationOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ProcessMediaOperationOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ProcessMediaOperationTaskNotifyConfigArgs:
    def __init__(__self__, *,
                 aws_sqa: Optional[pulumi.Input['ProcessMediaOperationTaskNotifyConfigAwsSqaArgs']] = None,
                 cmq_model: Optional[pulumi.Input[str]] = None,
                 cmq_region: Optional[pulumi.Input[str]] = None,
                 notify_mode: Optional[pulumi.Input[str]] = None,
                 notify_type: Optional[pulumi.Input[str]] = None,
                 notify_url: Optional[pulumi.Input[str]] = None,
                 queue_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        if aws_sqa is not None:
            pulumi.set(__self__, "aws_sqa", aws_sqa)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqa")
    def aws_sqa(self) -> Optional[pulumi.Input['ProcessMediaOperationTaskNotifyConfigAwsSqaArgs']]:
        return pulumi.get(self, "aws_sqa")

    @aws_sqa.setter
    def aws_sqa(self, value: Optional[pulumi.Input['ProcessMediaOperationTaskNotifyConfigAwsSqaArgs']]):
        pulumi.set(self, "aws_sqa", value)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_model")

    @cmq_model.setter
    def cmq_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_model", value)

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_region")

    @cmq_region.setter
    def cmq_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_region", value)

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_mode")

    @notify_mode.setter
    def notify_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_mode", value)

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_type")

    @notify_type.setter
    def notify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_type", value)

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_url")

    @notify_url.setter
    def notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_url", value)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class ProcessMediaOperationTaskNotifyConfigAwsSqaArgs:
    def __init__(__self__, *,
                 sqa_queue_name: pulumi.Input[str],
                 sqa_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sqa_queue_name", sqa_queue_name)
        pulumi.set(__self__, "sqa_region", sqa_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqaQueueName")
    def sqa_queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sqa_queue_name")

    @sqa_queue_name.setter
    def sqa_queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sqa_queue_name", value)

    @property
    @pulumi.getter(name="sqaRegion")
    def sqa_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sqa_region")

    @sqa_region.setter
    def sqa_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "sqa_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityArgs:
    def __init__(__self__, *,
                 activity_type: pulumi.Input[str],
                 activity_para: Optional[pulumi.Input['ScheduleActivityActivityParaArgs']] = None,
                 reardrive_indices: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        pulumi.set(__self__, "activity_type", activity_type)
        if activity_para is not None:
            pulumi.set(__self__, "activity_para", activity_para)
        if reardrive_indices is not None:
            pulumi.set(__self__, "reardrive_indices", reardrive_indices)

    @property
    @pulumi.getter(name="activityType")
    def activity_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "activity_type")

    @activity_type.setter
    def activity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "activity_type", value)

    @property
    @pulumi.getter(name="activityPara")
    def activity_para(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaArgs']]:
        return pulumi.get(self, "activity_para")

    @activity_para.setter
    def activity_para(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaArgs']]):
        pulumi.set(self, "activity_para", value)

    @property
    @pulumi.getter(name="reardriveIndices")
    def reardrive_indices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "reardrive_indices")

    @reardrive_indices.setter
    def reardrive_indices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "reardrive_indices", value)


@pulumi.input_type
class ScheduleActivityActivityParaArgs:
    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskArgs']] = None,
                 ai_analysis_task: Optional[pulumi.Input['ScheduleActivityActivityParaAiAnalysisTaskArgs']] = None,
                 ai_content_review_task: Optional[pulumi.Input['ScheduleActivityActivityParaAiContentReviewTaskArgs']] = None,
                 ai_recognition_task: Optional[pulumi.Input['ScheduleActivityActivityParaAiRecognitionTaskArgs']] = None,
                 animated_graphic_task: Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskArgs']] = None,
                 image_sprite_task: Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskArgs']] = None,
                 sample_snapshot_task: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskArgs']] = None,
                 snapshot_by_time_offset_task: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskArgs']] = None,
                 transcode_task: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskArgs']] = None):
        if adaptive_dynamic_streaming_task is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task", adaptive_dynamic_streaming_task)
        if ai_analysis_task is not None:
            pulumi.set(__self__, "ai_analysis_task", ai_analysis_task)
        if ai_content_review_task is not None:
            pulumi.set(__self__, "ai_content_review_task", ai_content_review_task)
        if ai_recognition_task is not None:
            pulumi.set(__self__, "ai_recognition_task", ai_recognition_task)
        if animated_graphic_task is not None:
            pulumi.set(__self__, "animated_graphic_task", animated_graphic_task)
        if image_sprite_task is not None:
            pulumi.set(__self__, "image_sprite_task", image_sprite_task)
        if sample_snapshot_task is not None:
            pulumi.set(__self__, "sample_snapshot_task", sample_snapshot_task)
        if snapshot_by_time_offset_task is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task", snapshot_by_time_offset_task)
        if transcode_task is not None:
            pulumi.set(__self__, "transcode_task", transcode_task)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTask")
    def adaptive_dynamic_streaming_task(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskArgs']]:
        return pulumi.get(self, "adaptive_dynamic_streaming_task")

    @adaptive_dynamic_streaming_task.setter
    def adaptive_dynamic_streaming_task(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskArgs']]):
        pulumi.set(self, "adaptive_dynamic_streaming_task", value)

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAiAnalysisTaskArgs']]:
        return pulumi.get(self, "ai_analysis_task")

    @ai_analysis_task.setter
    def ai_analysis_task(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAiAnalysisTaskArgs']]):
        pulumi.set(self, "ai_analysis_task", value)

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAiContentReviewTaskArgs']]:
        return pulumi.get(self, "ai_content_review_task")

    @ai_content_review_task.setter
    def ai_content_review_task(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAiContentReviewTaskArgs']]):
        pulumi.set(self, "ai_content_review_task", value)

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAiRecognitionTaskArgs']]:
        return pulumi.get(self, "ai_recognition_task")

    @ai_recognition_task.setter
    def ai_recognition_task(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAiRecognitionTaskArgs']]):
        pulumi.set(self, "ai_recognition_task", value)

    @property
    @pulumi.getter(name="animatedGraphicTask")
    def animated_graphic_task(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskArgs']]:
        return pulumi.get(self, "animated_graphic_task")

    @animated_graphic_task.setter
    def animated_graphic_task(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskArgs']]):
        pulumi.set(self, "animated_graphic_task", value)

    @property
    @pulumi.getter(name="imageSpriteTask")
    def image_sprite_task(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskArgs']]:
        return pulumi.get(self, "image_sprite_task")

    @image_sprite_task.setter
    def image_sprite_task(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskArgs']]):
        pulumi.set(self, "image_sprite_task", value)

    @property
    @pulumi.getter(name="sampleSnapshotTask")
    def sample_snapshot_task(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskArgs']]:
        return pulumi.get(self, "sample_snapshot_task")

    @sample_snapshot_task.setter
    def sample_snapshot_task(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskArgs']]):
        pulumi.set(self, "sample_snapshot_task", value)

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTask")
    def snapshot_by_time_offset_task(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskArgs']]:
        return pulumi.get(self, "snapshot_by_time_offset_task")

    @snapshot_by_time_offset_task.setter
    def snapshot_by_time_offset_task(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskArgs']]):
        pulumi.set(self, "snapshot_by_time_offset_task", value)

    @property
    @pulumi.getter(name="transcodeTask")
    def transcode_task(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskArgs']]:
        return pulumi.get(self, "transcode_task")

    @transcode_task.setter
    def transcode_task(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskArgs']]):
        pulumi.set(self, "transcode_task", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 add_on_subtitles: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleArgs']]]] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageArgs']] = None,
                 segment_object_name: Optional[pulumi.Input[str]] = None,
                 sub_stream_object_name: Optional[pulumi.Input[str]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleArgs']]]]:
        return pulumi.get(self, "add_on_subtitles")

    @add_on_subtitles.setter
    def add_on_subtitles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleArgs']]]]):
        pulumi.set(self, "add_on_subtitles", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_object_name")

    @segment_object_name.setter
    def segment_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_object_name", value)

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_stream_object_name")

    @sub_stream_object_name.setter
    def sub_stream_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_stream_object_name", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleArgs:
    def __init__(__self__, *,
                 subtitle: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ScheduleActivityActivityParaAiAnalysisTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 extended_parameter: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_parameter")

    @extended_parameter.setter
    def extended_parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_parameter", value)


@pulumi.input_type
class ScheduleActivityActivityParaAiContentReviewTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int]):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class ScheduleActivityActivityParaAiRecognitionTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int]):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class ScheduleActivityActivityParaAnimatedGraphicTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: pulumi.Input[float],
                 start_time_offset: pulumi.Input[float],
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageArgs']] = None):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)


@pulumi.input_type
class ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaImageSpriteTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 object_number_format: Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskOutputStorageArgs']] = None,
                 web_vtt_object_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_vtt_object_name")

    @web_vtt_object_name.setter
    def web_vtt_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_vtt_object_name", value)


@pulumi.input_type
class ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class ScheduleActivityActivityParaImageSpriteTaskOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 object_number_format: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageArgs']] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 ext_time_offset_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 object_number_format: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageArgs']] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ext_time_offset_sets")

    @ext_time_offset_sets.setter
    def ext_time_offset_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ext_time_offset_sets", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 head_tail_parameter: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterArgs']] = None,
                 mosaic_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskMosaicSetArgs']]]] = None,
                 object_number_format: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOutputStorageArgs']] = None,
                 override_parameter: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterArgs']] = None,
                 raw_parameter: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterArgs']] = None,
                 segment_object_name: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterArgs']]:
        return pulumi.get(self, "head_tail_parameter")

    @head_tail_parameter.setter
    def head_tail_parameter(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterArgs']]):
        pulumi.set(self, "head_tail_parameter", value)

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskMosaicSetArgs']]]]:
        return pulumi.get(self, "mosaic_sets")

    @mosaic_sets.setter
    def mosaic_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskMosaicSetArgs']]]]):
        pulumi.set(self, "mosaic_sets", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterArgs']]:
        return pulumi.get(self, "override_parameter")

    @override_parameter.setter
    def override_parameter(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterArgs']]):
        pulumi.set(self, "override_parameter", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_object_name")

    @segment_object_name.setter
    def segment_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_object_name", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterArgs:
    def __init__(__self__, *,
                 head_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetArgs']]]] = None,
                 tail_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetArgs']]]] = None):
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetArgs']]]]:
        return pulumi.get(self, "head_sets")

    @head_sets.setter
    def head_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetArgs']]]]):
        pulumi.set(self, "head_sets", value)

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetArgs']]]]:
        return pulumi.get(self, "tail_sets")

    @tail_sets.setter
    def tail_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetArgs']]]]):
        pulumi.set(self, "tail_sets", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskMosaicSetArgs:
    def __init__(__self__, *,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 width: Optional[pulumi.Input[str]] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterArgs:
    def __init__(__self__, *,
                 add_on_subtitles: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleArgs']]]] = None,
                 addon_audio_streams: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamArgs']]]] = None,
                 audio_template: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateArgs']] = None,
                 container: Optional[pulumi.Input[str]] = None,
                 remove_audio: Optional[pulumi.Input[int]] = None,
                 remove_video: Optional[pulumi.Input[int]] = None,
                 std_ext_info: Optional[pulumi.Input[str]] = None,
                 subtitle_template: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateArgs']] = None,
                 tehd_config: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfigArgs']] = None,
                 video_template: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateArgs']] = None):
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if addon_audio_streams is not None:
            pulumi.set(__self__, "addon_audio_streams", addon_audio_streams)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if std_ext_info is not None:
            pulumi.set(__self__, "std_ext_info", std_ext_info)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleArgs']]]]:
        return pulumi.get(self, "add_on_subtitles")

    @add_on_subtitles.setter
    def add_on_subtitles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleArgs']]]]):
        pulumi.set(self, "add_on_subtitles", value)

    @property
    @pulumi.getter(name="addonAudioStreams")
    def addon_audio_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamArgs']]]]:
        return pulumi.get(self, "addon_audio_streams")

    @addon_audio_streams.setter
    def addon_audio_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamArgs']]]]):
        pulumi.set(self, "addon_audio_streams", value)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateArgs']]:
        return pulumi.get(self, "audio_template")

    @audio_template.setter
    def audio_template(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateArgs']]):
        pulumi.set(self, "audio_template", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_audio")

    @remove_audio.setter
    def remove_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_audio", value)

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_video")

    @remove_video.setter
    def remove_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_video", value)

    @property
    @pulumi.getter(name="stdExtInfo")
    def std_ext_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "std_ext_info")

    @std_ext_info.setter
    def std_ext_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "std_ext_info", value)

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateArgs']]:
        return pulumi.get(self, "subtitle_template")

    @subtitle_template.setter
    def subtitle_template(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateArgs']]):
        pulumi.set(self, "subtitle_template", value)

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfigArgs']]:
        return pulumi.get(self, "tehd_config")

    @tehd_config.setter
    def tehd_config(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfigArgs']]):
        pulumi.set(self, "tehd_config", value)

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateArgs']]:
        return pulumi.get(self, "video_template")

    @video_template.setter
    def video_template(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateArgs']]):
        pulumi.set(self, "video_template", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleArgs:
    def __init__(__self__, *,
                 subtitle: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateArgs:
    def __init__(__self__, *,
                 audio_channel: Optional[pulumi.Input[int]] = None,
                 bitrate: Optional[pulumi.Input[int]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 stream_selects: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "stream_selects")

    @stream_selects.setter
    def stream_selects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "stream_selects", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateArgs:
    def __init__(__self__, *,
                 font_alpha: Optional[pulumi.Input[float]] = None,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 font_type: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 stream_index: Optional[pulumi.Input[int]] = None):
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "font_alpha")

    @font_alpha.setter
    def font_alpha(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "font_alpha", value)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_type")

    @font_type.setter
    def font_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_type", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stream_index")

    @stream_index.setter
    def stream_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_index", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfigArgs:
    def __init__(__self__, *,
                 max_video_bitrate: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_video_bitrate")

    @max_video_bitrate.setter
    def max_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_video_bitrate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateArgs:
    def __init__(__self__, *,
                 bitrate: Optional[pulumi.Input[int]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 content_adapt_stream: Optional[pulumi.Input[int]] = None,
                 fill_type: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[int]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "content_adapt_stream")

    @content_adapt_stream.setter
    def content_adapt_stream(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_adapt_stream", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskRawParameterArgs:
    def __init__(__self__, *,
                 container: pulumi.Input[str],
                 audio_template: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplateArgs']] = None,
                 remove_audio: Optional[pulumi.Input[int]] = None,
                 remove_video: Optional[pulumi.Input[int]] = None,
                 tehd_config: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfigArgs']] = None,
                 video_template: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplateArgs']] = None):
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplateArgs']]:
        return pulumi.get(self, "audio_template")

    @audio_template.setter
    def audio_template(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplateArgs']]):
        pulumi.set(self, "audio_template", value)

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_audio")

    @remove_audio.setter
    def remove_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_audio", value)

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_video")

    @remove_video.setter
    def remove_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_video", value)

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfigArgs']]:
        return pulumi.get(self, "tehd_config")

    @tehd_config.setter
    def tehd_config(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfigArgs']]):
        pulumi.set(self, "tehd_config", value)

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplateArgs']]:
        return pulumi.get(self, "video_template")

    @video_template.setter
    def video_template(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplateArgs']]):
        pulumi.set(self, "video_template", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 sample_rate: pulumi.Input[int],
                 audio_channel: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 max_video_bitrate: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_video_bitrate")

    @max_video_bitrate.setter
    def max_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_video_bitrate", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 fps: pulumi.Input[int],
                 fill_type: Optional[pulumi.Input[str]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def fps(self) -> pulumi.Input[int]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: pulumi.Input[int]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ScheduleOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['ScheduleOutputStorageCosOutputStorageArgs']] = None,
                 s3_output_storage: Optional[pulumi.Input['ScheduleOutputStorageS3OutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['ScheduleOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['ScheduleOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional[pulumi.Input['ScheduleOutputStorageS3OutputStorageArgs']]:
        return pulumi.get(self, "s3_output_storage")

    @s3_output_storage.setter
    def s3_output_storage(self, value: Optional[pulumi.Input['ScheduleOutputStorageS3OutputStorageArgs']]):
        pulumi.set(self, "s3_output_storage", value)


@pulumi.input_type
class ScheduleOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScheduleOutputStorageS3OutputStorageArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleTaskNotifyConfigArgs:
    def __init__(__self__, *,
                 aws_sqs: Optional[pulumi.Input['ScheduleTaskNotifyConfigAwsSqsArgs']] = None,
                 cmq_model: Optional[pulumi.Input[str]] = None,
                 cmq_region: Optional[pulumi.Input[str]] = None,
                 notify_mode: Optional[pulumi.Input[str]] = None,
                 notify_type: Optional[pulumi.Input[str]] = None,
                 notify_url: Optional[pulumi.Input[str]] = None,
                 queue_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional[pulumi.Input['ScheduleTaskNotifyConfigAwsSqsArgs']]:
        return pulumi.get(self, "aws_sqs")

    @aws_sqs.setter
    def aws_sqs(self, value: Optional[pulumi.Input['ScheduleTaskNotifyConfigAwsSqsArgs']]):
        pulumi.set(self, "aws_sqs", value)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_model")

    @cmq_model.setter
    def cmq_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_model", value)

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_region")

    @cmq_region.setter
    def cmq_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_region", value)

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_mode")

    @notify_mode.setter
    def notify_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_mode", value)

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_type")

    @notify_type.setter
    def notify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_type", value)

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_url")

    @notify_url.setter
    def notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_url", value)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class ScheduleTaskNotifyConfigAwsSqsArgs:
    def __init__(__self__, *,
                 sqs_queue_name: pulumi.Input[str],
                 sqs_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sqs_queue_name")

    @sqs_queue_name.setter
    def sqs_queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sqs_queue_name", value)

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sqs_region")

    @sqs_region.setter
    def sqs_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "sqs_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleTriggerArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 aws_s3_file_upload_trigger: Optional[pulumi.Input['ScheduleTriggerAwsS3FileUploadTriggerArgs']] = None,
                 cos_file_upload_trigger: Optional[pulumi.Input['ScheduleTriggerCosFileUploadTriggerArgs']] = None):
        pulumi.set(__self__, "type", type)
        if aws_s3_file_upload_trigger is not None:
            pulumi.set(__self__, "aws_s3_file_upload_trigger", aws_s3_file_upload_trigger)
        if cos_file_upload_trigger is not None:
            pulumi.set(__self__, "cos_file_upload_trigger", cos_file_upload_trigger)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="awsS3FileUploadTrigger")
    def aws_s3_file_upload_trigger(self) -> Optional[pulumi.Input['ScheduleTriggerAwsS3FileUploadTriggerArgs']]:
        return pulumi.get(self, "aws_s3_file_upload_trigger")

    @aws_s3_file_upload_trigger.setter
    def aws_s3_file_upload_trigger(self, value: Optional[pulumi.Input['ScheduleTriggerAwsS3FileUploadTriggerArgs']]):
        pulumi.set(self, "aws_s3_file_upload_trigger", value)

    @property
    @pulumi.getter(name="cosFileUploadTrigger")
    def cos_file_upload_trigger(self) -> Optional[pulumi.Input['ScheduleTriggerCosFileUploadTriggerArgs']]:
        return pulumi.get(self, "cos_file_upload_trigger")

    @cos_file_upload_trigger.setter
    def cos_file_upload_trigger(self, value: Optional[pulumi.Input['ScheduleTriggerCosFileUploadTriggerArgs']]):
        pulumi.set(self, "cos_file_upload_trigger", value)


@pulumi.input_type
class ScheduleTriggerAwsS3FileUploadTriggerArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 aws_sqs: Optional[pulumi.Input['ScheduleTriggerAwsS3FileUploadTriggerAwsSqsArgs']] = None,
                 dir: Optional[pulumi.Input[str]] = None,
                 formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional[pulumi.Input['ScheduleTriggerAwsS3FileUploadTriggerAwsSqsArgs']]:
        return pulumi.get(self, "aws_sqs")

    @aws_sqs.setter
    def aws_sqs(self, value: Optional[pulumi.Input['ScheduleTriggerAwsS3FileUploadTriggerAwsSqsArgs']]):
        pulumi.set(self, "aws_sqs", value)

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dir", value)

    @property
    @pulumi.getter
    def formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "formats")

    @formats.setter
    def formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "formats", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleTriggerAwsS3FileUploadTriggerAwsSqsArgs:
    def __init__(__self__, *,
                 sqs_queue_name: pulumi.Input[str],
                 sqs_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sqs_queue_name")

    @sqs_queue_name.setter
    def sqs_queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sqs_queue_name", value)

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sqs_region")

    @sqs_region.setter
    def sqs_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "sqs_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class ScheduleTriggerCosFileUploadTriggerArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 region: pulumi.Input[str],
                 dir: Optional[pulumi.Input[str]] = None,
                 formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dir", value)

    @property
    @pulumi.getter
    def formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "formats")

    @formats.setter
    def formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "formats", value)


@pulumi.input_type
class TranscodeTemplateAudioTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 sample_rate: pulumi.Input[int],
                 audio_channel: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigArgs:
    def __init__(__self__, *,
                 video_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArgs']] = None):
        if video_enhance is not None:
            pulumi.set(__self__, "video_enhance", video_enhance)

    @property
    @pulumi.getter(name="videoEnhance")
    def video_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArgs']]:
        return pulumi.get(self, "video_enhance")

    @video_enhance.setter
    def video_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArgs']]):
        pulumi.set(self, "video_enhance", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceArgs:
    def __init__(__self__, *,
                 artifact_repair: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs']] = None,
                 color_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs']] = None,
                 denoise: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs']] = None,
                 face_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs']] = None,
                 frame_rate: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs']] = None,
                 hdr: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs']] = None,
                 image_quality_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs']] = None,
                 low_light_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs']] = None,
                 scratch_repair: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs']] = None,
                 sharp_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs']] = None,
                 super_resolution: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs']] = None):
        if artifact_repair is not None:
            pulumi.set(__self__, "artifact_repair", artifact_repair)
        if color_enhance is not None:
            pulumi.set(__self__, "color_enhance", color_enhance)
        if denoise is not None:
            pulumi.set(__self__, "denoise", denoise)
        if face_enhance is not None:
            pulumi.set(__self__, "face_enhance", face_enhance)
        if frame_rate is not None:
            pulumi.set(__self__, "frame_rate", frame_rate)
        if hdr is not None:
            pulumi.set(__self__, "hdr", hdr)
        if image_quality_enhance is not None:
            pulumi.set(__self__, "image_quality_enhance", image_quality_enhance)
        if low_light_enhance is not None:
            pulumi.set(__self__, "low_light_enhance", low_light_enhance)
        if scratch_repair is not None:
            pulumi.set(__self__, "scratch_repair", scratch_repair)
        if sharp_enhance is not None:
            pulumi.set(__self__, "sharp_enhance", sharp_enhance)
        if super_resolution is not None:
            pulumi.set(__self__, "super_resolution", super_resolution)

    @property
    @pulumi.getter(name="artifactRepair")
    def artifact_repair(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs']]:
        return pulumi.get(self, "artifact_repair")

    @artifact_repair.setter
    def artifact_repair(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs']]):
        pulumi.set(self, "artifact_repair", value)

    @property
    @pulumi.getter(name="colorEnhance")
    def color_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs']]:
        return pulumi.get(self, "color_enhance")

    @color_enhance.setter
    def color_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs']]):
        pulumi.set(self, "color_enhance", value)

    @property
    @pulumi.getter
    def denoise(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs']]:
        return pulumi.get(self, "denoise")

    @denoise.setter
    def denoise(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs']]):
        pulumi.set(self, "denoise", value)

    @property
    @pulumi.getter(name="faceEnhance")
    def face_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs']]:
        return pulumi.get(self, "face_enhance")

    @face_enhance.setter
    def face_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs']]):
        pulumi.set(self, "face_enhance", value)

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs']]:
        return pulumi.get(self, "frame_rate")

    @frame_rate.setter
    def frame_rate(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs']]):
        pulumi.set(self, "frame_rate", value)

    @property
    @pulumi.getter
    def hdr(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs']]:
        return pulumi.get(self, "hdr")

    @hdr.setter
    def hdr(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs']]):
        pulumi.set(self, "hdr", value)

    @property
    @pulumi.getter(name="imageQualityEnhance")
    def image_quality_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs']]:
        return pulumi.get(self, "image_quality_enhance")

    @image_quality_enhance.setter
    def image_quality_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs']]):
        pulumi.set(self, "image_quality_enhance", value)

    @property
    @pulumi.getter(name="lowLightEnhance")
    def low_light_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs']]:
        return pulumi.get(self, "low_light_enhance")

    @low_light_enhance.setter
    def low_light_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs']]):
        pulumi.set(self, "low_light_enhance", value)

    @property
    @pulumi.getter(name="scratchRepair")
    def scratch_repair(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs']]:
        return pulumi.get(self, "scratch_repair")

    @scratch_repair.setter
    def scratch_repair(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs']]):
        pulumi.set(self, "scratch_repair", value)

    @property
    @pulumi.getter(name="sharpEnhance")
    def sharp_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs']]:
        return pulumi.get(self, "sharp_enhance")

    @sharp_enhance.setter
    def sharp_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs']]):
        pulumi.set(self, "sharp_enhance", value)

    @property
    @pulumi.getter(name="superResolution")
    def super_resolution(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs']]:
        return pulumi.get(self, "super_resolution")

    @super_resolution.setter
    def super_resolution(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs']]):
        pulumi.set(self, "super_resolution", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs:
    def __init__(__self__, *,
                 intensity: Optional[pulumi.Input[float]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "intensity")

    @intensity.setter
    def intensity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "intensity", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs:
    def __init__(__self__, *,
                 fps: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs:
    def __init__(__self__, *,
                 intensity: Optional[pulumi.Input[float]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "intensity")

    @intensity.setter
    def intensity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "intensity", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs:
    def __init__(__self__, *,
                 intensity: Optional[pulumi.Input[float]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "intensity")

    @intensity.setter
    def intensity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "intensity", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateTehdConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 max_video_bitrate: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_video_bitrate")

    @max_video_bitrate.setter
    def max_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_video_bitrate", value)


@pulumi.input_type
class TranscodeTemplateVideoTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 fps: pulumi.Input[int],
                 fill_type: Optional[pulumi.Input[str]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def fps(self) -> pulumi.Input[int]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: pulumi.Input[int]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WatermarkTemplateImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input[str],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WatermarkTemplateSvgTemplateArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WatermarkTemplateTextTemplateArgs:
    def __init__(__self__, *,
                 font_alpha: pulumi.Input[float],
                 font_color: pulumi.Input[str],
                 font_size: pulumi.Input[str],
                 font_type: pulumi.Input[str]):
        pulumi.set(__self__, "font_alpha", font_alpha)
        pulumi.set(__self__, "font_color", font_color)
        pulumi.set(__self__, "font_size", font_size)
        pulumi.set(__self__, "font_type", font_type)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> pulumi.Input[float]:
        return pulumi.get(self, "font_alpha")

    @font_alpha.setter
    def font_alpha(self, value: pulumi.Input[float]):
        pulumi.set(self, "font_alpha", value)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: pulumi.Input[str]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> pulumi.Input[str]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "font_type")

    @font_type.setter
    def font_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "font_type", value)


@pulumi.input_type
class WithdrawsWatermarkOperationInputInfoArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoCosInputInfoArgs']] = None,
                 s3_input_info: Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoS3InputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoS3InputInfoArgs']]:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoS3InputInfoArgs']]):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WithdrawsWatermarkOperationInputInfoCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WithdrawsWatermarkOperationInputInfoS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_object: pulumi.Input[str],
                 s3_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class WithdrawsWatermarkOperationInputInfoUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WithdrawsWatermarkOperationTaskNotifyConfigArgs:
    def __init__(__self__, *,
                 aws_sqs: Optional[pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigAwsSqsArgs']] = None,
                 cmq_model: Optional[pulumi.Input[str]] = None,
                 cmq_region: Optional[pulumi.Input[str]] = None,
                 notify_mode: Optional[pulumi.Input[str]] = None,
                 notify_type: Optional[pulumi.Input[str]] = None,
                 notify_url: Optional[pulumi.Input[str]] = None,
                 queue_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional[pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigAwsSqsArgs']]:
        return pulumi.get(self, "aws_sqs")

    @aws_sqs.setter
    def aws_sqs(self, value: Optional[pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigAwsSqsArgs']]):
        pulumi.set(self, "aws_sqs", value)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_model")

    @cmq_model.setter
    def cmq_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_model", value)

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_region")

    @cmq_region.setter
    def cmq_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_region", value)

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_mode")

    @notify_mode.setter
    def notify_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_mode", value)

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_type")

    @notify_type.setter
    def notify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_type", value)

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_url")

    @notify_url.setter
    def notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_url", value)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class WithdrawsWatermarkOperationTaskNotifyConfigAwsSqsArgs:
    def __init__(__self__, *,
                 sqs_queue_name: pulumi.Input[str],
                 sqs_region: pulumi.Input[str],
                 s3_secret_id: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sqs_queue_name")

    @sqs_queue_name.setter
    def sqs_queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sqs_queue_name", value)

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sqs_region")

    @sqs_region.setter
    def sqs_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "sqs_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class WorkflowAiAnalysisTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 extended_parameter: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_parameter")

    @extended_parameter.setter
    def extended_parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_parameter", value)


@pulumi.input_type
class WorkflowAiContentReviewTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int]):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class WorkflowAiRecognitionTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int]):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class WorkflowMediaProcessTaskArgs:
    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs']]]] = None,
                 animated_graphic_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs']]]] = None,
                 image_sprite_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetArgs']]]] = None,
                 sample_snapshot_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs']]]] = None,
                 snapshot_by_time_offset_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs']]]] = None,
                 transcode_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetArgs']]]] = None):
        if adaptive_dynamic_streaming_task_sets is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task_sets", adaptive_dynamic_streaming_task_sets)
        if animated_graphic_task_sets is not None:
            pulumi.set(__self__, "animated_graphic_task_sets", animated_graphic_task_sets)
        if image_sprite_task_sets is not None:
            pulumi.set(__self__, "image_sprite_task_sets", image_sprite_task_sets)
        if sample_snapshot_task_sets is not None:
            pulumi.set(__self__, "sample_snapshot_task_sets", sample_snapshot_task_sets)
        if snapshot_by_time_offset_task_sets is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task_sets", snapshot_by_time_offset_task_sets)
        if transcode_task_sets is not None:
            pulumi.set(__self__, "transcode_task_sets", transcode_task_sets)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTaskSets")
    def adaptive_dynamic_streaming_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs']]]]:
        return pulumi.get(self, "adaptive_dynamic_streaming_task_sets")

    @adaptive_dynamic_streaming_task_sets.setter
    def adaptive_dynamic_streaming_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs']]]]):
        pulumi.set(self, "adaptive_dynamic_streaming_task_sets", value)

    @property
    @pulumi.getter(name="animatedGraphicTaskSets")
    def animated_graphic_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs']]]]:
        return pulumi.get(self, "animated_graphic_task_sets")

    @animated_graphic_task_sets.setter
    def animated_graphic_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs']]]]):
        pulumi.set(self, "animated_graphic_task_sets", value)

    @property
    @pulumi.getter(name="imageSpriteTaskSets")
    def image_sprite_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetArgs']]]]:
        return pulumi.get(self, "image_sprite_task_sets")

    @image_sprite_task_sets.setter
    def image_sprite_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetArgs']]]]):
        pulumi.set(self, "image_sprite_task_sets", value)

    @property
    @pulumi.getter(name="sampleSnapshotTaskSets")
    def sample_snapshot_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs']]]]:
        return pulumi.get(self, "sample_snapshot_task_sets")

    @sample_snapshot_task_sets.setter
    def sample_snapshot_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs']]]]):
        pulumi.set(self, "sample_snapshot_task_sets", value)

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTaskSets")
    def snapshot_by_time_offset_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs']]]]:
        return pulumi.get(self, "snapshot_by_time_offset_task_sets")

    @snapshot_by_time_offset_task_sets.setter
    def snapshot_by_time_offset_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs']]]]):
        pulumi.set(self, "snapshot_by_time_offset_task_sets", value)

    @property
    @pulumi.getter(name="transcodeTaskSets")
    def transcode_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetArgs']]]]:
        return pulumi.get(self, "transcode_task_sets")

    @transcode_task_sets.setter
    def transcode_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetArgs']]]]):
        pulumi.set(self, "transcode_task_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs']] = None,
                 segment_object_name: Optional[pulumi.Input[str]] = None,
                 sub_stream_object_name: Optional[pulumi.Input[str]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_object_name")

    @segment_object_name.setter
    def segment_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_object_name", value)

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_stream_object_name")

    @sub_stream_object_name.setter
    def sub_stream_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_stream_object_name", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: pulumi.Input[float],
                 start_time_offset: pulumi.Input[float],
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs']] = None):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskImageSpriteTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 object_number_format: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs']] = None,
                 web_vtt_object_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_vtt_object_name")

    @web_vtt_object_name.setter
    def web_vtt_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_vtt_object_name", value)


@pulumi.input_type
class WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 object_number_format: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs']] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 ext_time_offset_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 object_number_format: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs']] = None,
                 time_offset_sets: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if time_offset_sets is not None:
            pulumi.set(__self__, "time_offset_sets", time_offset_sets)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ext_time_offset_sets")

    @ext_time_offset_sets.setter
    def ext_time_offset_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ext_time_offset_sets", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="timeOffsetSets")
    def time_offset_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "time_offset_sets")

    @time_offset_sets.setter
    def time_offset_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "time_offset_sets", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 head_tail_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs']] = None,
                 mosaic_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs']]]] = None,
                 object_number_format: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs']] = None,
                 override_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs']] = None,
                 raw_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs']] = None,
                 segment_object_name: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs']]:
        return pulumi.get(self, "head_tail_parameter")

    @head_tail_parameter.setter
    def head_tail_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs']]):
        pulumi.set(self, "head_tail_parameter", value)

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs']]]]:
        return pulumi.get(self, "mosaic_sets")

    @mosaic_sets.setter
    def mosaic_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs']]]]):
        pulumi.set(self, "mosaic_sets", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs']]:
        return pulumi.get(self, "override_parameter")

    @override_parameter.setter
    def override_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs']]):
        pulumi.set(self, "override_parameter", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_object_name")

    @segment_object_name.setter
    def segment_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_object_name", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs:
    def __init__(__self__, *,
                 head_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs']]]] = None,
                 tail_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs']]]] = None):
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs']]]]:
        return pulumi.get(self, "head_sets")

    @head_sets.setter
    def head_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs']]]]):
        pulumi.set(self, "head_sets", value)

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs']]]]:
        return pulumi.get(self, "tail_sets")

    @tail_sets.setter
    def tail_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs']]]]):
        pulumi.set(self, "tail_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs:
    def __init__(__self__, *,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 width: Optional[pulumi.Input[str]] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs:
    def __init__(__self__, *,
                 audio_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs']] = None,
                 container: Optional[pulumi.Input[str]] = None,
                 remove_audio: Optional[pulumi.Input[int]] = None,
                 remove_video: Optional[pulumi.Input[int]] = None,
                 subtitle_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs']] = None,
                 tehd_config: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs']] = None,
                 video_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs']] = None):
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs']]:
        return pulumi.get(self, "audio_template")

    @audio_template.setter
    def audio_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs']]):
        pulumi.set(self, "audio_template", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_audio")

    @remove_audio.setter
    def remove_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_audio", value)

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_video")

    @remove_video.setter
    def remove_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_video", value)

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs']]:
        return pulumi.get(self, "subtitle_template")

    @subtitle_template.setter
    def subtitle_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs']]):
        pulumi.set(self, "subtitle_template", value)

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs']]:
        return pulumi.get(self, "tehd_config")

    @tehd_config.setter
    def tehd_config(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs']]):
        pulumi.set(self, "tehd_config", value)

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs']]:
        return pulumi.get(self, "video_template")

    @video_template.setter
    def video_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs']]):
        pulumi.set(self, "video_template", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs:
    def __init__(__self__, *,
                 audio_channel: Optional[pulumi.Input[int]] = None,
                 bitrate: Optional[pulumi.Input[int]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 stream_selects: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "stream_selects")

    @stream_selects.setter
    def stream_selects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "stream_selects", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs:
    def __init__(__self__, *,
                 font_alpha: Optional[pulumi.Input[float]] = None,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 font_type: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 stream_index: Optional[pulumi.Input[int]] = None):
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "font_alpha")

    @font_alpha.setter
    def font_alpha(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "font_alpha", value)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_type")

    @font_type.setter
    def font_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_type", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stream_index")

    @stream_index.setter
    def stream_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_index", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs:
    def __init__(__self__, *,
                 max_video_bitrate: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_video_bitrate")

    @max_video_bitrate.setter
    def max_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_video_bitrate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs:
    def __init__(__self__, *,
                 bitrate: Optional[pulumi.Input[int]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 content_adapt_stream: Optional[pulumi.Input[int]] = None,
                 fill_type: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[int]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "content_adapt_stream")

    @content_adapt_stream.setter
    def content_adapt_stream(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_adapt_stream", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs:
    def __init__(__self__, *,
                 container: pulumi.Input[str],
                 audio_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs']] = None,
                 remove_audio: Optional[pulumi.Input[int]] = None,
                 remove_video: Optional[pulumi.Input[int]] = None,
                 tehd_config: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs']] = None,
                 video_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs']] = None):
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs']]:
        return pulumi.get(self, "audio_template")

    @audio_template.setter
    def audio_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs']]):
        pulumi.set(self, "audio_template", value)

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_audio")

    @remove_audio.setter
    def remove_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_audio", value)

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_video")

    @remove_video.setter
    def remove_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_video", value)

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs']]:
        return pulumi.get(self, "tehd_config")

    @tehd_config.setter
    def tehd_config(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs']]):
        pulumi.set(self, "tehd_config", value)

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs']]:
        return pulumi.get(self, "video_template")

    @video_template.setter
    def video_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs']]):
        pulumi.set(self, "video_template", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 sample_rate: pulumi.Input[int],
                 audio_channel: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 max_video_bitrate: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_video_bitrate")

    @max_video_bitrate.setter
    def max_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_video_bitrate", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 fps: pulumi.Input[int],
                 fill_type: Optional[pulumi.Input[str]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def fps(self) -> pulumi.Input[int]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: pulumi.Input[int]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowTaskNotifyConfigArgs:
    def __init__(__self__, *,
                 cmq_model: Optional[pulumi.Input[str]] = None,
                 cmq_region: Optional[pulumi.Input[str]] = None,
                 notify_mode: Optional[pulumi.Input[str]] = None,
                 notify_type: Optional[pulumi.Input[str]] = None,
                 notify_url: Optional[pulumi.Input[str]] = None,
                 queue_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_model")

    @cmq_model.setter
    def cmq_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_model", value)

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_region")

    @cmq_region.setter
    def cmq_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_region", value)

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_mode")

    @notify_mode.setter
    def notify_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_mode", value)

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_type")

    @notify_type.setter
    def notify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_type", value)

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_url")

    @notify_url.setter
    def notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_url", value)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class WorkflowTriggerArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_file_upload_trigger: Optional[pulumi.Input['WorkflowTriggerCosFileUploadTriggerArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_file_upload_trigger is not None:
            pulumi.set(__self__, "cos_file_upload_trigger", cos_file_upload_trigger)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosFileUploadTrigger")
    def cos_file_upload_trigger(self) -> Optional[pulumi.Input['WorkflowTriggerCosFileUploadTriggerArgs']]:
        return pulumi.get(self, "cos_file_upload_trigger")

    @cos_file_upload_trigger.setter
    def cos_file_upload_trigger(self, value: Optional[pulumi.Input['WorkflowTriggerCosFileUploadTriggerArgs']]):
        pulumi.set(self, "cos_file_upload_trigger", value)


@pulumi.input_type
class WorkflowTriggerCosFileUploadTriggerArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 region: pulumi.Input[str],
                 dir: Optional[pulumi.Input[str]] = None,
                 formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dir", value)

    @property
    @pulumi.getter
    def formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "formats")

    @formats.setter
    def formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "formats", value)


@pulumi.input_type
class GetMediaMetaDataInputInfoArgs:
    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['GetMediaMetaDataInputInfoCosInputInfoArgs'] = None,
                 s3_input_info: Optional['GetMediaMetaDataInputInfoS3InputInfoArgs'] = None,
                 url_input_info: Optional['GetMediaMetaDataInputInfoUrlInputInfoArgs'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['GetMediaMetaDataInputInfoCosInputInfoArgs']:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional['GetMediaMetaDataInputInfoCosInputInfoArgs']):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['GetMediaMetaDataInputInfoS3InputInfoArgs']:
        return pulumi.get(self, "s3_input_info")

    @s3_input_info.setter
    def s3_input_info(self, value: Optional['GetMediaMetaDataInputInfoS3InputInfoArgs']):
        pulumi.set(self, "s3_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['GetMediaMetaDataInputInfoUrlInputInfoArgs']:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional['GetMediaMetaDataInputInfoUrlInputInfoArgs']):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class GetMediaMetaDataInputInfoCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: str):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: str):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: str):
        pulumi.set(self, "region", value)


@pulumi.input_type
class GetMediaMetaDataInputInfoS3InputInfoArgs:
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: str):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @s3_object.setter
    def s3_object(self, value: str):
        pulumi.set(self, "s3_object", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: str):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @s3_secret_id.setter
    def s3_secret_id(self, value: Optional[str]):
        pulumi.set(self, "s3_secret_id", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[str]):
        pulumi.set(self, "s3_secret_key", value)


@pulumi.input_type
class GetMediaMetaDataInputInfoUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: str):
        pulumi.set(self, "url", value)


