# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AdaptiveDynamicStreamingTemplateStreamInfo',
    'AdaptiveDynamicStreamingTemplateStreamInfoAudio',
    'AdaptiveDynamicStreamingTemplateStreamInfoVideo',
    'AiAnalysisTemplateClassificationConfigure',
    'AiAnalysisTemplateCoverConfigure',
    'AiAnalysisTemplateFrameTagConfigure',
    'AiAnalysisTemplateTagConfigure',
    'AiRecognitionTemplateAsrFullTextConfigure',
    'AiRecognitionTemplateAsrWordsConfigure',
    'AiRecognitionTemplateFaceConfigure',
    'AiRecognitionTemplateOcrFullTextConfigure',
    'AiRecognitionTemplateOcrWordsConfigure',
    'ContentReviewTemplatePoliticalConfigure',
    'ContentReviewTemplatePoliticalConfigureAsrReviewInfo',
    'ContentReviewTemplatePoliticalConfigureImgReviewInfo',
    'ContentReviewTemplatePoliticalConfigureOcrReviewInfo',
    'ContentReviewTemplatePornConfigure',
    'ContentReviewTemplatePornConfigureAsrReviewInfo',
    'ContentReviewTemplatePornConfigureImgReviewInfo',
    'ContentReviewTemplatePornConfigureOcrReviewInfo',
    'ContentReviewTemplateProhibitedConfigure',
    'ContentReviewTemplateProhibitedConfigureAsrReviewInfo',
    'ContentReviewTemplateProhibitedConfigureOcrReviewInfo',
    'ContentReviewTemplateTerrorismConfigure',
    'ContentReviewTemplateTerrorismConfigureImgReviewInfo',
    'ContentReviewTemplateTerrorismConfigureOcrReviewInfo',
    'ContentReviewTemplateUserDefineConfigure',
    'ContentReviewTemplateUserDefineConfigureAsrReviewInfo',
    'ContentReviewTemplateUserDefineConfigureFaceReviewInfo',
    'ContentReviewTemplateUserDefineConfigureOcrReviewInfo',
    'EditMediaOperationFileInfo',
    'EditMediaOperationFileInfoInputInfo',
    'EditMediaOperationFileInfoInputInfoCosInputInfo',
    'EditMediaOperationFileInfoInputInfoS3InputInfo',
    'EditMediaOperationFileInfoInputInfoUrlInputInfo',
    'EditMediaOperationOutputConfig',
    'EditMediaOperationOutputStorage',
    'EditMediaOperationOutputStorageCosOutputStorage',
    'EditMediaOperationOutputStorageS3OutputStorage',
    'EditMediaOperationTaskNotifyConfig',
    'EditMediaOperationTaskNotifyConfigAwsSqs',
    'FlowInputGroup',
    'FlowInputGroupHlsPullSettings',
    'FlowInputGroupHlsPullSettingsSourceAddress',
    'FlowInputGroupResilientStream',
    'FlowInputGroupRtmpPullSettings',
    'FlowInputGroupRtmpPullSettingsSourceAddress',
    'FlowInputGroupRtpSettings',
    'FlowInputGroupRtspPullSettings',
    'FlowInputGroupRtspPullSettingsSourceAddress',
    'FlowInputGroupSrtSettings',
    'FlowInputGroupSrtSettingsSourceAddress',
    'InputInputGroup',
    'InputInputGroupHlsPullSettings',
    'InputInputGroupHlsPullSettingsSourceAddress',
    'InputInputGroupResilientStream',
    'InputInputGroupRtmpPullSettings',
    'InputInputGroupRtmpPullSettingsSourceAddress',
    'InputInputGroupRtpSettings',
    'InputInputGroupRtspPullSettings',
    'InputInputGroupRtspPullSettingsSourceAddress',
    'InputInputGroupSrtSettings',
    'InputInputGroupSrtSettingsSourceAddress',
    'OutputOutput',
    'OutputOutputRtmpSettings',
    'OutputOutputRtmpSettingsDestination',
    'OutputOutputRtpSettings',
    'OutputOutputRtpSettingsDestination',
    'OutputOutputSrtSettings',
    'OutputOutputSrtSettingsDestination',
    'ProcessLiveStreamOperationAiAnalysisTask',
    'ProcessLiveStreamOperationAiContentReviewTask',
    'ProcessLiveStreamOperationAiQualityControlTask',
    'ProcessLiveStreamOperationAiRecognitionTask',
    'ProcessLiveStreamOperationOutputStorage',
    'ProcessLiveStreamOperationOutputStorageCosOutputStorage',
    'ProcessLiveStreamOperationOutputStorageS3OutputStorage',
    'ProcessLiveStreamOperationTaskNotifyConfig',
    'ProcessMediaOperationAiAnalysisTask',
    'ProcessMediaOperationAiContentReviewTask',
    'ProcessMediaOperationAiQualityControlTask',
    'ProcessMediaOperationAiRecognitionTask',
    'ProcessMediaOperationInputInfo',
    'ProcessMediaOperationInputInfoCosInputInfo',
    'ProcessMediaOperationInputInfoS3InputInfo',
    'ProcessMediaOperationInputInfoUrlInputInfo',
    'ProcessMediaOperationMediaProcessTask',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSet',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ProcessMediaOperationOutputStorage',
    'ProcessMediaOperationOutputStorageCosOutputStorage',
    'ProcessMediaOperationOutputStorageS3OutputStorage',
    'ProcessMediaOperationTaskNotifyConfig',
    'ProcessMediaOperationTaskNotifyConfigAwsSqa',
    'ScheduleActivity',
    'ScheduleActivityActivityPara',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTask',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ScheduleActivityActivityParaAiAnalysisTask',
    'ScheduleActivityActivityParaAiContentReviewTask',
    'ScheduleActivityActivityParaAiRecognitionTask',
    'ScheduleActivityActivityParaAnimatedGraphicTask',
    'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage',
    'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaImageSpriteTask',
    'ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat',
    'ScheduleActivityActivityParaImageSpriteTaskOutputStorage',
    'ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaSampleSnapshotTask',
    'ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat',
    'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage',
    'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTask',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ScheduleActivityActivityParaTranscodeTask',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameter',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskMosaicSet',
    'ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat',
    'ScheduleActivityActivityParaTranscodeTaskOutputStorage',
    'ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameter',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate',
    'ScheduleActivityActivityParaTranscodeTaskRawParameter',
    'ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate',
    'ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig',
    'ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSet',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ScheduleOutputStorage',
    'ScheduleOutputStorageCosOutputStorage',
    'ScheduleOutputStorageS3OutputStorage',
    'ScheduleTaskNotifyConfig',
    'ScheduleTaskNotifyConfigAwsSqs',
    'ScheduleTrigger',
    'ScheduleTriggerAwsS3FileUploadTrigger',
    'ScheduleTriggerAwsS3FileUploadTriggerAwsSqs',
    'ScheduleTriggerCosFileUploadTrigger',
    'TranscodeTemplateAudioTemplate',
    'TranscodeTemplateEnhanceConfig',
    'TranscodeTemplateEnhanceConfigVideoEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair',
    'TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceDenoise',
    'TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate',
    'TranscodeTemplateEnhanceConfigVideoEnhanceHdr',
    'TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair',
    'TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution',
    'TranscodeTemplateTehdConfig',
    'TranscodeTemplateVideoTemplate',
    'WatermarkTemplateImageTemplate',
    'WatermarkTemplateSvgTemplate',
    'WatermarkTemplateTextTemplate',
    'WithdrawsWatermarkOperationInputInfo',
    'WithdrawsWatermarkOperationInputInfoCosInputInfo',
    'WithdrawsWatermarkOperationInputInfoS3InputInfo',
    'WithdrawsWatermarkOperationInputInfoUrlInputInfo',
    'WithdrawsWatermarkOperationTaskNotifyConfig',
    'WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs',
    'WorkflowAiAnalysisTask',
    'WorkflowAiContentReviewTask',
    'WorkflowAiRecognitionTask',
    'WorkflowMediaProcessTask',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSet',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskImageSpriteTaskSet',
    'WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage',
    'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSet',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage',
    'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowOutputStorage',
    'WorkflowOutputStorageCosOutputStorage',
    'WorkflowTaskNotifyConfig',
    'WorkflowTrigger',
    'WorkflowTriggerCosFileUploadTrigger',
    'GetMediaMetaDataInputInfoResult',
    'GetMediaMetaDataInputInfoCosInputInfoResult',
    'GetMediaMetaDataInputInfoS3InputInfoResult',
    'GetMediaMetaDataInputInfoUrlInputInfoResult',
    'GetMediaMetaDataMetaDataResult',
    'GetMediaMetaDataMetaDataAudioStreamSetResult',
    'GetMediaMetaDataMetaDataVideoStreamSetResult',
    'GetSchedulesScheduleInfoSetResult',
    'GetSchedulesScheduleInfoSetActivityResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormatResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormatResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormatResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfigResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfigResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetOutputStorageResult',
    'GetSchedulesScheduleInfoSetOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetTaskNotifyConfigResult',
    'GetSchedulesScheduleInfoSetTaskNotifyConfigAwsSqResult',
    'GetSchedulesScheduleInfoSetTriggerResult',
    'GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerResult',
    'GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSqResult',
    'GetSchedulesScheduleInfoSetTriggerCosFileUploadTriggerResult',
    'GetTasksTaskSetResult',
]

@pulumi.output_type
class AdaptiveDynamicStreamingTemplateStreamInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdaptiveDynamicStreamingTemplateStreamInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio: 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoAudio',
                 video: 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoVideo',
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None):
        pulumi.set(__self__, "audio", audio)
        pulumi.set(__self__, "video", video)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)

    @property
    @pulumi.getter
    def audio(self) -> 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoAudio':
        return pulumi.get(self, "audio")

    @property
    @pulumi.getter
    def video(self) -> 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoVideo':
        return pulumi.get(self, "video")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        return pulumi.get(self, "remove_video")


@pulumi.output_type
class AdaptiveDynamicStreamingTemplateStreamInfoAudio(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdaptiveDynamicStreamingTemplateStreamInfoAudio. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoAudio.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoAudio.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class AdaptiveDynamicStreamingTemplateStreamInfoVideo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdaptiveDynamicStreamingTemplateStreamInfoVideo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoVideo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoVideo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class AiAnalysisTemplateClassificationConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiAnalysisTemplateCoverConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiAnalysisTemplateFrameTagConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiAnalysisTemplateTagConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiRecognitionTemplateAsrFullTextConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subtitleFormat":
            suggest = "subtitle_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateAsrFullTextConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateAsrFullTextConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateAsrFullTextConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 subtitle_format: Optional[str] = None):
        pulumi.set(__self__, "switch", switch)
        if subtitle_format is not None:
            pulumi.set(__self__, "subtitle_format", subtitle_format)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="subtitleFormat")
    def subtitle_format(self) -> Optional[str]:
        return pulumi.get(self, "subtitle_format")


@pulumi.output_type
class AiRecognitionTemplateAsrWordsConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSets":
            suggest = "label_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateAsrWordsConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateAsrWordsConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateAsrWordsConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 label_sets: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "label_sets")


@pulumi.output_type
class AiRecognitionTemplateFaceConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultLibraryLabelSets":
            suggest = "default_library_label_sets"
        elif key == "faceLibrary":
            suggest = "face_library"
        elif key == "userDefineLibraryLabelSets":
            suggest = "user_define_library_label_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateFaceConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateFaceConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateFaceConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 default_library_label_sets: Optional[Sequence[str]] = None,
                 face_library: Optional[str] = None,
                 score: Optional[float] = None,
                 user_define_library_label_sets: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if default_library_label_sets is not None:
            pulumi.set(__self__, "default_library_label_sets", default_library_label_sets)
        if face_library is not None:
            pulumi.set(__self__, "face_library", face_library)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if user_define_library_label_sets is not None:
            pulumi.set(__self__, "user_define_library_label_sets", user_define_library_label_sets)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="defaultLibraryLabelSets")
    def default_library_label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "default_library_label_sets")

    @property
    @pulumi.getter(name="faceLibrary")
    def face_library(self) -> Optional[str]:
        return pulumi.get(self, "face_library")

    @property
    @pulumi.getter
    def score(self) -> Optional[float]:
        return pulumi.get(self, "score")

    @property
    @pulumi.getter(name="userDefineLibraryLabelSets")
    def user_define_library_label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_define_library_label_sets")


@pulumi.output_type
class AiRecognitionTemplateOcrFullTextConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiRecognitionTemplateOcrWordsConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSets":
            suggest = "label_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateOcrWordsConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateOcrWordsConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateOcrWordsConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 label_sets: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "label_sets")


@pulumi.output_type
class ContentReviewTemplatePoliticalConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asrReviewInfo":
            suggest = "asr_review_info"
        elif key == "imgReviewInfo":
            suggest = "img_review_info"
        elif key == "ocrReviewInfo":
            suggest = "ocr_review_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePoliticalConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePoliticalConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePoliticalConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asr_review_info: Optional['outputs.ContentReviewTemplatePoliticalConfigureAsrReviewInfo'] = None,
                 img_review_info: Optional['outputs.ContentReviewTemplatePoliticalConfigureImgReviewInfo'] = None,
                 ocr_review_info: Optional['outputs.ContentReviewTemplatePoliticalConfigureOcrReviewInfo'] = None):
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if img_review_info is not None:
            pulumi.set(__self__, "img_review_info", img_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional['outputs.ContentReviewTemplatePoliticalConfigureAsrReviewInfo']:
        return pulumi.get(self, "asr_review_info")

    @property
    @pulumi.getter(name="imgReviewInfo")
    def img_review_info(self) -> Optional['outputs.ContentReviewTemplatePoliticalConfigureImgReviewInfo']:
        return pulumi.get(self, "img_review_info")

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional['outputs.ContentReviewTemplatePoliticalConfigureOcrReviewInfo']:
        return pulumi.get(self, "ocr_review_info")


@pulumi.output_type
class ContentReviewTemplatePoliticalConfigureAsrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePoliticalConfigureAsrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePoliticalConfigureAsrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePoliticalConfigureAsrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplatePoliticalConfigureImgReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePoliticalConfigureImgReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePoliticalConfigureImgReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePoliticalConfigureImgReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplatePoliticalConfigureOcrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePoliticalConfigureOcrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePoliticalConfigureOcrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePoliticalConfigureOcrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplatePornConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asrReviewInfo":
            suggest = "asr_review_info"
        elif key == "imgReviewInfo":
            suggest = "img_review_info"
        elif key == "ocrReviewInfo":
            suggest = "ocr_review_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePornConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePornConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePornConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asr_review_info: Optional['outputs.ContentReviewTemplatePornConfigureAsrReviewInfo'] = None,
                 img_review_info: Optional['outputs.ContentReviewTemplatePornConfigureImgReviewInfo'] = None,
                 ocr_review_info: Optional['outputs.ContentReviewTemplatePornConfigureOcrReviewInfo'] = None):
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if img_review_info is not None:
            pulumi.set(__self__, "img_review_info", img_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional['outputs.ContentReviewTemplatePornConfigureAsrReviewInfo']:
        return pulumi.get(self, "asr_review_info")

    @property
    @pulumi.getter(name="imgReviewInfo")
    def img_review_info(self) -> Optional['outputs.ContentReviewTemplatePornConfigureImgReviewInfo']:
        return pulumi.get(self, "img_review_info")

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional['outputs.ContentReviewTemplatePornConfigureOcrReviewInfo']:
        return pulumi.get(self, "ocr_review_info")


@pulumi.output_type
class ContentReviewTemplatePornConfigureAsrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePornConfigureAsrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePornConfigureAsrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePornConfigureAsrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplatePornConfigureImgReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePornConfigureImgReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePornConfigureImgReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePornConfigureImgReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplatePornConfigureOcrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePornConfigureOcrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePornConfigureOcrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePornConfigureOcrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateProhibitedConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asrReviewInfo":
            suggest = "asr_review_info"
        elif key == "ocrReviewInfo":
            suggest = "ocr_review_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateProhibitedConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateProhibitedConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateProhibitedConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asr_review_info: Optional['outputs.ContentReviewTemplateProhibitedConfigureAsrReviewInfo'] = None,
                 ocr_review_info: Optional['outputs.ContentReviewTemplateProhibitedConfigureOcrReviewInfo'] = None):
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional['outputs.ContentReviewTemplateProhibitedConfigureAsrReviewInfo']:
        return pulumi.get(self, "asr_review_info")

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional['outputs.ContentReviewTemplateProhibitedConfigureOcrReviewInfo']:
        return pulumi.get(self, "ocr_review_info")


@pulumi.output_type
class ContentReviewTemplateProhibitedConfigureAsrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateProhibitedConfigureAsrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateProhibitedConfigureAsrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateProhibitedConfigureAsrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateProhibitedConfigureOcrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateProhibitedConfigureOcrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateProhibitedConfigureOcrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateProhibitedConfigureOcrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateTerrorismConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ocrReviewInfo":
            suggest = "ocr_review_info"
        elif key == "imgReviewInfo":
            suggest = "img_review_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateTerrorismConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateTerrorismConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateTerrorismConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ocr_review_info: 'outputs.ContentReviewTemplateTerrorismConfigureOcrReviewInfo',
                 img_review_info: Optional['outputs.ContentReviewTemplateTerrorismConfigureImgReviewInfo'] = None):
        pulumi.set(__self__, "ocr_review_info", ocr_review_info)
        if img_review_info is not None:
            pulumi.set(__self__, "img_review_info", img_review_info)

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> 'outputs.ContentReviewTemplateTerrorismConfigureOcrReviewInfo':
        return pulumi.get(self, "ocr_review_info")

    @property
    @pulumi.getter(name="imgReviewInfo")
    def img_review_info(self) -> Optional['outputs.ContentReviewTemplateTerrorismConfigureImgReviewInfo']:
        return pulumi.get(self, "img_review_info")


@pulumi.output_type
class ContentReviewTemplateTerrorismConfigureImgReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateTerrorismConfigureImgReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateTerrorismConfigureImgReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateTerrorismConfigureImgReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateTerrorismConfigureOcrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateTerrorismConfigureOcrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateTerrorismConfigureOcrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateTerrorismConfigureOcrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateUserDefineConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asrReviewInfo":
            suggest = "asr_review_info"
        elif key == "faceReviewInfo":
            suggest = "face_review_info"
        elif key == "ocrReviewInfo":
            suggest = "ocr_review_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateUserDefineConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateUserDefineConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateUserDefineConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asr_review_info: Optional['outputs.ContentReviewTemplateUserDefineConfigureAsrReviewInfo'] = None,
                 face_review_info: Optional['outputs.ContentReviewTemplateUserDefineConfigureFaceReviewInfo'] = None,
                 ocr_review_info: Optional['outputs.ContentReviewTemplateUserDefineConfigureOcrReviewInfo'] = None):
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if face_review_info is not None:
            pulumi.set(__self__, "face_review_info", face_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional['outputs.ContentReviewTemplateUserDefineConfigureAsrReviewInfo']:
        return pulumi.get(self, "asr_review_info")

    @property
    @pulumi.getter(name="faceReviewInfo")
    def face_review_info(self) -> Optional['outputs.ContentReviewTemplateUserDefineConfigureFaceReviewInfo']:
        return pulumi.get(self, "face_review_info")

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional['outputs.ContentReviewTemplateUserDefineConfigureOcrReviewInfo']:
        return pulumi.get(self, "ocr_review_info")


@pulumi.output_type
class ContentReviewTemplateUserDefineConfigureAsrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateUserDefineConfigureAsrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateUserDefineConfigureAsrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateUserDefineConfigureAsrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateUserDefineConfigureFaceReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateUserDefineConfigureFaceReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateUserDefineConfigureFaceReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateUserDefineConfigureFaceReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateUserDefineConfigureOcrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateUserDefineConfigureOcrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateUserDefineConfigureOcrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateUserDefineConfigureOcrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class EditMediaOperationFileInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputInfo":
            suggest = "input_info"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationFileInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationFileInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationFileInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_info: 'outputs.EditMediaOperationFileInfoInputInfo',
                 end_time_offset: Optional[float] = None,
                 start_time_offset: Optional[float] = None):
        pulumi.set(__self__, "input_info", input_info)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="inputInfo")
    def input_info(self) -> 'outputs.EditMediaOperationFileInfoInputInfo':
        return pulumi.get(self, "input_info")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class EditMediaOperationFileInfoInputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationFileInfoInputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationFileInfoInputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationFileInfoInputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.EditMediaOperationFileInfoInputInfoCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.EditMediaOperationFileInfoInputInfoS3InputInfo'] = None,
                 url_input_info: Optional['outputs.EditMediaOperationFileInfoInputInfoUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.EditMediaOperationFileInfoInputInfoCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.EditMediaOperationFileInfoInputInfoS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.EditMediaOperationFileInfoInputInfoUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class EditMediaOperationFileInfoInputInfoCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class EditMediaOperationFileInfoInputInfoS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationFileInfoInputInfoS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationFileInfoInputInfoS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationFileInfoInputInfoS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class EditMediaOperationFileInfoInputInfoUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class EditMediaOperationOutputConfig(dict):
    def __init__(__self__, *,
                 container: Optional[str] = None,
                 type: Optional[str] = None):
        if container is not None:
            pulumi.set(__self__, "container", container)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class EditMediaOperationOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.EditMediaOperationOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.EditMediaOperationOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.EditMediaOperationOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.EditMediaOperationOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class EditMediaOperationOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class EditMediaOperationOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class EditMediaOperationTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsSqs":
            suggest = "aws_sqs"
        elif key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_sqs: Optional['outputs.EditMediaOperationTaskNotifyConfigAwsSqs'] = None,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional['outputs.EditMediaOperationTaskNotifyConfigAwsSqs']:
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class EditMediaOperationTaskNotifyConfigAwsSqs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqsQueueName":
            suggest = "sqs_queue_name"
        elif key == "sqsRegion":
            suggest = "sqs_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationTaskNotifyConfigAwsSqs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sqs_queue_name: str,
                 sqs_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        return pulumi.get(self, "sqs_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class FlowInputGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputName":
            suggest = "input_name"
        elif key == "allowIpLists":
            suggest = "allow_ip_lists"
        elif key == "failOver":
            suggest = "fail_over"
        elif key == "hlsPullSettings":
            suggest = "hls_pull_settings"
        elif key == "resilientStream":
            suggest = "resilient_stream"
        elif key == "rtmpPullSettings":
            suggest = "rtmp_pull_settings"
        elif key == "rtpSettings":
            suggest = "rtp_settings"
        elif key == "rtspPullSettings":
            suggest = "rtsp_pull_settings"
        elif key == "srtSettings":
            suggest = "srt_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_name: str,
                 protocol: str,
                 allow_ip_lists: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 fail_over: Optional[str] = None,
                 hls_pull_settings: Optional['outputs.FlowInputGroupHlsPullSettings'] = None,
                 resilient_stream: Optional['outputs.FlowInputGroupResilientStream'] = None,
                 rtmp_pull_settings: Optional['outputs.FlowInputGroupRtmpPullSettings'] = None,
                 rtp_settings: Optional['outputs.FlowInputGroupRtpSettings'] = None,
                 rtsp_pull_settings: Optional['outputs.FlowInputGroupRtspPullSettings'] = None,
                 srt_settings: Optional['outputs.FlowInputGroupSrtSettings'] = None):
        pulumi.set(__self__, "input_name", input_name)
        pulumi.set(__self__, "protocol", protocol)
        if allow_ip_lists is not None:
            pulumi.set(__self__, "allow_ip_lists", allow_ip_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fail_over is not None:
            pulumi.set(__self__, "fail_over", fail_over)
        if hls_pull_settings is not None:
            pulumi.set(__self__, "hls_pull_settings", hls_pull_settings)
        if resilient_stream is not None:
            pulumi.set(__self__, "resilient_stream", resilient_stream)
        if rtmp_pull_settings is not None:
            pulumi.set(__self__, "rtmp_pull_settings", rtmp_pull_settings)
        if rtp_settings is not None:
            pulumi.set(__self__, "rtp_settings", rtp_settings)
        if rtsp_pull_settings is not None:
            pulumi.set(__self__, "rtsp_pull_settings", rtsp_pull_settings)
        if srt_settings is not None:
            pulumi.set(__self__, "srt_settings", srt_settings)

    @property
    @pulumi.getter(name="inputName")
    def input_name(self) -> str:
        return pulumi.get(self, "input_name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="allowIpLists")
    def allow_ip_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allow_ip_lists")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failOver")
    def fail_over(self) -> Optional[str]:
        return pulumi.get(self, "fail_over")

    @property
    @pulumi.getter(name="hlsPullSettings")
    def hls_pull_settings(self) -> Optional['outputs.FlowInputGroupHlsPullSettings']:
        return pulumi.get(self, "hls_pull_settings")

    @property
    @pulumi.getter(name="resilientStream")
    def resilient_stream(self) -> Optional['outputs.FlowInputGroupResilientStream']:
        return pulumi.get(self, "resilient_stream")

    @property
    @pulumi.getter(name="rtmpPullSettings")
    def rtmp_pull_settings(self) -> Optional['outputs.FlowInputGroupRtmpPullSettings']:
        return pulumi.get(self, "rtmp_pull_settings")

    @property
    @pulumi.getter(name="rtpSettings")
    def rtp_settings(self) -> Optional['outputs.FlowInputGroupRtpSettings']:
        return pulumi.get(self, "rtp_settings")

    @property
    @pulumi.getter(name="rtspPullSettings")
    def rtsp_pull_settings(self) -> Optional['outputs.FlowInputGroupRtspPullSettings']:
        return pulumi.get(self, "rtsp_pull_settings")

    @property
    @pulumi.getter(name="srtSettings")
    def srt_settings(self) -> Optional['outputs.FlowInputGroupSrtSettings']:
        return pulumi.get(self, "srt_settings")


@pulumi.output_type
class FlowInputGroupHlsPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupHlsPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupHlsPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupHlsPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.FlowInputGroupHlsPullSettingsSourceAddress']):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.FlowInputGroupHlsPullSettingsSourceAddress']:
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class FlowInputGroupHlsPullSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class FlowInputGroupResilientStream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bufferTime":
            suggest = "buffer_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupResilientStream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupResilientStream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupResilientStream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer_time: Optional[int] = None,
                 enable: Optional[bool] = None):
        if buffer_time is not None:
            pulumi.set(__self__, "buffer_time", buffer_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="bufferTime")
    def buffer_time(self) -> Optional[int]:
        return pulumi.get(self, "buffer_time")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")


@pulumi.output_type
class FlowInputGroupRtmpPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupRtmpPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupRtmpPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupRtmpPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.FlowInputGroupRtmpPullSettingsSourceAddress']):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.FlowInputGroupRtmpPullSettingsSourceAddress']:
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class FlowInputGroupRtmpPullSettingsSourceAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamKey":
            suggest = "stream_key"
        elif key == "tcUrl":
            suggest = "tc_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupRtmpPullSettingsSourceAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupRtmpPullSettingsSourceAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupRtmpPullSettingsSourceAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_key: str,
                 tc_url: str):
        pulumi.set(__self__, "stream_key", stream_key)
        pulumi.set(__self__, "tc_url", tc_url)

    @property
    @pulumi.getter(name="streamKey")
    def stream_key(self) -> str:
        return pulumi.get(self, "stream_key")

    @property
    @pulumi.getter(name="tcUrl")
    def tc_url(self) -> str:
        return pulumi.get(self, "tc_url")


@pulumi.output_type
class FlowInputGroupRtpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeout":
            suggest = "idle_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupRtpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupRtpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupRtpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fec: Optional[str] = None,
                 idle_timeout: Optional[int] = None):
        if fec is not None:
            pulumi.set(__self__, "fec", fec)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter
    def fec(self) -> Optional[str]:
        return pulumi.get(self, "fec")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[int]:
        return pulumi.get(self, "idle_timeout")


@pulumi.output_type
class FlowInputGroupRtspPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupRtspPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupRtspPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupRtspPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.FlowInputGroupRtspPullSettingsSourceAddress']):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.FlowInputGroupRtspPullSettingsSourceAddress']:
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class FlowInputGroupRtspPullSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class FlowInputGroupSrtSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pbKeyLen":
            suggest = "pb_key_len"
        elif key == "peerIdleTimeout":
            suggest = "peer_idle_timeout"
        elif key == "peerLatency":
            suggest = "peer_latency"
        elif key == "recvLatency":
            suggest = "recv_latency"
        elif key == "sourceAddresses":
            suggest = "source_addresses"
        elif key == "streamId":
            suggest = "stream_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupSrtSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupSrtSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupSrtSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 latency: Optional[int] = None,
                 mode: Optional[str] = None,
                 passphrase: Optional[str] = None,
                 pb_key_len: Optional[int] = None,
                 peer_idle_timeout: Optional[int] = None,
                 peer_latency: Optional[int] = None,
                 recv_latency: Optional[int] = None,
                 source_addresses: Optional[Sequence['outputs.FlowInputGroupSrtSettingsSourceAddress']] = None,
                 stream_id: Optional[str] = None):
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pb_key_len is not None:
            pulumi.set(__self__, "pb_key_len", pb_key_len)
        if peer_idle_timeout is not None:
            pulumi.set(__self__, "peer_idle_timeout", peer_idle_timeout)
        if peer_latency is not None:
            pulumi.set(__self__, "peer_latency", peer_latency)
        if recv_latency is not None:
            pulumi.set(__self__, "recv_latency", recv_latency)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter(name="pbKeyLen")
    def pb_key_len(self) -> Optional[int]:
        return pulumi.get(self, "pb_key_len")

    @property
    @pulumi.getter(name="peerIdleTimeout")
    def peer_idle_timeout(self) -> Optional[int]:
        return pulumi.get(self, "peer_idle_timeout")

    @property
    @pulumi.getter(name="peerLatency")
    def peer_latency(self) -> Optional[int]:
        return pulumi.get(self, "peer_latency")

    @property
    @pulumi.getter(name="recvLatency")
    def recv_latency(self) -> Optional[int]:
        return pulumi.get(self, "recv_latency")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[Sequence['outputs.FlowInputGroupSrtSettingsSourceAddress']]:
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class FlowInputGroupSrtSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class InputInputGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputName":
            suggest = "input_name"
        elif key == "allowIpLists":
            suggest = "allow_ip_lists"
        elif key == "failOver":
            suggest = "fail_over"
        elif key == "hlsPullSettings":
            suggest = "hls_pull_settings"
        elif key == "resilientStream":
            suggest = "resilient_stream"
        elif key == "rtmpPullSettings":
            suggest = "rtmp_pull_settings"
        elif key == "rtpSettings":
            suggest = "rtp_settings"
        elif key == "rtspPullSettings":
            suggest = "rtsp_pull_settings"
        elif key == "srtSettings":
            suggest = "srt_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_name: str,
                 protocol: str,
                 allow_ip_lists: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 fail_over: Optional[str] = None,
                 hls_pull_settings: Optional['outputs.InputInputGroupHlsPullSettings'] = None,
                 resilient_stream: Optional['outputs.InputInputGroupResilientStream'] = None,
                 rtmp_pull_settings: Optional['outputs.InputInputGroupRtmpPullSettings'] = None,
                 rtp_settings: Optional['outputs.InputInputGroupRtpSettings'] = None,
                 rtsp_pull_settings: Optional['outputs.InputInputGroupRtspPullSettings'] = None,
                 srt_settings: Optional['outputs.InputInputGroupSrtSettings'] = None):
        pulumi.set(__self__, "input_name", input_name)
        pulumi.set(__self__, "protocol", protocol)
        if allow_ip_lists is not None:
            pulumi.set(__self__, "allow_ip_lists", allow_ip_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fail_over is not None:
            pulumi.set(__self__, "fail_over", fail_over)
        if hls_pull_settings is not None:
            pulumi.set(__self__, "hls_pull_settings", hls_pull_settings)
        if resilient_stream is not None:
            pulumi.set(__self__, "resilient_stream", resilient_stream)
        if rtmp_pull_settings is not None:
            pulumi.set(__self__, "rtmp_pull_settings", rtmp_pull_settings)
        if rtp_settings is not None:
            pulumi.set(__self__, "rtp_settings", rtp_settings)
        if rtsp_pull_settings is not None:
            pulumi.set(__self__, "rtsp_pull_settings", rtsp_pull_settings)
        if srt_settings is not None:
            pulumi.set(__self__, "srt_settings", srt_settings)

    @property
    @pulumi.getter(name="inputName")
    def input_name(self) -> str:
        return pulumi.get(self, "input_name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="allowIpLists")
    def allow_ip_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allow_ip_lists")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failOver")
    def fail_over(self) -> Optional[str]:
        return pulumi.get(self, "fail_over")

    @property
    @pulumi.getter(name="hlsPullSettings")
    def hls_pull_settings(self) -> Optional['outputs.InputInputGroupHlsPullSettings']:
        return pulumi.get(self, "hls_pull_settings")

    @property
    @pulumi.getter(name="resilientStream")
    def resilient_stream(self) -> Optional['outputs.InputInputGroupResilientStream']:
        return pulumi.get(self, "resilient_stream")

    @property
    @pulumi.getter(name="rtmpPullSettings")
    def rtmp_pull_settings(self) -> Optional['outputs.InputInputGroupRtmpPullSettings']:
        return pulumi.get(self, "rtmp_pull_settings")

    @property
    @pulumi.getter(name="rtpSettings")
    def rtp_settings(self) -> Optional['outputs.InputInputGroupRtpSettings']:
        return pulumi.get(self, "rtp_settings")

    @property
    @pulumi.getter(name="rtspPullSettings")
    def rtsp_pull_settings(self) -> Optional['outputs.InputInputGroupRtspPullSettings']:
        return pulumi.get(self, "rtsp_pull_settings")

    @property
    @pulumi.getter(name="srtSettings")
    def srt_settings(self) -> Optional['outputs.InputInputGroupSrtSettings']:
        return pulumi.get(self, "srt_settings")


@pulumi.output_type
class InputInputGroupHlsPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupHlsPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupHlsPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupHlsPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.InputInputGroupHlsPullSettingsSourceAddress']):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.InputInputGroupHlsPullSettingsSourceAddress']:
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class InputInputGroupHlsPullSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class InputInputGroupResilientStream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bufferTime":
            suggest = "buffer_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupResilientStream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupResilientStream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupResilientStream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer_time: Optional[int] = None,
                 enable: Optional[bool] = None):
        if buffer_time is not None:
            pulumi.set(__self__, "buffer_time", buffer_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="bufferTime")
    def buffer_time(self) -> Optional[int]:
        return pulumi.get(self, "buffer_time")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")


@pulumi.output_type
class InputInputGroupRtmpPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupRtmpPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupRtmpPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupRtmpPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.InputInputGroupRtmpPullSettingsSourceAddress']):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.InputInputGroupRtmpPullSettingsSourceAddress']:
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class InputInputGroupRtmpPullSettingsSourceAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamKey":
            suggest = "stream_key"
        elif key == "tcUrl":
            suggest = "tc_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupRtmpPullSettingsSourceAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupRtmpPullSettingsSourceAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupRtmpPullSettingsSourceAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_key: str,
                 tc_url: str):
        pulumi.set(__self__, "stream_key", stream_key)
        pulumi.set(__self__, "tc_url", tc_url)

    @property
    @pulumi.getter(name="streamKey")
    def stream_key(self) -> str:
        return pulumi.get(self, "stream_key")

    @property
    @pulumi.getter(name="tcUrl")
    def tc_url(self) -> str:
        return pulumi.get(self, "tc_url")


@pulumi.output_type
class InputInputGroupRtpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeout":
            suggest = "idle_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupRtpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupRtpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupRtpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fec: Optional[str] = None,
                 idle_timeout: Optional[int] = None):
        if fec is not None:
            pulumi.set(__self__, "fec", fec)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter
    def fec(self) -> Optional[str]:
        return pulumi.get(self, "fec")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[int]:
        return pulumi.get(self, "idle_timeout")


@pulumi.output_type
class InputInputGroupRtspPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupRtspPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupRtspPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupRtspPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.InputInputGroupRtspPullSettingsSourceAddress']):
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.InputInputGroupRtspPullSettingsSourceAddress']:
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class InputInputGroupRtspPullSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class InputInputGroupSrtSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pbKeyLen":
            suggest = "pb_key_len"
        elif key == "peerIdleTimeout":
            suggest = "peer_idle_timeout"
        elif key == "peerLatency":
            suggest = "peer_latency"
        elif key == "recvLatency":
            suggest = "recv_latency"
        elif key == "sourceAddresses":
            suggest = "source_addresses"
        elif key == "streamId":
            suggest = "stream_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupSrtSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupSrtSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupSrtSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 latency: Optional[int] = None,
                 mode: Optional[str] = None,
                 passphrase: Optional[str] = None,
                 pb_key_len: Optional[int] = None,
                 peer_idle_timeout: Optional[int] = None,
                 peer_latency: Optional[int] = None,
                 recv_latency: Optional[int] = None,
                 source_addresses: Optional[Sequence['outputs.InputInputGroupSrtSettingsSourceAddress']] = None,
                 stream_id: Optional[str] = None):
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pb_key_len is not None:
            pulumi.set(__self__, "pb_key_len", pb_key_len)
        if peer_idle_timeout is not None:
            pulumi.set(__self__, "peer_idle_timeout", peer_idle_timeout)
        if peer_latency is not None:
            pulumi.set(__self__, "peer_latency", peer_latency)
        if recv_latency is not None:
            pulumi.set(__self__, "recv_latency", recv_latency)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter(name="pbKeyLen")
    def pb_key_len(self) -> Optional[int]:
        return pulumi.get(self, "pb_key_len")

    @property
    @pulumi.getter(name="peerIdleTimeout")
    def peer_idle_timeout(self) -> Optional[int]:
        return pulumi.get(self, "peer_idle_timeout")

    @property
    @pulumi.getter(name="peerLatency")
    def peer_latency(self) -> Optional[int]:
        return pulumi.get(self, "peer_latency")

    @property
    @pulumi.getter(name="recvLatency")
    def recv_latency(self) -> Optional[int]:
        return pulumi.get(self, "recv_latency")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[Sequence['outputs.InputInputGroupSrtSettingsSourceAddress']]:
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class InputInputGroupSrtSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class OutputOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputName":
            suggest = "output_name"
        elif key == "outputRegion":
            suggest = "output_region"
        elif key == "allowIpLists":
            suggest = "allow_ip_lists"
        elif key == "maxConcurrent":
            suggest = "max_concurrent"
        elif key == "rtmpSettings":
            suggest = "rtmp_settings"
        elif key == "rtpSettings":
            suggest = "rtp_settings"
        elif key == "srtSettings":
            suggest = "srt_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 output_name: str,
                 output_region: str,
                 protocol: str,
                 allow_ip_lists: Optional[Sequence[str]] = None,
                 max_concurrent: Optional[int] = None,
                 rtmp_settings: Optional['outputs.OutputOutputRtmpSettings'] = None,
                 rtp_settings: Optional['outputs.OutputOutputRtpSettings'] = None,
                 srt_settings: Optional['outputs.OutputOutputSrtSettings'] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "output_name", output_name)
        pulumi.set(__self__, "output_region", output_region)
        pulumi.set(__self__, "protocol", protocol)
        if allow_ip_lists is not None:
            pulumi.set(__self__, "allow_ip_lists", allow_ip_lists)
        if max_concurrent is not None:
            pulumi.set(__self__, "max_concurrent", max_concurrent)
        if rtmp_settings is not None:
            pulumi.set(__self__, "rtmp_settings", rtmp_settings)
        if rtp_settings is not None:
            pulumi.set(__self__, "rtp_settings", rtp_settings)
        if srt_settings is not None:
            pulumi.set(__self__, "srt_settings", srt_settings)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="outputName")
    def output_name(self) -> str:
        return pulumi.get(self, "output_name")

    @property
    @pulumi.getter(name="outputRegion")
    def output_region(self) -> str:
        return pulumi.get(self, "output_region")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="allowIpLists")
    def allow_ip_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allow_ip_lists")

    @property
    @pulumi.getter(name="maxConcurrent")
    def max_concurrent(self) -> Optional[int]:
        return pulumi.get(self, "max_concurrent")

    @property
    @pulumi.getter(name="rtmpSettings")
    def rtmp_settings(self) -> Optional['outputs.OutputOutputRtmpSettings']:
        return pulumi.get(self, "rtmp_settings")

    @property
    @pulumi.getter(name="rtpSettings")
    def rtp_settings(self) -> Optional['outputs.OutputOutputRtpSettings']:
        return pulumi.get(self, "rtp_settings")

    @property
    @pulumi.getter(name="srtSettings")
    def srt_settings(self) -> Optional['outputs.OutputOutputSrtSettings']:
        return pulumi.get(self, "srt_settings")


@pulumi.output_type
class OutputOutputRtmpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chunkSize":
            suggest = "chunk_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputOutputRtmpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputOutputRtmpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputOutputRtmpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence['outputs.OutputOutputRtmpSettingsDestination'],
                 chunk_size: Optional[int] = None):
        pulumi.set(__self__, "destinations", destinations)
        if chunk_size is not None:
            pulumi.set(__self__, "chunk_size", chunk_size)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.OutputOutputRtmpSettingsDestination']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="chunkSize")
    def chunk_size(self) -> Optional[int]:
        return pulumi.get(self, "chunk_size")


@pulumi.output_type
class OutputOutputRtmpSettingsDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamKey":
            suggest = "stream_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputOutputRtmpSettingsDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputOutputRtmpSettingsDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputOutputRtmpSettingsDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_key: str,
                 url: str):
        pulumi.set(__self__, "stream_key", stream_key)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="streamKey")
    def stream_key(self) -> str:
        return pulumi.get(self, "stream_key")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class OutputOutputRtpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeout":
            suggest = "idle_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputOutputRtpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputOutputRtpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputOutputRtpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence['outputs.OutputOutputRtpSettingsDestination'],
                 fec: str,
                 idle_timeout: int):
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "fec", fec)
        pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.OutputOutputRtpSettingsDestination']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def fec(self) -> str:
        return pulumi.get(self, "fec")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> int:
        return pulumi.get(self, "idle_timeout")


@pulumi.output_type
class OutputOutputRtpSettingsDestination(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class OutputOutputSrtSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pbKeyLen":
            suggest = "pb_key_len"
        elif key == "peerIdleTimeout":
            suggest = "peer_idle_timeout"
        elif key == "peerLatency":
            suggest = "peer_latency"
        elif key == "recvLatency":
            suggest = "recv_latency"
        elif key == "streamId":
            suggest = "stream_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputOutputSrtSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputOutputSrtSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputOutputSrtSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence['outputs.OutputOutputSrtSettingsDestination'],
                 latency: Optional[int] = None,
                 mode: Optional[str] = None,
                 passphrase: Optional[str] = None,
                 pb_key_len: Optional[int] = None,
                 peer_idle_timeout: Optional[int] = None,
                 peer_latency: Optional[int] = None,
                 recv_latency: Optional[int] = None,
                 stream_id: Optional[str] = None):
        pulumi.set(__self__, "destinations", destinations)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pb_key_len is not None:
            pulumi.set(__self__, "pb_key_len", pb_key_len)
        if peer_idle_timeout is not None:
            pulumi.set(__self__, "peer_idle_timeout", peer_idle_timeout)
        if peer_latency is not None:
            pulumi.set(__self__, "peer_latency", peer_latency)
        if recv_latency is not None:
            pulumi.set(__self__, "recv_latency", recv_latency)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.OutputOutputSrtSettingsDestination']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter(name="pbKeyLen")
    def pb_key_len(self) -> Optional[int]:
        return pulumi.get(self, "pb_key_len")

    @property
    @pulumi.getter(name="peerIdleTimeout")
    def peer_idle_timeout(self) -> Optional[int]:
        return pulumi.get(self, "peer_idle_timeout")

    @property
    @pulumi.getter(name="peerLatency")
    def peer_latency(self) -> Optional[int]:
        return pulumi.get(self, "peer_latency")

    @property
    @pulumi.getter(name="recvLatency")
    def recv_latency(self) -> Optional[int]:
        return pulumi.get(self, "recv_latency")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class OutputOutputSrtSettingsDestination(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class ProcessLiveStreamOperationAiAnalysisTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedParameter":
            suggest = "extended_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessLiveStreamOperationAiAnalysisTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessLiveStreamOperationAiAnalysisTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessLiveStreamOperationAiAnalysisTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[str]:
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class ProcessLiveStreamOperationAiContentReviewTask(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessLiveStreamOperationAiQualityControlTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelExtPara":
            suggest = "channel_ext_para"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessLiveStreamOperationAiQualityControlTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessLiveStreamOperationAiQualityControlTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessLiveStreamOperationAiQualityControlTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_ext_para: Optional[str] = None,
                 definition: Optional[int] = None):
        if channel_ext_para is not None:
            pulumi.set(__self__, "channel_ext_para", channel_ext_para)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter(name="channelExtPara")
    def channel_ext_para(self) -> Optional[str]:
        return pulumi.get(self, "channel_ext_para")

    @property
    @pulumi.getter
    def definition(self) -> Optional[int]:
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessLiveStreamOperationAiRecognitionTask(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessLiveStreamOperationOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessLiveStreamOperationOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessLiveStreamOperationOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessLiveStreamOperationOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessLiveStreamOperationOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessLiveStreamOperationOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessLiveStreamOperationOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessLiveStreamOperationOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessLiveStreamOperationOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessLiveStreamOperationOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessLiveStreamOperationOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessLiveStreamOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessLiveStreamOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessLiveStreamOperationTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessLiveStreamOperationTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessLiveStreamOperationTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessLiveStreamOperationTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class ProcessMediaOperationAiAnalysisTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedParameter":
            suggest = "extended_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationAiAnalysisTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationAiAnalysisTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationAiAnalysisTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[str]:
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class ProcessMediaOperationAiContentReviewTask(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessMediaOperationAiQualityControlTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelExtPara":
            suggest = "channel_ext_para"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationAiQualityControlTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationAiQualityControlTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationAiQualityControlTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_ext_para: Optional[str] = None,
                 definition: Optional[int] = None):
        if channel_ext_para is not None:
            pulumi.set(__self__, "channel_ext_para", channel_ext_para)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter(name="channelExtPara")
    def channel_ext_para(self) -> Optional[str]:
        return pulumi.get(self, "channel_ext_para")

    @property
    @pulumi.getter
    def definition(self) -> Optional[int]:
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessMediaOperationAiRecognitionTask(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessMediaOperationInputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationInputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationInputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationInputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationInputInfoCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationInputInfoS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationInputInfoUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationInputInfoCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationInputInfoS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationInputInfoUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationInputInfoCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationInputInfoS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationInputInfoS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationInputInfoS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationInputInfoS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationInputInfoUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adaptiveDynamicStreamingTaskSets":
            suggest = "adaptive_dynamic_streaming_task_sets"
        elif key == "animatedGraphicTaskSets":
            suggest = "animated_graphic_task_sets"
        elif key == "imageSpriteTaskSets":
            suggest = "image_sprite_task_sets"
        elif key == "sampleSnapshotTaskSets":
            suggest = "sample_snapshot_task_sets"
        elif key == "snapshotByTimeOffsetTaskSets":
            suggest = "snapshot_by_time_offset_task_sets"
        elif key == "transcodeTaskSets":
            suggest = "transcode_task_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet']] = None,
                 animated_graphic_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet']] = None,
                 image_sprite_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet']] = None,
                 sample_snapshot_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet']] = None,
                 snapshot_by_time_offset_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet']] = None,
                 transcode_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSet']] = None):
        if adaptive_dynamic_streaming_task_sets is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task_sets", adaptive_dynamic_streaming_task_sets)
        if animated_graphic_task_sets is not None:
            pulumi.set(__self__, "animated_graphic_task_sets", animated_graphic_task_sets)
        if image_sprite_task_sets is not None:
            pulumi.set(__self__, "image_sprite_task_sets", image_sprite_task_sets)
        if sample_snapshot_task_sets is not None:
            pulumi.set(__self__, "sample_snapshot_task_sets", sample_snapshot_task_sets)
        if snapshot_by_time_offset_task_sets is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task_sets", snapshot_by_time_offset_task_sets)
        if transcode_task_sets is not None:
            pulumi.set(__self__, "transcode_task_sets", transcode_task_sets)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTaskSets")
    def adaptive_dynamic_streaming_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet']]:
        return pulumi.get(self, "adaptive_dynamic_streaming_task_sets")

    @property
    @pulumi.getter(name="animatedGraphicTaskSets")
    def animated_graphic_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet']]:
        return pulumi.get(self, "animated_graphic_task_sets")

    @property
    @pulumi.getter(name="imageSpriteTaskSets")
    def image_sprite_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet']]:
        return pulumi.get(self, "image_sprite_task_sets")

    @property
    @pulumi.getter(name="sampleSnapshotTaskSets")
    def sample_snapshot_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet']]:
        return pulumi.get(self, "sample_snapshot_task_sets")

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTaskSets")
    def snapshot_by_time_offset_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet']]:
        return pulumi.get(self, "snapshot_by_time_offset_task_sets")

    @property
    @pulumi.getter(name="transcodeTaskSets")
    def transcode_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSet']]:
        return pulumi.get(self, "transcode_task_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOnSubtitles":
            suggest = "add_on_subtitles"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "subStreamObjectName":
            suggest = "sub_stream_object_name"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 add_on_subtitles: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle']] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage'] = None,
                 segment_object_name: Optional[str] = None,
                 sub_stream_object_name: Optional[str] = None,
                 watermark_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle']]:
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[str]:
        return pulumi.get(self, "sub_stream_object_name")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle(dict):
    def __init__(__self__, *,
                 subtitle: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle'] = None,
                 type: Optional[str] = None):
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 start_time_offset: float,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage'] = None):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "webVttObjectName":
            suggest = "web_vtt_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage'] = None,
                 web_vtt_object_name: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[str]:
        return pulumi.get(self, "web_vtt_object_name")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage'] = None,
                 watermark_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extTimeOffsetSets":
            suggest = "ext_time_offset_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "timeOffsetSets":
            suggest = "time_offset_sets"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 ext_time_offset_sets: Optional[Sequence[str]] = None,
                 object_number_format: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage'] = None,
                 time_offset_sets: Optional[Sequence[float]] = None,
                 watermark_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if time_offset_sets is not None:
            pulumi.set(__self__, "time_offset_sets", time_offset_sets)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ext_time_offset_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="timeOffsetSets")
    def time_offset_sets(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "time_offset_sets")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "headTailParameter":
            suggest = "head_tail_parameter"
        elif key == "mosaicSets":
            suggest = "mosaic_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "overrideParameter":
            suggest = "override_parameter"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 head_tail_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter'] = None,
                 mosaic_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet']] = None,
                 object_number_format: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage'] = None,
                 override_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter'] = None,
                 raw_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter'] = None,
                 segment_object_name: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 watermark_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter']:
        return pulumi.get(self, "head_tail_parameter")

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet']]:
        return pulumi.get(self, "mosaic_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter']:
        return pulumi.get(self, "override_parameter")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headSets":
            suggest = "head_sets"
        elif key == "tailSets":
            suggest = "tail_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 head_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet']] = None,
                 tail_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet']] = None):
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet']]:
        return pulumi.get(self, "head_sets")

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet']]:
        return pulumi.get(self, "tail_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coordinate_origin: Optional[str] = None,
                 end_time_offset: Optional[float] = None,
                 height: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 width: Optional[str] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOnSubtitles":
            suggest = "add_on_subtitles"
        elif key == "addonAudioStreams":
            suggest = "addon_audio_streams"
        elif key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "stdExtInfo":
            suggest = "std_ext_info"
        elif key == "subtitleTemplate":
            suggest = "subtitle_template"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_on_subtitles: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle']] = None,
                 addon_audio_streams: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream']] = None,
                 audio_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate'] = None,
                 container: Optional[str] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 std_ext_info: Optional[str] = None,
                 subtitle_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate'] = None,
                 tehd_config: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig'] = None,
                 video_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate'] = None):
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if addon_audio_streams is not None:
            pulumi.set(__self__, "addon_audio_streams", addon_audio_streams)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if std_ext_info is not None:
            pulumi.set(__self__, "std_ext_info", std_ext_info)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle']]:
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter(name="addonAudioStreams")
    def addon_audio_streams(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream']]:
        return pulumi.get(self, "addon_audio_streams")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate']:
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="stdExtInfo")
    def std_ext_info(self) -> Optional[str]:
        return pulumi.get(self, "std_ext_info")

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate']:
        return pulumi.get(self, "subtitle_template")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig']:
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate']:
        return pulumi.get(self, "video_template")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle(dict):
    def __init__(__self__, *,
                 subtitle: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle'] = None,
                 type: Optional[str] = None):
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioChannel":
            suggest = "audio_channel"
        elif key == "sampleRate":
            suggest = "sample_rate"
        elif key == "streamSelects":
            suggest = "stream_selects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_channel: Optional[int] = None,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 sample_rate: Optional[int] = None,
                 stream_selects: Optional[Sequence[int]] = None):
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "stream_selects")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontAlpha":
            suggest = "font_alpha"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"
        elif key == "streamIndex":
            suggest = "stream_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_alpha: Optional[float] = None,
                 font_color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 font_type: Optional[str] = None,
                 path: Optional[str] = None,
                 stream_index: Optional[int] = None):
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[float]:
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[str]:
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[str]:
        return pulumi.get(self, "font_type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[int]:
        return pulumi.get(self, "stream_index")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_video_bitrate: Optional[int] = None,
                 type: Optional[str] = None):
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentAdaptStream":
            suggest = "content_adapt_stream"
        elif key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 content_adapt_stream: Optional[int] = None,
                 fill_type: Optional[str] = None,
                 fps: Optional[int] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[int]:
        return pulumi.get(self, "content_adapt_stream")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> Optional[int]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container: str,
                 audio_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate'] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 tehd_config: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig'] = None,
                 video_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate'] = None):
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> str:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate']:
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig']:
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate']:
        return pulumi.get(self, "video_template")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 max_video_bitrate: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        return pulumi.get(self, "max_video_bitrate")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsSqa":
            suggest = "aws_sqa"
        elif key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_sqa: Optional['outputs.ProcessMediaOperationTaskNotifyConfigAwsSqa'] = None,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        if aws_sqa is not None:
            pulumi.set(__self__, "aws_sqa", aws_sqa)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqa")
    def aws_sqa(self) -> Optional['outputs.ProcessMediaOperationTaskNotifyConfigAwsSqa']:
        return pulumi.get(self, "aws_sqa")

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class ProcessMediaOperationTaskNotifyConfigAwsSqa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqaQueueName":
            suggest = "sqa_queue_name"
        elif key == "sqaRegion":
            suggest = "sqa_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationTaskNotifyConfigAwsSqa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationTaskNotifyConfigAwsSqa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationTaskNotifyConfigAwsSqa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sqa_queue_name: str,
                 sqa_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "sqa_queue_name", sqa_queue_name)
        pulumi.set(__self__, "sqa_region", sqa_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqaQueueName")
    def sqa_queue_name(self) -> str:
        return pulumi.get(self, "sqa_queue_name")

    @property
    @pulumi.getter(name="sqaRegion")
    def sqa_region(self) -> str:
        return pulumi.get(self, "sqa_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activityType":
            suggest = "activity_type"
        elif key == "activityPara":
            suggest = "activity_para"
        elif key == "reardriveIndices":
            suggest = "reardrive_indices"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activity_type: str,
                 activity_para: Optional['outputs.ScheduleActivityActivityPara'] = None,
                 reardrive_indices: Optional[Sequence[int]] = None):
        pulumi.set(__self__, "activity_type", activity_type)
        if activity_para is not None:
            pulumi.set(__self__, "activity_para", activity_para)
        if reardrive_indices is not None:
            pulumi.set(__self__, "reardrive_indices", reardrive_indices)

    @property
    @pulumi.getter(name="activityType")
    def activity_type(self) -> str:
        return pulumi.get(self, "activity_type")

    @property
    @pulumi.getter(name="activityPara")
    def activity_para(self) -> Optional['outputs.ScheduleActivityActivityPara']:
        return pulumi.get(self, "activity_para")

    @property
    @pulumi.getter(name="reardriveIndices")
    def reardrive_indices(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "reardrive_indices")


@pulumi.output_type
class ScheduleActivityActivityPara(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adaptiveDynamicStreamingTask":
            suggest = "adaptive_dynamic_streaming_task"
        elif key == "aiAnalysisTask":
            suggest = "ai_analysis_task"
        elif key == "aiContentReviewTask":
            suggest = "ai_content_review_task"
        elif key == "aiRecognitionTask":
            suggest = "ai_recognition_task"
        elif key == "animatedGraphicTask":
            suggest = "animated_graphic_task"
        elif key == "imageSpriteTask":
            suggest = "image_sprite_task"
        elif key == "sampleSnapshotTask":
            suggest = "sample_snapshot_task"
        elif key == "snapshotByTimeOffsetTask":
            suggest = "snapshot_by_time_offset_task"
        elif key == "transcodeTask":
            suggest = "transcode_task"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityPara. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityPara.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityPara.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTask'] = None,
                 ai_analysis_task: Optional['outputs.ScheduleActivityActivityParaAiAnalysisTask'] = None,
                 ai_content_review_task: Optional['outputs.ScheduleActivityActivityParaAiContentReviewTask'] = None,
                 ai_recognition_task: Optional['outputs.ScheduleActivityActivityParaAiRecognitionTask'] = None,
                 animated_graphic_task: Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTask'] = None,
                 image_sprite_task: Optional['outputs.ScheduleActivityActivityParaImageSpriteTask'] = None,
                 sample_snapshot_task: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTask'] = None,
                 snapshot_by_time_offset_task: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTask'] = None,
                 transcode_task: Optional['outputs.ScheduleActivityActivityParaTranscodeTask'] = None):
        if adaptive_dynamic_streaming_task is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task", adaptive_dynamic_streaming_task)
        if ai_analysis_task is not None:
            pulumi.set(__self__, "ai_analysis_task", ai_analysis_task)
        if ai_content_review_task is not None:
            pulumi.set(__self__, "ai_content_review_task", ai_content_review_task)
        if ai_recognition_task is not None:
            pulumi.set(__self__, "ai_recognition_task", ai_recognition_task)
        if animated_graphic_task is not None:
            pulumi.set(__self__, "animated_graphic_task", animated_graphic_task)
        if image_sprite_task is not None:
            pulumi.set(__self__, "image_sprite_task", image_sprite_task)
        if sample_snapshot_task is not None:
            pulumi.set(__self__, "sample_snapshot_task", sample_snapshot_task)
        if snapshot_by_time_offset_task is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task", snapshot_by_time_offset_task)
        if transcode_task is not None:
            pulumi.set(__self__, "transcode_task", transcode_task)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTask")
    def adaptive_dynamic_streaming_task(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTask']:
        return pulumi.get(self, "adaptive_dynamic_streaming_task")

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> Optional['outputs.ScheduleActivityActivityParaAiAnalysisTask']:
        return pulumi.get(self, "ai_analysis_task")

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> Optional['outputs.ScheduleActivityActivityParaAiContentReviewTask']:
        return pulumi.get(self, "ai_content_review_task")

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> Optional['outputs.ScheduleActivityActivityParaAiRecognitionTask']:
        return pulumi.get(self, "ai_recognition_task")

    @property
    @pulumi.getter(name="animatedGraphicTask")
    def animated_graphic_task(self) -> Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTask']:
        return pulumi.get(self, "animated_graphic_task")

    @property
    @pulumi.getter(name="imageSpriteTask")
    def image_sprite_task(self) -> Optional['outputs.ScheduleActivityActivityParaImageSpriteTask']:
        return pulumi.get(self, "image_sprite_task")

    @property
    @pulumi.getter(name="sampleSnapshotTask")
    def sample_snapshot_task(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTask']:
        return pulumi.get(self, "sample_snapshot_task")

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTask")
    def snapshot_by_time_offset_task(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTask']:
        return pulumi.get(self, "snapshot_by_time_offset_task")

    @property
    @pulumi.getter(name="transcodeTask")
    def transcode_task(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTask']:
        return pulumi.get(self, "transcode_task")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOnSubtitles":
            suggest = "add_on_subtitles"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "subStreamObjectName":
            suggest = "sub_stream_object_name"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 add_on_subtitles: Optional[Sequence['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle']] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage'] = None,
                 segment_object_name: Optional[str] = None,
                 sub_stream_object_name: Optional[str] = None,
                 watermark_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle']]:
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[str]:
        return pulumi.get(self, "sub_stream_object_name")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle(dict):
    def __init__(__self__, *,
                 subtitle: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle'] = None,
                 type: Optional[str] = None):
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaAiAnalysisTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedParameter":
            suggest = "extended_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAiAnalysisTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAiAnalysisTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAiAnalysisTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[str]:
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class ScheduleActivityActivityParaAiContentReviewTask(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class ScheduleActivityActivityParaAiRecognitionTask(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class ScheduleActivityActivityParaAnimatedGraphicTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAnimatedGraphicTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 start_time_offset: float,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage'] = None):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage']:
        return pulumi.get(self, "output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaImageSpriteTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "webVttObjectName":
            suggest = "web_vtt_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaImageSpriteTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaImageSpriteTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaImageSpriteTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorage'] = None,
                 web_vtt_object_name: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[str]:
        return pulumi.get(self, "web_vtt_object_name")


@pulumi.output_type
class ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ScheduleActivityActivityParaImageSpriteTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaImageSpriteTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage'] = None,
                 watermark_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extTimeOffsetSets":
            suggest = "ext_time_offset_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 ext_time_offset_sets: Optional[Sequence[str]] = None,
                 object_number_format: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage'] = None,
                 watermark_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ext_time_offset_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "headTailParameter":
            suggest = "head_tail_parameter"
        elif key == "mosaicSets":
            suggest = "mosaic_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "overrideParameter":
            suggest = "override_parameter"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 head_tail_parameter: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameter'] = None,
                 mosaic_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskMosaicSet']] = None,
                 object_number_format: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorage'] = None,
                 override_parameter: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameter'] = None,
                 raw_parameter: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameter'] = None,
                 segment_object_name: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 watermark_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameter']:
        return pulumi.get(self, "head_tail_parameter")

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskMosaicSet']]:
        return pulumi.get(self, "mosaic_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameter']:
        return pulumi.get(self, "override_parameter")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headSets":
            suggest = "head_sets"
        elif key == "tailSets":
            suggest = "tail_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskHeadTailParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 head_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet']] = None,
                 tail_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet']] = None):
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet']]:
        return pulumi.get(self, "head_sets")

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet']]:
        return pulumi.get(self, "tail_sets")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskMosaicSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskMosaicSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskMosaicSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskMosaicSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coordinate_origin: Optional[str] = None,
                 end_time_offset: Optional[float] = None,
                 height: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 width: Optional[str] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOnSubtitles":
            suggest = "add_on_subtitles"
        elif key == "addonAudioStreams":
            suggest = "addon_audio_streams"
        elif key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "stdExtInfo":
            suggest = "std_ext_info"
        elif key == "subtitleTemplate":
            suggest = "subtitle_template"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_on_subtitles: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle']] = None,
                 addon_audio_streams: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream']] = None,
                 audio_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate'] = None,
                 container: Optional[str] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 std_ext_info: Optional[str] = None,
                 subtitle_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate'] = None,
                 tehd_config: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig'] = None,
                 video_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate'] = None):
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if addon_audio_streams is not None:
            pulumi.set(__self__, "addon_audio_streams", addon_audio_streams)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if std_ext_info is not None:
            pulumi.set(__self__, "std_ext_info", std_ext_info)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle']]:
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter(name="addonAudioStreams")
    def addon_audio_streams(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream']]:
        return pulumi.get(self, "addon_audio_streams")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate']:
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="stdExtInfo")
    def std_ext_info(self) -> Optional[str]:
        return pulumi.get(self, "std_ext_info")

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate']:
        return pulumi.get(self, "subtitle_template")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig']:
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate']:
        return pulumi.get(self, "video_template")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle(dict):
    def __init__(__self__, *,
                 subtitle: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle'] = None,
                 type: Optional[str] = None):
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioChannel":
            suggest = "audio_channel"
        elif key == "sampleRate":
            suggest = "sample_rate"
        elif key == "streamSelects":
            suggest = "stream_selects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_channel: Optional[int] = None,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 sample_rate: Optional[int] = None,
                 stream_selects: Optional[Sequence[int]] = None):
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "stream_selects")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontAlpha":
            suggest = "font_alpha"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"
        elif key == "streamIndex":
            suggest = "stream_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_alpha: Optional[float] = None,
                 font_color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 font_type: Optional[str] = None,
                 path: Optional[str] = None,
                 stream_index: Optional[int] = None):
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[float]:
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[str]:
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[str]:
        return pulumi.get(self, "font_type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[int]:
        return pulumi.get(self, "stream_index")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_video_bitrate: Optional[int] = None,
                 type: Optional[str] = None):
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentAdaptStream":
            suggest = "content_adapt_stream"
        elif key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 content_adapt_stream: Optional[int] = None,
                 fill_type: Optional[str] = None,
                 fps: Optional[int] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[int]:
        return pulumi.get(self, "content_adapt_stream")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> Optional[int]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container: str,
                 audio_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate'] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 tehd_config: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig'] = None,
                 video_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate'] = None):
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> str:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate']:
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig']:
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate']:
        return pulumi.get(self, "video_template")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 max_video_bitrate: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        return pulumi.get(self, "max_video_bitrate")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleOutputStorageS3OutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleOutputStorageS3OutputStorage']:
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsSqs":
            suggest = "aws_sqs"
        elif key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_sqs: Optional['outputs.ScheduleTaskNotifyConfigAwsSqs'] = None,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional['outputs.ScheduleTaskNotifyConfigAwsSqs']:
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class ScheduleTaskNotifyConfigAwsSqs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqsQueueName":
            suggest = "sqs_queue_name"
        elif key == "sqsRegion":
            suggest = "sqs_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTaskNotifyConfigAwsSqs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sqs_queue_name: str,
                 sqs_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        return pulumi.get(self, "sqs_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsS3FileUploadTrigger":
            suggest = "aws_s3_file_upload_trigger"
        elif key == "cosFileUploadTrigger":
            suggest = "cos_file_upload_trigger"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 aws_s3_file_upload_trigger: Optional['outputs.ScheduleTriggerAwsS3FileUploadTrigger'] = None,
                 cos_file_upload_trigger: Optional['outputs.ScheduleTriggerCosFileUploadTrigger'] = None):
        pulumi.set(__self__, "type", type)
        if aws_s3_file_upload_trigger is not None:
            pulumi.set(__self__, "aws_s3_file_upload_trigger", aws_s3_file_upload_trigger)
        if cos_file_upload_trigger is not None:
            pulumi.set(__self__, "cos_file_upload_trigger", cos_file_upload_trigger)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="awsS3FileUploadTrigger")
    def aws_s3_file_upload_trigger(self) -> Optional['outputs.ScheduleTriggerAwsS3FileUploadTrigger']:
        return pulumi.get(self, "aws_s3_file_upload_trigger")

    @property
    @pulumi.getter(name="cosFileUploadTrigger")
    def cos_file_upload_trigger(self) -> Optional['outputs.ScheduleTriggerCosFileUploadTrigger']:
        return pulumi.get(self, "cos_file_upload_trigger")


@pulumi.output_type
class ScheduleTriggerAwsS3FileUploadTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "awsSqs":
            suggest = "aws_sqs"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTriggerAwsS3FileUploadTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTriggerAwsS3FileUploadTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTriggerAwsS3FileUploadTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 aws_sqs: Optional['outputs.ScheduleTriggerAwsS3FileUploadTriggerAwsSqs'] = None,
                 dir: Optional[str] = None,
                 formats: Optional[Sequence[str]] = None,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional['outputs.ScheduleTriggerAwsS3FileUploadTriggerAwsSqs']:
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter
    def dir(self) -> Optional[str]:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "formats")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleTriggerAwsS3FileUploadTriggerAwsSqs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqsQueueName":
            suggest = "sqs_queue_name"
        elif key == "sqsRegion":
            suggest = "sqs_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTriggerAwsS3FileUploadTriggerAwsSqs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTriggerAwsS3FileUploadTriggerAwsSqs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTriggerAwsS3FileUploadTriggerAwsSqs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sqs_queue_name: str,
                 sqs_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        return pulumi.get(self, "sqs_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleTriggerCosFileUploadTrigger(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str,
                 dir: Optional[str] = None,
                 formats: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def dir(self) -> Optional[str]:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "formats")


@pulumi.output_type
class TranscodeTemplateAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class TranscodeTemplateEnhanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "videoEnhance":
            suggest = "video_enhance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateEnhanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateEnhanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateEnhanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 video_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhance'] = None):
        if video_enhance is not None:
            pulumi.set(__self__, "video_enhance", video_enhance)

    @property
    @pulumi.getter(name="videoEnhance")
    def video_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhance']:
        return pulumi.get(self, "video_enhance")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactRepair":
            suggest = "artifact_repair"
        elif key == "colorEnhance":
            suggest = "color_enhance"
        elif key == "faceEnhance":
            suggest = "face_enhance"
        elif key == "frameRate":
            suggest = "frame_rate"
        elif key == "imageQualityEnhance":
            suggest = "image_quality_enhance"
        elif key == "lowLightEnhance":
            suggest = "low_light_enhance"
        elif key == "scratchRepair":
            suggest = "scratch_repair"
        elif key == "sharpEnhance":
            suggest = "sharp_enhance"
        elif key == "superResolution":
            suggest = "super_resolution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateEnhanceConfigVideoEnhance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateEnhanceConfigVideoEnhance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateEnhanceConfigVideoEnhance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_repair: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair'] = None,
                 color_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance'] = None,
                 denoise: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceDenoise'] = None,
                 face_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance'] = None,
                 frame_rate: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate'] = None,
                 hdr: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceHdr'] = None,
                 image_quality_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance'] = None,
                 low_light_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance'] = None,
                 scratch_repair: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair'] = None,
                 sharp_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance'] = None,
                 super_resolution: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution'] = None):
        if artifact_repair is not None:
            pulumi.set(__self__, "artifact_repair", artifact_repair)
        if color_enhance is not None:
            pulumi.set(__self__, "color_enhance", color_enhance)
        if denoise is not None:
            pulumi.set(__self__, "denoise", denoise)
        if face_enhance is not None:
            pulumi.set(__self__, "face_enhance", face_enhance)
        if frame_rate is not None:
            pulumi.set(__self__, "frame_rate", frame_rate)
        if hdr is not None:
            pulumi.set(__self__, "hdr", hdr)
        if image_quality_enhance is not None:
            pulumi.set(__self__, "image_quality_enhance", image_quality_enhance)
        if low_light_enhance is not None:
            pulumi.set(__self__, "low_light_enhance", low_light_enhance)
        if scratch_repair is not None:
            pulumi.set(__self__, "scratch_repair", scratch_repair)
        if sharp_enhance is not None:
            pulumi.set(__self__, "sharp_enhance", sharp_enhance)
        if super_resolution is not None:
            pulumi.set(__self__, "super_resolution", super_resolution)

    @property
    @pulumi.getter(name="artifactRepair")
    def artifact_repair(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair']:
        return pulumi.get(self, "artifact_repair")

    @property
    @pulumi.getter(name="colorEnhance")
    def color_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance']:
        return pulumi.get(self, "color_enhance")

    @property
    @pulumi.getter
    def denoise(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceDenoise']:
        return pulumi.get(self, "denoise")

    @property
    @pulumi.getter(name="faceEnhance")
    def face_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance']:
        return pulumi.get(self, "face_enhance")

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate']:
        return pulumi.get(self, "frame_rate")

    @property
    @pulumi.getter
    def hdr(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceHdr']:
        return pulumi.get(self, "hdr")

    @property
    @pulumi.getter(name="imageQualityEnhance")
    def image_quality_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance']:
        return pulumi.get(self, "image_quality_enhance")

    @property
    @pulumi.getter(name="lowLightEnhance")
    def low_light_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance']:
        return pulumi.get(self, "low_light_enhance")

    @property
    @pulumi.getter(name="scratchRepair")
    def scratch_repair(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair']:
        return pulumi.get(self, "scratch_repair")

    @property
    @pulumi.getter(name="sharpEnhance")
    def sharp_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance']:
        return pulumi.get(self, "sharp_enhance")

    @property
    @pulumi.getter(name="superResolution")
    def super_resolution(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution']:
        return pulumi.get(self, "super_resolution")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceDenoise(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance(dict):
    def __init__(__self__, *,
                 intensity: Optional[float] = None,
                 switch: Optional[str] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[float]:
        return pulumi.get(self, "intensity")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate(dict):
    def __init__(__self__, *,
                 fps: Optional[int] = None,
                 switch: Optional[str] = None):
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def fps(self) -> Optional[int]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceHdr(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair(dict):
    def __init__(__self__, *,
                 intensity: Optional[float] = None,
                 switch: Optional[str] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[float]:
        return pulumi.get(self, "intensity")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance(dict):
    def __init__(__self__, *,
                 intensity: Optional[float] = None,
                 switch: Optional[str] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[float]:
        return pulumi.get(self, "intensity")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution(dict):
    def __init__(__self__, *,
                 size: Optional[int] = None,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 max_video_bitrate: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        return pulumi.get(self, "max_video_bitrate")


@pulumi.output_type
class TranscodeTemplateVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WatermarkTemplateImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WatermarkTemplateImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WatermarkTemplateImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WatermarkTemplateImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: str,
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> str:
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WatermarkTemplateSvgTemplate(dict):
    def __init__(__self__, *,
                 height: Optional[str] = None,
                 width: Optional[str] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WatermarkTemplateTextTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontAlpha":
            suggest = "font_alpha"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WatermarkTemplateTextTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WatermarkTemplateTextTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WatermarkTemplateTextTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_alpha: float,
                 font_color: str,
                 font_size: str,
                 font_type: str):
        pulumi.set(__self__, "font_alpha", font_alpha)
        pulumi.set(__self__, "font_color", font_color)
        pulumi.set(__self__, "font_size", font_size)
        pulumi.set(__self__, "font_type", font_type)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> float:
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> str:
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> str:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> str:
        return pulumi.get(self, "font_type")


@pulumi.output_type
class WithdrawsWatermarkOperationInputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WithdrawsWatermarkOperationInputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WithdrawsWatermarkOperationInputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WithdrawsWatermarkOperationInputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WithdrawsWatermarkOperationInputInfoCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.WithdrawsWatermarkOperationInputInfoS3InputInfo'] = None,
                 url_input_info: Optional['outputs.WithdrawsWatermarkOperationInputInfoUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WithdrawsWatermarkOperationInputInfoCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.WithdrawsWatermarkOperationInputInfoS3InputInfo']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WithdrawsWatermarkOperationInputInfoUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WithdrawsWatermarkOperationInputInfoCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WithdrawsWatermarkOperationInputInfoS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WithdrawsWatermarkOperationInputInfoS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WithdrawsWatermarkOperationInputInfoS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WithdrawsWatermarkOperationInputInfoS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class WithdrawsWatermarkOperationInputInfoUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WithdrawsWatermarkOperationTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsSqs":
            suggest = "aws_sqs"
        elif key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WithdrawsWatermarkOperationTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WithdrawsWatermarkOperationTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WithdrawsWatermarkOperationTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_sqs: Optional['outputs.WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs'] = None,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional['outputs.WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs']:
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqsQueueName":
            suggest = "sqs_queue_name"
        elif key == "sqsRegion":
            suggest = "sqs_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sqs_queue_name: str,
                 sqs_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        return pulumi.get(self, "sqs_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class WorkflowAiAnalysisTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedParameter":
            suggest = "extended_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowAiAnalysisTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowAiAnalysisTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowAiAnalysisTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[str]:
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class WorkflowAiContentReviewTask(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class WorkflowAiRecognitionTask(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class WorkflowMediaProcessTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adaptiveDynamicStreamingTaskSets":
            suggest = "adaptive_dynamic_streaming_task_sets"
        elif key == "animatedGraphicTaskSets":
            suggest = "animated_graphic_task_sets"
        elif key == "imageSpriteTaskSets":
            suggest = "image_sprite_task_sets"
        elif key == "sampleSnapshotTaskSets":
            suggest = "sample_snapshot_task_sets"
        elif key == "snapshotByTimeOffsetTaskSets":
            suggest = "snapshot_by_time_offset_task_sets"
        elif key == "transcodeTaskSets":
            suggest = "transcode_task_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet']] = None,
                 animated_graphic_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSet']] = None,
                 image_sprite_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskImageSpriteTaskSet']] = None,
                 sample_snapshot_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSet']] = None,
                 snapshot_by_time_offset_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet']] = None,
                 transcode_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSet']] = None):
        if adaptive_dynamic_streaming_task_sets is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task_sets", adaptive_dynamic_streaming_task_sets)
        if animated_graphic_task_sets is not None:
            pulumi.set(__self__, "animated_graphic_task_sets", animated_graphic_task_sets)
        if image_sprite_task_sets is not None:
            pulumi.set(__self__, "image_sprite_task_sets", image_sprite_task_sets)
        if sample_snapshot_task_sets is not None:
            pulumi.set(__self__, "sample_snapshot_task_sets", sample_snapshot_task_sets)
        if snapshot_by_time_offset_task_sets is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task_sets", snapshot_by_time_offset_task_sets)
        if transcode_task_sets is not None:
            pulumi.set(__self__, "transcode_task_sets", transcode_task_sets)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTaskSets")
    def adaptive_dynamic_streaming_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet']]:
        return pulumi.get(self, "adaptive_dynamic_streaming_task_sets")

    @property
    @pulumi.getter(name="animatedGraphicTaskSets")
    def animated_graphic_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSet']]:
        return pulumi.get(self, "animated_graphic_task_sets")

    @property
    @pulumi.getter(name="imageSpriteTaskSets")
    def image_sprite_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskImageSpriteTaskSet']]:
        return pulumi.get(self, "image_sprite_task_sets")

    @property
    @pulumi.getter(name="sampleSnapshotTaskSets")
    def sample_snapshot_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSet']]:
        return pulumi.get(self, "sample_snapshot_task_sets")

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTaskSets")
    def snapshot_by_time_offset_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet']]:
        return pulumi.get(self, "snapshot_by_time_offset_task_sets")

    @property
    @pulumi.getter(name="transcodeTaskSets")
    def transcode_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSet']]:
        return pulumi.get(self, "transcode_task_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "subStreamObjectName":
            suggest = "sub_stream_object_name"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage'] = None,
                 segment_object_name: Optional[str] = None,
                 sub_stream_object_name: Optional[str] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[str]:
        return pulumi.get(self, "sub_stream_object_name")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAnimatedGraphicTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 start_time_offset: float,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage'] = None):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "webVttObjectName":
            suggest = "web_vtt_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskImageSpriteTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage'] = None,
                 web_vtt_object_name: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[str]:
        return pulumi.get(self, "web_vtt_object_name")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage'] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extTimeOffsetSets":
            suggest = "ext_time_offset_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "timeOffsetSets":
            suggest = "time_offset_sets"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 ext_time_offset_sets: Optional[Sequence[str]] = None,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage'] = None,
                 time_offset_sets: Optional[Sequence[float]] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if time_offset_sets is not None:
            pulumi.set(__self__, "time_offset_sets", time_offset_sets)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ext_time_offset_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="timeOffsetSets")
    def time_offset_sets(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "time_offset_sets")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "headTailParameter":
            suggest = "head_tail_parameter"
        elif key == "mosaicSets":
            suggest = "mosaic_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "overrideParameter":
            suggest = "override_parameter"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 head_tail_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter'] = None,
                 mosaic_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet']] = None,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage'] = None,
                 override_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter'] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameter'] = None,
                 segment_object_name: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter']:
        return pulumi.get(self, "head_tail_parameter")

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet']]:
        return pulumi.get(self, "mosaic_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter']:
        return pulumi.get(self, "override_parameter")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headSets":
            suggest = "head_sets"
        elif key == "tailSets":
            suggest = "tail_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 head_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet']] = None,
                 tail_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet']] = None):
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet']]:
        return pulumi.get(self, "head_sets")

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet']]:
        return pulumi.get(self, "tail_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coordinate_origin: Optional[str] = None,
                 end_time_offset: Optional[float] = None,
                 height: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 width: Optional[str] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "subtitleTemplate":
            suggest = "subtitle_template"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate'] = None,
                 container: Optional[str] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 subtitle_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate'] = None,
                 tehd_config: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig'] = None,
                 video_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate'] = None):
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate']:
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate']:
        return pulumi.get(self, "subtitle_template")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig']:
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate']:
        return pulumi.get(self, "video_template")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioChannel":
            suggest = "audio_channel"
        elif key == "sampleRate":
            suggest = "sample_rate"
        elif key == "streamSelects":
            suggest = "stream_selects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_channel: Optional[int] = None,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 sample_rate: Optional[int] = None,
                 stream_selects: Optional[Sequence[int]] = None):
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "stream_selects")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontAlpha":
            suggest = "font_alpha"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"
        elif key == "streamIndex":
            suggest = "stream_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_alpha: Optional[float] = None,
                 font_color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 font_type: Optional[str] = None,
                 path: Optional[str] = None,
                 stream_index: Optional[int] = None):
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[float]:
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[str]:
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[str]:
        return pulumi.get(self, "font_type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[int]:
        return pulumi.get(self, "stream_index")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_video_bitrate: Optional[int] = None,
                 type: Optional[str] = None):
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentAdaptStream":
            suggest = "content_adapt_stream"
        elif key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 content_adapt_stream: Optional[int] = None,
                 fill_type: Optional[str] = None,
                 fps: Optional[int] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[int]:
        return pulumi.get(self, "content_adapt_stream")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> Optional[int]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container: str,
                 audio_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate'] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 tehd_config: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig'] = None,
                 video_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate'] = None):
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> str:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate']:
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig']:
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate']:
        return pulumi.get(self, "video_template")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 max_video_bitrate: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        return pulumi.get(self, "max_video_bitrate")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class WorkflowTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosFileUploadTrigger":
            suggest = "cos_file_upload_trigger"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_file_upload_trigger: Optional['outputs.WorkflowTriggerCosFileUploadTrigger'] = None):
        pulumi.set(__self__, "type", type)
        if cos_file_upload_trigger is not None:
            pulumi.set(__self__, "cos_file_upload_trigger", cos_file_upload_trigger)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosFileUploadTrigger")
    def cos_file_upload_trigger(self) -> Optional['outputs.WorkflowTriggerCosFileUploadTrigger']:
        return pulumi.get(self, "cos_file_upload_trigger")


@pulumi.output_type
class WorkflowTriggerCosFileUploadTrigger(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str,
                 dir: Optional[str] = None,
                 formats: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def dir(self) -> Optional[str]:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "formats")


@pulumi.output_type
class GetMediaMetaDataInputInfoResult(dict):
    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.GetMediaMetaDataInputInfoCosInputInfoResult'] = None,
                 s3_input_info: Optional['outputs.GetMediaMetaDataInputInfoS3InputInfoResult'] = None,
                 url_input_info: Optional['outputs.GetMediaMetaDataInputInfoUrlInputInfoResult'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.GetMediaMetaDataInputInfoCosInputInfoResult']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.GetMediaMetaDataInputInfoS3InputInfoResult']:
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.GetMediaMetaDataInputInfoUrlInputInfoResult']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class GetMediaMetaDataInputInfoCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetMediaMetaDataInputInfoS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetMediaMetaDataInputInfoUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetMediaMetaDataMetaDataResult(dict):
    def __init__(__self__, *,
                 audio_duration: float,
                 audio_stream_sets: Sequence['outputs.GetMediaMetaDataMetaDataAudioStreamSetResult'],
                 bitrate: int,
                 container: str,
                 duration: float,
                 height: int,
                 rotate: int,
                 size: int,
                 video_duration: float,
                 video_stream_sets: Sequence['outputs.GetMediaMetaDataMetaDataVideoStreamSetResult'],
                 width: int):
        pulumi.set(__self__, "audio_duration", audio_duration)
        pulumi.set(__self__, "audio_stream_sets", audio_stream_sets)
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "rotate", rotate)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "video_duration", video_duration)
        pulumi.set(__self__, "video_stream_sets", video_stream_sets)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="audioDuration")
    def audio_duration(self) -> float:
        return pulumi.get(self, "audio_duration")

    @property
    @pulumi.getter(name="audioStreamSets")
    def audio_stream_sets(self) -> Sequence['outputs.GetMediaMetaDataMetaDataAudioStreamSetResult']:
        return pulumi.get(self, "audio_stream_sets")

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def container(self) -> str:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def duration(self) -> float:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def height(self) -> int:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def rotate(self) -> int:
        return pulumi.get(self, "rotate")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="videoDuration")
    def video_duration(self) -> float:
        return pulumi.get(self, "video_duration")

    @property
    @pulumi.getter(name="videoStreamSets")
    def video_stream_sets(self) -> Sequence['outputs.GetMediaMetaDataMetaDataVideoStreamSetResult']:
        return pulumi.get(self, "video_stream_sets")

    @property
    @pulumi.getter
    def width(self) -> int:
        return pulumi.get(self, "width")


@pulumi.output_type
class GetMediaMetaDataMetaDataAudioStreamSetResult(dict):
    def __init__(__self__, *,
                 bitrate: int,
                 channel: int,
                 codec: str,
                 sampling_rate: int):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sampling_rate", sampling_rate)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def channel(self) -> int:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> int:
        return pulumi.get(self, "sampling_rate")


@pulumi.output_type
class GetMediaMetaDataMetaDataVideoStreamSetResult(dict):
    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 color_primaries: str,
                 color_space: str,
                 color_transfer: str,
                 fps: int,
                 hdr_type: str,
                 height: int,
                 width: int):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "color_primaries", color_primaries)
        pulumi.set(__self__, "color_space", color_space)
        pulumi.set(__self__, "color_transfer", color_transfer)
        pulumi.set(__self__, "fps", fps)
        pulumi.set(__self__, "hdr_type", hdr_type)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="colorPrimaries")
    def color_primaries(self) -> str:
        return pulumi.get(self, "color_primaries")

    @property
    @pulumi.getter(name="colorSpace")
    def color_space(self) -> str:
        return pulumi.get(self, "color_space")

    @property
    @pulumi.getter(name="colorTransfer")
    def color_transfer(self) -> str:
        return pulumi.get(self, "color_transfer")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="hdrType")
    def hdr_type(self) -> str:
        return pulumi.get(self, "hdr_type")

    @property
    @pulumi.getter
    def height(self) -> int:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> int:
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetResult(dict):
    def __init__(__self__, *,
                 activities: Sequence['outputs.GetSchedulesScheduleInfoSetActivityResult'],
                 create_time: str,
                 output_dir: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageResult'],
                 schedule_id: int,
                 schedule_name: str,
                 status: str,
                 task_notify_configs: Sequence['outputs.GetSchedulesScheduleInfoSetTaskNotifyConfigResult'],
                 triggers: Sequence['outputs.GetSchedulesScheduleInfoSetTriggerResult'],
                 update_time: str):
        pulumi.set(__self__, "activities", activities)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "output_dir", output_dir)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "schedule_id", schedule_id)
        pulumi.set(__self__, "schedule_name", schedule_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task_notify_configs", task_notify_configs)
        pulumi.set(__self__, "triggers", triggers)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def activities(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityResult']:
        return pulumi.get(self, "activities")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> str:
        return pulumi.get(self, "output_dir")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageResult']:
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> int:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="scheduleName")
    def schedule_name(self) -> str:
        return pulumi.get(self, "schedule_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskNotifyConfigs")
    def task_notify_configs(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTaskNotifyConfigResult']:
        return pulumi.get(self, "task_notify_configs")

    @property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTriggerResult']:
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityResult(dict):
    def __init__(__self__, *,
                 activity_paras: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaResult'],
                 activity_type: str,
                 reardrive_indices: Sequence[int]):
        pulumi.set(__self__, "activity_paras", activity_paras)
        pulumi.set(__self__, "activity_type", activity_type)
        pulumi.set(__self__, "reardrive_indices", reardrive_indices)

    @property
    @pulumi.getter(name="activityParas")
    def activity_paras(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaResult']:
        return pulumi.get(self, "activity_paras")

    @property
    @pulumi.getter(name="activityType")
    def activity_type(self) -> str:
        return pulumi.get(self, "activity_type")

    @property
    @pulumi.getter(name="reardriveIndices")
    def reardrive_indices(self) -> Sequence[int]:
        return pulumi.get(self, "reardrive_indices")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaResult(dict):
    def __init__(__self__, *,
                 adaptive_dynamic_streaming_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskResult'],
                 ai_analysis_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTaskResult'],
                 ai_content_review_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTaskResult'],
                 ai_recognition_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTaskResult'],
                 animated_graphic_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskResult'],
                 image_sprite_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskResult'],
                 sample_snapshot_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskResult'],
                 snapshot_by_time_offset_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskResult'],
                 transcode_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskResult']):
        pulumi.set(__self__, "adaptive_dynamic_streaming_tasks", adaptive_dynamic_streaming_tasks)
        pulumi.set(__self__, "ai_analysis_tasks", ai_analysis_tasks)
        pulumi.set(__self__, "ai_content_review_tasks", ai_content_review_tasks)
        pulumi.set(__self__, "ai_recognition_tasks", ai_recognition_tasks)
        pulumi.set(__self__, "animated_graphic_tasks", animated_graphic_tasks)
        pulumi.set(__self__, "image_sprite_tasks", image_sprite_tasks)
        pulumi.set(__self__, "sample_snapshot_tasks", sample_snapshot_tasks)
        pulumi.set(__self__, "snapshot_by_time_offset_tasks", snapshot_by_time_offset_tasks)
        pulumi.set(__self__, "transcode_tasks", transcode_tasks)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTasks")
    def adaptive_dynamic_streaming_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskResult']:
        return pulumi.get(self, "adaptive_dynamic_streaming_tasks")

    @property
    @pulumi.getter(name="aiAnalysisTasks")
    def ai_analysis_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTaskResult']:
        return pulumi.get(self, "ai_analysis_tasks")

    @property
    @pulumi.getter(name="aiContentReviewTasks")
    def ai_content_review_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTaskResult']:
        return pulumi.get(self, "ai_content_review_tasks")

    @property
    @pulumi.getter(name="aiRecognitionTasks")
    def ai_recognition_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTaskResult']:
        return pulumi.get(self, "ai_recognition_tasks")

    @property
    @pulumi.getter(name="animatedGraphicTasks")
    def animated_graphic_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskResult']:
        return pulumi.get(self, "animated_graphic_tasks")

    @property
    @pulumi.getter(name="imageSpriteTasks")
    def image_sprite_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskResult']:
        return pulumi.get(self, "image_sprite_tasks")

    @property
    @pulumi.getter(name="sampleSnapshotTasks")
    def sample_snapshot_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskResult']:
        return pulumi.get(self, "sample_snapshot_tasks")

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTasks")
    def snapshot_by_time_offset_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskResult']:
        return pulumi.get(self, "snapshot_by_time_offset_tasks")

    @property
    @pulumi.getter(name="transcodeTasks")
    def transcode_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskResult']:
        return pulumi.get(self, "transcode_tasks")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskResult(dict):
    def __init__(__self__, *,
                 add_on_subtitles: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleResult'],
                 definition: int,
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageResult'],
                 segment_object_name: str,
                 sub_stream_object_name: str,
                 watermark_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetResult']):
        pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "segment_object_name", segment_object_name)
        pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleResult']:
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageResult']:
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> str:
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> str:
        return pulumi.get(self, "sub_stream_object_name")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetResult']:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleResult(dict):
    def __init__(__self__, *,
                 subtitles: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleResult'],
                 type: str):
        pulumi.set(__self__, "subtitles", subtitles)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitles(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleResult']:
        return pulumi.get(self, "subtitles")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoResult']):
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoResult']:
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoResult']:
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoResult']:
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageResult']:
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageResult']:
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 raw_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterResult'],
                 start_time_offset: float,
                 svg_content: str,
                 text_content: str):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "raw_parameters", raw_parameters)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "svg_content", svg_content)
        pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameters")
    def raw_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterResult']:
        return pulumi.get(self, "raw_parameters")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> str:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> str:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterResult(dict):
    def __init__(__self__, *,
                 coordinate_origin: str,
                 image_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateResult'],
                 type: str,
                 x_pos: str,
                 y_pos: str):
        pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        pulumi.set(__self__, "image_templates", image_templates)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> str:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplates")
    def image_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateResult']:
        return pulumi.get(self, "image_templates")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> str:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> str:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateResult(dict):
    def __init__(__self__, *,
                 height: str,
                 image_contents: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentResult'],
                 repeat_type: str,
                 width: str):
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "image_contents", image_contents)
        pulumi.set(__self__, "repeat_type", repeat_type)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> str:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="imageContents")
    def image_contents(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentResult']:
        return pulumi.get(self, "image_contents")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> str:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> str:
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']):
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult']:
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult']:
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']:
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: str):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> str:
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTaskResult(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTaskResult(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageResult'],
                 start_time_offset: float):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageResult']:
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageResult']:
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageResult']:
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 object_number_formats: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormatResult'],
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageResult'],
                 web_vtt_object_name: str):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "object_number_formats", object_number_formats)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormats")
    def object_number_formats(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormatResult']:
        return pulumi.get(self, "object_number_formats")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageResult']:
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> str:
        return pulumi.get(self, "web_vtt_object_name")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormatResult(dict):
    def __init__(__self__, *,
                 increment: int,
                 initial_value: int,
                 min_length: int,
                 place_holder: str):
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "initial_value", initial_value)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> int:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> int:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> str:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageResult']:
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageResult']:
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 object_number_formats: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormatResult'],
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageResult'],
                 watermark_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetResult']):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "object_number_formats", object_number_formats)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormats")
    def object_number_formats(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormatResult']:
        return pulumi.get(self, "object_number_formats")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageResult']:
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetResult']:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormatResult(dict):
    def __init__(__self__, *,
                 increment: int,
                 initial_value: int,
                 min_length: int,
                 place_holder: str):
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "initial_value", initial_value)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> int:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> int:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> str:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageResult']:
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageResult']:
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 raw_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterResult'],
                 start_time_offset: float,
                 svg_content: str,
                 text_content: str):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "raw_parameters", raw_parameters)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "svg_content", svg_content)
        pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameters")
    def raw_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterResult']:
        return pulumi.get(self, "raw_parameters")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> str:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> str:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterResult(dict):
    def __init__(__self__, *,
                 coordinate_origin: str,
                 image_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateResult'],
                 type: str,
                 x_pos: str,
                 y_pos: str):
        pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        pulumi.set(__self__, "image_templates", image_templates)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> str:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplates")
    def image_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateResult']:
        return pulumi.get(self, "image_templates")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> str:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> str:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateResult(dict):
    def __init__(__self__, *,
                 height: str,
                 image_contents: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentResult'],
                 repeat_type: str,
                 width: str):
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "image_contents", image_contents)
        pulumi.set(__self__, "repeat_type", repeat_type)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> str:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="imageContents")
    def image_contents(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentResult']:
        return pulumi.get(self, "image_contents")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> str:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> str:
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']):
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult']:
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult']:
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']:
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 ext_time_offset_sets: Sequence[str],
                 object_number_formats: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatResult'],
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageResult'],
                 watermark_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetResult']):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        pulumi.set(__self__, "object_number_formats", object_number_formats)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Sequence[str]:
        return pulumi.get(self, "ext_time_offset_sets")

    @property
    @pulumi.getter(name="objectNumberFormats")
    def object_number_formats(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatResult']:
        return pulumi.get(self, "object_number_formats")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageResult']:
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetResult']:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatResult(dict):
    def __init__(__self__, *,
                 increment: int,
                 initial_value: int,
                 min_length: int,
                 place_holder: str):
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "initial_value", initial_value)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> int:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> int:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> str:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageResult']:
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageResult']:
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 raw_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterResult'],
                 start_time_offset: float,
                 svg_content: str,
                 text_content: str):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "raw_parameters", raw_parameters)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "svg_content", svg_content)
        pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameters")
    def raw_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterResult']:
        return pulumi.get(self, "raw_parameters")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> str:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> str:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterResult(dict):
    def __init__(__self__, *,
                 coordinate_origin: str,
                 image_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateResult'],
                 type: str,
                 x_pos: str,
                 y_pos: str):
        pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        pulumi.set(__self__, "image_templates", image_templates)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> str:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplates")
    def image_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateResult']:
        return pulumi.get(self, "image_templates")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> str:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> str:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateResult(dict):
    def __init__(__self__, *,
                 height: str,
                 image_contents: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentResult'],
                 repeat_type: str,
                 width: str):
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "image_contents", image_contents)
        pulumi.set(__self__, "repeat_type", repeat_type)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> str:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="imageContents")
    def image_contents(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentResult']:
        return pulumi.get(self, "image_contents")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> str:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> str:
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']):
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult']:
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult']:
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']:
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 head_tail_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterResult'],
                 mosaic_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSetResult'],
                 object_number_formats: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormatResult'],
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageResult'],
                 override_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterResult'],
                 raw_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterResult'],
                 segment_object_name: str,
                 start_time_offset: float,
                 watermark_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetResult']):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "head_tail_parameters", head_tail_parameters)
        pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        pulumi.set(__self__, "object_number_formats", object_number_formats)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "override_parameters", override_parameters)
        pulumi.set(__self__, "raw_parameters", raw_parameters)
        pulumi.set(__self__, "segment_object_name", segment_object_name)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="headTailParameters")
    def head_tail_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterResult']:
        return pulumi.get(self, "head_tail_parameters")

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSetResult']:
        return pulumi.get(self, "mosaic_sets")

    @property
    @pulumi.getter(name="objectNumberFormats")
    def object_number_formats(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormatResult']:
        return pulumi.get(self, "object_number_formats")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageResult']:
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="overrideParameters")
    def override_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterResult']:
        return pulumi.get(self, "override_parameters")

    @property
    @pulumi.getter(name="rawParameters")
    def raw_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterResult']:
        return pulumi.get(self, "raw_parameters")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> str:
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetResult']:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterResult(dict):
    def __init__(__self__, *,
                 head_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetResult'],
                 tail_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetResult']):
        pulumi.set(__self__, "head_sets", head_sets)
        pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetResult']:
        return pulumi.get(self, "head_sets")

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetResult']:
        return pulumi.get(self, "tail_sets")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoResult']):
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoResult']:
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoResult']:
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoResult']:
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoResult']):
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoResult']:
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoResult']:
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoResult']:
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSetResult(dict):
    def __init__(__self__, *,
                 coordinate_origin: str,
                 end_time_offset: float,
                 height: str,
                 start_time_offset: float,
                 width: str,
                 x_pos: str,
                 y_pos: str):
        pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> str:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter
    def height(self) -> str:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def width(self) -> str:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> str:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> str:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormatResult(dict):
    def __init__(__self__, *,
                 increment: int,
                 initial_value: int,
                 min_length: int,
                 place_holder: str):
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "initial_value", initial_value)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> int:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> int:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> str:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageResult']:
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageResult']:
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterResult(dict):
    def __init__(__self__, *,
                 add_on_subtitles: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleResult'],
                 addon_audio_streams: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamResult'],
                 audio_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateResult'],
                 container: str,
                 remove_audio: int,
                 remove_video: int,
                 std_ext_info: str,
                 subtitle_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateResult'],
                 tehd_configs: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfigResult'],
                 video_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateResult']):
        pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        pulumi.set(__self__, "addon_audio_streams", addon_audio_streams)
        pulumi.set(__self__, "audio_templates", audio_templates)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "remove_audio", remove_audio)
        pulumi.set(__self__, "remove_video", remove_video)
        pulumi.set(__self__, "std_ext_info", std_ext_info)
        pulumi.set(__self__, "subtitle_templates", subtitle_templates)
        pulumi.set(__self__, "tehd_configs", tehd_configs)
        pulumi.set(__self__, "video_templates", video_templates)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleResult']:
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter(name="addonAudioStreams")
    def addon_audio_streams(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamResult']:
        return pulumi.get(self, "addon_audio_streams")

    @property
    @pulumi.getter(name="audioTemplates")
    def audio_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateResult']:
        return pulumi.get(self, "audio_templates")

    @property
    @pulumi.getter
    def container(self) -> str:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> int:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> int:
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="stdExtInfo")
    def std_ext_info(self) -> str:
        return pulumi.get(self, "std_ext_info")

    @property
    @pulumi.getter(name="subtitleTemplates")
    def subtitle_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateResult']:
        return pulumi.get(self, "subtitle_templates")

    @property
    @pulumi.getter(name="tehdConfigs")
    def tehd_configs(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfigResult']:
        return pulumi.get(self, "tehd_configs")

    @property
    @pulumi.getter(name="videoTemplates")
    def video_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateResult']:
        return pulumi.get(self, "video_templates")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleResult(dict):
    def __init__(__self__, *,
                 subtitles: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleResult'],
                 type: str):
        pulumi.set(__self__, "subtitles", subtitles)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitles(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleResult']:
        return pulumi.get(self, "subtitles")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoResult']):
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoResult']:
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoResult']:
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoResult']:
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoResult']):
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoResult']:
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoResult']:
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoResult']:
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateResult(dict):
    def __init__(__self__, *,
                 audio_channel: int,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 stream_selects: Sequence[int]):
        pulumi.set(__self__, "audio_channel", audio_channel)
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> int:
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Sequence[int]:
        return pulumi.get(self, "stream_selects")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateResult(dict):
    def __init__(__self__, *,
                 font_alpha: float,
                 font_color: str,
                 font_size: str,
                 font_type: str,
                 path: str,
                 stream_index: int):
        pulumi.set(__self__, "font_alpha", font_alpha)
        pulumi.set(__self__, "font_color", font_color)
        pulumi.set(__self__, "font_size", font_size)
        pulumi.set(__self__, "font_type", font_type)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> float:
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> str:
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> str:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> str:
        return pulumi.get(self, "font_type")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> int:
        return pulumi.get(self, "stream_index")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfigResult(dict):
    def __init__(__self__, *,
                 max_video_bitrate: int,
                 type: str):
        pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> int:
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateResult(dict):
    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 content_adapt_stream: int,
                 fill_type: str,
                 fps: int,
                 gop: int,
                 height: int,
                 resolution_adaptive: str,
                 vcrf: int,
                 width: int):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        pulumi.set(__self__, "fill_type", fill_type)
        pulumi.set(__self__, "fps", fps)
        pulumi.set(__self__, "gop", gop)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        pulumi.set(__self__, "vcrf", vcrf)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> int:
        return pulumi.get(self, "content_adapt_stream")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> str:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> int:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> int:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> str:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> int:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> int:
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterResult(dict):
    def __init__(__self__, *,
                 audio_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplateResult'],
                 container: str,
                 remove_audio: int,
                 remove_video: int,
                 tehd_configs: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfigResult'],
                 video_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplateResult']):
        pulumi.set(__self__, "audio_templates", audio_templates)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "remove_audio", remove_audio)
        pulumi.set(__self__, "remove_video", remove_video)
        pulumi.set(__self__, "tehd_configs", tehd_configs)
        pulumi.set(__self__, "video_templates", video_templates)

    @property
    @pulumi.getter(name="audioTemplates")
    def audio_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplateResult']:
        return pulumi.get(self, "audio_templates")

    @property
    @pulumi.getter
    def container(self) -> str:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> int:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> int:
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="tehdConfigs")
    def tehd_configs(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfigResult']:
        return pulumi.get(self, "tehd_configs")

    @property
    @pulumi.getter(name="videoTemplates")
    def video_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplateResult']:
        return pulumi.get(self, "video_templates")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplateResult(dict):
    def __init__(__self__, *,
                 audio_channel: int,
                 bitrate: int,
                 codec: str,
                 sample_rate: int):
        pulumi.set(__self__, "audio_channel", audio_channel)
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> int:
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        return pulumi.get(self, "sample_rate")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfigResult(dict):
    def __init__(__self__, *,
                 max_video_bitrate: int,
                 type: str):
        pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> int:
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplateResult(dict):
    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fill_type: str,
                 fps: int,
                 gop: int,
                 height: int,
                 resolution_adaptive: str,
                 vcrf: int,
                 width: int):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fill_type", fill_type)
        pulumi.set(__self__, "fps", fps)
        pulumi.set(__self__, "gop", gop)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        pulumi.set(__self__, "vcrf", vcrf)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> str:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> int:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> int:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> str:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> int:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> int:
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 raw_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterResult'],
                 start_time_offset: float,
                 svg_content: str,
                 text_content: str):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "raw_parameters", raw_parameters)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "svg_content", svg_content)
        pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameters")
    def raw_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterResult']:
        return pulumi.get(self, "raw_parameters")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> str:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> str:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterResult(dict):
    def __init__(__self__, *,
                 coordinate_origin: str,
                 image_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateResult'],
                 type: str,
                 x_pos: str,
                 y_pos: str):
        pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        pulumi.set(__self__, "image_templates", image_templates)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> str:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplates")
    def image_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateResult']:
        return pulumi.get(self, "image_templates")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> str:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> str:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateResult(dict):
    def __init__(__self__, *,
                 height: str,
                 image_contents: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentResult'],
                 repeat_type: str,
                 width: str):
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "image_contents", image_contents)
        pulumi.set(__self__, "repeat_type", repeat_type)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> str:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="imageContents")
    def image_contents(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentResult']:
        return pulumi.get(self, "image_contents")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> str:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> str:
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']):
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult']:
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult']:
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']:
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageS3OutputStorageResult'],
                 type: str):
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageCosOutputStorageResult']:
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageS3OutputStorageResult']:
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTaskNotifyConfigResult(dict):
    def __init__(__self__, *,
                 aws_sqs: Sequence['outputs.GetSchedulesScheduleInfoSetTaskNotifyConfigAwsSqResult'],
                 cmq_model: str,
                 cmq_region: str,
                 notify_mode: str,
                 notify_type: str,
                 notify_url: str,
                 queue_name: str,
                 topic_name: str):
        pulumi.set(__self__, "aws_sqs", aws_sqs)
        pulumi.set(__self__, "cmq_model", cmq_model)
        pulumi.set(__self__, "cmq_region", cmq_region)
        pulumi.set(__self__, "notify_mode", notify_mode)
        pulumi.set(__self__, "notify_type", notify_type)
        pulumi.set(__self__, "notify_url", notify_url)
        pulumi.set(__self__, "queue_name", queue_name)
        pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTaskNotifyConfigAwsSqResult']:
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> str:
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> str:
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> str:
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> str:
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> str:
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTaskNotifyConfigAwsSqResult(dict):
    def __init__(__self__, *,
                 s3_secret_id: str,
                 s3_secret_key: str,
                 sqs_queue_name: str,
                 sqs_region: str):
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        return pulumi.get(self, "sqs_region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTriggerResult(dict):
    def __init__(__self__, *,
                 aws_s3_file_upload_triggers: Sequence['outputs.GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerResult'],
                 cos_file_upload_triggers: Sequence['outputs.GetSchedulesScheduleInfoSetTriggerCosFileUploadTriggerResult'],
                 type: str):
        pulumi.set(__self__, "aws_s3_file_upload_triggers", aws_s3_file_upload_triggers)
        pulumi.set(__self__, "cos_file_upload_triggers", cos_file_upload_triggers)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="awsS3FileUploadTriggers")
    def aws_s3_file_upload_triggers(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerResult']:
        return pulumi.get(self, "aws_s3_file_upload_triggers")

    @property
    @pulumi.getter(name="cosFileUploadTriggers")
    def cos_file_upload_triggers(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTriggerCosFileUploadTriggerResult']:
        return pulumi.get(self, "cos_file_upload_triggers")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerResult(dict):
    def __init__(__self__, *,
                 aws_sqs: Sequence['outputs.GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSqResult'],
                 dir: str,
                 formats: Sequence[str],
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        pulumi.set(__self__, "aws_sqs", aws_sqs)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "formats", formats)
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSqResult']:
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter
    def dir(self) -> str:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Sequence[str]:
        return pulumi.get(self, "formats")

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSqResult(dict):
    def __init__(__self__, *,
                 s3_secret_id: str,
                 s3_secret_key: str,
                 sqs_queue_name: str,
                 sqs_region: str):
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        return pulumi.get(self, "s3_secret_key")

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        return pulumi.get(self, "sqs_region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTriggerCosFileUploadTriggerResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 dir: str,
                 formats: Sequence[str],
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "formats", formats)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def dir(self) -> str:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Sequence[str]:
        return pulumi.get(self, "formats")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetTasksTaskSetResult(dict):
    def __init__(__self__, *,
                 begin_process_time: str,
                 create_time: str,
                 finish_time: str,
                 sub_task_types: Sequence[str],
                 task_id: str,
                 task_type: str):
        pulumi.set(__self__, "begin_process_time", begin_process_time)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "sub_task_types", sub_task_types)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="beginProcessTime")
    def begin_process_time(self) -> str:
        return pulumi.get(self, "begin_process_time")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter(name="subTaskTypes")
    def sub_task_types(self) -> Sequence[str]:
        return pulumi.get(self, "sub_task_types")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> str:
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        return pulumi.get(self, "task_type")


