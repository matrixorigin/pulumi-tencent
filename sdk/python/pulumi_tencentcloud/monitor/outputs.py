# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AlarmNoticeClsNotice',
    'AlarmNoticeUrlNotice',
    'AlarmNoticeUserNotice',
    'AlarmPolicyConditions',
    'AlarmPolicyConditionsRule',
    'AlarmPolicyConditionsRuleFilter',
    'AlarmPolicyEventCondition',
    'AlarmPolicyEventConditionFilter',
    'AlarmPolicyFilter',
    'AlarmPolicyPolicyTag',
    'AlarmPolicyTriggerTask',
    'BindingReceiverReceivers',
    'GrafanaSsoAccountRole',
    'PolicyBindingObjectDimension',
    'TmpAlertGroupCustomReceiver',
    'TmpAlertGroupCustomReceiverAllowedTimeRange',
    'TmpAlertGroupRule',
    'TmpAlertRuleAnnotation',
    'TmpAlertRuleLabel',
    'TmpTkeAlertPolicyAlertRule',
    'TmpTkeAlertPolicyAlertRuleNotification',
    'TmpTkeAlertPolicyAlertRuleNotificationAlertManager',
    'TmpTkeAlertPolicyAlertRuleRule',
    'TmpTkeAlertPolicyAlertRuleRuleAnnotation',
    'TmpTkeAlertPolicyAlertRuleRuleLabel',
    'TmpTkeClusterAgentAgents',
    'TmpTkeClusterAgentAgentsExternalLabel',
    'TmpTkeClusterAgentAgentsInClusterPodConfig',
    'TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector',
    'TmpTkeClusterAgentAgentsInClusterPodConfigToleration',
    'TmpTkeConfigPodMonitor',
    'TmpTkeConfigRawJob',
    'TmpTkeConfigServiceMonitor',
    'TmpTkeGlobalNotificationNotification',
    'TmpTkeGlobalNotificationNotificationAlertManager',
    'TmpTkeTemplateAttachmentTargets',
    'TmpTkeTemplateTemplate',
    'TmpTkeTemplateTemplatePodMonitor',
    'TmpTkeTemplateTemplateRawJob',
    'TmpTkeTemplateTemplateRecordRule',
    'TmpTkeTemplateTemplateServiceMonitor',
    'GetAlarmAllNamespacesCommonNamespaceResult',
    'GetAlarmAllNamespacesCommonNamespaceDimensionResult',
    'GetAlarmAllNamespacesCommonNamespaceDimensionOperatorResult',
    'GetAlarmAllNamespacesCustomNamespacesNewsResult',
    'GetAlarmAllNamespacesQceNamespacesNewsResult',
    'GetAlarmBasicAlarmsAlarmResult',
    'GetAlarmBasicAlarmsAlarmInstanceGroupResult',
    'GetAlarmBasicMetricMetricSetResult',
    'GetAlarmBasicMetricMetricSetDimensionResult',
    'GetAlarmBasicMetricMetricSetMeaningResult',
    'GetAlarmBasicMetricMetricSetPeriodResult',
    'GetAlarmConditionsTemplateTemplateGroupListResult',
    'GetAlarmConditionsTemplateTemplateGroupListConditionResult',
    'GetAlarmConditionsTemplateTemplateGroupListEventConditionResult',
    'GetAlarmConditionsTemplateTemplateGroupListPolicyGroupResult',
    'GetAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfoResult',
    'GetAlarmHistoryHistoryResult',
    'GetAlarmHistoryHistoryInstanceGroupResult',
    'GetAlarmHistoryHistoryMetricsInfoResult',
    'GetAlarmHistoryNamespaceResult',
    'GetAlarmMetricMetricResult',
    'GetAlarmMetricMetricMetricConfigResult',
    'GetAlarmMetricMetricOperatorResult',
    'GetAlarmMonitorTypeMonitorTypeInfoResult',
    'GetAlarmNoticeCallbacksUrlNoticeResult',
    'GetAlarmNoticesAlarmNoticeResult',
    'GetAlarmNoticesAlarmNoticeClsNoticeResult',
    'GetAlarmNoticesAlarmNoticeUrlNoticeResult',
    'GetAlarmNoticesAlarmNoticeUserNoticeResult',
    'GetAlarmPolicyPolicyResult',
    'GetAlarmPolicyPolicyConditionResult',
    'GetAlarmPolicyPolicyConditionRuleResult',
    'GetAlarmPolicyPolicyConditionRuleFilterResult',
    'GetAlarmPolicyPolicyConditionRuleHierarchicalValueResult',
    'GetAlarmPolicyPolicyConditionsTempResult',
    'GetAlarmPolicyPolicyConditionsTempConditionResult',
    'GetAlarmPolicyPolicyConditionsTempConditionRuleResult',
    'GetAlarmPolicyPolicyConditionsTempConditionRuleFilterResult',
    'GetAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValueResult',
    'GetAlarmPolicyPolicyConditionsTempEventConditionResult',
    'GetAlarmPolicyPolicyConditionsTempEventConditionRuleResult',
    'GetAlarmPolicyPolicyConditionsTempEventConditionRuleFilterResult',
    'GetAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValueResult',
    'GetAlarmPolicyPolicyEventConditionResult',
    'GetAlarmPolicyPolicyEventConditionRuleResult',
    'GetAlarmPolicyPolicyEventConditionRuleFilterResult',
    'GetAlarmPolicyPolicyEventConditionRuleHierarchicalValueResult',
    'GetAlarmPolicyPolicyNoticeResult',
    'GetAlarmPolicyPolicyNoticeClsNoticeResult',
    'GetAlarmPolicyPolicyNoticeTagResult',
    'GetAlarmPolicyPolicyNoticeUrlNoticeResult',
    'GetAlarmPolicyPolicyNoticeUserNoticeResult',
    'GetAlarmPolicyPolicyTagResult',
    'GetAlarmPolicyPolicyTagInstanceResult',
    'GetAlarmPolicyPolicyTriggerTaskResult',
    'GetAlarmPolicyTriggerTaskResult',
    'GetBindingObjectsListResult',
    'GetDataDimensionResult',
    'GetDataListResult',
    'GetGrafanaPluginOverviewsPluginSetResult',
    'GetPolicyConditionsListResult',
    'GetPolicyConditionsListEventMetricResult',
    'GetPolicyConditionsListMetricResult',
    'GetPolicyGroupsListResult',
    'GetPolicyGroupsListConditionResult',
    'GetPolicyGroupsListEventConditionResult',
    'GetPolicyGroupsListReceiverResult',
    'GetProductEventDimensionResult',
    'GetProductEventListResult',
    'GetProductEventListAdditionMsgResult',
    'GetProductEventListDimensionResult',
    'GetProductEventListGroupInfoResult',
    'GetProductNamespaceListResult',
    'GetStatisticDataConditionResult',
    'GetStatisticDataDataResult',
    'GetStatisticDataDataPointResult',
    'GetStatisticDataDataPointDimensionResult',
    'GetStatisticDataDataPointValueResult',
    'GetTmpInstancesInstanceSetResult',
    'GetTmpInstancesInstanceSetGrantResult',
    'GetTmpInstancesInstanceSetTagSpecificationResult',
    'GetTmpInstancesTagFilterResult',
    'GetTmpRegionsRegionSetResult',
]

@pulumi.output_type
class AlarmNoticeClsNotice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logSetId":
            suggest = "log_set_id"
        elif key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmNoticeClsNotice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmNoticeClsNotice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmNoticeClsNotice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_set_id: str,
                 region: str,
                 topic_id: str,
                 enable: Optional[int] = None):
        pulumi.set(__self__, "log_set_id", log_set_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "topic_id", topic_id)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> str:
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter
    def enable(self) -> Optional[int]:
        return pulumi.get(self, "enable")


@pulumi.output_type
class AlarmNoticeUrlNotice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "isValid":
            suggest = "is_valid"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "validationCode":
            suggest = "validation_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmNoticeUrlNotice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmNoticeUrlNotice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmNoticeUrlNotice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 end_time: Optional[int] = None,
                 is_valid: Optional[int] = None,
                 start_time: Optional[int] = None,
                 validation_code: Optional[str] = None,
                 weekdays: Optional[Sequence[int]] = None):
        pulumi.set(__self__, "url", url)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if is_valid is not None:
            pulumi.set(__self__, "is_valid", is_valid)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if validation_code is not None:
            pulumi.set(__self__, "validation_code", validation_code)
        if weekdays is not None:
            pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[int]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> Optional[int]:
        return pulumi.get(self, "is_valid")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="validationCode")
    def validation_code(self) -> Optional[str]:
        return pulumi.get(self, "validation_code")

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class AlarmNoticeUserNotice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "noticeWays":
            suggest = "notice_ways"
        elif key == "receiverType":
            suggest = "receiver_type"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "groupIds":
            suggest = "group_ids"
        elif key == "needPhoneArriveNotice":
            suggest = "need_phone_arrive_notice"
        elif key == "phoneCallType":
            suggest = "phone_call_type"
        elif key == "phoneCircleInterval":
            suggest = "phone_circle_interval"
        elif key == "phoneCircleTimes":
            suggest = "phone_circle_times"
        elif key == "phoneInnerInterval":
            suggest = "phone_inner_interval"
        elif key == "phoneOrders":
            suggest = "phone_orders"
        elif key == "userIds":
            suggest = "user_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmNoticeUserNotice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmNoticeUserNotice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmNoticeUserNotice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: int,
                 notice_ways: Sequence[str],
                 receiver_type: str,
                 start_time: int,
                 group_ids: Optional[Sequence[int]] = None,
                 need_phone_arrive_notice: Optional[int] = None,
                 phone_call_type: Optional[str] = None,
                 phone_circle_interval: Optional[int] = None,
                 phone_circle_times: Optional[int] = None,
                 phone_inner_interval: Optional[int] = None,
                 phone_orders: Optional[Sequence[int]] = None,
                 user_ids: Optional[Sequence[int]] = None,
                 weekdays: Optional[Sequence[int]] = None):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "notice_ways", notice_ways)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "start_time", start_time)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if need_phone_arrive_notice is not None:
            pulumi.set(__self__, "need_phone_arrive_notice", need_phone_arrive_notice)
        if phone_call_type is not None:
            pulumi.set(__self__, "phone_call_type", phone_call_type)
        if phone_circle_interval is not None:
            pulumi.set(__self__, "phone_circle_interval", phone_circle_interval)
        if phone_circle_times is not None:
            pulumi.set(__self__, "phone_circle_times", phone_circle_times)
        if phone_inner_interval is not None:
            pulumi.set(__self__, "phone_inner_interval", phone_inner_interval)
        if phone_orders is not None:
            pulumi.set(__self__, "phone_orders", phone_orders)
        if user_ids is not None:
            pulumi.set(__self__, "user_ids", user_ids)
        if weekdays is not None:
            pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="noticeWays")
    def notice_ways(self) -> Sequence[str]:
        return pulumi.get(self, "notice_ways")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="needPhoneArriveNotice")
    def need_phone_arrive_notice(self) -> Optional[int]:
        return pulumi.get(self, "need_phone_arrive_notice")

    @property
    @pulumi.getter(name="phoneCallType")
    def phone_call_type(self) -> Optional[str]:
        return pulumi.get(self, "phone_call_type")

    @property
    @pulumi.getter(name="phoneCircleInterval")
    def phone_circle_interval(self) -> Optional[int]:
        return pulumi.get(self, "phone_circle_interval")

    @property
    @pulumi.getter(name="phoneCircleTimes")
    def phone_circle_times(self) -> Optional[int]:
        return pulumi.get(self, "phone_circle_times")

    @property
    @pulumi.getter(name="phoneInnerInterval")
    def phone_inner_interval(self) -> Optional[int]:
        return pulumi.get(self, "phone_inner_interval")

    @property
    @pulumi.getter(name="phoneOrders")
    def phone_orders(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "phone_orders")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class AlarmPolicyConditions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isUnionRule":
            suggest = "is_union_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_union_rule: Optional[int] = None,
                 rules: Optional[Sequence['outputs.AlarmPolicyConditionsRule']] = None):
        if is_union_rule is not None:
            pulumi.set(__self__, "is_union_rule", is_union_rule)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> Optional[int]:
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.AlarmPolicyConditionsRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class AlarmPolicyConditionsRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuePeriod":
            suggest = "continue_period"
        elif key == "isPowerNotice":
            suggest = "is_power_notice"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "noticeFrequency":
            suggest = "notice_frequency"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyConditionsRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyConditionsRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyConditionsRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continue_period: Optional[int] = None,
                 description: Optional[str] = None,
                 filter: Optional['outputs.AlarmPolicyConditionsRuleFilter'] = None,
                 is_power_notice: Optional[int] = None,
                 metric_name: Optional[str] = None,
                 notice_frequency: Optional[int] = None,
                 operator: Optional[str] = None,
                 period: Optional[int] = None,
                 rule_type: Optional[str] = None,
                 unit: Optional[str] = None,
                 value: Optional[str] = None):
        if continue_period is not None:
            pulumi.set(__self__, "continue_period", continue_period)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if is_power_notice is not None:
            pulumi.set(__self__, "is_power_notice", is_power_notice)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if notice_frequency is not None:
            pulumi.set(__self__, "notice_frequency", notice_frequency)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> Optional[int]:
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.AlarmPolicyConditionsRuleFilter']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> Optional[int]:
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> Optional[int]:
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmPolicyConditionsRuleFilter(dict):
    def __init__(__self__, *,
                 dimensions: Optional[str] = None,
                 type: Optional[str] = None):
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[str]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmPolicyEventCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuePeriod":
            suggest = "continue_period"
        elif key == "isPowerNotice":
            suggest = "is_power_notice"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "noticeFrequency":
            suggest = "notice_frequency"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyEventCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyEventCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyEventCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continue_period: Optional[int] = None,
                 description: Optional[str] = None,
                 filter: Optional['outputs.AlarmPolicyEventConditionFilter'] = None,
                 is_power_notice: Optional[int] = None,
                 metric_name: Optional[str] = None,
                 notice_frequency: Optional[int] = None,
                 operator: Optional[str] = None,
                 period: Optional[int] = None,
                 rule_type: Optional[str] = None,
                 unit: Optional[str] = None,
                 value: Optional[str] = None):
        if continue_period is not None:
            pulumi.set(__self__, "continue_period", continue_period)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if is_power_notice is not None:
            pulumi.set(__self__, "is_power_notice", is_power_notice)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if notice_frequency is not None:
            pulumi.set(__self__, "notice_frequency", notice_frequency)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> Optional[int]:
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.AlarmPolicyEventConditionFilter']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> Optional[int]:
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> Optional[int]:
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmPolicyEventConditionFilter(dict):
    def __init__(__self__, *,
                 dimensions: Optional[str] = None,
                 type: Optional[str] = None):
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[str]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmPolicyFilter(dict):
    def __init__(__self__, *,
                 type: str,
                 dimensions: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[str]:
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class AlarmPolicyPolicyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmPolicyTriggerTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "taskConfig":
            suggest = "task_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyTriggerTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyTriggerTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyTriggerTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 task_config: str,
                 type: str):
        pulumi.set(__self__, "task_config", task_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="taskConfig")
    def task_config(self) -> str:
        return pulumi.get(self, "task_config")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class BindingReceiverReceivers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notifyWays":
            suggest = "notify_ways"
        elif key == "receiverType":
            suggest = "receiver_type"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "receiveLanguage":
            suggest = "receive_language"
        elif key == "receiverGroupLists":
            suggest = "receiver_group_lists"
        elif key == "receiverUserLists":
            suggest = "receiver_user_lists"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BindingReceiverReceivers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BindingReceiverReceivers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BindingReceiverReceivers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notify_ways: Sequence[str],
                 receiver_type: str,
                 end_time: Optional[int] = None,
                 receive_language: Optional[str] = None,
                 receiver_group_lists: Optional[Sequence[int]] = None,
                 receiver_user_lists: Optional[Sequence[int]] = None,
                 start_time: Optional[int] = None):
        pulumi.set(__self__, "notify_ways", notify_ways)
        pulumi.set(__self__, "receiver_type", receiver_type)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if receive_language is not None:
            pulumi.set(__self__, "receive_language", receive_language)
        if receiver_group_lists is not None:
            pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        if receiver_user_lists is not None:
            pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Sequence[str]:
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[int]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="receiveLanguage")
    def receive_language(self) -> Optional[str]:
        return pulumi.get(self, "receive_language")

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "receiver_group_lists")

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "receiver_user_lists")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GrafanaSsoAccountRole(dict):
    def __init__(__self__, *,
                 organization: str,
                 role: str):
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")


@pulumi.output_type
class PolicyBindingObjectDimension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionsJson":
            suggest = "dimensions_json"
        elif key == "uniqueId":
            suggest = "unique_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyBindingObjectDimension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyBindingObjectDimension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyBindingObjectDimension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions_json: str,
                 unique_id: Optional[str] = None):
        pulumi.set(__self__, "dimensions_json", dimensions_json)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> str:
        return pulumi.get(self, "dimensions_json")

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[str]:
        return pulumi.get(self, "unique_id")


@pulumi.output_type
class TmpAlertGroupCustomReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedTimeRanges":
            suggest = "allowed_time_ranges"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterType":
            suggest = "cluster_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpAlertGroupCustomReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpAlertGroupCustomReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpAlertGroupCustomReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_time_ranges: Optional[Sequence['outputs.TmpAlertGroupCustomReceiverAllowedTimeRange']] = None,
                 cluster_id: Optional[str] = None,
                 cluster_type: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if allowed_time_ranges is not None:
            pulumi.set(__self__, "allowed_time_ranges", allowed_time_ranges)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="allowedTimeRanges")
    def allowed_time_ranges(self) -> Optional[Sequence['outputs.TmpAlertGroupCustomReceiverAllowedTimeRange']]:
        return pulumi.get(self, "allowed_time_ranges")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class TmpAlertGroupCustomReceiverAllowedTimeRange(dict):
    def __init__(__self__, *,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class TmpAlertGroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpAlertGroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpAlertGroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpAlertGroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 duration: Optional[str] = None,
                 expr: Optional[str] = None,
                 labels: Optional[Mapping[str, Any]] = None,
                 rule_name: Optional[str] = None,
                 state: Optional[int] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if expr is not None:
            pulumi.set(__self__, "expr", expr)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def expr(self) -> Optional[str]:
        return pulumi.get(self, "expr")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[int]:
        return pulumi.get(self, "state")


@pulumi.output_type
class TmpAlertRuleAnnotation(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpAlertRuleLabel(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "templateId":
            suggest = "template_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeAlertPolicyAlertRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeAlertPolicyAlertRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeAlertPolicyAlertRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 rules: Sequence['outputs.TmpTkeAlertPolicyAlertRuleRule'],
                 cluster_id: Optional[str] = None,
                 id: Optional[str] = None,
                 notification: Optional['outputs.TmpTkeAlertPolicyAlertRuleNotification'] = None,
                 template_id: Optional[str] = None,
                 updated_at: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rules", rules)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if notification is not None:
            pulumi.set(__self__, "notification", notification)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.TmpTkeAlertPolicyAlertRuleRule']:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def notification(self) -> Optional['outputs.TmpTkeAlertPolicyAlertRuleNotification']:
        return pulumi.get(self, "notification")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRuleNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertManager":
            suggest = "alert_manager"
        elif key == "notifyWays":
            suggest = "notify_ways"
        elif key == "phoneArriveNotice":
            suggest = "phone_arrive_notice"
        elif key == "phoneCircleInterval":
            suggest = "phone_circle_interval"
        elif key == "phoneCircleTimes":
            suggest = "phone_circle_times"
        elif key == "phoneInnerInterval":
            suggest = "phone_inner_interval"
        elif key == "phoneNotifyOrders":
            suggest = "phone_notify_orders"
        elif key == "receiverGroups":
            suggest = "receiver_groups"
        elif key == "repeatInterval":
            suggest = "repeat_interval"
        elif key == "timeRangeEnd":
            suggest = "time_range_end"
        elif key == "timeRangeStart":
            suggest = "time_range_start"
        elif key == "webHook":
            suggest = "web_hook"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeAlertPolicyAlertRuleNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeAlertPolicyAlertRuleNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeAlertPolicyAlertRuleNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 type: str,
                 alert_manager: Optional['outputs.TmpTkeAlertPolicyAlertRuleNotificationAlertManager'] = None,
                 notify_ways: Optional[Sequence[str]] = None,
                 phone_arrive_notice: Optional[bool] = None,
                 phone_circle_interval: Optional[int] = None,
                 phone_circle_times: Optional[int] = None,
                 phone_inner_interval: Optional[int] = None,
                 phone_notify_orders: Optional[Sequence[int]] = None,
                 receiver_groups: Optional[Sequence[str]] = None,
                 repeat_interval: Optional[str] = None,
                 time_range_end: Optional[str] = None,
                 time_range_start: Optional[str] = None,
                 web_hook: Optional[str] = None):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "type", type)
        if alert_manager is not None:
            pulumi.set(__self__, "alert_manager", alert_manager)
        if notify_ways is not None:
            pulumi.set(__self__, "notify_ways", notify_ways)
        if phone_arrive_notice is not None:
            pulumi.set(__self__, "phone_arrive_notice", phone_arrive_notice)
        if phone_circle_interval is not None:
            pulumi.set(__self__, "phone_circle_interval", phone_circle_interval)
        if phone_circle_times is not None:
            pulumi.set(__self__, "phone_circle_times", phone_circle_times)
        if phone_inner_interval is not None:
            pulumi.set(__self__, "phone_inner_interval", phone_inner_interval)
        if phone_notify_orders is not None:
            pulumi.set(__self__, "phone_notify_orders", phone_notify_orders)
        if receiver_groups is not None:
            pulumi.set(__self__, "receiver_groups", receiver_groups)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if time_range_end is not None:
            pulumi.set(__self__, "time_range_end", time_range_end)
        if time_range_start is not None:
            pulumi.set(__self__, "time_range_start", time_range_start)
        if web_hook is not None:
            pulumi.set(__self__, "web_hook", web_hook)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="alertManager")
    def alert_manager(self) -> Optional['outputs.TmpTkeAlertPolicyAlertRuleNotificationAlertManager']:
        return pulumi.get(self, "alert_manager")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="phoneArriveNotice")
    def phone_arrive_notice(self) -> Optional[bool]:
        return pulumi.get(self, "phone_arrive_notice")

    @property
    @pulumi.getter(name="phoneCircleInterval")
    def phone_circle_interval(self) -> Optional[int]:
        return pulumi.get(self, "phone_circle_interval")

    @property
    @pulumi.getter(name="phoneCircleTimes")
    def phone_circle_times(self) -> Optional[int]:
        return pulumi.get(self, "phone_circle_times")

    @property
    @pulumi.getter(name="phoneInnerInterval")
    def phone_inner_interval(self) -> Optional[int]:
        return pulumi.get(self, "phone_inner_interval")

    @property
    @pulumi.getter(name="phoneNotifyOrders")
    def phone_notify_orders(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "phone_notify_orders")

    @property
    @pulumi.getter(name="receiverGroups")
    def receiver_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "receiver_groups")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter(name="timeRangeEnd")
    def time_range_end(self) -> Optional[str]:
        return pulumi.get(self, "time_range_end")

    @property
    @pulumi.getter(name="timeRangeStart")
    def time_range_start(self) -> Optional[str]:
        return pulumi.get(self, "time_range_start")

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> Optional[str]:
        return pulumi.get(self, "web_hook")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRuleNotificationAlertManager(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterType":
            suggest = "cluster_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeAlertPolicyAlertRuleNotificationAlertManager. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeAlertPolicyAlertRuleNotificationAlertManager.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeAlertPolicyAlertRuleNotificationAlertManager.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 cluster_id: Optional[str] = None,
                 cluster_type: Optional[str] = None):
        pulumi.set(__self__, "url", url)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        return pulumi.get(self, "cluster_type")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRuleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "for":
            suggest = "for_"
        elif key == "ruleState":
            suggest = "rule_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeAlertPolicyAlertRuleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeAlertPolicyAlertRuleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeAlertPolicyAlertRuleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 for_: str,
                 labels: Sequence['outputs.TmpTkeAlertPolicyAlertRuleRuleLabel'],
                 name: str,
                 rule: str,
                 template: str,
                 annotations: Optional[Sequence['outputs.TmpTkeAlertPolicyAlertRuleRuleAnnotation']] = None,
                 describe: Optional[str] = None,
                 rule_state: Optional[int] = None):
        pulumi.set(__self__, "for_", for_)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rule", rule)
        pulumi.set(__self__, "template", template)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if describe is not None:
            pulumi.set(__self__, "describe", describe)
        if rule_state is not None:
            pulumi.set(__self__, "rule_state", rule_state)

    @property
    @pulumi.getter(name="for")
    def for_(self) -> str:
        return pulumi.get(self, "for_")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.TmpTkeAlertPolicyAlertRuleRuleLabel']:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rule(self) -> str:
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter
    def template(self) -> str:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Sequence['outputs.TmpTkeAlertPolicyAlertRuleRuleAnnotation']]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def describe(self) -> Optional[str]:
        return pulumi.get(self, "describe")

    @property
    @pulumi.getter(name="ruleState")
    def rule_state(self) -> Optional[int]:
        return pulumi.get(self, "rule_state")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRuleRuleAnnotation(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRuleRuleLabel(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpTkeClusterAgentAgents(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "enableExternal":
            suggest = "enable_external"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "externalLabels":
            suggest = "external_labels"
        elif key == "inClusterPodConfig":
            suggest = "in_cluster_pod_config"
        elif key == "notInstallBasicScrape":
            suggest = "not_install_basic_scrape"
        elif key == "notScrape":
            suggest = "not_scrape"
        elif key == "openDefaultRecord":
            suggest = "open_default_record"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeClusterAgentAgents. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeClusterAgentAgents.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeClusterAgentAgents.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_type: str,
                 enable_external: bool,
                 region: str,
                 cluster_name: Optional[str] = None,
                 external_labels: Optional[Sequence['outputs.TmpTkeClusterAgentAgentsExternalLabel']] = None,
                 in_cluster_pod_config: Optional['outputs.TmpTkeClusterAgentAgentsInClusterPodConfig'] = None,
                 not_install_basic_scrape: Optional[bool] = None,
                 not_scrape: Optional[bool] = None,
                 open_default_record: Optional[bool] = None,
                 status: Optional[str] = None):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "enable_external", enable_external)
        pulumi.set(__self__, "region", region)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if external_labels is not None:
            pulumi.set(__self__, "external_labels", external_labels)
        if in_cluster_pod_config is not None:
            pulumi.set(__self__, "in_cluster_pod_config", in_cluster_pod_config)
        if not_install_basic_scrape is not None:
            pulumi.set(__self__, "not_install_basic_scrape", not_install_basic_scrape)
        if not_scrape is not None:
            pulumi.set(__self__, "not_scrape", not_scrape)
        if open_default_record is not None:
            pulumi.set(__self__, "open_default_record", open_default_record)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="enableExternal")
    def enable_external(self) -> bool:
        return pulumi.get(self, "enable_external")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="externalLabels")
    def external_labels(self) -> Optional[Sequence['outputs.TmpTkeClusterAgentAgentsExternalLabel']]:
        return pulumi.get(self, "external_labels")

    @property
    @pulumi.getter(name="inClusterPodConfig")
    def in_cluster_pod_config(self) -> Optional['outputs.TmpTkeClusterAgentAgentsInClusterPodConfig']:
        return pulumi.get(self, "in_cluster_pod_config")

    @property
    @pulumi.getter(name="notInstallBasicScrape")
    def not_install_basic_scrape(self) -> Optional[bool]:
        return pulumi.get(self, "not_install_basic_scrape")

    @property
    @pulumi.getter(name="notScrape")
    def not_scrape(self) -> Optional[bool]:
        return pulumi.get(self, "not_scrape")

    @property
    @pulumi.getter(name="openDefaultRecord")
    def open_default_record(self) -> Optional[bool]:
        return pulumi.get(self, "open_default_record")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class TmpTkeClusterAgentAgentsExternalLabel(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpTkeClusterAgentAgentsInClusterPodConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostNet":
            suggest = "host_net"
        elif key == "nodeSelectors":
            suggest = "node_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeClusterAgentAgentsInClusterPodConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeClusterAgentAgentsInClusterPodConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeClusterAgentAgentsInClusterPodConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_net: bool,
                 node_selectors: Optional[Sequence['outputs.TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector']] = None,
                 tolerations: Optional[Sequence['outputs.TmpTkeClusterAgentAgentsInClusterPodConfigToleration']] = None):
        pulumi.set(__self__, "host_net", host_net)
        if node_selectors is not None:
            pulumi.set(__self__, "node_selectors", node_selectors)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter(name="hostNet")
    def host_net(self) -> bool:
        return pulumi.get(self, "host_net")

    @property
    @pulumi.getter(name="nodeSelectors")
    def node_selectors(self) -> Optional[Sequence['outputs.TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector']]:
        return pulumi.get(self, "node_selectors")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.TmpTkeClusterAgentAgentsInClusterPodConfigToleration']]:
        return pulumi.get(self, "tolerations")


@pulumi.output_type
class TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpTkeClusterAgentAgentsInClusterPodConfigToleration(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")


@pulumi.output_type
class TmpTkeConfigPodMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeConfigPodMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeConfigPodMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeConfigPodMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeConfigRawJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeConfigRawJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeConfigRawJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeConfigRawJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeConfigServiceMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeConfigServiceMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeConfigServiceMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeConfigServiceMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeGlobalNotificationNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertManagers":
            suggest = "alert_managers"
        elif key == "notifyWays":
            suggest = "notify_ways"
        elif key == "phoneArriveNotice":
            suggest = "phone_arrive_notice"
        elif key == "phoneCircleInterval":
            suggest = "phone_circle_interval"
        elif key == "phoneCircleTimes":
            suggest = "phone_circle_times"
        elif key == "phoneInnerInterval":
            suggest = "phone_inner_interval"
        elif key == "phoneNotifyOrders":
            suggest = "phone_notify_orders"
        elif key == "receiverGroups":
            suggest = "receiver_groups"
        elif key == "repeatInterval":
            suggest = "repeat_interval"
        elif key == "timeRangeEnd":
            suggest = "time_range_end"
        elif key == "timeRangeStart":
            suggest = "time_range_start"
        elif key == "webHook":
            suggest = "web_hook"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeGlobalNotificationNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeGlobalNotificationNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeGlobalNotificationNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 type: str,
                 alert_managers: Optional[Sequence['outputs.TmpTkeGlobalNotificationNotificationAlertManager']] = None,
                 notify_ways: Optional[Sequence[str]] = None,
                 phone_arrive_notice: Optional[bool] = None,
                 phone_circle_interval: Optional[int] = None,
                 phone_circle_times: Optional[int] = None,
                 phone_inner_interval: Optional[int] = None,
                 phone_notify_orders: Optional[Sequence[int]] = None,
                 receiver_groups: Optional[Sequence[str]] = None,
                 repeat_interval: Optional[str] = None,
                 time_range_end: Optional[str] = None,
                 time_range_start: Optional[str] = None,
                 web_hook: Optional[str] = None):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "type", type)
        if alert_managers is not None:
            pulumi.set(__self__, "alert_managers", alert_managers)
        if notify_ways is not None:
            pulumi.set(__self__, "notify_ways", notify_ways)
        if phone_arrive_notice is not None:
            pulumi.set(__self__, "phone_arrive_notice", phone_arrive_notice)
        if phone_circle_interval is not None:
            pulumi.set(__self__, "phone_circle_interval", phone_circle_interval)
        if phone_circle_times is not None:
            pulumi.set(__self__, "phone_circle_times", phone_circle_times)
        if phone_inner_interval is not None:
            pulumi.set(__self__, "phone_inner_interval", phone_inner_interval)
        if phone_notify_orders is not None:
            pulumi.set(__self__, "phone_notify_orders", phone_notify_orders)
        if receiver_groups is not None:
            pulumi.set(__self__, "receiver_groups", receiver_groups)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if time_range_end is not None:
            pulumi.set(__self__, "time_range_end", time_range_end)
        if time_range_start is not None:
            pulumi.set(__self__, "time_range_start", time_range_start)
        if web_hook is not None:
            pulumi.set(__self__, "web_hook", web_hook)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="alertManagers")
    def alert_managers(self) -> Optional[Sequence['outputs.TmpTkeGlobalNotificationNotificationAlertManager']]:
        return pulumi.get(self, "alert_managers")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="phoneArriveNotice")
    def phone_arrive_notice(self) -> Optional[bool]:
        return pulumi.get(self, "phone_arrive_notice")

    @property
    @pulumi.getter(name="phoneCircleInterval")
    def phone_circle_interval(self) -> Optional[int]:
        return pulumi.get(self, "phone_circle_interval")

    @property
    @pulumi.getter(name="phoneCircleTimes")
    def phone_circle_times(self) -> Optional[int]:
        return pulumi.get(self, "phone_circle_times")

    @property
    @pulumi.getter(name="phoneInnerInterval")
    def phone_inner_interval(self) -> Optional[int]:
        return pulumi.get(self, "phone_inner_interval")

    @property
    @pulumi.getter(name="phoneNotifyOrders")
    def phone_notify_orders(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "phone_notify_orders")

    @property
    @pulumi.getter(name="receiverGroups")
    def receiver_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "receiver_groups")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter(name="timeRangeEnd")
    def time_range_end(self) -> Optional[str]:
        return pulumi.get(self, "time_range_end")

    @property
    @pulumi.getter(name="timeRangeStart")
    def time_range_start(self) -> Optional[str]:
        return pulumi.get(self, "time_range_start")

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> Optional[str]:
        return pulumi.get(self, "web_hook")


@pulumi.output_type
class TmpTkeGlobalNotificationNotificationAlertManager(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterType":
            suggest = "cluster_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeGlobalNotificationNotificationAlertManager. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeGlobalNotificationNotificationAlertManager.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeGlobalNotificationNotificationAlertManager.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 cluster_id: Optional[str] = None,
                 cluster_type: Optional[str] = None):
        pulumi.set(__self__, "url", url)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        return pulumi.get(self, "cluster_type")


@pulumi.output_type
class TmpTkeTemplateAttachmentTargets(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "syncTime":
            suggest = "sync_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateAttachmentTargets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateAttachmentTargets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateAttachmentTargets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 region: str,
                 cluster_id: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_type: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 sync_time: Optional[str] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "region", region)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if sync_time is not None:
            pulumi.set(__self__, "sync_time", sync_time)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="syncTime")
    def sync_time(self) -> Optional[str]:
        return pulumi.get(self, "sync_time")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class TmpTkeTemplateTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"
        elif key == "podMonitors":
            suggest = "pod_monitors"
        elif key == "rawJobs":
            suggest = "raw_jobs"
        elif key == "recordRules":
            suggest = "record_rules"
        elif key == "serviceMonitors":
            suggest = "service_monitors"
        elif key == "templateId":
            suggest = "template_id"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: str,
                 name: str,
                 describe: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 pod_monitors: Optional[Sequence['outputs.TmpTkeTemplateTemplatePodMonitor']] = None,
                 raw_jobs: Optional[Sequence['outputs.TmpTkeTemplateTemplateRawJob']] = None,
                 record_rules: Optional[Sequence['outputs.TmpTkeTemplateTemplateRecordRule']] = None,
                 service_monitors: Optional[Sequence['outputs.TmpTkeTemplateTemplateServiceMonitor']] = None,
                 template_id: Optional[str] = None,
                 update_time: Optional[str] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        if describe is not None:
            pulumi.set(__self__, "describe", describe)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if pod_monitors is not None:
            pulumi.set(__self__, "pod_monitors", pod_monitors)
        if raw_jobs is not None:
            pulumi.set(__self__, "raw_jobs", raw_jobs)
        if record_rules is not None:
            pulumi.set(__self__, "record_rules", record_rules)
        if service_monitors is not None:
            pulumi.set(__self__, "service_monitors", service_monitors)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def describe(self) -> Optional[str]:
        return pulumi.get(self, "describe")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="podMonitors")
    def pod_monitors(self) -> Optional[Sequence['outputs.TmpTkeTemplateTemplatePodMonitor']]:
        return pulumi.get(self, "pod_monitors")

    @property
    @pulumi.getter(name="rawJobs")
    def raw_jobs(self) -> Optional[Sequence['outputs.TmpTkeTemplateTemplateRawJob']]:
        return pulumi.get(self, "raw_jobs")

    @property
    @pulumi.getter(name="recordRules")
    def record_rules(self) -> Optional[Sequence['outputs.TmpTkeTemplateTemplateRecordRule']]:
        return pulumi.get(self, "record_rules")

    @property
    @pulumi.getter(name="serviceMonitors")
    def service_monitors(self) -> Optional[Sequence['outputs.TmpTkeTemplateTemplateServiceMonitor']]:
        return pulumi.get(self, "service_monitors")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class TmpTkeTemplateTemplatePodMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateTemplatePodMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateTemplatePodMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateTemplatePodMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeTemplateTemplateRawJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateTemplateRawJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateTemplateRawJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateTemplateRawJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeTemplateTemplateRecordRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateTemplateRecordRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateTemplateRecordRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateTemplateRecordRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeTemplateTemplateServiceMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateTemplateServiceMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateTemplateServiceMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateTemplateServiceMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        return pulumi.get(self, "template_id")


@pulumi.output_type
class GetAlarmAllNamespacesCommonNamespaceResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetAlarmAllNamespacesCommonNamespaceDimensionResult'],
                 id: str,
                 monitor_type: str,
                 name: str):
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monitor_type", monitor_type)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetAlarmAllNamespacesCommonNamespaceDimensionResult']:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> str:
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAlarmAllNamespacesCommonNamespaceDimensionResult(dict):
    def __init__(__self__, *,
                 can_filter_history: bool,
                 can_filter_policy: bool,
                 can_group_by: bool,
                 is_multiple: bool,
                 is_mutable: bool,
                 is_required: bool,
                 is_visible: bool,
                 key: str,
                 must_group_by: bool,
                 name: str,
                 operators: Sequence['outputs.GetAlarmAllNamespacesCommonNamespaceDimensionOperatorResult'],
                 show_value_replace: str):
        pulumi.set(__self__, "can_filter_history", can_filter_history)
        pulumi.set(__self__, "can_filter_policy", can_filter_policy)
        pulumi.set(__self__, "can_group_by", can_group_by)
        pulumi.set(__self__, "is_multiple", is_multiple)
        pulumi.set(__self__, "is_mutable", is_mutable)
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "is_visible", is_visible)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "must_group_by", must_group_by)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operators", operators)
        pulumi.set(__self__, "show_value_replace", show_value_replace)

    @property
    @pulumi.getter(name="canFilterHistory")
    def can_filter_history(self) -> bool:
        return pulumi.get(self, "can_filter_history")

    @property
    @pulumi.getter(name="canFilterPolicy")
    def can_filter_policy(self) -> bool:
        return pulumi.get(self, "can_filter_policy")

    @property
    @pulumi.getter(name="canGroupBy")
    def can_group_by(self) -> bool:
        return pulumi.get(self, "can_group_by")

    @property
    @pulumi.getter(name="isMultiple")
    def is_multiple(self) -> bool:
        return pulumi.get(self, "is_multiple")

    @property
    @pulumi.getter(name="isMutable")
    def is_mutable(self) -> bool:
        return pulumi.get(self, "is_mutable")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> bool:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter(name="isVisible")
    def is_visible(self) -> bool:
        return pulumi.get(self, "is_visible")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="mustGroupBy")
    def must_group_by(self) -> bool:
        return pulumi.get(self, "must_group_by")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operators(self) -> Sequence['outputs.GetAlarmAllNamespacesCommonNamespaceDimensionOperatorResult']:
        return pulumi.get(self, "operators")

    @property
    @pulumi.getter(name="showValueReplace")
    def show_value_replace(self) -> str:
        return pulumi.get(self, "show_value_replace")


@pulumi.output_type
class GetAlarmAllNamespacesCommonNamespaceDimensionOperatorResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAlarmAllNamespacesCustomNamespacesNewsResult(dict):
    def __init__(__self__, *,
                 available_regions: Sequence[str],
                 config: str,
                 dashboard_id: str,
                 id: str,
                 name: str,
                 product_name: str,
                 sort_id: int,
                 value: str):
        pulumi.set(__self__, "available_regions", available_regions)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "dashboard_id", dashboard_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "sort_id", sort_id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="availableRegions")
    def available_regions(self) -> Sequence[str]:
        return pulumi.get(self, "available_regions")

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> str:
        return pulumi.get(self, "dashboard_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="sortId")
    def sort_id(self) -> int:
        return pulumi.get(self, "sort_id")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmAllNamespacesQceNamespacesNewsResult(dict):
    def __init__(__self__, *,
                 available_regions: Sequence[str],
                 config: str,
                 dashboard_id: str,
                 id: str,
                 name: str,
                 product_name: str,
                 sort_id: int,
                 value: str):
        pulumi.set(__self__, "available_regions", available_regions)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "dashboard_id", dashboard_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "sort_id", sort_id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="availableRegions")
    def available_regions(self) -> Sequence[str]:
        return pulumi.get(self, "available_regions")

    @property
    @pulumi.getter
    def config(self) -> str:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> str:
        return pulumi.get(self, "dashboard_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="sortId")
    def sort_id(self) -> int:
        return pulumi.get(self, "sort_id")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmBasicAlarmsAlarmResult(dict):
    def __init__(__self__, *,
                 alarm_status: str,
                 alarm_type: int,
                 content: str,
                 dimensions: str,
                 duration: int,
                 first_occur_time: str,
                 group_id: int,
                 group_name: str,
                 id: int,
                 instance_groups: Sequence['outputs.GetAlarmBasicAlarmsAlarmInstanceGroupResult'],
                 last_occur_time: str,
                 metric_id: int,
                 metric_name: str,
                 notify_ways: Sequence[str],
                 obj_id: str,
                 obj_name: str,
                 project_id: int,
                 project_name: str,
                 region: str,
                 status: int,
                 view_name: str,
                 vpc: str):
        pulumi.set(__self__, "alarm_status", alarm_status)
        pulumi.set(__self__, "alarm_type", alarm_type)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "first_occur_time", first_occur_time)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_groups", instance_groups)
        pulumi.set(__self__, "last_occur_time", last_occur_time)
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notify_ways", notify_ways)
        pulumi.set(__self__, "obj_id", obj_id)
        pulumi.set(__self__, "obj_name", obj_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "view_name", view_name)
        pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter(name="alarmStatus")
    def alarm_status(self) -> str:
        return pulumi.get(self, "alarm_status")

    @property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> int:
        return pulumi.get(self, "alarm_type")

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def duration(self) -> int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="firstOccurTime")
    def first_occur_time(self) -> str:
        return pulumi.get(self, "first_occur_time")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceGroups")
    def instance_groups(self) -> Sequence['outputs.GetAlarmBasicAlarmsAlarmInstanceGroupResult']:
        return pulumi.get(self, "instance_groups")

    @property
    @pulumi.getter(name="lastOccurTime")
    def last_occur_time(self) -> str:
        return pulumi.get(self, "last_occur_time")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Sequence[str]:
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="objId")
    def obj_id(self) -> str:
        return pulumi.get(self, "obj_id")

    @property
    @pulumi.getter(name="objName")
    def obj_name(self) -> str:
        return pulumi.get(self, "obj_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> str:
        return pulumi.get(self, "view_name")

    @property
    @pulumi.getter
    def vpc(self) -> str:
        return pulumi.get(self, "vpc")


@pulumi.output_type
class GetAlarmBasicAlarmsAlarmInstanceGroupResult(dict):
    def __init__(__self__, *,
                 instance_group_id: int,
                 instance_group_name: str):
        pulumi.set(__self__, "instance_group_id", instance_group_id)
        pulumi.set(__self__, "instance_group_name", instance_group_name)

    @property
    @pulumi.getter(name="instanceGroupId")
    def instance_group_id(self) -> int:
        return pulumi.get(self, "instance_group_id")

    @property
    @pulumi.getter(name="instanceGroupName")
    def instance_group_name(self) -> str:
        return pulumi.get(self, "instance_group_name")


@pulumi.output_type
class GetAlarmBasicMetricMetricSetResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetAlarmBasicMetricMetricSetDimensionResult'],
                 meanings: Sequence['outputs.GetAlarmBasicMetricMetricSetMeaningResult'],
                 metric_c_name: str,
                 metric_e_name: str,
                 metric_name: str,
                 namespace: str,
                 period: Sequence[int],
                 periods: Sequence['outputs.GetAlarmBasicMetricMetricSetPeriodResult'],
                 unit: str,
                 unit_cname: str):
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "meanings", meanings)
        pulumi.set(__self__, "metric_c_name", metric_c_name)
        pulumi.set(__self__, "metric_e_name", metric_e_name)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "periods", periods)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "unit_cname", unit_cname)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetAlarmBasicMetricMetricSetDimensionResult']:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def meanings(self) -> Sequence['outputs.GetAlarmBasicMetricMetricSetMeaningResult']:
        return pulumi.get(self, "meanings")

    @property
    @pulumi.getter(name="metricCName")
    def metric_c_name(self) -> str:
        return pulumi.get(self, "metric_c_name")

    @property
    @pulumi.getter(name="metricEName")
    def metric_e_name(self) -> str:
        return pulumi.get(self, "metric_e_name")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def period(self) -> Sequence[int]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def periods(self) -> Sequence['outputs.GetAlarmBasicMetricMetricSetPeriodResult']:
        return pulumi.get(self, "periods")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter(name="unitCname")
    def unit_cname(self) -> str:
        return pulumi.get(self, "unit_cname")


@pulumi.output_type
class GetAlarmBasicMetricMetricSetDimensionResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence[str]):
        pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence[str]:
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetAlarmBasicMetricMetricSetMeaningResult(dict):
    def __init__(__self__, *,
                 en: str,
                 zh: str):
        pulumi.set(__self__, "en", en)
        pulumi.set(__self__, "zh", zh)

    @property
    @pulumi.getter
    def en(self) -> str:
        return pulumi.get(self, "en")

    @property
    @pulumi.getter
    def zh(self) -> str:
        return pulumi.get(self, "zh")


@pulumi.output_type
class GetAlarmBasicMetricMetricSetPeriodResult(dict):
    def __init__(__self__, *,
                 period: str,
                 stat_types: Sequence[str]):
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "stat_types", stat_types)

    @property
    @pulumi.getter
    def period(self) -> str:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="statTypes")
    def stat_types(self) -> Sequence[str]:
        return pulumi.get(self, "stat_types")


@pulumi.output_type
class GetAlarmConditionsTemplateTemplateGroupListResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListConditionResult'],
                 event_conditions: Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListEventConditionResult'],
                 group_id: int,
                 group_name: str,
                 insert_time: int,
                 is_union_rule: int,
                 last_edit_uin: int,
                 policy_groups: Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListPolicyGroupResult'],
                 remark: str,
                 update_time: int,
                 view_name: str):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "event_conditions", event_conditions)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "is_union_rule", is_union_rule)
        pulumi.set(__self__, "last_edit_uin", last_edit_uin)
        pulumi.set(__self__, "policy_groups", policy_groups)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListEventConditionResult']:
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> int:
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> int:
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> int:
        return pulumi.get(self, "last_edit_uin")

    @property
    @pulumi.getter(name="policyGroups")
    def policy_groups(self) -> Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListPolicyGroupResult']:
        return pulumi.get(self, "policy_groups")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> str:
        return pulumi.get(self, "view_name")


@pulumi.output_type
class GetAlarmConditionsTemplateTemplateGroupListConditionResult(dict):
    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 calc_type: str,
                 calc_value: str,
                 continue_time: str,
                 is_advanced: int,
                 is_open: int,
                 metric_display_name: str,
                 metric_id: int,
                 period: int,
                 product_id: str,
                 rule_id: int,
                 unit: str):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "calc_type", calc_type)
        pulumi.set(__self__, "calc_value", calc_value)
        pulumi.set(__self__, "continue_time", continue_time)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "metric_display_name", metric_display_name)
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="calcType")
    def calc_type(self) -> str:
        return pulumi.get(self, "calc_type")

    @property
    @pulumi.getter(name="calcValue")
    def calc_value(self) -> str:
        return pulumi.get(self, "calc_value")

    @property
    @pulumi.getter(name="continueTime")
    def continue_time(self) -> str:
        return pulumi.get(self, "continue_time")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="metricDisplayName")
    def metric_display_name(self) -> str:
        return pulumi.get(self, "metric_display_name")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetAlarmConditionsTemplateTemplateGroupListEventConditionResult(dict):
    def __init__(__self__, *,
                 alarm_notify_period: str,
                 alarm_notify_type: str,
                 event_display_name: str,
                 event_id: str,
                 rule_id: str):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "event_display_name", event_display_name)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> str:
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> str:
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="eventDisplayName")
    def event_display_name(self) -> str:
        return pulumi.get(self, "event_display_name")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> str:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class GetAlarmConditionsTemplateTemplateGroupListPolicyGroupResult(dict):
    def __init__(__self__, *,
                 can_set_default: bool,
                 enable: bool,
                 group_id: int,
                 group_name: str,
                 insert_time: int,
                 is_default: int,
                 is_union_rule: int,
                 last_edit_uin: int,
                 no_shielded_instance_count: int,
                 parent_group_id: int,
                 project_id: int,
                 receiver_infos: Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfoResult'],
                 remark: str,
                 total_instance_count: int,
                 update_time: int,
                 view_name: str):
        pulumi.set(__self__, "can_set_default", can_set_default)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_union_rule", is_union_rule)
        pulumi.set(__self__, "last_edit_uin", last_edit_uin)
        pulumi.set(__self__, "no_shielded_instance_count", no_shielded_instance_count)
        pulumi.set(__self__, "parent_group_id", parent_group_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "receiver_infos", receiver_infos)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "total_instance_count", total_instance_count)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter(name="canSetDefault")
    def can_set_default(self) -> bool:
        return pulumi.get(self, "can_set_default")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> int:
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> int:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> int:
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> int:
        return pulumi.get(self, "last_edit_uin")

    @property
    @pulumi.getter(name="noShieldedInstanceCount")
    def no_shielded_instance_count(self) -> int:
        return pulumi.get(self, "no_shielded_instance_count")

    @property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> int:
        return pulumi.get(self, "parent_group_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="receiverInfos")
    def receiver_infos(self) -> Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfoResult']:
        return pulumi.get(self, "receiver_infos")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="totalInstanceCount")
    def total_instance_count(self) -> int:
        return pulumi.get(self, "total_instance_count")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> str:
        return pulumi.get(self, "view_name")


@pulumi.output_type
class GetAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfoResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 need_send_notice: int,
                 notify_ways: Sequence[str],
                 person_interval: int,
                 receiver_group_lists: Sequence[int],
                 receiver_type: str,
                 receiver_user_lists: Sequence[int],
                 recover_notifies: Sequence[str],
                 round_interval: int,
                 round_number: int,
                 send_fors: Sequence[str],
                 start_time: int,
                 uid_lists: Sequence[int]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "need_send_notice", need_send_notice)
        pulumi.set(__self__, "notify_ways", notify_ways)
        pulumi.set(__self__, "person_interval", person_interval)
        pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        pulumi.set(__self__, "recover_notifies", recover_notifies)
        pulumi.set(__self__, "round_interval", round_interval)
        pulumi.set(__self__, "round_number", round_number)
        pulumi.set(__self__, "send_fors", send_fors)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "uid_lists", uid_lists)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="needSendNotice")
    def need_send_notice(self) -> int:
        return pulumi.get(self, "need_send_notice")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Sequence[str]:
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="personInterval")
    def person_interval(self) -> int:
        return pulumi.get(self, "person_interval")

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Sequence[int]:
        return pulumi.get(self, "receiver_group_lists")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Sequence[int]:
        return pulumi.get(self, "receiver_user_lists")

    @property
    @pulumi.getter(name="recoverNotifies")
    def recover_notifies(self) -> Sequence[str]:
        return pulumi.get(self, "recover_notifies")

    @property
    @pulumi.getter(name="roundInterval")
    def round_interval(self) -> int:
        return pulumi.get(self, "round_interval")

    @property
    @pulumi.getter(name="roundNumber")
    def round_number(self) -> int:
        return pulumi.get(self, "round_number")

    @property
    @pulumi.getter(name="sendFors")
    def send_fors(self) -> Sequence[str]:
        return pulumi.get(self, "send_fors")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="uidLists")
    def uid_lists(self) -> Sequence[int]:
        return pulumi.get(self, "uid_lists")


@pulumi.output_type
class GetAlarmHistoryHistoryResult(dict):
    def __init__(__self__, *,
                 alarm_id: str,
                 alarm_level: str,
                 alarm_object: str,
                 alarm_status: str,
                 alarm_type: str,
                 content: str,
                 dimensions: str,
                 event_id: int,
                 first_occur_time: int,
                 instance_groups: Sequence['outputs.GetAlarmHistoryHistoryInstanceGroupResult'],
                 last_occur_time: int,
                 metrics_infos: Sequence['outputs.GetAlarmHistoryHistoryMetricsInfoResult'],
                 monitor_type: str,
                 namespace: str,
                 notice_ways: Sequence[str],
                 origin_id: str,
                 policy_exists: int,
                 policy_id: str,
                 policy_name: str,
                 project_id: int,
                 project_name: str,
                 receiver_groups: Sequence[int],
                 receiver_uids: Sequence[int],
                 region: str,
                 vpc: str):
        pulumi.set(__self__, "alarm_id", alarm_id)
        pulumi.set(__self__, "alarm_level", alarm_level)
        pulumi.set(__self__, "alarm_object", alarm_object)
        pulumi.set(__self__, "alarm_status", alarm_status)
        pulumi.set(__self__, "alarm_type", alarm_type)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "first_occur_time", first_occur_time)
        pulumi.set(__self__, "instance_groups", instance_groups)
        pulumi.set(__self__, "last_occur_time", last_occur_time)
        pulumi.set(__self__, "metrics_infos", metrics_infos)
        pulumi.set(__self__, "monitor_type", monitor_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "notice_ways", notice_ways)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "policy_exists", policy_exists)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "receiver_groups", receiver_groups)
        pulumi.set(__self__, "receiver_uids", receiver_uids)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> str:
        return pulumi.get(self, "alarm_id")

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> str:
        return pulumi.get(self, "alarm_level")

    @property
    @pulumi.getter(name="alarmObject")
    def alarm_object(self) -> str:
        return pulumi.get(self, "alarm_object")

    @property
    @pulumi.getter(name="alarmStatus")
    def alarm_status(self) -> str:
        return pulumi.get(self, "alarm_status")

    @property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> str:
        return pulumi.get(self, "alarm_type")

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="firstOccurTime")
    def first_occur_time(self) -> int:
        return pulumi.get(self, "first_occur_time")

    @property
    @pulumi.getter(name="instanceGroups")
    def instance_groups(self) -> Sequence['outputs.GetAlarmHistoryHistoryInstanceGroupResult']:
        return pulumi.get(self, "instance_groups")

    @property
    @pulumi.getter(name="lastOccurTime")
    def last_occur_time(self) -> int:
        return pulumi.get(self, "last_occur_time")

    @property
    @pulumi.getter(name="metricsInfos")
    def metrics_infos(self) -> Sequence['outputs.GetAlarmHistoryHistoryMetricsInfoResult']:
        return pulumi.get(self, "metrics_infos")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> str:
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="noticeWays")
    def notice_ways(self) -> Sequence[str]:
        return pulumi.get(self, "notice_ways")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="policyExists")
    def policy_exists(self) -> int:
        return pulumi.get(self, "policy_exists")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="receiverGroups")
    def receiver_groups(self) -> Sequence[int]:
        return pulumi.get(self, "receiver_groups")

    @property
    @pulumi.getter(name="receiverUids")
    def receiver_uids(self) -> Sequence[int]:
        return pulumi.get(self, "receiver_uids")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def vpc(self) -> str:
        return pulumi.get(self, "vpc")


@pulumi.output_type
class GetAlarmHistoryHistoryInstanceGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAlarmHistoryHistoryMetricsInfoResult(dict):
    def __init__(__self__, *,
                 description: str,
                 metric_name: str,
                 period: int,
                 qce_namespace: str,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "qce_namespace", qce_namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="qceNamespace")
    def qce_namespace(self) -> str:
        return pulumi.get(self, "qce_namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmHistoryNamespaceResult(dict):
    def __init__(__self__, *,
                 monitor_type: str,
                 namespace: str):
        pulumi.set(__self__, "monitor_type", monitor_type)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> str:
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetAlarmMetricMetricResult(dict):
    def __init__(__self__, *,
                 description: str,
                 dimensions: Sequence[str],
                 is_advanced: int,
                 is_open: int,
                 max: float,
                 metric_configs: Sequence['outputs.GetAlarmMetricMetricMetricConfigResult'],
                 metric_name: str,
                 min: float,
                 namespace: str,
                 operators: Sequence['outputs.GetAlarmMetricMetricOperatorResult'],
                 periods: Sequence[int],
                 product_id: int,
                 unit: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "metric_configs", metric_configs)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "operators", operators)
        pulumi.set(__self__, "periods", periods)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence[str]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter
    def max(self) -> float:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter(name="metricConfigs")
    def metric_configs(self) -> Sequence['outputs.GetAlarmMetricMetricMetricConfigResult']:
        return pulumi.get(self, "metric_configs")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def min(self) -> float:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def operators(self) -> Sequence['outputs.GetAlarmMetricMetricOperatorResult']:
        return pulumi.get(self, "operators")

    @property
    @pulumi.getter
    def periods(self) -> Sequence[int]:
        return pulumi.get(self, "periods")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> int:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetAlarmMetricMetricMetricConfigResult(dict):
    def __init__(__self__, *,
                 continue_periods: Sequence[int],
                 operators: Sequence[str],
                 periods: Sequence[int]):
        pulumi.set(__self__, "continue_periods", continue_periods)
        pulumi.set(__self__, "operators", operators)
        pulumi.set(__self__, "periods", periods)

    @property
    @pulumi.getter(name="continuePeriods")
    def continue_periods(self) -> Sequence[int]:
        return pulumi.get(self, "continue_periods")

    @property
    @pulumi.getter
    def operators(self) -> Sequence[str]:
        return pulumi.get(self, "operators")

    @property
    @pulumi.getter
    def periods(self) -> Sequence[int]:
        return pulumi.get(self, "periods")


@pulumi.output_type
class GetAlarmMetricMetricOperatorResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAlarmMonitorTypeMonitorTypeInfoResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 sort_id: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sort_id", sort_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sortId")
    def sort_id(self) -> int:
        return pulumi.get(self, "sort_id")


@pulumi.output_type
class GetAlarmNoticeCallbacksUrlNoticeResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 is_valid: int,
                 start_time: int,
                 url: str,
                 validation_code: str,
                 weekdays: Sequence[int]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "is_valid", is_valid)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "validation_code", validation_code)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> int:
        return pulumi.get(self, "is_valid")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="validationCode")
    def validation_code(self) -> str:
        return pulumi.get(self, "validation_code")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[int]:
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetAlarmNoticesAlarmNoticeResult(dict):
    def __init__(__self__, *,
                 amp_consumer_id: str,
                 cls_notices: Sequence['outputs.GetAlarmNoticesAlarmNoticeClsNoticeResult'],
                 id: str,
                 is_preset: int,
                 name: str,
                 notice_language: str,
                 notice_type: str,
                 policy_ids: Sequence[str],
                 updated_at: str,
                 updated_by: str,
                 url_notices: Sequence['outputs.GetAlarmNoticesAlarmNoticeUrlNoticeResult'],
                 user_notices: Sequence['outputs.GetAlarmNoticesAlarmNoticeUserNoticeResult']):
        pulumi.set(__self__, "amp_consumer_id", amp_consumer_id)
        pulumi.set(__self__, "cls_notices", cls_notices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_preset", is_preset)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notice_language", notice_language)
        pulumi.set(__self__, "notice_type", notice_type)
        pulumi.set(__self__, "policy_ids", policy_ids)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "url_notices", url_notices)
        pulumi.set(__self__, "user_notices", user_notices)

    @property
    @pulumi.getter(name="ampConsumerId")
    def amp_consumer_id(self) -> str:
        return pulumi.get(self, "amp_consumer_id")

    @property
    @pulumi.getter(name="clsNotices")
    def cls_notices(self) -> Sequence['outputs.GetAlarmNoticesAlarmNoticeClsNoticeResult']:
        return pulumi.get(self, "cls_notices")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPreset")
    def is_preset(self) -> int:
        return pulumi.get(self, "is_preset")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="noticeLanguage")
    def notice_language(self) -> str:
        return pulumi.get(self, "notice_language")

    @property
    @pulumi.getter(name="noticeType")
    def notice_type(self) -> str:
        return pulumi.get(self, "notice_type")

    @property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Sequence[str]:
        return pulumi.get(self, "policy_ids")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="urlNotices")
    def url_notices(self) -> Sequence['outputs.GetAlarmNoticesAlarmNoticeUrlNoticeResult']:
        return pulumi.get(self, "url_notices")

    @property
    @pulumi.getter(name="userNotices")
    def user_notices(self) -> Sequence['outputs.GetAlarmNoticesAlarmNoticeUserNoticeResult']:
        return pulumi.get(self, "user_notices")


@pulumi.output_type
class GetAlarmNoticesAlarmNoticeClsNoticeResult(dict):
    def __init__(__self__, *,
                 enable: int,
                 log_set_id: str,
                 region: str,
                 topic_id: str):
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "log_set_id", log_set_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enable(self) -> int:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> str:
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetAlarmNoticesAlarmNoticeUrlNoticeResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 start_time: int,
                 url: str,
                 weekdays: Sequence[int]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[int]:
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetAlarmNoticesAlarmNoticeUserNoticeResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 group_ids: Sequence[int],
                 need_phone_arrive_notice: int,
                 notice_ways: Sequence[str],
                 phone_call_type: str,
                 phone_circle_interval: int,
                 phone_circle_times: int,
                 phone_inner_interval: int,
                 phone_orders: Sequence[int],
                 receiver_type: str,
                 start_time: int,
                 user_ids: Sequence[int],
                 weekdays: Sequence[int]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "need_phone_arrive_notice", need_phone_arrive_notice)
        pulumi.set(__self__, "notice_ways", notice_ways)
        pulumi.set(__self__, "phone_call_type", phone_call_type)
        pulumi.set(__self__, "phone_circle_interval", phone_circle_interval)
        pulumi.set(__self__, "phone_circle_times", phone_circle_times)
        pulumi.set(__self__, "phone_inner_interval", phone_inner_interval)
        pulumi.set(__self__, "phone_orders", phone_orders)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "user_ids", user_ids)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[int]:
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="needPhoneArriveNotice")
    def need_phone_arrive_notice(self) -> int:
        return pulumi.get(self, "need_phone_arrive_notice")

    @property
    @pulumi.getter(name="noticeWays")
    def notice_ways(self) -> Sequence[str]:
        return pulumi.get(self, "notice_ways")

    @property
    @pulumi.getter(name="phoneCallType")
    def phone_call_type(self) -> str:
        return pulumi.get(self, "phone_call_type")

    @property
    @pulumi.getter(name="phoneCircleInterval")
    def phone_circle_interval(self) -> int:
        return pulumi.get(self, "phone_circle_interval")

    @property
    @pulumi.getter(name="phoneCircleTimes")
    def phone_circle_times(self) -> int:
        return pulumi.get(self, "phone_circle_times")

    @property
    @pulumi.getter(name="phoneInnerInterval")
    def phone_inner_interval(self) -> int:
        return pulumi.get(self, "phone_inner_interval")

    @property
    @pulumi.getter(name="phoneOrders")
    def phone_orders(self) -> Sequence[int]:
        return pulumi.get(self, "phone_orders")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Sequence[int]:
        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[int]:
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetAlarmPolicyPolicyResult(dict):
    def __init__(__self__, *,
                 advanced_metric_number: int,
                 can_set_default: int,
                 condition_template_id: str,
                 conditions: Sequence['outputs.GetAlarmPolicyPolicyConditionResult'],
                 conditions_temps: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempResult'],
                 enable: int,
                 event_conditions: Sequence['outputs.GetAlarmPolicyPolicyEventConditionResult'],
                 filter_dimensions_param: str,
                 insert_time: int,
                 instance_group_id: int,
                 instance_group_name: str,
                 instance_sum: int,
                 is_bind_all: int,
                 is_default: int,
                 is_one_click: int,
                 last_edit_uin: str,
                 monitor_type: str,
                 namespace: str,
                 namespace_show_name: str,
                 notice_ids: Sequence[str],
                 notices: Sequence['outputs.GetAlarmPolicyPolicyNoticeResult'],
                 one_click_status: int,
                 origin_id: str,
                 policy_id: str,
                 policy_name: str,
                 project_id: int,
                 project_name: str,
                 regions: Sequence[str],
                 remark: str,
                 rule_type: str,
                 tag_instances: Sequence['outputs.GetAlarmPolicyPolicyTagInstanceResult'],
                 tags: Sequence['outputs.GetAlarmPolicyPolicyTagResult'],
                 trigger_tasks: Sequence['outputs.GetAlarmPolicyPolicyTriggerTaskResult'],
                 update_time: int,
                 use_sum: int):
        pulumi.set(__self__, "advanced_metric_number", advanced_metric_number)
        pulumi.set(__self__, "can_set_default", can_set_default)
        pulumi.set(__self__, "condition_template_id", condition_template_id)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "conditions_temps", conditions_temps)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "event_conditions", event_conditions)
        pulumi.set(__self__, "filter_dimensions_param", filter_dimensions_param)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "instance_group_id", instance_group_id)
        pulumi.set(__self__, "instance_group_name", instance_group_name)
        pulumi.set(__self__, "instance_sum", instance_sum)
        pulumi.set(__self__, "is_bind_all", is_bind_all)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_one_click", is_one_click)
        pulumi.set(__self__, "last_edit_uin", last_edit_uin)
        pulumi.set(__self__, "monitor_type", monitor_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "namespace_show_name", namespace_show_name)
        pulumi.set(__self__, "notice_ids", notice_ids)
        pulumi.set(__self__, "notices", notices)
        pulumi.set(__self__, "one_click_status", one_click_status)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "tag_instances", tag_instances)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "trigger_tasks", trigger_tasks)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "use_sum", use_sum)

    @property
    @pulumi.getter(name="advancedMetricNumber")
    def advanced_metric_number(self) -> int:
        return pulumi.get(self, "advanced_metric_number")

    @property
    @pulumi.getter(name="canSetDefault")
    def can_set_default(self) -> int:
        return pulumi.get(self, "can_set_default")

    @property
    @pulumi.getter(name="conditionTemplateId")
    def condition_template_id(self) -> str:
        return pulumi.get(self, "condition_template_id")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="conditionsTemps")
    def conditions_temps(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempResult']:
        return pulumi.get(self, "conditions_temps")

    @property
    @pulumi.getter
    def enable(self) -> int:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Sequence['outputs.GetAlarmPolicyPolicyEventConditionResult']:
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter(name="filterDimensionsParam")
    def filter_dimensions_param(self) -> str:
        return pulumi.get(self, "filter_dimensions_param")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> int:
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="instanceGroupId")
    def instance_group_id(self) -> int:
        return pulumi.get(self, "instance_group_id")

    @property
    @pulumi.getter(name="instanceGroupName")
    def instance_group_name(self) -> str:
        return pulumi.get(self, "instance_group_name")

    @property
    @pulumi.getter(name="instanceSum")
    def instance_sum(self) -> int:
        return pulumi.get(self, "instance_sum")

    @property
    @pulumi.getter(name="isBindAll")
    def is_bind_all(self) -> int:
        return pulumi.get(self, "is_bind_all")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> int:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isOneClick")
    def is_one_click(self) -> int:
        return pulumi.get(self, "is_one_click")

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> str:
        return pulumi.get(self, "last_edit_uin")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> str:
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="namespaceShowName")
    def namespace_show_name(self) -> str:
        return pulumi.get(self, "namespace_show_name")

    @property
    @pulumi.getter(name="noticeIds")
    def notice_ids(self) -> Sequence[str]:
        return pulumi.get(self, "notice_ids")

    @property
    @pulumi.getter
    def notices(self) -> Sequence['outputs.GetAlarmPolicyPolicyNoticeResult']:
        return pulumi.get(self, "notices")

    @property
    @pulumi.getter(name="oneClickStatus")
    def one_click_status(self) -> int:
        return pulumi.get(self, "one_click_status")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def regions(self) -> Sequence[str]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="tagInstances")
    def tag_instances(self) -> Sequence['outputs.GetAlarmPolicyPolicyTagInstanceResult']:
        return pulumi.get(self, "tag_instances")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetAlarmPolicyPolicyTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="triggerTasks")
    def trigger_tasks(self) -> Sequence['outputs.GetAlarmPolicyPolicyTriggerTaskResult']:
        return pulumi.get(self, "trigger_tasks")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="useSum")
    def use_sum(self) -> int:
        return pulumi.get(self, "use_sum")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionResult(dict):
    def __init__(__self__, *,
                 complex_expression: str,
                 is_union_rule: int,
                 rules: Sequence['outputs.GetAlarmPolicyPolicyConditionRuleResult']):
        pulumi.set(__self__, "complex_expression", complex_expression)
        pulumi.set(__self__, "is_union_rule", is_union_rule)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="complexExpression")
    def complex_expression(self) -> str:
        return pulumi.get(self, "complex_expression")

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> int:
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionRuleResult(dict):
    def __init__(__self__, *,
                 continue_period: int,
                 description: str,
                 filters: Sequence['outputs.GetAlarmPolicyPolicyConditionRuleFilterResult'],
                 hierarchical_values: Sequence['outputs.GetAlarmPolicyPolicyConditionRuleHierarchicalValueResult'],
                 is_advanced: int,
                 is_open: int,
                 is_power_notice: int,
                 metric_name: str,
                 notice_frequency: int,
                 operator: str,
                 period: int,
                 product_id: str,
                 rule_type: str,
                 unit: str,
                 value: str,
                 value_max: float,
                 value_min: float):
        pulumi.set(__self__, "continue_period", continue_period)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "hierarchical_values", hierarchical_values)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "is_power_notice", is_power_notice)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notice_frequency", notice_frequency)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_max", value_max)
        pulumi.set(__self__, "value_min", value_min)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> int:
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionRuleFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="hierarchicalValues")
    def hierarchical_values(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionRuleHierarchicalValueResult']:
        return pulumi.get(self, "hierarchical_values")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> int:
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> int:
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueMax")
    def value_max(self) -> float:
        return pulumi.get(self, "value_max")

    @property
    @pulumi.getter(name="valueMin")
    def value_min(self) -> float:
        return pulumi.get(self, "value_min")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionRuleFilterResult(dict):
    def __init__(__self__, *,
                 dimensions: str,
                 type: str):
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionRuleHierarchicalValueResult(dict):
    def __init__(__self__, *,
                 remind: str,
                 serious: str,
                 warn: str):
        pulumi.set(__self__, "remind", remind)
        pulumi.set(__self__, "serious", serious)
        pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def remind(self) -> str:
        return pulumi.get(self, "remind")

    @property
    @pulumi.getter
    def serious(self) -> str:
        return pulumi.get(self, "serious")

    @property
    @pulumi.getter
    def warn(self) -> str:
        return pulumi.get(self, "warn")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionResult'],
                 event_conditions: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionResult'],
                 template_name: str):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "event_conditions", event_conditions)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionResult']:
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempConditionResult(dict):
    def __init__(__self__, *,
                 complex_expression: str,
                 is_union_rule: int,
                 rules: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleResult']):
        pulumi.set(__self__, "complex_expression", complex_expression)
        pulumi.set(__self__, "is_union_rule", is_union_rule)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="complexExpression")
    def complex_expression(self) -> str:
        return pulumi.get(self, "complex_expression")

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> int:
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempConditionRuleResult(dict):
    def __init__(__self__, *,
                 continue_period: int,
                 description: str,
                 filters: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleFilterResult'],
                 hierarchical_values: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValueResult'],
                 is_advanced: int,
                 is_open: int,
                 is_power_notice: int,
                 metric_name: str,
                 notice_frequency: int,
                 operator: str,
                 period: int,
                 product_id: str,
                 rule_type: str,
                 unit: str,
                 value: str,
                 value_max: float,
                 value_min: float):
        pulumi.set(__self__, "continue_period", continue_period)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "hierarchical_values", hierarchical_values)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "is_power_notice", is_power_notice)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notice_frequency", notice_frequency)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_max", value_max)
        pulumi.set(__self__, "value_min", value_min)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> int:
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="hierarchicalValues")
    def hierarchical_values(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValueResult']:
        return pulumi.get(self, "hierarchical_values")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> int:
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> int:
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueMax")
    def value_max(self) -> float:
        return pulumi.get(self, "value_max")

    @property
    @pulumi.getter(name="valueMin")
    def value_min(self) -> float:
        return pulumi.get(self, "value_min")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempConditionRuleFilterResult(dict):
    def __init__(__self__, *,
                 dimensions: str,
                 type: str):
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValueResult(dict):
    def __init__(__self__, *,
                 remind: str,
                 serious: str,
                 warn: str):
        pulumi.set(__self__, "remind", remind)
        pulumi.set(__self__, "serious", serious)
        pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def remind(self) -> str:
        return pulumi.get(self, "remind")

    @property
    @pulumi.getter
    def serious(self) -> str:
        return pulumi.get(self, "serious")

    @property
    @pulumi.getter
    def warn(self) -> str:
        return pulumi.get(self, "warn")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempEventConditionResult(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleResult']):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempEventConditionRuleResult(dict):
    def __init__(__self__, *,
                 continue_period: int,
                 description: str,
                 filters: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleFilterResult'],
                 hierarchical_values: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValueResult'],
                 is_advanced: int,
                 is_open: int,
                 is_power_notice: int,
                 metric_name: str,
                 notice_frequency: int,
                 operator: str,
                 period: int,
                 product_id: str,
                 rule_type: str,
                 unit: str,
                 value: str,
                 value_max: float,
                 value_min: float):
        pulumi.set(__self__, "continue_period", continue_period)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "hierarchical_values", hierarchical_values)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "is_power_notice", is_power_notice)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notice_frequency", notice_frequency)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_max", value_max)
        pulumi.set(__self__, "value_min", value_min)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> int:
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="hierarchicalValues")
    def hierarchical_values(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValueResult']:
        return pulumi.get(self, "hierarchical_values")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> int:
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> int:
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueMax")
    def value_max(self) -> float:
        return pulumi.get(self, "value_max")

    @property
    @pulumi.getter(name="valueMin")
    def value_min(self) -> float:
        return pulumi.get(self, "value_min")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempEventConditionRuleFilterResult(dict):
    def __init__(__self__, *,
                 dimensions: str,
                 type: str):
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValueResult(dict):
    def __init__(__self__, *,
                 remind: str,
                 serious: str,
                 warn: str):
        pulumi.set(__self__, "remind", remind)
        pulumi.set(__self__, "serious", serious)
        pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def remind(self) -> str:
        return pulumi.get(self, "remind")

    @property
    @pulumi.getter
    def serious(self) -> str:
        return pulumi.get(self, "serious")

    @property
    @pulumi.getter
    def warn(self) -> str:
        return pulumi.get(self, "warn")


@pulumi.output_type
class GetAlarmPolicyPolicyEventConditionResult(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleResult']):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAlarmPolicyPolicyEventConditionRuleResult(dict):
    def __init__(__self__, *,
                 continue_period: int,
                 description: str,
                 filters: Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleFilterResult'],
                 hierarchical_values: Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleHierarchicalValueResult'],
                 is_advanced: int,
                 is_open: int,
                 is_power_notice: int,
                 metric_name: str,
                 notice_frequency: int,
                 operator: str,
                 period: int,
                 product_id: str,
                 rule_type: str,
                 unit: str,
                 value: str,
                 value_max: float,
                 value_min: float):
        pulumi.set(__self__, "continue_period", continue_period)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "hierarchical_values", hierarchical_values)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "is_power_notice", is_power_notice)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notice_frequency", notice_frequency)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_max", value_max)
        pulumi.set(__self__, "value_min", value_min)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> int:
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="hierarchicalValues")
    def hierarchical_values(self) -> Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleHierarchicalValueResult']:
        return pulumi.get(self, "hierarchical_values")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> int:
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> int:
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueMax")
    def value_max(self) -> float:
        return pulumi.get(self, "value_max")

    @property
    @pulumi.getter(name="valueMin")
    def value_min(self) -> float:
        return pulumi.get(self, "value_min")


@pulumi.output_type
class GetAlarmPolicyPolicyEventConditionRuleFilterResult(dict):
    def __init__(__self__, *,
                 dimensions: str,
                 type: str):
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmPolicyPolicyEventConditionRuleHierarchicalValueResult(dict):
    def __init__(__self__, *,
                 remind: str,
                 serious: str,
                 warn: str):
        pulumi.set(__self__, "remind", remind)
        pulumi.set(__self__, "serious", serious)
        pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def remind(self) -> str:
        return pulumi.get(self, "remind")

    @property
    @pulumi.getter
    def serious(self) -> str:
        return pulumi.get(self, "serious")

    @property
    @pulumi.getter
    def warn(self) -> str:
        return pulumi.get(self, "warn")


@pulumi.output_type
class GetAlarmPolicyPolicyNoticeResult(dict):
    def __init__(__self__, *,
                 amp_consumer_id: str,
                 cls_notices: Sequence['outputs.GetAlarmPolicyPolicyNoticeClsNoticeResult'],
                 id: str,
                 is_preset: int,
                 name: str,
                 notice_language: str,
                 notice_type: str,
                 policy_ids: Sequence[str],
                 tags: Sequence['outputs.GetAlarmPolicyPolicyNoticeTagResult'],
                 updated_at: str,
                 updated_by: str,
                 url_notices: Sequence['outputs.GetAlarmPolicyPolicyNoticeUrlNoticeResult'],
                 user_notices: Sequence['outputs.GetAlarmPolicyPolicyNoticeUserNoticeResult']):
        pulumi.set(__self__, "amp_consumer_id", amp_consumer_id)
        pulumi.set(__self__, "cls_notices", cls_notices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_preset", is_preset)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notice_language", notice_language)
        pulumi.set(__self__, "notice_type", notice_type)
        pulumi.set(__self__, "policy_ids", policy_ids)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "url_notices", url_notices)
        pulumi.set(__self__, "user_notices", user_notices)

    @property
    @pulumi.getter(name="ampConsumerId")
    def amp_consumer_id(self) -> str:
        return pulumi.get(self, "amp_consumer_id")

    @property
    @pulumi.getter(name="clsNotices")
    def cls_notices(self) -> Sequence['outputs.GetAlarmPolicyPolicyNoticeClsNoticeResult']:
        return pulumi.get(self, "cls_notices")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPreset")
    def is_preset(self) -> int:
        return pulumi.get(self, "is_preset")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="noticeLanguage")
    def notice_language(self) -> str:
        return pulumi.get(self, "notice_language")

    @property
    @pulumi.getter(name="noticeType")
    def notice_type(self) -> str:
        return pulumi.get(self, "notice_type")

    @property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Sequence[str]:
        return pulumi.get(self, "policy_ids")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetAlarmPolicyPolicyNoticeTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="urlNotices")
    def url_notices(self) -> Sequence['outputs.GetAlarmPolicyPolicyNoticeUrlNoticeResult']:
        return pulumi.get(self, "url_notices")

    @property
    @pulumi.getter(name="userNotices")
    def user_notices(self) -> Sequence['outputs.GetAlarmPolicyPolicyNoticeUserNoticeResult']:
        return pulumi.get(self, "user_notices")


@pulumi.output_type
class GetAlarmPolicyPolicyNoticeClsNoticeResult(dict):
    def __init__(__self__, *,
                 enable: int,
                 log_set_id: str,
                 region: str,
                 topic_id: str):
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "log_set_id", log_set_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enable(self) -> int:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> str:
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetAlarmPolicyPolicyNoticeTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmPolicyPolicyNoticeUrlNoticeResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 is_valid: int,
                 start_time: int,
                 url: str,
                 validation_code: str,
                 weekdays: Sequence[int]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "is_valid", is_valid)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "validation_code", validation_code)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> int:
        return pulumi.get(self, "is_valid")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="validationCode")
    def validation_code(self) -> str:
        return pulumi.get(self, "validation_code")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[int]:
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetAlarmPolicyPolicyNoticeUserNoticeResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 group_ids: Sequence[int],
                 need_phone_arrive_notice: int,
                 notice_ways: Sequence[str],
                 on_call_form_ids: Sequence[str],
                 phone_call_type: str,
                 phone_circle_interval: int,
                 phone_circle_times: int,
                 phone_inner_interval: int,
                 phone_orders: Sequence[int],
                 receiver_type: str,
                 start_time: int,
                 user_ids: Sequence[int],
                 weekdays: Sequence[int]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "need_phone_arrive_notice", need_phone_arrive_notice)
        pulumi.set(__self__, "notice_ways", notice_ways)
        pulumi.set(__self__, "on_call_form_ids", on_call_form_ids)
        pulumi.set(__self__, "phone_call_type", phone_call_type)
        pulumi.set(__self__, "phone_circle_interval", phone_circle_interval)
        pulumi.set(__self__, "phone_circle_times", phone_circle_times)
        pulumi.set(__self__, "phone_inner_interval", phone_inner_interval)
        pulumi.set(__self__, "phone_orders", phone_orders)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "user_ids", user_ids)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[int]:
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="needPhoneArriveNotice")
    def need_phone_arrive_notice(self) -> int:
        return pulumi.get(self, "need_phone_arrive_notice")

    @property
    @pulumi.getter(name="noticeWays")
    def notice_ways(self) -> Sequence[str]:
        return pulumi.get(self, "notice_ways")

    @property
    @pulumi.getter(name="onCallFormIds")
    def on_call_form_ids(self) -> Sequence[str]:
        return pulumi.get(self, "on_call_form_ids")

    @property
    @pulumi.getter(name="phoneCallType")
    def phone_call_type(self) -> str:
        return pulumi.get(self, "phone_call_type")

    @property
    @pulumi.getter(name="phoneCircleInterval")
    def phone_circle_interval(self) -> int:
        return pulumi.get(self, "phone_circle_interval")

    @property
    @pulumi.getter(name="phoneCircleTimes")
    def phone_circle_times(self) -> int:
        return pulumi.get(self, "phone_circle_times")

    @property
    @pulumi.getter(name="phoneInnerInterval")
    def phone_inner_interval(self) -> int:
        return pulumi.get(self, "phone_inner_interval")

    @property
    @pulumi.getter(name="phoneOrders")
    def phone_orders(self) -> Sequence[int]:
        return pulumi.get(self, "phone_orders")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Sequence[int]:
        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[int]:
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetAlarmPolicyPolicyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmPolicyPolicyTagInstanceResult(dict):
    def __init__(__self__, *,
                 binding_status: int,
                 instance_sum: int,
                 key: str,
                 region_id: int,
                 service_type: str,
                 tag_status: int,
                 value: str):
        pulumi.set(__self__, "binding_status", binding_status)
        pulumi.set(__self__, "instance_sum", instance_sum)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "tag_status", tag_status)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="bindingStatus")
    def binding_status(self) -> int:
        return pulumi.get(self, "binding_status")

    @property
    @pulumi.getter(name="instanceSum")
    def instance_sum(self) -> int:
        return pulumi.get(self, "instance_sum")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="tagStatus")
    def tag_status(self) -> int:
        return pulumi.get(self, "tag_status")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmPolicyPolicyTriggerTaskResult(dict):
    def __init__(__self__, *,
                 task_config: str,
                 type: str):
        pulumi.set(__self__, "task_config", task_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="taskConfig")
    def task_config(self) -> str:
        return pulumi.get(self, "task_config")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmPolicyTriggerTaskResult(dict):
    def __init__(__self__, *,
                 task_config: str,
                 type: str):
        pulumi.set(__self__, "task_config", task_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="taskConfig")
    def task_config(self) -> str:
        return pulumi.get(self, "task_config")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBindingObjectsListResult(dict):
    def __init__(__self__, *,
                 dimensions_json: str,
                 is_shielded: int,
                 region: str,
                 unique_id: str):
        pulumi.set(__self__, "dimensions_json", dimensions_json)
        pulumi.set(__self__, "is_shielded", is_shielded)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> str:
        return pulumi.get(self, "dimensions_json")

    @property
    @pulumi.getter(name="isShielded")
    def is_shielded(self) -> int:
        return pulumi.get(self, "is_shielded")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> str:
        return pulumi.get(self, "unique_id")


@pulumi.output_type
class GetDataDimensionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDataListResult(dict):
    def __init__(__self__, *,
                 timestamp: int,
                 value: float):
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGrafanaPluginOverviewsPluginSetResult(dict):
    def __init__(__self__, *,
                 plugin_id: str,
                 version: str):
        pulumi.set(__self__, "plugin_id", plugin_id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> str:
        return pulumi.get(self, "plugin_id")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPolicyConditionsListResult(dict):
    def __init__(__self__, *,
                 event_metrics: Sequence['outputs.GetPolicyConditionsListEventMetricResult'],
                 is_support_multi_region: bool,
                 metrics: Sequence['outputs.GetPolicyConditionsListMetricResult'],
                 name: str,
                 policy_view_name: str,
                 support_regions: Sequence[str]):
        pulumi.set(__self__, "event_metrics", event_metrics)
        pulumi.set(__self__, "is_support_multi_region", is_support_multi_region)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_view_name", policy_view_name)
        pulumi.set(__self__, "support_regions", support_regions)

    @property
    @pulumi.getter(name="eventMetrics")
    def event_metrics(self) -> Sequence['outputs.GetPolicyConditionsListEventMetricResult']:
        return pulumi.get(self, "event_metrics")

    @property
    @pulumi.getter(name="isSupportMultiRegion")
    def is_support_multi_region(self) -> bool:
        return pulumi.get(self, "is_support_multi_region")

    @property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetPolicyConditionsListMetricResult']:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyViewName")
    def policy_view_name(self) -> str:
        return pulumi.get(self, "policy_view_name")

    @property
    @pulumi.getter(name="supportRegions")
    def support_regions(self) -> Sequence[str]:
        return pulumi.get(self, "support_regions")


@pulumi.output_type
class GetPolicyConditionsListEventMetricResult(dict):
    def __init__(__self__, *,
                 event_id: int,
                 event_show_name: str,
                 need_recovered: bool):
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_show_name", event_show_name)
        pulumi.set(__self__, "need_recovered", need_recovered)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventShowName")
    def event_show_name(self) -> str:
        return pulumi.get(self, "event_show_name")

    @property
    @pulumi.getter(name="needRecovered")
    def need_recovered(self) -> bool:
        return pulumi.get(self, "need_recovered")


@pulumi.output_type
class GetPolicyConditionsListMetricResult(dict):
    def __init__(__self__, *,
                 calc_type_keys: Sequence[int],
                 calc_type_need: bool,
                 calc_value_default: str,
                 calc_value_fixed: str,
                 calc_value_max: str,
                 calc_value_min: str,
                 calc_value_need: bool,
                 continue_time_default: int,
                 continue_time_keys: Sequence[int],
                 continue_time_need: bool,
                 metric_id: int,
                 metric_show_name: str,
                 metric_unit: str,
                 period_default: int,
                 period_keys: Sequence[int],
                 period_need: bool,
                 period_num_default: int,
                 period_num_keys: Sequence[int],
                 period_num_need: bool,
                 stat_type_p10: str,
                 stat_type_p1800: str,
                 stat_type_p300: str,
                 stat_type_p3600: str,
                 stat_type_p5: str,
                 stat_type_p60: str,
                 stat_type_p600: str,
                 stat_type_p86400: str):
        pulumi.set(__self__, "calc_type_keys", calc_type_keys)
        pulumi.set(__self__, "calc_type_need", calc_type_need)
        pulumi.set(__self__, "calc_value_default", calc_value_default)
        pulumi.set(__self__, "calc_value_fixed", calc_value_fixed)
        pulumi.set(__self__, "calc_value_max", calc_value_max)
        pulumi.set(__self__, "calc_value_min", calc_value_min)
        pulumi.set(__self__, "calc_value_need", calc_value_need)
        pulumi.set(__self__, "continue_time_default", continue_time_default)
        pulumi.set(__self__, "continue_time_keys", continue_time_keys)
        pulumi.set(__self__, "continue_time_need", continue_time_need)
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_show_name", metric_show_name)
        pulumi.set(__self__, "metric_unit", metric_unit)
        pulumi.set(__self__, "period_default", period_default)
        pulumi.set(__self__, "period_keys", period_keys)
        pulumi.set(__self__, "period_need", period_need)
        pulumi.set(__self__, "period_num_default", period_num_default)
        pulumi.set(__self__, "period_num_keys", period_num_keys)
        pulumi.set(__self__, "period_num_need", period_num_need)
        pulumi.set(__self__, "stat_type_p10", stat_type_p10)
        pulumi.set(__self__, "stat_type_p1800", stat_type_p1800)
        pulumi.set(__self__, "stat_type_p300", stat_type_p300)
        pulumi.set(__self__, "stat_type_p3600", stat_type_p3600)
        pulumi.set(__self__, "stat_type_p5", stat_type_p5)
        pulumi.set(__self__, "stat_type_p60", stat_type_p60)
        pulumi.set(__self__, "stat_type_p600", stat_type_p600)
        pulumi.set(__self__, "stat_type_p86400", stat_type_p86400)

    @property
    @pulumi.getter(name="calcTypeKeys")
    def calc_type_keys(self) -> Sequence[int]:
        return pulumi.get(self, "calc_type_keys")

    @property
    @pulumi.getter(name="calcTypeNeed")
    def calc_type_need(self) -> bool:
        return pulumi.get(self, "calc_type_need")

    @property
    @pulumi.getter(name="calcValueDefault")
    def calc_value_default(self) -> str:
        return pulumi.get(self, "calc_value_default")

    @property
    @pulumi.getter(name="calcValueFixed")
    def calc_value_fixed(self) -> str:
        return pulumi.get(self, "calc_value_fixed")

    @property
    @pulumi.getter(name="calcValueMax")
    def calc_value_max(self) -> str:
        return pulumi.get(self, "calc_value_max")

    @property
    @pulumi.getter(name="calcValueMin")
    def calc_value_min(self) -> str:
        return pulumi.get(self, "calc_value_min")

    @property
    @pulumi.getter(name="calcValueNeed")
    def calc_value_need(self) -> bool:
        return pulumi.get(self, "calc_value_need")

    @property
    @pulumi.getter(name="continueTimeDefault")
    def continue_time_default(self) -> int:
        return pulumi.get(self, "continue_time_default")

    @property
    @pulumi.getter(name="continueTimeKeys")
    def continue_time_keys(self) -> Sequence[int]:
        return pulumi.get(self, "continue_time_keys")

    @property
    @pulumi.getter(name="continueTimeNeed")
    def continue_time_need(self) -> bool:
        return pulumi.get(self, "continue_time_need")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="metricShowName")
    def metric_show_name(self) -> str:
        return pulumi.get(self, "metric_show_name")

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> str:
        return pulumi.get(self, "metric_unit")

    @property
    @pulumi.getter(name="periodDefault")
    def period_default(self) -> int:
        return pulumi.get(self, "period_default")

    @property
    @pulumi.getter(name="periodKeys")
    def period_keys(self) -> Sequence[int]:
        return pulumi.get(self, "period_keys")

    @property
    @pulumi.getter(name="periodNeed")
    def period_need(self) -> bool:
        return pulumi.get(self, "period_need")

    @property
    @pulumi.getter(name="periodNumDefault")
    def period_num_default(self) -> int:
        return pulumi.get(self, "period_num_default")

    @property
    @pulumi.getter(name="periodNumKeys")
    def period_num_keys(self) -> Sequence[int]:
        return pulumi.get(self, "period_num_keys")

    @property
    @pulumi.getter(name="periodNumNeed")
    def period_num_need(self) -> bool:
        return pulumi.get(self, "period_num_need")

    @property
    @pulumi.getter(name="statTypeP10")
    def stat_type_p10(self) -> str:
        return pulumi.get(self, "stat_type_p10")

    @property
    @pulumi.getter(name="statTypeP1800")
    def stat_type_p1800(self) -> str:
        return pulumi.get(self, "stat_type_p1800")

    @property
    @pulumi.getter(name="statTypeP300")
    def stat_type_p300(self) -> str:
        return pulumi.get(self, "stat_type_p300")

    @property
    @pulumi.getter(name="statTypeP3600")
    def stat_type_p3600(self) -> str:
        return pulumi.get(self, "stat_type_p3600")

    @property
    @pulumi.getter(name="statTypeP5")
    def stat_type_p5(self) -> str:
        return pulumi.get(self, "stat_type_p5")

    @property
    @pulumi.getter(name="statTypeP60")
    def stat_type_p60(self) -> str:
        return pulumi.get(self, "stat_type_p60")

    @property
    @pulumi.getter(name="statTypeP600")
    def stat_type_p600(self) -> str:
        return pulumi.get(self, "stat_type_p600")

    @property
    @pulumi.getter(name="statTypeP86400")
    def stat_type_p86400(self) -> str:
        return pulumi.get(self, "stat_type_p86400")


@pulumi.output_type
class GetPolicyGroupsListResult(dict):
    def __init__(__self__, *,
                 can_set_default: bool,
                 conditions: Sequence['outputs.GetPolicyGroupsListConditionResult'],
                 event_conditions: Sequence['outputs.GetPolicyGroupsListEventConditionResult'],
                 group_id: int,
                 group_name: str,
                 insert_time: int,
                 is_default: int,
                 is_open: bool,
                 last_edit_uin: str,
                 no_shielded_sum: int,
                 parent_group_id: int,
                 policy_view_name: str,
                 project_id: int,
                 receivers: Sequence['outputs.GetPolicyGroupsListReceiverResult'],
                 remark: str,
                 update_time: int,
                 use_sum: int):
        pulumi.set(__self__, "can_set_default", can_set_default)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "event_conditions", event_conditions)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "last_edit_uin", last_edit_uin)
        pulumi.set(__self__, "no_shielded_sum", no_shielded_sum)
        pulumi.set(__self__, "parent_group_id", parent_group_id)
        pulumi.set(__self__, "policy_view_name", policy_view_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "receivers", receivers)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "use_sum", use_sum)

    @property
    @pulumi.getter(name="canSetDefault")
    def can_set_default(self) -> bool:
        return pulumi.get(self, "can_set_default")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetPolicyGroupsListConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Sequence['outputs.GetPolicyGroupsListEventConditionResult']:
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> int:
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> int:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> bool:
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> str:
        return pulumi.get(self, "last_edit_uin")

    @property
    @pulumi.getter(name="noShieldedSum")
    def no_shielded_sum(self) -> int:
        return pulumi.get(self, "no_shielded_sum")

    @property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> int:
        return pulumi.get(self, "parent_group_id")

    @property
    @pulumi.getter(name="policyViewName")
    def policy_view_name(self) -> str:
        return pulumi.get(self, "policy_view_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def receivers(self) -> Sequence['outputs.GetPolicyGroupsListReceiverResult']:
        return pulumi.get(self, "receivers")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="useSum")
    def use_sum(self) -> int:
        return pulumi.get(self, "use_sum")


@pulumi.output_type
class GetPolicyGroupsListConditionResult(dict):
    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 calc_type: int,
                 calc_value: str,
                 continue_time: int,
                 metric_id: int,
                 metric_show_name: str,
                 metric_unit: str,
                 period: int,
                 rule_id: int):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "calc_type", calc_type)
        pulumi.set(__self__, "calc_value", calc_value)
        pulumi.set(__self__, "continue_time", continue_time)
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_show_name", metric_show_name)
        pulumi.set(__self__, "metric_unit", metric_unit)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="calcType")
    def calc_type(self) -> int:
        return pulumi.get(self, "calc_type")

    @property
    @pulumi.getter(name="calcValue")
    def calc_value(self) -> str:
        return pulumi.get(self, "calc_value")

    @property
    @pulumi.getter(name="continueTime")
    def continue_time(self) -> int:
        return pulumi.get(self, "continue_time")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="metricShowName")
    def metric_show_name(self) -> str:
        return pulumi.get(self, "metric_show_name")

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> str:
        return pulumi.get(self, "metric_unit")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class GetPolicyGroupsListEventConditionResult(dict):
    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 event_id: int,
                 event_show_name: str,
                 rule_id: int):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_show_name", event_show_name)
        pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventShowName")
    def event_show_name(self) -> str:
        return pulumi.get(self, "event_show_name")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class GetPolicyGroupsListReceiverResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 need_send_notice: int,
                 notify_ways: Sequence[str],
                 person_interval: int,
                 receive_language: str,
                 receiver_group_lists: Sequence[int],
                 receiver_type: str,
                 receiver_user_lists: Sequence[int],
                 recover_notifies: Sequence[str],
                 round_interval: int,
                 round_number: int,
                 send_fors: Sequence[str],
                 start_time: int,
                 uid_lists: Sequence[int]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "need_send_notice", need_send_notice)
        pulumi.set(__self__, "notify_ways", notify_ways)
        pulumi.set(__self__, "person_interval", person_interval)
        pulumi.set(__self__, "receive_language", receive_language)
        pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        pulumi.set(__self__, "recover_notifies", recover_notifies)
        pulumi.set(__self__, "round_interval", round_interval)
        pulumi.set(__self__, "round_number", round_number)
        pulumi.set(__self__, "send_fors", send_fors)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "uid_lists", uid_lists)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="needSendNotice")
    def need_send_notice(self) -> int:
        return pulumi.get(self, "need_send_notice")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Sequence[str]:
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="personInterval")
    def person_interval(self) -> int:
        return pulumi.get(self, "person_interval")

    @property
    @pulumi.getter(name="receiveLanguage")
    def receive_language(self) -> str:
        return pulumi.get(self, "receive_language")

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Sequence[int]:
        return pulumi.get(self, "receiver_group_lists")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Sequence[int]:
        return pulumi.get(self, "receiver_user_lists")

    @property
    @pulumi.getter(name="recoverNotifies")
    def recover_notifies(self) -> Sequence[str]:
        return pulumi.get(self, "recover_notifies")

    @property
    @pulumi.getter(name="roundInterval")
    def round_interval(self) -> int:
        return pulumi.get(self, "round_interval")

    @property
    @pulumi.getter(name="roundNumber")
    def round_number(self) -> int:
        return pulumi.get(self, "round_number")

    @property
    @pulumi.getter(name="sendFors")
    def send_fors(self) -> Sequence[str]:
        return pulumi.get(self, "send_fors")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="uidLists")
    def uid_lists(self) -> Sequence[int]:
        return pulumi.get(self, "uid_lists")


@pulumi.output_type
class GetProductEventDimensionResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProductEventListResult(dict):
    def __init__(__self__, *,
                 addition_msgs: Sequence['outputs.GetProductEventListAdditionMsgResult'],
                 dimensions: Sequence['outputs.GetProductEventListDimensionResult'],
                 event_cname: str,
                 event_ename: str,
                 event_id: int,
                 event_name: str,
                 group_infos: Sequence['outputs.GetProductEventListGroupInfoResult'],
                 instance_id: str,
                 instance_name: str,
                 is_alarm_config: int,
                 product_cname: str,
                 product_ename: str,
                 product_name: str,
                 project_id: str,
                 region: str,
                 start_time: int,
                 status: str,
                 support_alarm: int,
                 type: str,
                 update_time: int):
        pulumi.set(__self__, "addition_msgs", addition_msgs)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "event_cname", event_cname)
        pulumi.set(__self__, "event_ename", event_ename)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "group_infos", group_infos)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "is_alarm_config", is_alarm_config)
        pulumi.set(__self__, "product_cname", product_cname)
        pulumi.set(__self__, "product_ename", product_ename)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_alarm", support_alarm)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="additionMsgs")
    def addition_msgs(self) -> Sequence['outputs.GetProductEventListAdditionMsgResult']:
        return pulumi.get(self, "addition_msgs")

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetProductEventListDimensionResult']:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="eventCname")
    def event_cname(self) -> str:
        return pulumi.get(self, "event_cname")

    @property
    @pulumi.getter(name="eventEname")
    def event_ename(self) -> str:
        return pulumi.get(self, "event_ename")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventName")
    def event_name(self) -> str:
        return pulumi.get(self, "event_name")

    @property
    @pulumi.getter(name="groupInfos")
    def group_infos(self) -> Sequence['outputs.GetProductEventListGroupInfoResult']:
        return pulumi.get(self, "group_infos")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="isAlarmConfig")
    def is_alarm_config(self) -> int:
        return pulumi.get(self, "is_alarm_config")

    @property
    @pulumi.getter(name="productCname")
    def product_cname(self) -> str:
        return pulumi.get(self, "product_cname")

    @property
    @pulumi.getter(name="productEname")
    def product_ename(self) -> str:
        return pulumi.get(self, "product_ename")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportAlarm")
    def support_alarm(self) -> int:
        return pulumi.get(self, "support_alarm")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetProductEventListAdditionMsgResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProductEventListDimensionResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProductEventListGroupInfoResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 group_name: str):
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")


@pulumi.output_type
class GetProductNamespaceListResult(dict):
    def __init__(__self__, *,
                 namespace: str,
                 product_chinese_name: str,
                 product_name: str):
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "product_chinese_name", product_chinese_name)
        pulumi.set(__self__, "product_name", product_name)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="productChineseName")
    def product_chinese_name(self) -> str:
        return pulumi.get(self, "product_chinese_name")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")


@pulumi.output_type
class GetStatisticDataConditionResult(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetStatisticDataDataResult(dict):
    def __init__(__self__, *,
                 metric_name: str,
                 points: Sequence['outputs.GetStatisticDataDataPointResult']):
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "points", points)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def points(self) -> Sequence['outputs.GetStatisticDataDataPointResult']:
        return pulumi.get(self, "points")


@pulumi.output_type
class GetStatisticDataDataPointResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetStatisticDataDataPointDimensionResult'],
                 values: Sequence['outputs.GetStatisticDataDataPointValueResult']):
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetStatisticDataDataPointDimensionResult']:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetStatisticDataDataPointValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetStatisticDataDataPointDimensionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetStatisticDataDataPointValueResult(dict):
    def __init__(__self__, *,
                 timestamp: int,
                 value: float):
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTmpInstancesInstanceSetResult(dict):
    def __init__(__self__, *,
                 alert_rule_limit: int,
                 api_root_path: str,
                 auth_token: str,
                 auto_renew_flag: int,
                 charge_status: int,
                 created_at: str,
                 data_retention_time: int,
                 enable_grafana: int,
                 expire_time: str,
                 grafana_instance_id: str,
                 grafana_ip_white_list: str,
                 grafana_status: int,
                 grafana_url: str,
                 grants: Sequence['outputs.GetTmpInstancesInstanceSetGrantResult'],
                 instance_charge_type: int,
                 instance_id: str,
                 instance_name: str,
                 instance_status: int,
                 ipv4_address: str,
                 is_near_expire: int,
                 migration_type: int,
                 proxy_address: str,
                 recording_rule_limit: int,
                 region_id: int,
                 remote_write: str,
                 spec_name: str,
                 subnet_id: str,
                 tag_specifications: Sequence['outputs.GetTmpInstancesInstanceSetTagSpecificationResult'],
                 vpc_id: str,
                 zone: str):
        pulumi.set(__self__, "alert_rule_limit", alert_rule_limit)
        pulumi.set(__self__, "api_root_path", api_root_path)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "charge_status", charge_status)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_retention_time", data_retention_time)
        pulumi.set(__self__, "enable_grafana", enable_grafana)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "grafana_instance_id", grafana_instance_id)
        pulumi.set(__self__, "grafana_ip_white_list", grafana_ip_white_list)
        pulumi.set(__self__, "grafana_status", grafana_status)
        pulumi.set(__self__, "grafana_url", grafana_url)
        pulumi.set(__self__, "grants", grants)
        pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "is_near_expire", is_near_expire)
        pulumi.set(__self__, "migration_type", migration_type)
        pulumi.set(__self__, "proxy_address", proxy_address)
        pulumi.set(__self__, "recording_rule_limit", recording_rule_limit)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "remote_write", remote_write)
        pulumi.set(__self__, "spec_name", spec_name)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tag_specifications", tag_specifications)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="alertRuleLimit")
    def alert_rule_limit(self) -> int:
        return pulumi.get(self, "alert_rule_limit")

    @property
    @pulumi.getter(name="apiRootPath")
    def api_root_path(self) -> str:
        return pulumi.get(self, "api_root_path")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="chargeStatus")
    def charge_status(self) -> int:
        return pulumi.get(self, "charge_status")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataRetentionTime")
    def data_retention_time(self) -> int:
        return pulumi.get(self, "data_retention_time")

    @property
    @pulumi.getter(name="enableGrafana")
    def enable_grafana(self) -> int:
        return pulumi.get(self, "enable_grafana")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="grafanaInstanceId")
    def grafana_instance_id(self) -> str:
        return pulumi.get(self, "grafana_instance_id")

    @property
    @pulumi.getter(name="grafanaIpWhiteList")
    def grafana_ip_white_list(self) -> str:
        return pulumi.get(self, "grafana_ip_white_list")

    @property
    @pulumi.getter(name="grafanaStatus")
    def grafana_status(self) -> int:
        return pulumi.get(self, "grafana_status")

    @property
    @pulumi.getter(name="grafanaUrl")
    def grafana_url(self) -> str:
        return pulumi.get(self, "grafana_url")

    @property
    @pulumi.getter
    def grants(self) -> Sequence['outputs.GetTmpInstancesInstanceSetGrantResult']:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> int:
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> int:
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter(name="isNearExpire")
    def is_near_expire(self) -> int:
        return pulumi.get(self, "is_near_expire")

    @property
    @pulumi.getter(name="migrationType")
    def migration_type(self) -> int:
        return pulumi.get(self, "migration_type")

    @property
    @pulumi.getter(name="proxyAddress")
    def proxy_address(self) -> str:
        return pulumi.get(self, "proxy_address")

    @property
    @pulumi.getter(name="recordingRuleLimit")
    def recording_rule_limit(self) -> int:
        return pulumi.get(self, "recording_rule_limit")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="remoteWrite")
    def remote_write(self) -> str:
        return pulumi.get(self, "remote_write")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        return pulumi.get(self, "spec_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Sequence['outputs.GetTmpInstancesInstanceSetTagSpecificationResult']:
        return pulumi.get(self, "tag_specifications")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetTmpInstancesInstanceSetGrantResult(dict):
    def __init__(__self__, *,
                 has_agent_manage: int,
                 has_api_operation: int,
                 has_charge_operation: int,
                 has_grafana_status_change: int,
                 has_tke_manage: int,
                 has_vpc_display: int):
        pulumi.set(__self__, "has_agent_manage", has_agent_manage)
        pulumi.set(__self__, "has_api_operation", has_api_operation)
        pulumi.set(__self__, "has_charge_operation", has_charge_operation)
        pulumi.set(__self__, "has_grafana_status_change", has_grafana_status_change)
        pulumi.set(__self__, "has_tke_manage", has_tke_manage)
        pulumi.set(__self__, "has_vpc_display", has_vpc_display)

    @property
    @pulumi.getter(name="hasAgentManage")
    def has_agent_manage(self) -> int:
        return pulumi.get(self, "has_agent_manage")

    @property
    @pulumi.getter(name="hasApiOperation")
    def has_api_operation(self) -> int:
        return pulumi.get(self, "has_api_operation")

    @property
    @pulumi.getter(name="hasChargeOperation")
    def has_charge_operation(self) -> int:
        return pulumi.get(self, "has_charge_operation")

    @property
    @pulumi.getter(name="hasGrafanaStatusChange")
    def has_grafana_status_change(self) -> int:
        return pulumi.get(self, "has_grafana_status_change")

    @property
    @pulumi.getter(name="hasTkeManage")
    def has_tke_manage(self) -> int:
        return pulumi.get(self, "has_tke_manage")

    @property
    @pulumi.getter(name="hasVpcDisplay")
    def has_vpc_display(self) -> int:
        return pulumi.get(self, "has_vpc_display")


@pulumi.output_type
class GetTmpInstancesInstanceSetTagSpecificationResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTmpInstancesTagFilterResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTmpRegionsRegionSetResult(dict):
    def __init__(__self__, *,
                 area: str,
                 region: str,
                 region_id: int,
                 region_name: str,
                 region_pay_mode: int,
                 region_short_name: str,
                 region_state: int):
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "region_pay_mode", region_pay_mode)
        pulumi.set(__self__, "region_short_name", region_short_name)
        pulumi.set(__self__, "region_state", region_state)

    @property
    @pulumi.getter
    def area(self) -> str:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="regionPayMode")
    def region_pay_mode(self) -> int:
        return pulumi.get(self, "region_pay_mode")

    @property
    @pulumi.getter(name="regionShortName")
    def region_short_name(self) -> str:
        return pulumi.get(self, "region_short_name")

    @property
    @pulumi.getter(name="regionState")
    def region_state(self) -> int:
        return pulumi.get(self, "region_state")


