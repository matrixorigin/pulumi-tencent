# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouteTableBroadcastPoliciesArgs', 'RouteTableBroadcastPolicies']

@pulumi.input_type
class RouteTableBroadcastPoliciesArgs:
    def __init__(__self__, *,
                 ccn_id: pulumi.Input[str],
                 policies: pulumi.Input[Sequence[pulumi.Input['RouteTableBroadcastPoliciesPolicyArgs']]],
                 route_table_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a RouteTableBroadcastPolicies resource.
        :param pulumi.Input[str] ccn_id: CCN Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['RouteTableBroadcastPoliciesPolicyArgs']]] policies: Routing propagation strategy.
        :param pulumi.Input[str] route_table_id: CCN Route table ID.
        """
        pulumi.set(__self__, "ccn_id", ccn_id)
        pulumi.set(__self__, "policies", policies)
        pulumi.set(__self__, "route_table_id", route_table_id)

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> pulumi.Input[str]:
        """
        CCN Instance ID.
        """
        return pulumi.get(self, "ccn_id")

    @ccn_id.setter
    def ccn_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ccn_id", value)

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Input[Sequence[pulumi.Input['RouteTableBroadcastPoliciesPolicyArgs']]]:
        """
        Routing propagation strategy.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: pulumi.Input[Sequence[pulumi.Input['RouteTableBroadcastPoliciesPolicyArgs']]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Input[str]:
        """
        CCN Route table ID.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_table_id", value)


@pulumi.input_type
class _RouteTableBroadcastPoliciesState:
    def __init__(__self__, *,
                 ccn_id: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['RouteTableBroadcastPoliciesPolicyArgs']]]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouteTableBroadcastPolicies resources.
        :param pulumi.Input[str] ccn_id: CCN Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['RouteTableBroadcastPoliciesPolicyArgs']]] policies: Routing propagation strategy.
        :param pulumi.Input[str] route_table_id: CCN Route table ID.
        """
        if ccn_id is not None:
            pulumi.set(__self__, "ccn_id", ccn_id)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> Optional[pulumi.Input[str]]:
        """
        CCN Instance ID.
        """
        return pulumi.get(self, "ccn_id")

    @ccn_id.setter
    def ccn_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ccn_id", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteTableBroadcastPoliciesPolicyArgs']]]]:
        """
        Routing propagation strategy.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteTableBroadcastPoliciesPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[str]]:
        """
        CCN Route table ID.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_id", value)


class RouteTableBroadcastPolicies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ccn_id: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteTableBroadcastPoliciesPolicyArgs']]]]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RouteTableBroadcastPolicies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ccn_id: CCN Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteTableBroadcastPoliciesPolicyArgs']]]] policies: Routing propagation strategy.
        :param pulumi.Input[str] route_table_id: CCN Route table ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteTableBroadcastPoliciesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RouteTableBroadcastPolicies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RouteTableBroadcastPoliciesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteTableBroadcastPoliciesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ccn_id: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteTableBroadcastPoliciesPolicyArgs']]]]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteTableBroadcastPoliciesArgs.__new__(RouteTableBroadcastPoliciesArgs)

            if ccn_id is None and not opts.urn:
                raise TypeError("Missing required property 'ccn_id'")
            __props__.__dict__["ccn_id"] = ccn_id
            if policies is None and not opts.urn:
                raise TypeError("Missing required property 'policies'")
            __props__.__dict__["policies"] = policies
            if route_table_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_table_id'")
            __props__.__dict__["route_table_id"] = route_table_id
        super(RouteTableBroadcastPolicies, __self__).__init__(
            'tencentcloud:Ccn/routeTableBroadcastPolicies:RouteTableBroadcastPolicies',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ccn_id: Optional[pulumi.Input[str]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteTableBroadcastPoliciesPolicyArgs']]]]] = None,
            route_table_id: Optional[pulumi.Input[str]] = None) -> 'RouteTableBroadcastPolicies':
        """
        Get an existing RouteTableBroadcastPolicies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ccn_id: CCN Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteTableBroadcastPoliciesPolicyArgs']]]] policies: Routing propagation strategy.
        :param pulumi.Input[str] route_table_id: CCN Route table ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteTableBroadcastPoliciesState.__new__(_RouteTableBroadcastPoliciesState)

        __props__.__dict__["ccn_id"] = ccn_id
        __props__.__dict__["policies"] = policies
        __props__.__dict__["route_table_id"] = route_table_id
        return RouteTableBroadcastPolicies(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> pulumi.Output[str]:
        """
        CCN Instance ID.
        """
        return pulumi.get(self, "ccn_id")

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Sequence['outputs.RouteTableBroadcastPoliciesPolicy']]:
        """
        Routing propagation strategy.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[str]:
        """
        CCN Route table ID.
        """
        return pulumi.get(self, "route_table_id")

