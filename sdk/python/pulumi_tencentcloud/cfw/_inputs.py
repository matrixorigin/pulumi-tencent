# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'NatInstanceNewModeItemsArgs',
    'VpcInstanceVpcFwInstanceArgs',
    'VpcInstanceVpcFwInstanceFwDeployArgs',
]

@pulumi.input_type
class NatInstanceNewModeItemsArgs:
    def __init__(__self__, *,
                 eips: pulumi.Input[Sequence[pulumi.Input[str]]],
                 vpc_lists: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "eips", eips)
        pulumi.set(__self__, "vpc_lists", vpc_lists)

    @property
    @pulumi.getter
    def eips(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "eips")

    @eips.setter
    def eips(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "eips", value)

    @property
    @pulumi.getter(name="vpcLists")
    def vpc_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "vpc_lists")

    @vpc_lists.setter
    def vpc_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "vpc_lists", value)


@pulumi.input_type
class VpcInstanceVpcFwInstanceArgs:
    def __init__(__self__, *,
                 fw_deploy: pulumi.Input['VpcInstanceVpcFwInstanceFwDeployArgs'],
                 name: pulumi.Input[str],
                 fw_ins_id: Optional[pulumi.Input[str]] = None,
                 vpc_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "fw_deploy", fw_deploy)
        pulumi.set(__self__, "name", name)
        if fw_ins_id is not None:
            pulumi.set(__self__, "fw_ins_id", fw_ins_id)
        if vpc_ids is not None:
            pulumi.set(__self__, "vpc_ids", vpc_ids)

    @property
    @pulumi.getter(name="fwDeploy")
    def fw_deploy(self) -> pulumi.Input['VpcInstanceVpcFwInstanceFwDeployArgs']:
        return pulumi.get(self, "fw_deploy")

    @fw_deploy.setter
    def fw_deploy(self, value: pulumi.Input['VpcInstanceVpcFwInstanceFwDeployArgs']):
        pulumi.set(self, "fw_deploy", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="fwInsId")
    def fw_ins_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fw_ins_id")

    @fw_ins_id.setter
    def fw_ins_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fw_ins_id", value)

    @property
    @pulumi.getter(name="vpcIds")
    def vpc_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "vpc_ids")

    @vpc_ids.setter
    def vpc_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpc_ids", value)


@pulumi.input_type
class VpcInstanceVpcFwInstanceFwDeployArgs:
    def __init__(__self__, *,
                 deploy_region: pulumi.Input[str],
                 width: pulumi.Input[int],
                 zone_sets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cross_a_zone: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "deploy_region", deploy_region)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "zone_sets", zone_sets)
        if cross_a_zone is not None:
            pulumi.set(__self__, "cross_a_zone", cross_a_zone)

    @property
    @pulumi.getter(name="deployRegion")
    def deploy_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deploy_region")

    @deploy_region.setter
    def deploy_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "deploy_region", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[int]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[int]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="zoneSets")
    def zone_sets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "zone_sets")

    @zone_sets.setter
    def zone_sets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "zone_sets", value)

    @property
    @pulumi.getter(name="crossAZone")
    def cross_a_zone(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cross_a_zone")

    @cross_a_zone.setter
    def cross_a_zone(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cross_a_zone", value)


