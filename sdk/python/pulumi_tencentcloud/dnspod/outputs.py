# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainAnalyticsAliasDataResult',
    'GetDomainAnalyticsAliasDataDataResult',
    'GetDomainAnalyticsAliasDataInfoResult',
    'GetDomainAnalyticsDataResult',
    'GetDomainAnalyticsInfoResult',
    'GetDomainListDomainListResult',
    'GetDomainListDomainListTagListResult',
    'GetDomainListTagResult',
    'GetRecordAnalyticsAliasDataResult',
    'GetRecordAnalyticsAliasDataDataResult',
    'GetRecordAnalyticsAliasDataInfoResult',
    'GetRecordAnalyticsDataResult',
    'GetRecordAnalyticsInfoResult',
    'GetRecordLineListLineGroupListResult',
    'GetRecordLineListLineListResult',
    'GetRecordListRecordCountInfoResult',
    'GetRecordListRecordListResult',
    'GetRecordsRecordCountInfoResult',
    'GetRecordsResultResult',
]

@pulumi.output_type
class GetDomainAnalyticsAliasDataResult(dict):
    def __init__(__self__, *,
                 datas: Sequence['outputs.GetDomainAnalyticsAliasDataDataResult'],
                 infos: Sequence['outputs.GetDomainAnalyticsAliasDataInfoResult']):
        pulumi.set(__self__, "datas", datas)
        pulumi.set(__self__, "infos", infos)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetDomainAnalyticsAliasDataDataResult']:
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetDomainAnalyticsAliasDataInfoResult']:
        return pulumi.get(self, "infos")


@pulumi.output_type
class GetDomainAnalyticsAliasDataDataResult(dict):
    def __init__(__self__, *,
                 date_key: str,
                 hour_key: int,
                 num: int):
        pulumi.set(__self__, "date_key", date_key)
        pulumi.set(__self__, "hour_key", hour_key)
        pulumi.set(__self__, "num", num)

    @property
    @pulumi.getter(name="dateKey")
    def date_key(self) -> str:
        return pulumi.get(self, "date_key")

    @property
    @pulumi.getter(name="hourKey")
    def hour_key(self) -> int:
        return pulumi.get(self, "hour_key")

    @property
    @pulumi.getter
    def num(self) -> int:
        return pulumi.get(self, "num")


@pulumi.output_type
class GetDomainAnalyticsAliasDataInfoResult(dict):
    def __init__(__self__, *,
                 dns_format: str,
                 dns_total: int,
                 domain: str,
                 end_date: str,
                 start_date: str):
        pulumi.set(__self__, "dns_format", dns_format)
        pulumi.set(__self__, "dns_total", dns_total)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="dnsFormat")
    def dns_format(self) -> str:
        return pulumi.get(self, "dns_format")

    @property
    @pulumi.getter(name="dnsTotal")
    def dns_total(self) -> int:
        return pulumi.get(self, "dns_total")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetDomainAnalyticsDataResult(dict):
    def __init__(__self__, *,
                 date_key: str,
                 hour_key: int,
                 num: int):
        pulumi.set(__self__, "date_key", date_key)
        pulumi.set(__self__, "hour_key", hour_key)
        pulumi.set(__self__, "num", num)

    @property
    @pulumi.getter(name="dateKey")
    def date_key(self) -> str:
        return pulumi.get(self, "date_key")

    @property
    @pulumi.getter(name="hourKey")
    def hour_key(self) -> int:
        return pulumi.get(self, "hour_key")

    @property
    @pulumi.getter
    def num(self) -> int:
        return pulumi.get(self, "num")


@pulumi.output_type
class GetDomainAnalyticsInfoResult(dict):
    def __init__(__self__, *,
                 dns_format: str,
                 dns_total: int,
                 domain: str,
                 end_date: str,
                 start_date: str):
        pulumi.set(__self__, "dns_format", dns_format)
        pulumi.set(__self__, "dns_total", dns_total)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="dnsFormat")
    def dns_format(self) -> str:
        return pulumi.get(self, "dns_format")

    @property
    @pulumi.getter(name="dnsTotal")
    def dns_total(self) -> int:
        return pulumi.get(self, "dns_total")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetDomainListDomainListResult(dict):
    def __init__(__self__, *,
                 cname_speedup: str,
                 created_on: str,
                 dns_status: str,
                 domain_id: int,
                 effective_dns: Sequence[str],
                 grade: str,
                 grade_level: int,
                 grade_title: str,
                 group_id: int,
                 is_vip: str,
                 name: str,
                 owner: str,
                 punycode: str,
                 record_count: int,
                 remark: str,
                 search_engine_push: str,
                 status: str,
                 tag_lists: Sequence['outputs.GetDomainListDomainListTagListResult'],
                 ttl: int,
                 updated_on: str,
                 vip_auto_renew: str,
                 vip_end_at: str,
                 vip_start_at: str):
        pulumi.set(__self__, "cname_speedup", cname_speedup)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "dns_status", dns_status)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "effective_dns", effective_dns)
        pulumi.set(__self__, "grade", grade)
        pulumi.set(__self__, "grade_level", grade_level)
        pulumi.set(__self__, "grade_title", grade_title)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "is_vip", is_vip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "punycode", punycode)
        pulumi.set(__self__, "record_count", record_count)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "search_engine_push", search_engine_push)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag_lists", tag_lists)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "updated_on", updated_on)
        pulumi.set(__self__, "vip_auto_renew", vip_auto_renew)
        pulumi.set(__self__, "vip_end_at", vip_end_at)
        pulumi.set(__self__, "vip_start_at", vip_start_at)

    @property
    @pulumi.getter(name="cnameSpeedup")
    def cname_speedup(self) -> str:
        return pulumi.get(self, "cname_speedup")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="dnsStatus")
    def dns_status(self) -> str:
        return pulumi.get(self, "dns_status")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> int:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="effectiveDns")
    def effective_dns(self) -> Sequence[str]:
        return pulumi.get(self, "effective_dns")

    @property
    @pulumi.getter
    def grade(self) -> str:
        return pulumi.get(self, "grade")

    @property
    @pulumi.getter(name="gradeLevel")
    def grade_level(self) -> int:
        return pulumi.get(self, "grade_level")

    @property
    @pulumi.getter(name="gradeTitle")
    def grade_title(self) -> str:
        return pulumi.get(self, "grade_title")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="isVip")
    def is_vip(self) -> str:
        return pulumi.get(self, "is_vip")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def punycode(self) -> str:
        return pulumi.get(self, "punycode")

    @property
    @pulumi.getter(name="recordCount")
    def record_count(self) -> int:
        return pulumi.get(self, "record_count")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="searchEnginePush")
    def search_engine_push(self) -> str:
        return pulumi.get(self, "search_engine_push")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tagLists")
    def tag_lists(self) -> Sequence['outputs.GetDomainListDomainListTagListResult']:
        return pulumi.get(self, "tag_lists")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> str:
        return pulumi.get(self, "updated_on")

    @property
    @pulumi.getter(name="vipAutoRenew")
    def vip_auto_renew(self) -> str:
        return pulumi.get(self, "vip_auto_renew")

    @property
    @pulumi.getter(name="vipEndAt")
    def vip_end_at(self) -> str:
        return pulumi.get(self, "vip_end_at")

    @property
    @pulumi.getter(name="vipStartAt")
    def vip_start_at(self) -> str:
        return pulumi.get(self, "vip_start_at")


@pulumi.output_type
class GetDomainListDomainListTagListResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetDomainListTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_values: Sequence[str]):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Sequence[str]:
        return pulumi.get(self, "tag_values")


@pulumi.output_type
class GetRecordAnalyticsAliasDataResult(dict):
    def __init__(__self__, *,
                 datas: Sequence['outputs.GetRecordAnalyticsAliasDataDataResult'],
                 infos: Sequence['outputs.GetRecordAnalyticsAliasDataInfoResult']):
        pulumi.set(__self__, "datas", datas)
        pulumi.set(__self__, "infos", infos)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetRecordAnalyticsAliasDataDataResult']:
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetRecordAnalyticsAliasDataInfoResult']:
        return pulumi.get(self, "infos")


@pulumi.output_type
class GetRecordAnalyticsAliasDataDataResult(dict):
    def __init__(__self__, *,
                 date_key: str,
                 hour_key: int,
                 num: int):
        pulumi.set(__self__, "date_key", date_key)
        pulumi.set(__self__, "hour_key", hour_key)
        pulumi.set(__self__, "num", num)

    @property
    @pulumi.getter(name="dateKey")
    def date_key(self) -> str:
        return pulumi.get(self, "date_key")

    @property
    @pulumi.getter(name="hourKey")
    def hour_key(self) -> int:
        return pulumi.get(self, "hour_key")

    @property
    @pulumi.getter
    def num(self) -> int:
        return pulumi.get(self, "num")


@pulumi.output_type
class GetRecordAnalyticsAliasDataInfoResult(dict):
    def __init__(__self__, *,
                 dns_format: str,
                 dns_total: int,
                 domain: str,
                 end_date: str,
                 start_date: str,
                 subdomain: str):
        pulumi.set(__self__, "dns_format", dns_format)
        pulumi.set(__self__, "dns_total", dns_total)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="dnsFormat")
    def dns_format(self) -> str:
        return pulumi.get(self, "dns_format")

    @property
    @pulumi.getter(name="dnsTotal")
    def dns_total(self) -> int:
        return pulumi.get(self, "dns_total")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class GetRecordAnalyticsDataResult(dict):
    def __init__(__self__, *,
                 date_key: str,
                 hour_key: int,
                 num: int):
        pulumi.set(__self__, "date_key", date_key)
        pulumi.set(__self__, "hour_key", hour_key)
        pulumi.set(__self__, "num", num)

    @property
    @pulumi.getter(name="dateKey")
    def date_key(self) -> str:
        return pulumi.get(self, "date_key")

    @property
    @pulumi.getter(name="hourKey")
    def hour_key(self) -> int:
        return pulumi.get(self, "hour_key")

    @property
    @pulumi.getter
    def num(self) -> int:
        return pulumi.get(self, "num")


@pulumi.output_type
class GetRecordAnalyticsInfoResult(dict):
    def __init__(__self__, *,
                 dns_format: str,
                 dns_total: int,
                 domain: str,
                 end_date: str,
                 start_date: str,
                 subdomain: str):
        pulumi.set(__self__, "dns_format", dns_format)
        pulumi.set(__self__, "dns_total", dns_total)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="dnsFormat")
    def dns_format(self) -> str:
        return pulumi.get(self, "dns_format")

    @property
    @pulumi.getter(name="dnsTotal")
    def dns_total(self) -> int:
        return pulumi.get(self, "dns_total")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class GetRecordLineListLineGroupListResult(dict):
    def __init__(__self__, *,
                 line_id: str,
                 line_lists: Sequence[str],
                 name: str,
                 type: str):
        pulumi.set(__self__, "line_id", line_id)
        pulumi.set(__self__, "line_lists", line_lists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lineId")
    def line_id(self) -> str:
        return pulumi.get(self, "line_id")

    @property
    @pulumi.getter(name="lineLists")
    def line_lists(self) -> Sequence[str]:
        return pulumi.get(self, "line_lists")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRecordLineListLineListResult(dict):
    def __init__(__self__, *,
                 line_id: str,
                 name: str):
        pulumi.set(__self__, "line_id", line_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lineId")
    def line_id(self) -> str:
        return pulumi.get(self, "line_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRecordListRecordCountInfoResult(dict):
    def __init__(__self__, *,
                 list_count: int,
                 subdomain_count: int,
                 total_count: int):
        pulumi.set(__self__, "list_count", list_count)
        pulumi.set(__self__, "subdomain_count", subdomain_count)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="listCount")
    def list_count(self) -> int:
        return pulumi.get(self, "list_count")

    @property
    @pulumi.getter(name="subdomainCount")
    def subdomain_count(self) -> int:
        return pulumi.get(self, "subdomain_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetRecordListRecordListResult(dict):
    def __init__(__self__, *,
                 default_ns: bool,
                 line: str,
                 line_id: str,
                 monitor_status: str,
                 mx: int,
                 name: str,
                 record_id: int,
                 remark: str,
                 status: str,
                 ttl: int,
                 type: str,
                 updated_on: str,
                 value: str,
                 weight: int):
        pulumi.set(__self__, "default_ns", default_ns)
        pulumi.set(__self__, "line", line)
        pulumi.set(__self__, "line_id", line_id)
        pulumi.set(__self__, "monitor_status", monitor_status)
        pulumi.set(__self__, "mx", mx)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "record_id", record_id)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_on", updated_on)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="defaultNs")
    def default_ns(self) -> bool:
        return pulumi.get(self, "default_ns")

    @property
    @pulumi.getter
    def line(self) -> str:
        return pulumi.get(self, "line")

    @property
    @pulumi.getter(name="lineId")
    def line_id(self) -> str:
        return pulumi.get(self, "line_id")

    @property
    @pulumi.getter(name="monitorStatus")
    def monitor_status(self) -> str:
        return pulumi.get(self, "monitor_status")

    @property
    @pulumi.getter
    def mx(self) -> int:
        return pulumi.get(self, "mx")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> int:
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> str:
        return pulumi.get(self, "updated_on")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetRecordsRecordCountInfoResult(dict):
    def __init__(__self__, *,
                 list_count: int,
                 subdomain_count: int,
                 total_count: int):
        pulumi.set(__self__, "list_count", list_count)
        pulumi.set(__self__, "subdomain_count", subdomain_count)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="listCount")
    def list_count(self) -> int:
        return pulumi.get(self, "list_count")

    @property
    @pulumi.getter(name="subdomainCount")
    def subdomain_count(self) -> int:
        return pulumi.get(self, "subdomain_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetRecordsResultResult(dict):
    def __init__(__self__, *,
                 line: str,
                 line_id: str,
                 monitor_status: str,
                 mx: int,
                 name: str,
                 record_id: int,
                 remark: str,
                 status: str,
                 ttl: int,
                 type: str,
                 updated_on: str,
                 value: str,
                 weight: int):
        pulumi.set(__self__, "line", line)
        pulumi.set(__self__, "line_id", line_id)
        pulumi.set(__self__, "monitor_status", monitor_status)
        pulumi.set(__self__, "mx", mx)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "record_id", record_id)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_on", updated_on)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def line(self) -> str:
        return pulumi.get(self, "line")

    @property
    @pulumi.getter(name="lineId")
    def line_id(self) -> str:
        return pulumi.get(self, "line_id")

    @property
    @pulumi.getter(name="monitorStatus")
    def monitor_status(self) -> str:
        return pulumi.get(self, "monitor_status")

    @property
    @pulumi.getter
    def mx(self) -> int:
        return pulumi.get(self, "mx")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> int:
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> str:
        return pulumi.get(self, "updated_on")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


