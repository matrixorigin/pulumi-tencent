# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMachinesSimpleResult',
    'AwaitableGetMachinesSimpleResult',
    'get_machines_simple',
    'get_machines_simple_output',
]

@pulumi.output_type
class GetMachinesSimpleResult:
    """
    A collection of values returned by getMachinesSimple.
    """
    def __init__(__self__, filters=None, id=None, machine_region=None, machine_type=None, machines=None, project_ids=None, result_output_file=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if machine_region and not isinstance(machine_region, str):
            raise TypeError("Expected argument 'machine_region' to be a str")
        pulumi.set(__self__, "machine_region", machine_region)
        if machine_type and not isinstance(machine_type, str):
            raise TypeError("Expected argument 'machine_type' to be a str")
        pulumi.set(__self__, "machine_type", machine_type)
        if machines and not isinstance(machines, list):
            raise TypeError("Expected argument 'machines' to be a list")
        pulumi.set(__self__, "machines", machines)
        if project_ids and not isinstance(project_ids, list):
            raise TypeError("Expected argument 'project_ids' to be a list")
        pulumi.set(__self__, "project_ids", project_ids)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetMachinesSimpleFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="machineRegion")
    def machine_region(self) -> str:
        return pulumi.get(self, "machine_region")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def machines(self) -> Sequence['outputs.GetMachinesSimpleMachineResult']:
        return pulumi.get(self, "machines")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetMachinesSimpleResult(GetMachinesSimpleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMachinesSimpleResult(
            filters=self.filters,
            id=self.id,
            machine_region=self.machine_region,
            machine_type=self.machine_type,
            machines=self.machines,
            project_ids=self.project_ids,
            result_output_file=self.result_output_file)


def get_machines_simple(filters: Optional[Sequence[pulumi.InputType['GetMachinesSimpleFilterArgs']]] = None,
                        machine_region: Optional[str] = None,
                        machine_type: Optional[str] = None,
                        project_ids: Optional[Sequence[int]] = None,
                        result_output_file: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMachinesSimpleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['machineRegion'] = machine_region
    __args__['machineType'] = machine_type
    __args__['projectIds'] = project_ids
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cwp/getMachinesSimple:getMachinesSimple', __args__, opts=opts, typ=GetMachinesSimpleResult).value

    return AwaitableGetMachinesSimpleResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        machine_region=pulumi.get(__ret__, 'machine_region'),
        machine_type=pulumi.get(__ret__, 'machine_type'),
        machines=pulumi.get(__ret__, 'machines'),
        project_ids=pulumi.get(__ret__, 'project_ids'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_machines_simple)
def get_machines_simple_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetMachinesSimpleFilterArgs']]]]] = None,
                               machine_region: Optional[pulumi.Input[str]] = None,
                               machine_type: Optional[pulumi.Input[str]] = None,
                               project_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMachinesSimpleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
