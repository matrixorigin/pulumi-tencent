# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AddUsersToWorkGroupAttachmentAddInfo',
    'AttachUserPolicyOperationPolicySet',
    'AttachWorkGroupPolicyOperationPolicySet',
    'BindWorkGroupsToUserAttachmentAddInfo',
    'DataEngineCrontabResumeSuspendStrategy',
    'DataEngineDataEngineConfigPair',
    'DataEngineSessionResourceTemplate',
    'DetachUserPolicyOperationPolicySet',
    'DetachWorkGroupPolicyOperationPolicySet',
    'UpdateRowFilterOperationPolicy',
    'UserDataEngineConfigDataEngineConfigPair',
    'UserDataEngineConfigSessionResourceTemplate',
    'GetCheckDataEngineConfigPairsValidityDataEngineConfigPairResult',
    'GetDescribeDataEngineDataEngineResult',
    'GetDescribeDataEngineDataEngineCrontabResumeSuspendStrategyResult',
    'GetDescribeDataEngineDataEngineNetworkConnectionSetResult',
    'GetDescribeDataEngineDataEngineSessionResourceTemplateResult',
    'GetDescribeDataEngineDataEngineTagListResult',
    'GetDescribeDataEngineEventsEventResult',
    'GetDescribeDataEngineImageVersionsImageParentVersionResult',
    'GetDescribeDataEnginePythonSparkImagesPythonSparkImageResult',
    'GetDescribeUpdatableDataEnginesDataEngineBasicInfoResult',
    'GetDescribeUserInfoFilterResult',
    'GetDescribeUserInfoUserInfoResult',
    'GetDescribeUserInfoUserInfoDataPolicyInfoResult',
    'GetDescribeUserInfoUserInfoDataPolicyInfoPolicySetResult',
    'GetDescribeUserInfoUserInfoEnginePolicyInfoResult',
    'GetDescribeUserInfoUserInfoEnginePolicyInfoPolicySetResult',
    'GetDescribeUserInfoUserInfoRowFilterInfoResult',
    'GetDescribeUserInfoUserInfoRowFilterInfoPolicySetResult',
    'GetDescribeUserInfoUserInfoWorkGroupInfoResult',
    'GetDescribeUserInfoUserInfoWorkGroupInfoWorkGroupSetResult',
    'GetDescribeUserRolesUserRoleResult',
    'GetDescribeUserRolesUserRoleCosPermissionListResult',
    'GetDescribeWorkGroupInfoFilterResult',
    'GetDescribeWorkGroupInfoWorkGroupInfoResult',
    'GetDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfoResult',
    'GetDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfoPolicySetResult',
    'GetDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfoResult',
    'GetDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfoPolicySetResult',
    'GetDescribeWorkGroupInfoWorkGroupInfoRowFilterInfoResult',
    'GetDescribeWorkGroupInfoWorkGroupInfoRowFilterInfoPolicySetResult',
    'GetDescribeWorkGroupInfoWorkGroupInfoUserInfoResult',
    'GetDescribeWorkGroupInfoWorkGroupInfoUserInfoUserSetResult',
]

@pulumi.output_type
class AddUsersToWorkGroupAttachmentAddInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userIds":
            suggest = "user_ids"
        elif key == "workGroupId":
            suggest = "work_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddUsersToWorkGroupAttachmentAddInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddUsersToWorkGroupAttachmentAddInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddUsersToWorkGroupAttachmentAddInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_ids: Sequence[str],
                 work_group_id: int):
        pulumi.set(__self__, "user_ids", user_ids)
        pulumi.set(__self__, "work_group_id", work_group_id)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Sequence[str]:
        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter(name="workGroupId")
    def work_group_id(self) -> int:
        return pulumi.get(self, "work_group_id")


@pulumi.output_type
class AttachUserPolicyOperationPolicySet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "dataEngine":
            suggest = "data_engine"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "reAuth":
            suggest = "re_auth"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceName":
            suggest = "source_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AttachUserPolicyOperationPolicySet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AttachUserPolicyOperationPolicySet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AttachUserPolicyOperationPolicySet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog: str,
                 database: str,
                 operation: str,
                 table: str,
                 column: Optional[str] = None,
                 create_time: Optional[str] = None,
                 data_engine: Optional[str] = None,
                 function: Optional[str] = None,
                 id: Optional[int] = None,
                 mode: Optional[str] = None,
                 operator: Optional[str] = None,
                 policy_type: Optional[str] = None,
                 re_auth: Optional[bool] = None,
                 source: Optional[str] = None,
                 source_id: Optional[int] = None,
                 source_name: Optional[str] = None,
                 view: Optional[str] = None):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def column(self) -> Optional[str]:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[str]:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def function(self) -> Optional[str]:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[bool]:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[int]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[str]:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def view(self) -> Optional[str]:
        return pulumi.get(self, "view")


@pulumi.output_type
class AttachWorkGroupPolicyOperationPolicySet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "dataEngine":
            suggest = "data_engine"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "reAuth":
            suggest = "re_auth"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceName":
            suggest = "source_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AttachWorkGroupPolicyOperationPolicySet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AttachWorkGroupPolicyOperationPolicySet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AttachWorkGroupPolicyOperationPolicySet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog: str,
                 database: str,
                 operation: str,
                 table: str,
                 column: Optional[str] = None,
                 create_time: Optional[str] = None,
                 data_engine: Optional[str] = None,
                 function: Optional[str] = None,
                 id: Optional[int] = None,
                 mode: Optional[str] = None,
                 operator: Optional[str] = None,
                 policy_type: Optional[str] = None,
                 re_auth: Optional[bool] = None,
                 source: Optional[str] = None,
                 source_id: Optional[int] = None,
                 source_name: Optional[str] = None,
                 view: Optional[str] = None):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def column(self) -> Optional[str]:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[str]:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def function(self) -> Optional[str]:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[bool]:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[int]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[str]:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def view(self) -> Optional[str]:
        return pulumi.get(self, "view")


@pulumi.output_type
class BindWorkGroupsToUserAttachmentAddInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "workGroupIds":
            suggest = "work_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BindWorkGroupsToUserAttachmentAddInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BindWorkGroupsToUserAttachmentAddInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BindWorkGroupsToUserAttachmentAddInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_id: str,
                 work_group_ids: Sequence[int]):
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "work_group_ids", work_group_ids)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="workGroupIds")
    def work_group_ids(self) -> Sequence[int]:
        return pulumi.get(self, "work_group_ids")


@pulumi.output_type
class DataEngineCrontabResumeSuspendStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resumeTime":
            suggest = "resume_time"
        elif key == "suspendStrategy":
            suggest = "suspend_strategy"
        elif key == "suspendTime":
            suggest = "suspend_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataEngineCrontabResumeSuspendStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataEngineCrontabResumeSuspendStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataEngineCrontabResumeSuspendStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resume_time: Optional[str] = None,
                 suspend_strategy: Optional[int] = None,
                 suspend_time: Optional[str] = None):
        if resume_time is not None:
            pulumi.set(__self__, "resume_time", resume_time)
        if suspend_strategy is not None:
            pulumi.set(__self__, "suspend_strategy", suspend_strategy)
        if suspend_time is not None:
            pulumi.set(__self__, "suspend_time", suspend_time)

    @property
    @pulumi.getter(name="resumeTime")
    def resume_time(self) -> Optional[str]:
        return pulumi.get(self, "resume_time")

    @property
    @pulumi.getter(name="suspendStrategy")
    def suspend_strategy(self) -> Optional[int]:
        return pulumi.get(self, "suspend_strategy")

    @property
    @pulumi.getter(name="suspendTime")
    def suspend_time(self) -> Optional[str]:
        return pulumi.get(self, "suspend_time")


@pulumi.output_type
class DataEngineDataEngineConfigPair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configItem":
            suggest = "config_item"
        elif key == "configValue":
            suggest = "config_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataEngineDataEngineConfigPair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataEngineDataEngineConfigPair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataEngineDataEngineConfigPair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_item: str,
                 config_value: str):
        pulumi.set(__self__, "config_item", config_item)
        pulumi.set(__self__, "config_value", config_value)

    @property
    @pulumi.getter(name="configItem")
    def config_item(self) -> str:
        return pulumi.get(self, "config_item")

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> str:
        return pulumi.get(self, "config_value")


@pulumi.output_type
class DataEngineSessionResourceTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "driverSize":
            suggest = "driver_size"
        elif key == "executorMaxNumbers":
            suggest = "executor_max_numbers"
        elif key == "executorNums":
            suggest = "executor_nums"
        elif key == "executorSize":
            suggest = "executor_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataEngineSessionResourceTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataEngineSessionResourceTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataEngineSessionResourceTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 driver_size: Optional[str] = None,
                 executor_max_numbers: Optional[int] = None,
                 executor_nums: Optional[int] = None,
                 executor_size: Optional[str] = None):
        if driver_size is not None:
            pulumi.set(__self__, "driver_size", driver_size)
        if executor_max_numbers is not None:
            pulumi.set(__self__, "executor_max_numbers", executor_max_numbers)
        if executor_nums is not None:
            pulumi.set(__self__, "executor_nums", executor_nums)
        if executor_size is not None:
            pulumi.set(__self__, "executor_size", executor_size)

    @property
    @pulumi.getter(name="driverSize")
    def driver_size(self) -> Optional[str]:
        return pulumi.get(self, "driver_size")

    @property
    @pulumi.getter(name="executorMaxNumbers")
    def executor_max_numbers(self) -> Optional[int]:
        return pulumi.get(self, "executor_max_numbers")

    @property
    @pulumi.getter(name="executorNums")
    def executor_nums(self) -> Optional[int]:
        return pulumi.get(self, "executor_nums")

    @property
    @pulumi.getter(name="executorSize")
    def executor_size(self) -> Optional[str]:
        return pulumi.get(self, "executor_size")


@pulumi.output_type
class DetachUserPolicyOperationPolicySet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "dataEngine":
            suggest = "data_engine"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "reAuth":
            suggest = "re_auth"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceName":
            suggest = "source_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetachUserPolicyOperationPolicySet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetachUserPolicyOperationPolicySet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetachUserPolicyOperationPolicySet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog: str,
                 database: str,
                 operation: str,
                 table: str,
                 column: Optional[str] = None,
                 create_time: Optional[str] = None,
                 data_engine: Optional[str] = None,
                 function: Optional[str] = None,
                 id: Optional[int] = None,
                 mode: Optional[str] = None,
                 operator: Optional[str] = None,
                 policy_type: Optional[str] = None,
                 re_auth: Optional[bool] = None,
                 source: Optional[str] = None,
                 source_id: Optional[int] = None,
                 source_name: Optional[str] = None,
                 view: Optional[str] = None):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def column(self) -> Optional[str]:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[str]:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def function(self) -> Optional[str]:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[bool]:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[int]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[str]:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def view(self) -> Optional[str]:
        return pulumi.get(self, "view")


@pulumi.output_type
class DetachWorkGroupPolicyOperationPolicySet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "dataEngine":
            suggest = "data_engine"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "reAuth":
            suggest = "re_auth"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceName":
            suggest = "source_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetachWorkGroupPolicyOperationPolicySet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetachWorkGroupPolicyOperationPolicySet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetachWorkGroupPolicyOperationPolicySet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog: str,
                 database: str,
                 operation: str,
                 table: str,
                 column: Optional[str] = None,
                 create_time: Optional[str] = None,
                 data_engine: Optional[str] = None,
                 function: Optional[str] = None,
                 id: Optional[int] = None,
                 mode: Optional[str] = None,
                 operator: Optional[str] = None,
                 policy_type: Optional[str] = None,
                 re_auth: Optional[bool] = None,
                 source: Optional[str] = None,
                 source_id: Optional[int] = None,
                 source_name: Optional[str] = None,
                 view: Optional[str] = None):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def column(self) -> Optional[str]:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[str]:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def function(self) -> Optional[str]:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[bool]:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[int]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[str]:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def view(self) -> Optional[str]:
        return pulumi.get(self, "view")


@pulumi.output_type
class UpdateRowFilterOperationPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "dataEngine":
            suggest = "data_engine"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "reAuth":
            suggest = "re_auth"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceName":
            suggest = "source_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpdateRowFilterOperationPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpdateRowFilterOperationPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpdateRowFilterOperationPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog: str,
                 database: str,
                 operation: str,
                 table: str,
                 column: Optional[str] = None,
                 create_time: Optional[str] = None,
                 data_engine: Optional[str] = None,
                 function: Optional[str] = None,
                 id: Optional[int] = None,
                 mode: Optional[str] = None,
                 operator: Optional[str] = None,
                 policy_type: Optional[str] = None,
                 re_auth: Optional[bool] = None,
                 source: Optional[str] = None,
                 source_id: Optional[int] = None,
                 source_name: Optional[str] = None,
                 view: Optional[str] = None):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def column(self) -> Optional[str]:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[str]:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def function(self) -> Optional[str]:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[bool]:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[int]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[str]:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def view(self) -> Optional[str]:
        return pulumi.get(self, "view")


@pulumi.output_type
class UserDataEngineConfigDataEngineConfigPair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configItem":
            suggest = "config_item"
        elif key == "configValue":
            suggest = "config_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserDataEngineConfigDataEngineConfigPair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserDataEngineConfigDataEngineConfigPair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserDataEngineConfigDataEngineConfigPair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_item: str,
                 config_value: str):
        pulumi.set(__self__, "config_item", config_item)
        pulumi.set(__self__, "config_value", config_value)

    @property
    @pulumi.getter(name="configItem")
    def config_item(self) -> str:
        return pulumi.get(self, "config_item")

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> str:
        return pulumi.get(self, "config_value")


@pulumi.output_type
class UserDataEngineConfigSessionResourceTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "driverSize":
            suggest = "driver_size"
        elif key == "executorMaxNumbers":
            suggest = "executor_max_numbers"
        elif key == "executorNums":
            suggest = "executor_nums"
        elif key == "executorSize":
            suggest = "executor_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserDataEngineConfigSessionResourceTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserDataEngineConfigSessionResourceTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserDataEngineConfigSessionResourceTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 driver_size: Optional[str] = None,
                 executor_max_numbers: Optional[int] = None,
                 executor_nums: Optional[int] = None,
                 executor_size: Optional[str] = None):
        if driver_size is not None:
            pulumi.set(__self__, "driver_size", driver_size)
        if executor_max_numbers is not None:
            pulumi.set(__self__, "executor_max_numbers", executor_max_numbers)
        if executor_nums is not None:
            pulumi.set(__self__, "executor_nums", executor_nums)
        if executor_size is not None:
            pulumi.set(__self__, "executor_size", executor_size)

    @property
    @pulumi.getter(name="driverSize")
    def driver_size(self) -> Optional[str]:
        return pulumi.get(self, "driver_size")

    @property
    @pulumi.getter(name="executorMaxNumbers")
    def executor_max_numbers(self) -> Optional[int]:
        return pulumi.get(self, "executor_max_numbers")

    @property
    @pulumi.getter(name="executorNums")
    def executor_nums(self) -> Optional[int]:
        return pulumi.get(self, "executor_nums")

    @property
    @pulumi.getter(name="executorSize")
    def executor_size(self) -> Optional[str]:
        return pulumi.get(self, "executor_size")


@pulumi.output_type
class GetCheckDataEngineConfigPairsValidityDataEngineConfigPairResult(dict):
    def __init__(__self__, *,
                 config_item: str,
                 config_value: str):
        pulumi.set(__self__, "config_item", config_item)
        pulumi.set(__self__, "config_value", config_value)

    @property
    @pulumi.getter(name="configItem")
    def config_item(self) -> str:
        return pulumi.get(self, "config_item")

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> str:
        return pulumi.get(self, "config_value")


@pulumi.output_type
class GetDescribeDataEngineDataEngineResult(dict):
    def __init__(__self__, *,
                 auto_resume: bool,
                 auto_suspend: bool,
                 auto_suspend_time: int,
                 child_image_version_id: str,
                 cidr_block: str,
                 cluster_type: str,
                 create_time: int,
                 crontab_resume_suspend: int,
                 crontab_resume_suspend_strategies: Sequence['outputs.GetDescribeDataEngineDataEngineCrontabResumeSuspendStrategyResult'],
                 data_engine_id: str,
                 data_engine_name: str,
                 default_data_engine: bool,
                 default_house: bool,
                 elastic_limit: int,
                 elastic_switch: bool,
                 engine_exec_type: str,
                 engine_type: str,
                 expire_time: str,
                 image_version_id: str,
                 image_version_name: str,
                 isolated_time: str,
                 max_clusters: int,
                 max_concurrency: int,
                 message: str,
                 min_clusters: int,
                 mode: int,
                 network_connection_sets: Sequence['outputs.GetDescribeDataEngineDataEngineNetworkConnectionSetResult'],
                 permissions: Sequence[str],
                 quota_id: str,
                 renew_flag: int,
                 resource_type: str,
                 reversal_time: str,
                 session_resource_templates: Sequence['outputs.GetDescribeDataEngineDataEngineSessionResourceTemplateResult'],
                 size: int,
                 spend_after: int,
                 start_standby_cluster: bool,
                 state: int,
                 sub_account_uin: str,
                 tag_lists: Sequence['outputs.GetDescribeDataEngineDataEngineTagListResult'],
                 tolerable_queue_time: int,
                 ui_url: str,
                 update_time: int,
                 user_alias: str,
                 user_app_id: int,
                 user_uin: str):
        pulumi.set(__self__, "auto_resume", auto_resume)
        pulumi.set(__self__, "auto_suspend", auto_suspend)
        pulumi.set(__self__, "auto_suspend_time", auto_suspend_time)
        pulumi.set(__self__, "child_image_version_id", child_image_version_id)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "crontab_resume_suspend", crontab_resume_suspend)
        pulumi.set(__self__, "crontab_resume_suspend_strategies", crontab_resume_suspend_strategies)
        pulumi.set(__self__, "data_engine_id", data_engine_id)
        pulumi.set(__self__, "data_engine_name", data_engine_name)
        pulumi.set(__self__, "default_data_engine", default_data_engine)
        pulumi.set(__self__, "default_house", default_house)
        pulumi.set(__self__, "elastic_limit", elastic_limit)
        pulumi.set(__self__, "elastic_switch", elastic_switch)
        pulumi.set(__self__, "engine_exec_type", engine_exec_type)
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "image_version_id", image_version_id)
        pulumi.set(__self__, "image_version_name", image_version_name)
        pulumi.set(__self__, "isolated_time", isolated_time)
        pulumi.set(__self__, "max_clusters", max_clusters)
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "min_clusters", min_clusters)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "network_connection_sets", network_connection_sets)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "quota_id", quota_id)
        pulumi.set(__self__, "renew_flag", renew_flag)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "reversal_time", reversal_time)
        pulumi.set(__self__, "session_resource_templates", session_resource_templates)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "spend_after", spend_after)
        pulumi.set(__self__, "start_standby_cluster", start_standby_cluster)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "sub_account_uin", sub_account_uin)
        pulumi.set(__self__, "tag_lists", tag_lists)
        pulumi.set(__self__, "tolerable_queue_time", tolerable_queue_time)
        pulumi.set(__self__, "ui_url", ui_url)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_alias", user_alias)
        pulumi.set(__self__, "user_app_id", user_app_id)
        pulumi.set(__self__, "user_uin", user_uin)

    @property
    @pulumi.getter(name="autoResume")
    def auto_resume(self) -> bool:
        return pulumi.get(self, "auto_resume")

    @property
    @pulumi.getter(name="autoSuspend")
    def auto_suspend(self) -> bool:
        return pulumi.get(self, "auto_suspend")

    @property
    @pulumi.getter(name="autoSuspendTime")
    def auto_suspend_time(self) -> int:
        return pulumi.get(self, "auto_suspend_time")

    @property
    @pulumi.getter(name="childImageVersionId")
    def child_image_version_id(self) -> str:
        return pulumi.get(self, "child_image_version_id")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="crontabResumeSuspend")
    def crontab_resume_suspend(self) -> int:
        return pulumi.get(self, "crontab_resume_suspend")

    @property
    @pulumi.getter(name="crontabResumeSuspendStrategies")
    def crontab_resume_suspend_strategies(self) -> Sequence['outputs.GetDescribeDataEngineDataEngineCrontabResumeSuspendStrategyResult']:
        return pulumi.get(self, "crontab_resume_suspend_strategies")

    @property
    @pulumi.getter(name="dataEngineId")
    def data_engine_id(self) -> str:
        return pulumi.get(self, "data_engine_id")

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> str:
        return pulumi.get(self, "data_engine_name")

    @property
    @pulumi.getter(name="defaultDataEngine")
    def default_data_engine(self) -> bool:
        return pulumi.get(self, "default_data_engine")

    @property
    @pulumi.getter(name="defaultHouse")
    def default_house(self) -> bool:
        return pulumi.get(self, "default_house")

    @property
    @pulumi.getter(name="elasticLimit")
    def elastic_limit(self) -> int:
        return pulumi.get(self, "elastic_limit")

    @property
    @pulumi.getter(name="elasticSwitch")
    def elastic_switch(self) -> bool:
        return pulumi.get(self, "elastic_switch")

    @property
    @pulumi.getter(name="engineExecType")
    def engine_exec_type(self) -> str:
        return pulumi.get(self, "engine_exec_type")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> str:
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="imageVersionId")
    def image_version_id(self) -> str:
        return pulumi.get(self, "image_version_id")

    @property
    @pulumi.getter(name="imageVersionName")
    def image_version_name(self) -> str:
        return pulumi.get(self, "image_version_name")

    @property
    @pulumi.getter(name="isolatedTime")
    def isolated_time(self) -> str:
        return pulumi.get(self, "isolated_time")

    @property
    @pulumi.getter(name="maxClusters")
    def max_clusters(self) -> int:
        return pulumi.get(self, "max_clusters")

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> int:
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="minClusters")
    def min_clusters(self) -> int:
        return pulumi.get(self, "min_clusters")

    @property
    @pulumi.getter
    def mode(self) -> int:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="networkConnectionSets")
    def network_connection_sets(self) -> Sequence['outputs.GetDescribeDataEngineDataEngineNetworkConnectionSetResult']:
        return pulumi.get(self, "network_connection_sets")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence[str]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> str:
        return pulumi.get(self, "quota_id")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> int:
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="reversalTime")
    def reversal_time(self) -> str:
        return pulumi.get(self, "reversal_time")

    @property
    @pulumi.getter(name="sessionResourceTemplates")
    def session_resource_templates(self) -> Sequence['outputs.GetDescribeDataEngineDataEngineSessionResourceTemplateResult']:
        return pulumi.get(self, "session_resource_templates")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="spendAfter")
    def spend_after(self) -> int:
        return pulumi.get(self, "spend_after")

    @property
    @pulumi.getter(name="startStandbyCluster")
    def start_standby_cluster(self) -> bool:
        return pulumi.get(self, "start_standby_cluster")

    @property
    @pulumi.getter
    def state(self) -> int:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subAccountUin")
    def sub_account_uin(self) -> str:
        return pulumi.get(self, "sub_account_uin")

    @property
    @pulumi.getter(name="tagLists")
    def tag_lists(self) -> Sequence['outputs.GetDescribeDataEngineDataEngineTagListResult']:
        return pulumi.get(self, "tag_lists")

    @property
    @pulumi.getter(name="tolerableQueueTime")
    def tolerable_queue_time(self) -> int:
        return pulumi.get(self, "tolerable_queue_time")

    @property
    @pulumi.getter(name="uiURL")
    def ui_url(self) -> str:
        return pulumi.get(self, "ui_url")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userAlias")
    def user_alias(self) -> str:
        return pulumi.get(self, "user_alias")

    @property
    @pulumi.getter(name="userAppId")
    def user_app_id(self) -> int:
        return pulumi.get(self, "user_app_id")

    @property
    @pulumi.getter(name="userUin")
    def user_uin(self) -> str:
        return pulumi.get(self, "user_uin")


@pulumi.output_type
class GetDescribeDataEngineDataEngineCrontabResumeSuspendStrategyResult(dict):
    def __init__(__self__, *,
                 resume_time: str,
                 suspend_strategy: int,
                 suspend_time: str):
        pulumi.set(__self__, "resume_time", resume_time)
        pulumi.set(__self__, "suspend_strategy", suspend_strategy)
        pulumi.set(__self__, "suspend_time", suspend_time)

    @property
    @pulumi.getter(name="resumeTime")
    def resume_time(self) -> str:
        return pulumi.get(self, "resume_time")

    @property
    @pulumi.getter(name="suspendStrategy")
    def suspend_strategy(self) -> int:
        return pulumi.get(self, "suspend_strategy")

    @property
    @pulumi.getter(name="suspendTime")
    def suspend_time(self) -> str:
        return pulumi.get(self, "suspend_time")


@pulumi.output_type
class GetDescribeDataEngineDataEngineNetworkConnectionSetResult(dict):
    def __init__(__self__, *,
                 appid: int,
                 associate_id: str,
                 create_time: int,
                 datasource_connection_cidr_block: str,
                 datasource_connection_id: str,
                 datasource_connection_name: str,
                 datasource_connection_subnet_cidr_block: str,
                 datasource_connection_subnet_id: str,
                 datasource_connection_vpc_id: str,
                 house_id: str,
                 house_name: str,
                 id: int,
                 network_connection_desc: str,
                 network_connection_type: int,
                 state: int,
                 sub_account_uin: str,
                 uin: str,
                 update_time: int):
        pulumi.set(__self__, "appid", appid)
        pulumi.set(__self__, "associate_id", associate_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "datasource_connection_cidr_block", datasource_connection_cidr_block)
        pulumi.set(__self__, "datasource_connection_id", datasource_connection_id)
        pulumi.set(__self__, "datasource_connection_name", datasource_connection_name)
        pulumi.set(__self__, "datasource_connection_subnet_cidr_block", datasource_connection_subnet_cidr_block)
        pulumi.set(__self__, "datasource_connection_subnet_id", datasource_connection_subnet_id)
        pulumi.set(__self__, "datasource_connection_vpc_id", datasource_connection_vpc_id)
        pulumi.set(__self__, "house_id", house_id)
        pulumi.set(__self__, "house_name", house_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "network_connection_desc", network_connection_desc)
        pulumi.set(__self__, "network_connection_type", network_connection_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "sub_account_uin", sub_account_uin)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def appid(self) -> int:
        return pulumi.get(self, "appid")

    @property
    @pulumi.getter(name="associateId")
    def associate_id(self) -> str:
        return pulumi.get(self, "associate_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="datasourceConnectionCidrBlock")
    def datasource_connection_cidr_block(self) -> str:
        return pulumi.get(self, "datasource_connection_cidr_block")

    @property
    @pulumi.getter(name="datasourceConnectionId")
    def datasource_connection_id(self) -> str:
        return pulumi.get(self, "datasource_connection_id")

    @property
    @pulumi.getter(name="datasourceConnectionName")
    def datasource_connection_name(self) -> str:
        return pulumi.get(self, "datasource_connection_name")

    @property
    @pulumi.getter(name="datasourceConnectionSubnetCidrBlock")
    def datasource_connection_subnet_cidr_block(self) -> str:
        return pulumi.get(self, "datasource_connection_subnet_cidr_block")

    @property
    @pulumi.getter(name="datasourceConnectionSubnetId")
    def datasource_connection_subnet_id(self) -> str:
        return pulumi.get(self, "datasource_connection_subnet_id")

    @property
    @pulumi.getter(name="datasourceConnectionVpcId")
    def datasource_connection_vpc_id(self) -> str:
        return pulumi.get(self, "datasource_connection_vpc_id")

    @property
    @pulumi.getter(name="houseId")
    def house_id(self) -> str:
        return pulumi.get(self, "house_id")

    @property
    @pulumi.getter(name="houseName")
    def house_name(self) -> str:
        return pulumi.get(self, "house_name")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkConnectionDesc")
    def network_connection_desc(self) -> str:
        return pulumi.get(self, "network_connection_desc")

    @property
    @pulumi.getter(name="networkConnectionType")
    def network_connection_type(self) -> int:
        return pulumi.get(self, "network_connection_type")

    @property
    @pulumi.getter
    def state(self) -> int:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subAccountUin")
    def sub_account_uin(self) -> str:
        return pulumi.get(self, "sub_account_uin")

    @property
    @pulumi.getter
    def uin(self) -> str:
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetDescribeDataEngineDataEngineSessionResourceTemplateResult(dict):
    def __init__(__self__, *,
                 driver_size: str,
                 executor_max_numbers: int,
                 executor_nums: int,
                 executor_size: str):
        pulumi.set(__self__, "driver_size", driver_size)
        pulumi.set(__self__, "executor_max_numbers", executor_max_numbers)
        pulumi.set(__self__, "executor_nums", executor_nums)
        pulumi.set(__self__, "executor_size", executor_size)

    @property
    @pulumi.getter(name="driverSize")
    def driver_size(self) -> str:
        return pulumi.get(self, "driver_size")

    @property
    @pulumi.getter(name="executorMaxNumbers")
    def executor_max_numbers(self) -> int:
        return pulumi.get(self, "executor_max_numbers")

    @property
    @pulumi.getter(name="executorNums")
    def executor_nums(self) -> int:
        return pulumi.get(self, "executor_nums")

    @property
    @pulumi.getter(name="executorSize")
    def executor_size(self) -> str:
        return pulumi.get(self, "executor_size")


@pulumi.output_type
class GetDescribeDataEngineDataEngineTagListResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetDescribeDataEngineEventsEventResult(dict):
    def __init__(__self__, *,
                 cluster_infos: Sequence[str],
                 events_actions: Sequence[str],
                 times: Sequence[str]):
        pulumi.set(__self__, "cluster_infos", cluster_infos)
        pulumi.set(__self__, "events_actions", events_actions)
        pulumi.set(__self__, "times", times)

    @property
    @pulumi.getter(name="clusterInfos")
    def cluster_infos(self) -> Sequence[str]:
        return pulumi.get(self, "cluster_infos")

    @property
    @pulumi.getter(name="eventsActions")
    def events_actions(self) -> Sequence[str]:
        return pulumi.get(self, "events_actions")

    @property
    @pulumi.getter
    def times(self) -> Sequence[str]:
        return pulumi.get(self, "times")


@pulumi.output_type
class GetDescribeDataEngineImageVersionsImageParentVersionResult(dict):
    def __init__(__self__, *,
                 description: str,
                 engine_type: str,
                 image_version: str,
                 image_version_id: str,
                 insert_time: str,
                 is_public: int,
                 is_shared_engine: int,
                 state: int,
                 update_time: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "image_version_id", image_version_id)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "is_public", is_public)
        pulumi.set(__self__, "is_shared_engine", is_shared_engine)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> str:
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="imageVersionId")
    def image_version_id(self) -> str:
        return pulumi.get(self, "image_version_id")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> str:
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> int:
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter(name="isSharedEngine")
    def is_shared_engine(self) -> int:
        return pulumi.get(self, "is_shared_engine")

    @property
    @pulumi.getter
    def state(self) -> int:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetDescribeDataEnginePythonSparkImagesPythonSparkImageResult(dict):
    def __init__(__self__, *,
                 child_image_version_id: str,
                 create_time: str,
                 description: str,
                 spark_image_id: str,
                 spark_image_version: str,
                 update_time: str):
        pulumi.set(__self__, "child_image_version_id", child_image_version_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "spark_image_id", spark_image_id)
        pulumi.set(__self__, "spark_image_version", spark_image_version)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="childImageVersionId")
    def child_image_version_id(self) -> str:
        return pulumi.get(self, "child_image_version_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="sparkImageId")
    def spark_image_id(self) -> str:
        return pulumi.get(self, "spark_image_id")

    @property
    @pulumi.getter(name="sparkImageVersion")
    def spark_image_version(self) -> str:
        return pulumi.get(self, "spark_image_version")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetDescribeUpdatableDataEnginesDataEngineBasicInfoResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 create_time: int,
                 data_engine_id: str,
                 data_engine_name: str,
                 data_engine_type: str,
                 message: str,
                 state: int,
                 update_time: int,
                 user_uin: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_engine_id", data_engine_id)
        pulumi.set(__self__, "data_engine_name", data_engine_name)
        pulumi.set(__self__, "data_engine_type", data_engine_type)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_uin", user_uin)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngineId")
    def data_engine_id(self) -> str:
        return pulumi.get(self, "data_engine_id")

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> str:
        return pulumi.get(self, "data_engine_name")

    @property
    @pulumi.getter(name="dataEngineType")
    def data_engine_type(self) -> str:
        return pulumi.get(self, "data_engine_type")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def state(self) -> int:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userUin")
    def user_uin(self) -> str:
        return pulumi.get(self, "user_uin")


@pulumi.output_type
class GetDescribeUserInfoFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDescribeUserInfoUserInfoResult(dict):
    def __init__(__self__, *,
                 data_policy_infos: Sequence['outputs.GetDescribeUserInfoUserInfoDataPolicyInfoResult'],
                 engine_policy_infos: Sequence['outputs.GetDescribeUserInfoUserInfoEnginePolicyInfoResult'],
                 row_filter_infos: Sequence['outputs.GetDescribeUserInfoUserInfoRowFilterInfoResult'],
                 type: str,
                 user_alias: str,
                 user_description: str,
                 user_id: str,
                 user_type: str,
                 work_group_infos: Sequence['outputs.GetDescribeUserInfoUserInfoWorkGroupInfoResult']):
        pulumi.set(__self__, "data_policy_infos", data_policy_infos)
        pulumi.set(__self__, "engine_policy_infos", engine_policy_infos)
        pulumi.set(__self__, "row_filter_infos", row_filter_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_alias", user_alias)
        pulumi.set(__self__, "user_description", user_description)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_type", user_type)
        pulumi.set(__self__, "work_group_infos", work_group_infos)

    @property
    @pulumi.getter(name="dataPolicyInfos")
    def data_policy_infos(self) -> Sequence['outputs.GetDescribeUserInfoUserInfoDataPolicyInfoResult']:
        return pulumi.get(self, "data_policy_infos")

    @property
    @pulumi.getter(name="enginePolicyInfos")
    def engine_policy_infos(self) -> Sequence['outputs.GetDescribeUserInfoUserInfoEnginePolicyInfoResult']:
        return pulumi.get(self, "engine_policy_infos")

    @property
    @pulumi.getter(name="rowFilterInfos")
    def row_filter_infos(self) -> Sequence['outputs.GetDescribeUserInfoUserInfoRowFilterInfoResult']:
        return pulumi.get(self, "row_filter_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAlias")
    def user_alias(self) -> str:
        return pulumi.get(self, "user_alias")

    @property
    @pulumi.getter(name="userDescription")
    def user_description(self) -> str:
        return pulumi.get(self, "user_description")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> str:
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter(name="workGroupInfos")
    def work_group_infos(self) -> Sequence['outputs.GetDescribeUserInfoUserInfoWorkGroupInfoResult']:
        return pulumi.get(self, "work_group_infos")


@pulumi.output_type
class GetDescribeUserInfoUserInfoDataPolicyInfoResult(dict):
    def __init__(__self__, *,
                 policy_sets: Sequence['outputs.GetDescribeUserInfoUserInfoDataPolicyInfoPolicySetResult'],
                 total_count: int):
        pulumi.set(__self__, "policy_sets", policy_sets)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="policySets")
    def policy_sets(self) -> Sequence['outputs.GetDescribeUserInfoUserInfoDataPolicyInfoPolicySetResult']:
        return pulumi.get(self, "policy_sets")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetDescribeUserInfoUserInfoDataPolicyInfoPolicySetResult(dict):
    def __init__(__self__, *,
                 catalog: str,
                 column: str,
                 create_time: str,
                 data_engine: str,
                 database: str,
                 function: str,
                 id: int,
                 mode: str,
                 operation: str,
                 operator: str,
                 policy_type: str,
                 re_auth: bool,
                 source: str,
                 source_id: int,
                 source_name: str,
                 table: str,
                 view: str):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_engine", data_engine)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "re_auth", re_auth)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> str:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def function(self) -> str:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> bool:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> int:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> str:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def view(self) -> str:
        return pulumi.get(self, "view")


@pulumi.output_type
class GetDescribeUserInfoUserInfoEnginePolicyInfoResult(dict):
    def __init__(__self__, *,
                 policy_sets: Sequence['outputs.GetDescribeUserInfoUserInfoEnginePolicyInfoPolicySetResult'],
                 total_count: int):
        pulumi.set(__self__, "policy_sets", policy_sets)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="policySets")
    def policy_sets(self) -> Sequence['outputs.GetDescribeUserInfoUserInfoEnginePolicyInfoPolicySetResult']:
        return pulumi.get(self, "policy_sets")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetDescribeUserInfoUserInfoEnginePolicyInfoPolicySetResult(dict):
    def __init__(__self__, *,
                 catalog: str,
                 column: str,
                 create_time: str,
                 data_engine: str,
                 database: str,
                 function: str,
                 id: int,
                 mode: str,
                 operation: str,
                 operator: str,
                 policy_type: str,
                 re_auth: bool,
                 source: str,
                 source_id: int,
                 source_name: str,
                 table: str,
                 view: str):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_engine", data_engine)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "re_auth", re_auth)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> str:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def function(self) -> str:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> bool:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> int:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> str:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def view(self) -> str:
        return pulumi.get(self, "view")


@pulumi.output_type
class GetDescribeUserInfoUserInfoRowFilterInfoResult(dict):
    def __init__(__self__, *,
                 policy_sets: Sequence['outputs.GetDescribeUserInfoUserInfoRowFilterInfoPolicySetResult'],
                 total_count: int):
        pulumi.set(__self__, "policy_sets", policy_sets)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="policySets")
    def policy_sets(self) -> Sequence['outputs.GetDescribeUserInfoUserInfoRowFilterInfoPolicySetResult']:
        return pulumi.get(self, "policy_sets")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetDescribeUserInfoUserInfoRowFilterInfoPolicySetResult(dict):
    def __init__(__self__, *,
                 catalog: str,
                 column: str,
                 create_time: str,
                 data_engine: str,
                 database: str,
                 function: str,
                 id: int,
                 mode: str,
                 operation: str,
                 operator: str,
                 policy_type: str,
                 re_auth: bool,
                 source: str,
                 source_id: int,
                 source_name: str,
                 table: str,
                 view: str):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_engine", data_engine)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "re_auth", re_auth)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> str:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def function(self) -> str:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> bool:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> int:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> str:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def view(self) -> str:
        return pulumi.get(self, "view")


@pulumi.output_type
class GetDescribeUserInfoUserInfoWorkGroupInfoResult(dict):
    def __init__(__self__, *,
                 total_count: int,
                 work_group_sets: Sequence['outputs.GetDescribeUserInfoUserInfoWorkGroupInfoWorkGroupSetResult']):
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "work_group_sets", work_group_sets)

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="workGroupSets")
    def work_group_sets(self) -> Sequence['outputs.GetDescribeUserInfoUserInfoWorkGroupInfoWorkGroupSetResult']:
        return pulumi.get(self, "work_group_sets")


@pulumi.output_type
class GetDescribeUserInfoUserInfoWorkGroupInfoWorkGroupSetResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 creator: str,
                 work_group_description: str,
                 work_group_id: int,
                 work_group_name: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "work_group_description", work_group_description)
        pulumi.set(__self__, "work_group_id", work_group_id)
        pulumi.set(__self__, "work_group_name", work_group_name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def creator(self) -> str:
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter(name="workGroupDescription")
    def work_group_description(self) -> str:
        return pulumi.get(self, "work_group_description")

    @property
    @pulumi.getter(name="workGroupId")
    def work_group_id(self) -> int:
        return pulumi.get(self, "work_group_id")

    @property
    @pulumi.getter(name="workGroupName")
    def work_group_name(self) -> str:
        return pulumi.get(self, "work_group_name")


@pulumi.output_type
class GetDescribeUserRolesUserRoleResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 arn: str,
                 cos_permission_lists: Sequence['outputs.GetDescribeUserRolesUserRoleCosPermissionListResult'],
                 creator: str,
                 desc: str,
                 modify_time: int,
                 permission_json: str,
                 role_id: int,
                 role_name: str,
                 uin: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "cos_permission_lists", cos_permission_lists)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "permission_json", permission_json)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "uin", uin)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="cosPermissionLists")
    def cos_permission_lists(self) -> Sequence['outputs.GetDescribeUserRolesUserRoleCosPermissionListResult']:
        return pulumi.get(self, "cos_permission_lists")

    @property
    @pulumi.getter
    def creator(self) -> str:
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter
    def desc(self) -> str:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> int:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="permissionJson")
    def permission_json(self) -> str:
        return pulumi.get(self, "permission_json")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> int:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def uin(self) -> str:
        return pulumi.get(self, "uin")


@pulumi.output_type
class GetDescribeUserRolesUserRoleCosPermissionListResult(dict):
    def __init__(__self__, *,
                 cos_path: str,
                 permissions: Sequence[str]):
        pulumi.set(__self__, "cos_path", cos_path)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="cosPath")
    def cos_path(self) -> str:
        return pulumi.get(self, "cos_path")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence[str]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetDescribeWorkGroupInfoFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDescribeWorkGroupInfoWorkGroupInfoResult(dict):
    def __init__(__self__, *,
                 data_policy_infos: Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfoResult'],
                 engine_policy_infos: Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfoResult'],
                 row_filter_infos: Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoRowFilterInfoResult'],
                 type: str,
                 user_infos: Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoUserInfoResult'],
                 work_group_description: str,
                 work_group_id: int,
                 work_group_name: str):
        pulumi.set(__self__, "data_policy_infos", data_policy_infos)
        pulumi.set(__self__, "engine_policy_infos", engine_policy_infos)
        pulumi.set(__self__, "row_filter_infos", row_filter_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_infos", user_infos)
        pulumi.set(__self__, "work_group_description", work_group_description)
        pulumi.set(__self__, "work_group_id", work_group_id)
        pulumi.set(__self__, "work_group_name", work_group_name)

    @property
    @pulumi.getter(name="dataPolicyInfos")
    def data_policy_infos(self) -> Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfoResult']:
        return pulumi.get(self, "data_policy_infos")

    @property
    @pulumi.getter(name="enginePolicyInfos")
    def engine_policy_infos(self) -> Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfoResult']:
        return pulumi.get(self, "engine_policy_infos")

    @property
    @pulumi.getter(name="rowFilterInfos")
    def row_filter_infos(self) -> Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoRowFilterInfoResult']:
        return pulumi.get(self, "row_filter_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userInfos")
    def user_infos(self) -> Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoUserInfoResult']:
        return pulumi.get(self, "user_infos")

    @property
    @pulumi.getter(name="workGroupDescription")
    def work_group_description(self) -> str:
        return pulumi.get(self, "work_group_description")

    @property
    @pulumi.getter(name="workGroupId")
    def work_group_id(self) -> int:
        return pulumi.get(self, "work_group_id")

    @property
    @pulumi.getter(name="workGroupName")
    def work_group_name(self) -> str:
        return pulumi.get(self, "work_group_name")


@pulumi.output_type
class GetDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfoResult(dict):
    def __init__(__self__, *,
                 policy_sets: Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfoPolicySetResult'],
                 total_count: int):
        pulumi.set(__self__, "policy_sets", policy_sets)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="policySets")
    def policy_sets(self) -> Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfoPolicySetResult']:
        return pulumi.get(self, "policy_sets")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfoPolicySetResult(dict):
    def __init__(__self__, *,
                 catalog: str,
                 column: str,
                 create_time: str,
                 data_engine: str,
                 database: str,
                 function: str,
                 id: int,
                 mode: str,
                 operation: str,
                 operator: str,
                 policy_type: str,
                 re_auth: bool,
                 source: str,
                 source_id: int,
                 source_name: str,
                 table: str,
                 view: str):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_engine", data_engine)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "re_auth", re_auth)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> str:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def function(self) -> str:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> bool:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> int:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> str:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def view(self) -> str:
        return pulumi.get(self, "view")


@pulumi.output_type
class GetDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfoResult(dict):
    def __init__(__self__, *,
                 policy_sets: Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfoPolicySetResult'],
                 total_count: int):
        pulumi.set(__self__, "policy_sets", policy_sets)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="policySets")
    def policy_sets(self) -> Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfoPolicySetResult']:
        return pulumi.get(self, "policy_sets")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfoPolicySetResult(dict):
    def __init__(__self__, *,
                 catalog: str,
                 column: str,
                 create_time: str,
                 data_engine: str,
                 database: str,
                 function: str,
                 id: int,
                 mode: str,
                 operation: str,
                 operator: str,
                 policy_type: str,
                 re_auth: bool,
                 source: str,
                 source_id: int,
                 source_name: str,
                 table: str,
                 view: str):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_engine", data_engine)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "re_auth", re_auth)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> str:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def function(self) -> str:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> bool:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> int:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> str:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def view(self) -> str:
        return pulumi.get(self, "view")


@pulumi.output_type
class GetDescribeWorkGroupInfoWorkGroupInfoRowFilterInfoResult(dict):
    def __init__(__self__, *,
                 policy_sets: Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoRowFilterInfoPolicySetResult'],
                 total_count: int):
        pulumi.set(__self__, "policy_sets", policy_sets)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="policySets")
    def policy_sets(self) -> Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoRowFilterInfoPolicySetResult']:
        return pulumi.get(self, "policy_sets")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetDescribeWorkGroupInfoWorkGroupInfoRowFilterInfoPolicySetResult(dict):
    def __init__(__self__, *,
                 catalog: str,
                 column: str,
                 create_time: str,
                 data_engine: str,
                 database: str,
                 function: str,
                 id: int,
                 mode: str,
                 operation: str,
                 operator: str,
                 policy_type: str,
                 re_auth: bool,
                 source: str,
                 source_id: int,
                 source_name: str,
                 table: str,
                 view: str):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_engine", data_engine)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "re_auth", re_auth)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> str:
        return pulumi.get(self, "data_engine")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def function(self) -> str:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> bool:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> int:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> str:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def view(self) -> str:
        return pulumi.get(self, "view")


@pulumi.output_type
class GetDescribeWorkGroupInfoWorkGroupInfoUserInfoResult(dict):
    def __init__(__self__, *,
                 total_count: int,
                 user_sets: Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoUserInfoUserSetResult']):
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "user_sets", user_sets)

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="userSets")
    def user_sets(self) -> Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoUserInfoUserSetResult']:
        return pulumi.get(self, "user_sets")


@pulumi.output_type
class GetDescribeWorkGroupInfoWorkGroupInfoUserInfoUserSetResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 creator: str,
                 user_alias: str,
                 user_description: str,
                 user_id: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "user_alias", user_alias)
        pulumi.set(__self__, "user_description", user_description)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def creator(self) -> str:
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter(name="userAlias")
    def user_alias(self) -> str:
        return pulumi.get(self, "user_alias")

    @property
    @pulumi.getter(name="userDescription")
    def user_description(self) -> str:
        return pulumi.get(self, "user_description")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")


