# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AddUsersToWorkGroupAttachmentAddInfoArgs',
    'AttachUserPolicyOperationPolicySetArgs',
    'AttachWorkGroupPolicyOperationPolicySetArgs',
    'BindWorkGroupsToUserAttachmentAddInfoArgs',
    'DataEngineCrontabResumeSuspendStrategyArgs',
    'DataEngineDataEngineConfigPairArgs',
    'DataEngineSessionResourceTemplateArgs',
    'DetachUserPolicyOperationPolicySetArgs',
    'DetachWorkGroupPolicyOperationPolicySetArgs',
    'UpdateRowFilterOperationPolicyArgs',
    'UserDataEngineConfigDataEngineConfigPairArgs',
    'UserDataEngineConfigSessionResourceTemplateArgs',
    'GetCheckDataEngineConfigPairsValidityDataEngineConfigPairArgs',
    'GetDescribeUserInfoFilterArgs',
    'GetDescribeWorkGroupInfoFilterArgs',
]

@pulumi.input_type
class AddUsersToWorkGroupAttachmentAddInfoArgs:
    def __init__(__self__, *,
                 user_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 work_group_id: pulumi.Input[int]):
        pulumi.set(__self__, "user_ids", user_ids)
        pulumi.set(__self__, "work_group_id", work_group_id)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "user_ids")

    @user_ids.setter
    def user_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "user_ids", value)

    @property
    @pulumi.getter(name="workGroupId")
    def work_group_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "work_group_id")

    @work_group_id.setter
    def work_group_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "work_group_id", value)


@pulumi.input_type
class AttachUserPolicyOperationPolicySetArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 table: pulumi.Input[str],
                 column: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_engine: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 re_auth: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_engine")

    @data_engine.setter
    def data_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "re_auth")

    @re_auth.setter
    def re_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_auth", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class AttachWorkGroupPolicyOperationPolicySetArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 table: pulumi.Input[str],
                 column: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_engine: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 re_auth: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_engine")

    @data_engine.setter
    def data_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "re_auth")

    @re_auth.setter
    def re_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_auth", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class BindWorkGroupsToUserAttachmentAddInfoArgs:
    def __init__(__self__, *,
                 user_id: pulumi.Input[str],
                 work_group_ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "work_group_ids", work_group_ids)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="workGroupIds")
    def work_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "work_group_ids")

    @work_group_ids.setter
    def work_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "work_group_ids", value)


@pulumi.input_type
class DataEngineCrontabResumeSuspendStrategyArgs:
    def __init__(__self__, *,
                 resume_time: Optional[pulumi.Input[str]] = None,
                 suspend_strategy: Optional[pulumi.Input[int]] = None,
                 suspend_time: Optional[pulumi.Input[str]] = None):
        if resume_time is not None:
            pulumi.set(__self__, "resume_time", resume_time)
        if suspend_strategy is not None:
            pulumi.set(__self__, "suspend_strategy", suspend_strategy)
        if suspend_time is not None:
            pulumi.set(__self__, "suspend_time", suspend_time)

    @property
    @pulumi.getter(name="resumeTime")
    def resume_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resume_time")

    @resume_time.setter
    def resume_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resume_time", value)

    @property
    @pulumi.getter(name="suspendStrategy")
    def suspend_strategy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "suspend_strategy")

    @suspend_strategy.setter
    def suspend_strategy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "suspend_strategy", value)

    @property
    @pulumi.getter(name="suspendTime")
    def suspend_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suspend_time")

    @suspend_time.setter
    def suspend_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspend_time", value)


@pulumi.input_type
class DataEngineDataEngineConfigPairArgs:
    def __init__(__self__, *,
                 config_item: pulumi.Input[str],
                 config_value: pulumi.Input[str]):
        pulumi.set(__self__, "config_item", config_item)
        pulumi.set(__self__, "config_value", config_value)

    @property
    @pulumi.getter(name="configItem")
    def config_item(self) -> pulumi.Input[str]:
        return pulumi.get(self, "config_item")

    @config_item.setter
    def config_item(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_item", value)

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "config_value")

    @config_value.setter
    def config_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_value", value)


@pulumi.input_type
class DataEngineSessionResourceTemplateArgs:
    def __init__(__self__, *,
                 driver_size: Optional[pulumi.Input[str]] = None,
                 executor_max_numbers: Optional[pulumi.Input[int]] = None,
                 executor_nums: Optional[pulumi.Input[int]] = None,
                 executor_size: Optional[pulumi.Input[str]] = None):
        if driver_size is not None:
            pulumi.set(__self__, "driver_size", driver_size)
        if executor_max_numbers is not None:
            pulumi.set(__self__, "executor_max_numbers", executor_max_numbers)
        if executor_nums is not None:
            pulumi.set(__self__, "executor_nums", executor_nums)
        if executor_size is not None:
            pulumi.set(__self__, "executor_size", executor_size)

    @property
    @pulumi.getter(name="driverSize")
    def driver_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "driver_size")

    @driver_size.setter
    def driver_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "driver_size", value)

    @property
    @pulumi.getter(name="executorMaxNumbers")
    def executor_max_numbers(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "executor_max_numbers")

    @executor_max_numbers.setter
    def executor_max_numbers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "executor_max_numbers", value)

    @property
    @pulumi.getter(name="executorNums")
    def executor_nums(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "executor_nums")

    @executor_nums.setter
    def executor_nums(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "executor_nums", value)

    @property
    @pulumi.getter(name="executorSize")
    def executor_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executor_size")

    @executor_size.setter
    def executor_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executor_size", value)


@pulumi.input_type
class DetachUserPolicyOperationPolicySetArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 table: pulumi.Input[str],
                 column: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_engine: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 re_auth: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_engine")

    @data_engine.setter
    def data_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "re_auth")

    @re_auth.setter
    def re_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_auth", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class DetachWorkGroupPolicyOperationPolicySetArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 table: pulumi.Input[str],
                 column: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_engine: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 re_auth: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_engine")

    @data_engine.setter
    def data_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "re_auth")

    @re_auth.setter
    def re_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_auth", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class UpdateRowFilterOperationPolicyArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 table: pulumi.Input[str],
                 column: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_engine: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 re_auth: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_engine")

    @data_engine.setter
    def data_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "re_auth")

    @re_auth.setter
    def re_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_auth", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class UserDataEngineConfigDataEngineConfigPairArgs:
    def __init__(__self__, *,
                 config_item: pulumi.Input[str],
                 config_value: pulumi.Input[str]):
        pulumi.set(__self__, "config_item", config_item)
        pulumi.set(__self__, "config_value", config_value)

    @property
    @pulumi.getter(name="configItem")
    def config_item(self) -> pulumi.Input[str]:
        return pulumi.get(self, "config_item")

    @config_item.setter
    def config_item(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_item", value)

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "config_value")

    @config_value.setter
    def config_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_value", value)


@pulumi.input_type
class UserDataEngineConfigSessionResourceTemplateArgs:
    def __init__(__self__, *,
                 driver_size: Optional[pulumi.Input[str]] = None,
                 executor_max_numbers: Optional[pulumi.Input[int]] = None,
                 executor_nums: Optional[pulumi.Input[int]] = None,
                 executor_size: Optional[pulumi.Input[str]] = None):
        if driver_size is not None:
            pulumi.set(__self__, "driver_size", driver_size)
        if executor_max_numbers is not None:
            pulumi.set(__self__, "executor_max_numbers", executor_max_numbers)
        if executor_nums is not None:
            pulumi.set(__self__, "executor_nums", executor_nums)
        if executor_size is not None:
            pulumi.set(__self__, "executor_size", executor_size)

    @property
    @pulumi.getter(name="driverSize")
    def driver_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "driver_size")

    @driver_size.setter
    def driver_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "driver_size", value)

    @property
    @pulumi.getter(name="executorMaxNumbers")
    def executor_max_numbers(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "executor_max_numbers")

    @executor_max_numbers.setter
    def executor_max_numbers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "executor_max_numbers", value)

    @property
    @pulumi.getter(name="executorNums")
    def executor_nums(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "executor_nums")

    @executor_nums.setter
    def executor_nums(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "executor_nums", value)

    @property
    @pulumi.getter(name="executorSize")
    def executor_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executor_size")

    @executor_size.setter
    def executor_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executor_size", value)


@pulumi.input_type
class GetCheckDataEngineConfigPairsValidityDataEngineConfigPairArgs:
    def __init__(__self__, *,
                 config_item: str,
                 config_value: str):
        pulumi.set(__self__, "config_item", config_item)
        pulumi.set(__self__, "config_value", config_value)

    @property
    @pulumi.getter(name="configItem")
    def config_item(self) -> str:
        return pulumi.get(self, "config_item")

    @config_item.setter
    def config_item(self, value: str):
        pulumi.set(self, "config_item", value)

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> str:
        return pulumi.get(self, "config_value")

    @config_value.setter
    def config_value(self, value: str):
        pulumi.set(self, "config_value", value)


@pulumi.input_type
class GetDescribeUserInfoFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetDescribeWorkGroupInfoFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


