# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDescribeUserTypeResult',
    'AwaitableGetDescribeUserTypeResult',
    'get_describe_user_type',
    'get_describe_user_type_output',
]

@pulumi.output_type
class GetDescribeUserTypeResult:
    """
    A collection of values returned by getDescribeUserType.
    """
    def __init__(__self__, id=None, result_output_file=None, user_id=None, user_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if user_type and not isinstance(user_type, str):
            raise TypeError("Expected argument 'user_type' to be a str")
        pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> str:
        return pulumi.get(self, "user_type")


class AwaitableGetDescribeUserTypeResult(GetDescribeUserTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDescribeUserTypeResult(
            id=self.id,
            result_output_file=self.result_output_file,
            user_id=self.user_id,
            user_type=self.user_type)


def get_describe_user_type(result_output_file: Optional[str] = None,
                           user_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDescribeUserTypeResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dlc/getDescribeUserType:getDescribeUserType', __args__, opts=opts, typ=GetDescribeUserTypeResult).value

    return AwaitableGetDescribeUserTypeResult(
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        user_id=pulumi.get(__ret__, 'user_id'),
        user_type=pulumi.get(__ret__, 'user_type'))


@_utilities.lift_output_func(get_describe_user_type)
def get_describe_user_type_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  user_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDescribeUserTypeResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
