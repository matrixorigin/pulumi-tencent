# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CustomHeaderHeader',
    'HttpRuleRealserver',
    'Layer4ListenerRealserverBindSet',
    'GetAccessRegionsAccessRegionSetResult',
    'GetAccessRegionsAccessRegionSetSupportFeatureResult',
    'GetAccessRegionsByDestRegionAccessRegionSetResult',
    'GetCertificatesCertificateResult',
    'GetCountryAreaMappingCountryAreaMappingListResult',
    'GetCustomHeaderHeaderResult',
    'GetDestRegionsDestRegionSetResult',
    'GetDestRegionsDestRegionSetSupportFeatureResult',
    'GetDomainErrorPageInfosErrorPageSetResult',
    'GetDomainErrorPageInfosErrorPageSetSetHeaderResult',
    'GetDomainErrorPagesErrorPageInfoListResult',
    'GetGroupAndStatisticsProxyGroupSetResult',
    'GetGroupAndStatisticsProxyGroupSetProxySetResult',
    'GetGroupAndStatisticsProxyGroupSetProxySetListenerListResult',
    'GetHttpDomainsDomainResult',
    'GetHttpRulesRuleResult',
    'GetHttpRulesRuleRealserverResult',
    'GetLayer4ListenersListenerResult',
    'GetLayer7ListenersListenerResult',
    'GetListenerRealServersBindRealServerSetResult',
    'GetListenerRealServersRealServerSetResult',
    'GetListenerStatisticsStatisticsDataResult',
    'GetListenerStatisticsStatisticsDataMetricDataResult',
    'GetProxiesProxyResult',
    'GetProxiesStatusInstanceStatusSetResult',
    'GetProxyAndStatisticsListenersProxySetResult',
    'GetProxyAndStatisticsListenersProxySetListenerListResult',
    'GetProxyDetailProxyDetailResult',
    'GetProxyDetailProxyDetailAccessRegionInfoResult',
    'GetProxyDetailProxyDetailAccessRegionInfoSupportFeatureResult',
    'GetProxyDetailProxyDetailIpListResult',
    'GetProxyDetailProxyDetailRealServerRegionInfoResult',
    'GetProxyDetailProxyDetailRealServerRegionInfoSupportFeatureResult',
    'GetProxyDetailProxyDetailTagSetResult',
    'GetProxyGroupStatisticsStatisticsDataResult',
    'GetProxyGroupStatisticsStatisticsDataMetricDataResult',
    'GetProxyGroupsFilterResult',
    'GetProxyGroupsProxyGroupListResult',
    'GetProxyGroupsProxyGroupListRealServerRegionInfoResult',
    'GetProxyGroupsProxyGroupListRealServerRegionInfoSupportFeatureResult',
    'GetProxyGroupsProxyGroupListTagSetResult',
    'GetProxyGroupsTagSetResult',
    'GetProxyStatisticsStatisticsDataResult',
    'GetProxyStatisticsStatisticsDataMetricDataResult',
    'GetRealServersStatusRealServerStatusSetResult',
    'GetRealserversRealserverResult',
    'GetRegionAndPriceBandwidthUnitPriceResult',
    'GetRegionAndPriceDestRegionSetResult',
    'GetRegionAndPriceDestRegionSetSupportFeatureResult',
    'GetResourcesByTagResourceSetResult',
    'GetRuleRealServersBindRealServerSetResult',
    'GetRuleRealServersRealServerSetResult',
    'GetSecurityRulesRuleResult',
]

@pulumi.output_type
class CustomHeaderHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"
        elif key == "headerValue":
            suggest = "header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomHeaderHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomHeaderHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomHeaderHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        return pulumi.get(self, "header_value")


@pulumi.output_type
class HttpRuleRealserver(dict):
    def __init__(__self__, *,
                 id: str,
                 ip: str,
                 port: int,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class Layer4ListenerRealserverBindSet(dict):
    def __init__(__self__, *,
                 id: str,
                 ip: str,
                 port: int,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetAccessRegionsAccessRegionSetResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetAccessRegionsAccessRegionSetSupportFeatureResult']):
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetAccessRegionsAccessRegionSetSupportFeatureResult']:
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetAccessRegionsAccessRegionSetSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetAccessRegionsByDestRegionAccessRegionSetResult(dict):
    def __init__(__self__, *,
                 bandwidth_lists: Sequence[int],
                 concurrent_lists: Sequence[int],
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str):
        pulumi.set(__self__, "bandwidth_lists", bandwidth_lists)
        pulumi.set(__self__, "concurrent_lists", concurrent_lists)
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)

    @property
    @pulumi.getter(name="bandwidthLists")
    def bandwidth_lists(self) -> Sequence[int]:
        return pulumi.get(self, "bandwidth_lists")

    @property
    @pulumi.getter(name="concurrentLists")
    def concurrent_lists(self) -> Sequence[int]:
        return pulumi.get(self, "concurrent_lists")

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")


@pulumi.output_type
class GetCertificatesCertificateResult(dict):
    def __init__(__self__, *,
                 begin_time: str,
                 create_time: str,
                 end_time: str,
                 id: str,
                 issuer_cn: str,
                 name: str,
                 subject_cn: str,
                 type: str):
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issuer_cn", issuer_cn)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subject_cn", subject_cn)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> str:
        return pulumi.get(self, "begin_time")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuerCn")
    def issuer_cn(self) -> str:
        return pulumi.get(self, "issuer_cn")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> str:
        return pulumi.get(self, "subject_cn")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCountryAreaMappingCountryAreaMappingListResult(dict):
    def __init__(__self__, *,
                 continent_inner_code: str,
                 continent_name: str,
                 geographical_zone_inner_code: str,
                 geographical_zone_name: str,
                 nation_country_inner_code: str,
                 nation_country_name: str,
                 remark: str):
        pulumi.set(__self__, "continent_inner_code", continent_inner_code)
        pulumi.set(__self__, "continent_name", continent_name)
        pulumi.set(__self__, "geographical_zone_inner_code", geographical_zone_inner_code)
        pulumi.set(__self__, "geographical_zone_name", geographical_zone_name)
        pulumi.set(__self__, "nation_country_inner_code", nation_country_inner_code)
        pulumi.set(__self__, "nation_country_name", nation_country_name)
        pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="continentInnerCode")
    def continent_inner_code(self) -> str:
        return pulumi.get(self, "continent_inner_code")

    @property
    @pulumi.getter(name="continentName")
    def continent_name(self) -> str:
        return pulumi.get(self, "continent_name")

    @property
    @pulumi.getter(name="geographicalZoneInnerCode")
    def geographical_zone_inner_code(self) -> str:
        return pulumi.get(self, "geographical_zone_inner_code")

    @property
    @pulumi.getter(name="geographicalZoneName")
    def geographical_zone_name(self) -> str:
        return pulumi.get(self, "geographical_zone_name")

    @property
    @pulumi.getter(name="nationCountryInnerCode")
    def nation_country_inner_code(self) -> str:
        return pulumi.get(self, "nation_country_inner_code")

    @property
    @pulumi.getter(name="nationCountryName")
    def nation_country_name(self) -> str:
        return pulumi.get(self, "nation_country_name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")


@pulumi.output_type
class GetCustomHeaderHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetDestRegionsDestRegionSetResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetDestRegionsDestRegionSetSupportFeatureResult']):
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetDestRegionsDestRegionSetSupportFeatureResult']:
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetDestRegionsDestRegionSetSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetDomainErrorPageInfosErrorPageSetResult(dict):
    def __init__(__self__, *,
                 body: str,
                 clear_headers: Sequence[str],
                 domain: str,
                 error_nos: Sequence[int],
                 error_page_id: str,
                 listener_id: str,
                 new_error_no: int,
                 set_headers: Sequence['outputs.GetDomainErrorPageInfosErrorPageSetSetHeaderResult'],
                 status: int):
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "clear_headers", clear_headers)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "error_nos", error_nos)
        pulumi.set(__self__, "error_page_id", error_page_id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "new_error_no", new_error_no)
        pulumi.set(__self__, "set_headers", set_headers)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="clearHeaders")
    def clear_headers(self) -> Sequence[str]:
        return pulumi.get(self, "clear_headers")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="errorNos")
    def error_nos(self) -> Sequence[int]:
        return pulumi.get(self, "error_nos")

    @property
    @pulumi.getter(name="errorPageId")
    def error_page_id(self) -> str:
        return pulumi.get(self, "error_page_id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="newErrorNo")
    def new_error_no(self) -> int:
        return pulumi.get(self, "new_error_no")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Sequence['outputs.GetDomainErrorPageInfosErrorPageSetSetHeaderResult']:
        return pulumi.get(self, "set_headers")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDomainErrorPageInfosErrorPageSetSetHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetDomainErrorPagesErrorPageInfoListResult(dict):
    def __init__(__self__, *,
                 body: str,
                 clear_headers: Sequence[str],
                 domain: str,
                 error_codes: Sequence[int],
                 id: str,
                 listener_id: str,
                 new_error_codes: int,
                 set_headers: Mapping[str, Any]):
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "clear_headers", clear_headers)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "error_codes", error_codes)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "new_error_codes", new_error_codes)
        pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="clearHeaders")
    def clear_headers(self) -> Sequence[str]:
        return pulumi.get(self, "clear_headers")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="errorCodes")
    def error_codes(self) -> Sequence[int]:
        return pulumi.get(self, "error_codes")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="newErrorCodes")
    def new_error_codes(self) -> int:
        return pulumi.get(self, "new_error_codes")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Mapping[str, Any]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetGroupAndStatisticsProxyGroupSetResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 group_name: str,
                 proxy_sets: Sequence['outputs.GetGroupAndStatisticsProxyGroupSetProxySetResult']):
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "proxy_sets", proxy_sets)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="proxySets")
    def proxy_sets(self) -> Sequence['outputs.GetGroupAndStatisticsProxyGroupSetProxySetResult']:
        return pulumi.get(self, "proxy_sets")


@pulumi.output_type
class GetGroupAndStatisticsProxyGroupSetProxySetResult(dict):
    def __init__(__self__, *,
                 listener_lists: Sequence['outputs.GetGroupAndStatisticsProxyGroupSetProxySetListenerListResult'],
                 proxy_id: str,
                 proxy_name: str):
        pulumi.set(__self__, "listener_lists", listener_lists)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "proxy_name", proxy_name)

    @property
    @pulumi.getter(name="listenerLists")
    def listener_lists(self) -> Sequence['outputs.GetGroupAndStatisticsProxyGroupSetProxySetListenerListResult']:
        return pulumi.get(self, "listener_lists")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> str:
        return pulumi.get(self, "proxy_name")


@pulumi.output_type
class GetGroupAndStatisticsProxyGroupSetProxySetListenerListResult(dict):
    def __init__(__self__, *,
                 listener_id: str,
                 listener_name: str,
                 port: int,
                 protocol: str):
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetHttpDomainsDomainResult(dict):
    def __init__(__self__, *,
                 basic_auth: bool,
                 basic_auth_id: str,
                 certificate_id: str,
                 client_certificate_id: str,
                 client_certificate_ids: Sequence[str],
                 domain: str,
                 gaap_auth: bool,
                 gaap_auth_id: str,
                 is_default_server: bool,
                 realserver_auth: bool,
                 realserver_certificate_domain: str,
                 realserver_certificate_id: str,
                 realserver_certificate_ids: Sequence[str]):
        pulumi.set(__self__, "basic_auth", basic_auth)
        pulumi.set(__self__, "basic_auth_id", basic_auth_id)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "client_certificate_id", client_certificate_id)
        pulumi.set(__self__, "client_certificate_ids", client_certificate_ids)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "gaap_auth", gaap_auth)
        pulumi.set(__self__, "gaap_auth_id", gaap_auth_id)
        pulumi.set(__self__, "is_default_server", is_default_server)
        pulumi.set(__self__, "realserver_auth", realserver_auth)
        pulumi.set(__self__, "realserver_certificate_domain", realserver_certificate_domain)
        pulumi.set(__self__, "realserver_certificate_id", realserver_certificate_id)
        pulumi.set(__self__, "realserver_certificate_ids", realserver_certificate_ids)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> bool:
        return pulumi.get(self, "basic_auth")

    @property
    @pulumi.getter(name="basicAuthId")
    def basic_auth_id(self) -> str:
        return pulumi.get(self, "basic_auth_id")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="clientCertificateId")
    def client_certificate_id(self) -> str:
        warnings.warn("""It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead.""", DeprecationWarning)
        pulumi.log.warn("""client_certificate_id is deprecated: It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead.""")

        return pulumi.get(self, "client_certificate_id")

    @property
    @pulumi.getter(name="clientCertificateIds")
    def client_certificate_ids(self) -> Sequence[str]:
        return pulumi.get(self, "client_certificate_ids")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="gaapAuth")
    def gaap_auth(self) -> bool:
        return pulumi.get(self, "gaap_auth")

    @property
    @pulumi.getter(name="gaapAuthId")
    def gaap_auth_id(self) -> str:
        return pulumi.get(self, "gaap_auth_id")

    @property
    @pulumi.getter(name="isDefaultServer")
    def is_default_server(self) -> bool:
        return pulumi.get(self, "is_default_server")

    @property
    @pulumi.getter(name="realserverAuth")
    def realserver_auth(self) -> bool:
        return pulumi.get(self, "realserver_auth")

    @property
    @pulumi.getter(name="realserverCertificateDomain")
    def realserver_certificate_domain(self) -> str:
        return pulumi.get(self, "realserver_certificate_domain")

    @property
    @pulumi.getter(name="realserverCertificateId")
    def realserver_certificate_id(self) -> str:
        warnings.warn("""It has been deprecated from version 1.28.0. Use `realserver_certificate_ids` instead.""", DeprecationWarning)
        pulumi.log.warn("""realserver_certificate_id is deprecated: It has been deprecated from version 1.28.0. Use `realserver_certificate_ids` instead.""")

        return pulumi.get(self, "realserver_certificate_id")

    @property
    @pulumi.getter(name="realserverCertificateIds")
    def realserver_certificate_ids(self) -> Sequence[str]:
        return pulumi.get(self, "realserver_certificate_ids")


@pulumi.output_type
class GetHttpRulesRuleResult(dict):
    def __init__(__self__, *,
                 connect_timeout: int,
                 domain: str,
                 forward_host: str,
                 health_check: bool,
                 health_check_method: str,
                 health_check_path: str,
                 health_check_status_codes: Sequence[int],
                 id: str,
                 interval: int,
                 listener_id: str,
                 path: str,
                 realserver_type: str,
                 realservers: Sequence['outputs.GetHttpRulesRuleRealserverResult'],
                 scheduler: str,
                 sni: str,
                 sni_switch: str):
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "forward_host", forward_host)
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "health_check_method", health_check_method)
        pulumi.set(__self__, "health_check_path", health_check_path)
        pulumi.set(__self__, "health_check_status_codes", health_check_status_codes)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "realserver_type", realserver_type)
        pulumi.set(__self__, "realservers", realservers)
        pulumi.set(__self__, "scheduler", scheduler)
        pulumi.set(__self__, "sni", sni)
        pulumi.set(__self__, "sni_switch", sni_switch)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> int:
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="forwardHost")
    def forward_host(self) -> str:
        return pulumi.get(self, "forward_host")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> bool:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="healthCheckMethod")
    def health_check_method(self) -> str:
        return pulumi.get(self, "health_check_method")

    @property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> str:
        return pulumi.get(self, "health_check_path")

    @property
    @pulumi.getter(name="healthCheckStatusCodes")
    def health_check_status_codes(self) -> Sequence[int]:
        return pulumi.get(self, "health_check_status_codes")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="realserverType")
    def realserver_type(self) -> str:
        return pulumi.get(self, "realserver_type")

    @property
    @pulumi.getter
    def realservers(self) -> Sequence['outputs.GetHttpRulesRuleRealserverResult']:
        return pulumi.get(self, "realservers")

    @property
    @pulumi.getter
    def scheduler(self) -> str:
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter
    def sni(self) -> str:
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="sniSwitch")
    def sni_switch(self) -> str:
        return pulumi.get(self, "sni_switch")


@pulumi.output_type
class GetHttpRulesRuleRealserverResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 id: str,
                 ip: str,
                 port: int,
                 status: int,
                 weight: int):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetLayer4ListenersListenerResult(dict):
    def __init__(__self__, *,
                 connect_timeout: int,
                 create_time: str,
                 health_check: bool,
                 id: str,
                 interval: int,
                 name: str,
                 port: int,
                 protocol: str,
                 proxy_id: str,
                 realserver_type: str,
                 scheduler: str,
                 status: int):
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "realserver_type", realserver_type)
        pulumi.set(__self__, "scheduler", scheduler)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> int:
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> bool:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="realserverType")
    def realserver_type(self) -> str:
        return pulumi.get(self, "realserver_type")

    @property
    @pulumi.getter
    def scheduler(self) -> str:
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLayer7ListenersListenerResult(dict):
    def __init__(__self__, *,
                 auth_type: int,
                 certificate_id: str,
                 client_certificate_id: str,
                 client_certificate_ids: Sequence[str],
                 create_time: str,
                 forward_protocol: str,
                 id: str,
                 name: str,
                 port: int,
                 protocol: str,
                 proxy_id: str,
                 status: int,
                 tls_ciphers: str,
                 tls_support_versions: Sequence[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "client_certificate_id", client_certificate_id)
        pulumi.set(__self__, "client_certificate_ids", client_certificate_ids)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "forward_protocol", forward_protocol)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tls_ciphers", tls_ciphers)
        pulumi.set(__self__, "tls_support_versions", tls_support_versions)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> int:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="clientCertificateId")
    def client_certificate_id(self) -> str:
        warnings.warn("""It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead.""", DeprecationWarning)
        pulumi.log.warn("""client_certificate_id is deprecated: It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead.""")

        return pulumi.get(self, "client_certificate_id")

    @property
    @pulumi.getter(name="clientCertificateIds")
    def client_certificate_ids(self) -> Sequence[str]:
        return pulumi.get(self, "client_certificate_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="forwardProtocol")
    def forward_protocol(self) -> str:
        return pulumi.get(self, "forward_protocol")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tlsCiphers")
    def tls_ciphers(self) -> str:
        return pulumi.get(self, "tls_ciphers")

    @property
    @pulumi.getter(name="tlsSupportVersions")
    def tls_support_versions(self) -> Sequence[str]:
        return pulumi.get(self, "tls_support_versions")


@pulumi.output_type
class GetListenerRealServersBindRealServerSetResult(dict):
    def __init__(__self__, *,
                 down_ip_lists: Sequence[str],
                 real_server_failover_role: str,
                 real_server_ip: str,
                 real_server_id: str,
                 real_server_port: int,
                 real_server_status: int,
                 real_server_weight: int):
        pulumi.set(__self__, "down_ip_lists", down_ip_lists)
        pulumi.set(__self__, "real_server_failover_role", real_server_failover_role)
        pulumi.set(__self__, "real_server_ip", real_server_ip)
        pulumi.set(__self__, "real_server_id", real_server_id)
        pulumi.set(__self__, "real_server_port", real_server_port)
        pulumi.set(__self__, "real_server_status", real_server_status)
        pulumi.set(__self__, "real_server_weight", real_server_weight)

    @property
    @pulumi.getter(name="downIPLists")
    def down_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "down_ip_lists")

    @property
    @pulumi.getter(name="realServerFailoverRole")
    def real_server_failover_role(self) -> str:
        return pulumi.get(self, "real_server_failover_role")

    @property
    @pulumi.getter(name="realServerIP")
    def real_server_ip(self) -> str:
        return pulumi.get(self, "real_server_ip")

    @property
    @pulumi.getter(name="realServerId")
    def real_server_id(self) -> str:
        return pulumi.get(self, "real_server_id")

    @property
    @pulumi.getter(name="realServerPort")
    def real_server_port(self) -> int:
        return pulumi.get(self, "real_server_port")

    @property
    @pulumi.getter(name="realServerStatus")
    def real_server_status(self) -> int:
        return pulumi.get(self, "real_server_status")

    @property
    @pulumi.getter(name="realServerWeight")
    def real_server_weight(self) -> int:
        return pulumi.get(self, "real_server_weight")


@pulumi.output_type
class GetListenerRealServersRealServerSetResult(dict):
    def __init__(__self__, *,
                 in_ban_blacklist: int,
                 project_id: int,
                 real_server_ip: str,
                 real_server_id: str,
                 real_server_name: str):
        pulumi.set(__self__, "in_ban_blacklist", in_ban_blacklist)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "real_server_ip", real_server_ip)
        pulumi.set(__self__, "real_server_id", real_server_id)
        pulumi.set(__self__, "real_server_name", real_server_name)

    @property
    @pulumi.getter(name="inBanBlacklist")
    def in_ban_blacklist(self) -> int:
        return pulumi.get(self, "in_ban_blacklist")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="realServerIP")
    def real_server_ip(self) -> str:
        return pulumi.get(self, "real_server_ip")

    @property
    @pulumi.getter(name="realServerId")
    def real_server_id(self) -> str:
        return pulumi.get(self, "real_server_id")

    @property
    @pulumi.getter(name="realServerName")
    def real_server_name(self) -> str:
        return pulumi.get(self, "real_server_name")


@pulumi.output_type
class GetListenerStatisticsStatisticsDataResult(dict):
    def __init__(__self__, *,
                 metric_datas: Sequence['outputs.GetListenerStatisticsStatisticsDataMetricDataResult'],
                 metric_name: str):
        pulumi.set(__self__, "metric_datas", metric_datas)
        pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter(name="metricDatas")
    def metric_datas(self) -> Sequence['outputs.GetListenerStatisticsStatisticsDataMetricDataResult']:
        return pulumi.get(self, "metric_datas")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetListenerStatisticsStatisticsDataMetricDataResult(dict):
    def __init__(__self__, *,
                 data: float,
                 time: int):
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def data(self) -> float:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def time(self) -> int:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetProxiesProxyResult(dict):
    def __init__(__self__, *,
                 access_region: str,
                 bandwidth: int,
                 concurrent: int,
                 create_time: str,
                 domain: str,
                 forward_ip: str,
                 id: str,
                 ip: str,
                 name: str,
                 policy_id: str,
                 project_id: int,
                 realserver_region: str,
                 scalable: bool,
                 status: str,
                 support_protocols: Sequence[str],
                 tags: Mapping[str, Any],
                 version: str):
        pulumi.set(__self__, "access_region", access_region)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "concurrent", concurrent)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "forward_ip", forward_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "realserver_region", realserver_region)
        pulumi.set(__self__, "scalable", scalable)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_protocols", support_protocols)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessRegion")
    def access_region(self) -> str:
        return pulumi.get(self, "access_region")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def concurrent(self) -> int:
        return pulumi.get(self, "concurrent")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="forwardIp")
    def forward_ip(self) -> str:
        return pulumi.get(self, "forward_ip")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="realserverRegion")
    def realserver_region(self) -> str:
        return pulumi.get(self, "realserver_region")

    @property
    @pulumi.getter
    def scalable(self) -> bool:
        return pulumi.get(self, "scalable")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportProtocols")
    def support_protocols(self) -> Sequence[str]:
        return pulumi.get(self, "support_protocols")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProxiesStatusInstanceStatusSetResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 status: str):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetProxyAndStatisticsListenersProxySetResult(dict):
    def __init__(__self__, *,
                 listener_lists: Sequence['outputs.GetProxyAndStatisticsListenersProxySetListenerListResult'],
                 proxy_id: str,
                 proxy_name: str):
        pulumi.set(__self__, "listener_lists", listener_lists)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "proxy_name", proxy_name)

    @property
    @pulumi.getter(name="listenerLists")
    def listener_lists(self) -> Sequence['outputs.GetProxyAndStatisticsListenersProxySetListenerListResult']:
        return pulumi.get(self, "listener_lists")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> str:
        return pulumi.get(self, "proxy_name")


@pulumi.output_type
class GetProxyAndStatisticsListenersProxySetListenerListResult(dict):
    def __init__(__self__, *,
                 listener_id: str,
                 listener_name: str,
                 port: int,
                 protocol: str):
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetProxyDetailProxyDetailResult(dict):
    def __init__(__self__, *,
                 access_region: str,
                 access_region_infos: Sequence['outputs.GetProxyDetailProxyDetailAccessRegionInfoResult'],
                 ban_status: str,
                 bandwidth: int,
                 billing_type: int,
                 client_ip_methods: Sequence[int],
                 concurrent: int,
                 create_time: int,
                 domain: str,
                 feature_bitmap: int,
                 forward_ip: str,
                 group_id: str,
                 http3_supported: int,
                 in_ban_blacklist: int,
                 instance_id: str,
                 ip: str,
                 ip_address_version: str,
                 ip_lists: Sequence['outputs.GetProxyDetailProxyDetailIpListResult'],
                 is_support_tls_choice: int,
                 modify_config_time: int,
                 network_type: str,
                 package_type: str,
                 policy_id: str,
                 project_id: int,
                 proxy_id: str,
                 proxy_name: str,
                 proxy_type: int,
                 real_server_region: str,
                 real_server_region_infos: Sequence['outputs.GetProxyDetailProxyDetailRealServerRegionInfoResult'],
                 related_global_domains: Sequence[str],
                 scalarable: int,
                 status: str,
                 support_protocols: Sequence[str],
                 support_security: int,
                 tag_sets: Sequence['outputs.GetProxyDetailProxyDetailTagSetResult'],
                 version: str):
        pulumi.set(__self__, "access_region", access_region)
        pulumi.set(__self__, "access_region_infos", access_region_infos)
        pulumi.set(__self__, "ban_status", ban_status)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "billing_type", billing_type)
        pulumi.set(__self__, "client_ip_methods", client_ip_methods)
        pulumi.set(__self__, "concurrent", concurrent)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "forward_ip", forward_ip)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "http3_supported", http3_supported)
        pulumi.set(__self__, "in_ban_blacklist", in_ban_blacklist)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_address_version", ip_address_version)
        pulumi.set(__self__, "ip_lists", ip_lists)
        pulumi.set(__self__, "is_support_tls_choice", is_support_tls_choice)
        pulumi.set(__self__, "modify_config_time", modify_config_time)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "proxy_name", proxy_name)
        pulumi.set(__self__, "proxy_type", proxy_type)
        pulumi.set(__self__, "real_server_region", real_server_region)
        pulumi.set(__self__, "real_server_region_infos", real_server_region_infos)
        pulumi.set(__self__, "related_global_domains", related_global_domains)
        pulumi.set(__self__, "scalarable", scalarable)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_protocols", support_protocols)
        pulumi.set(__self__, "support_security", support_security)
        pulumi.set(__self__, "tag_sets", tag_sets)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessRegion")
    def access_region(self) -> str:
        return pulumi.get(self, "access_region")

    @property
    @pulumi.getter(name="accessRegionInfos")
    def access_region_infos(self) -> Sequence['outputs.GetProxyDetailProxyDetailAccessRegionInfoResult']:
        return pulumi.get(self, "access_region_infos")

    @property
    @pulumi.getter(name="banStatus")
    def ban_status(self) -> str:
        return pulumi.get(self, "ban_status")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> int:
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="clientIpMethods")
    def client_ip_methods(self) -> Sequence[int]:
        return pulumi.get(self, "client_ip_methods")

    @property
    @pulumi.getter
    def concurrent(self) -> int:
        return pulumi.get(self, "concurrent")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="forwardIp")
    def forward_ip(self) -> str:
        return pulumi.get(self, "forward_ip")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="http3Supported")
    def http3_supported(self) -> int:
        return pulumi.get(self, "http3_supported")

    @property
    @pulumi.getter(name="inBanBlacklist")
    def in_ban_blacklist(self) -> int:
        return pulumi.get(self, "in_ban_blacklist")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> str:
        return pulumi.get(self, "ip_address_version")

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Sequence['outputs.GetProxyDetailProxyDetailIpListResult']:
        return pulumi.get(self, "ip_lists")

    @property
    @pulumi.getter(name="isSupportTlsChoice")
    def is_support_tls_choice(self) -> int:
        return pulumi.get(self, "is_support_tls_choice")

    @property
    @pulumi.getter(name="modifyConfigTime")
    def modify_config_time(self) -> int:
        return pulumi.get(self, "modify_config_time")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> str:
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> str:
        return pulumi.get(self, "proxy_name")

    @property
    @pulumi.getter(name="proxyType")
    def proxy_type(self) -> int:
        return pulumi.get(self, "proxy_type")

    @property
    @pulumi.getter(name="realServerRegion")
    def real_server_region(self) -> str:
        return pulumi.get(self, "real_server_region")

    @property
    @pulumi.getter(name="realServerRegionInfos")
    def real_server_region_infos(self) -> Sequence['outputs.GetProxyDetailProxyDetailRealServerRegionInfoResult']:
        return pulumi.get(self, "real_server_region_infos")

    @property
    @pulumi.getter(name="relatedGlobalDomains")
    def related_global_domains(self) -> Sequence[str]:
        return pulumi.get(self, "related_global_domains")

    @property
    @pulumi.getter
    def scalarable(self) -> int:
        return pulumi.get(self, "scalarable")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportProtocols")
    def support_protocols(self) -> Sequence[str]:
        return pulumi.get(self, "support_protocols")

    @property
    @pulumi.getter(name="supportSecurity")
    def support_security(self) -> int:
        return pulumi.get(self, "support_security")

    @property
    @pulumi.getter(name="tagSets")
    def tag_sets(self) -> Sequence['outputs.GetProxyDetailProxyDetailTagSetResult']:
        return pulumi.get(self, "tag_sets")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProxyDetailProxyDetailAccessRegionInfoResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetProxyDetailProxyDetailAccessRegionInfoSupportFeatureResult']):
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetProxyDetailProxyDetailAccessRegionInfoSupportFeatureResult']:
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetProxyDetailProxyDetailAccessRegionInfoSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetProxyDetailProxyDetailIpListResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 ip: str,
                 provider: str):
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def provider(self) -> str:
        return pulumi.get(self, "provider")


@pulumi.output_type
class GetProxyDetailProxyDetailRealServerRegionInfoResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetProxyDetailProxyDetailRealServerRegionInfoSupportFeatureResult']):
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetProxyDetailProxyDetailRealServerRegionInfoSupportFeatureResult']:
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetProxyDetailProxyDetailRealServerRegionInfoSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetProxyDetailProxyDetailTagSetResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetProxyGroupStatisticsStatisticsDataResult(dict):
    def __init__(__self__, *,
                 metric_datas: Sequence['outputs.GetProxyGroupStatisticsStatisticsDataMetricDataResult'],
                 metric_name: str):
        pulumi.set(__self__, "metric_datas", metric_datas)
        pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter(name="metricDatas")
    def metric_datas(self) -> Sequence['outputs.GetProxyGroupStatisticsStatisticsDataMetricDataResult']:
        return pulumi.get(self, "metric_datas")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetProxyGroupStatisticsStatisticsDataMetricDataResult(dict):
    def __init__(__self__, *,
                 data: float,
                 time: int):
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def data(self) -> float:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def time(self) -> int:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetProxyGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProxyGroupsProxyGroupListResult(dict):
    def __init__(__self__, *,
                 create_time: int,
                 domain: str,
                 feature_bitmap: int,
                 group_id: str,
                 group_name: str,
                 http3_supported: int,
                 project_id: int,
                 proxy_type: int,
                 real_server_region_infos: Sequence['outputs.GetProxyGroupsProxyGroupListRealServerRegionInfoResult'],
                 status: str,
                 tag_sets: Sequence['outputs.GetProxyGroupsProxyGroupListTagSetResult'],
                 version: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "http3_supported", http3_supported)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "proxy_type", proxy_type)
        pulumi.set(__self__, "real_server_region_infos", real_server_region_infos)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag_sets", tag_sets)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="http3Supported")
    def http3_supported(self) -> int:
        return pulumi.get(self, "http3_supported")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="proxyType")
    def proxy_type(self) -> int:
        return pulumi.get(self, "proxy_type")

    @property
    @pulumi.getter(name="realServerRegionInfos")
    def real_server_region_infos(self) -> Sequence['outputs.GetProxyGroupsProxyGroupListRealServerRegionInfoResult']:
        return pulumi.get(self, "real_server_region_infos")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tagSets")
    def tag_sets(self) -> Sequence['outputs.GetProxyGroupsProxyGroupListTagSetResult']:
        return pulumi.get(self, "tag_sets")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProxyGroupsProxyGroupListRealServerRegionInfoResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetProxyGroupsProxyGroupListRealServerRegionInfoSupportFeatureResult']):
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetProxyGroupsProxyGroupListRealServerRegionInfoSupportFeatureResult']:
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetProxyGroupsProxyGroupListRealServerRegionInfoSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetProxyGroupsProxyGroupListTagSetResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetProxyGroupsTagSetResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetProxyStatisticsStatisticsDataResult(dict):
    def __init__(__self__, *,
                 metric_datas: Sequence['outputs.GetProxyStatisticsStatisticsDataMetricDataResult'],
                 metric_name: str):
        pulumi.set(__self__, "metric_datas", metric_datas)
        pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter(name="metricDatas")
    def metric_datas(self) -> Sequence['outputs.GetProxyStatisticsStatisticsDataMetricDataResult']:
        return pulumi.get(self, "metric_datas")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetProxyStatisticsStatisticsDataMetricDataResult(dict):
    def __init__(__self__, *,
                 data: float,
                 time: int):
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def data(self) -> float:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def time(self) -> int:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetRealServersStatusRealServerStatusSetResult(dict):
    def __init__(__self__, *,
                 bind_status: int,
                 group_id: str,
                 proxy_id: str,
                 real_server_id: str):
        pulumi.set(__self__, "bind_status", bind_status)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "real_server_id", real_server_id)

    @property
    @pulumi.getter(name="bindStatus")
    def bind_status(self) -> int:
        return pulumi.get(self, "bind_status")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="realServerId")
    def real_server_id(self) -> str:
        return pulumi.get(self, "real_server_id")


@pulumi.output_type
class GetRealserversRealserverResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 id: str,
                 ip: str,
                 name: str,
                 project_id: int,
                 tags: Mapping[str, Any]):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetRegionAndPriceBandwidthUnitPriceResult(dict):
    def __init__(__self__, *,
                 bandwidth_ranges: Sequence[int],
                 bandwidth_unit_price: float,
                 discount_bandwidth_unit_price: float):
        pulumi.set(__self__, "bandwidth_ranges", bandwidth_ranges)
        pulumi.set(__self__, "bandwidth_unit_price", bandwidth_unit_price)
        pulumi.set(__self__, "discount_bandwidth_unit_price", discount_bandwidth_unit_price)

    @property
    @pulumi.getter(name="bandwidthRanges")
    def bandwidth_ranges(self) -> Sequence[int]:
        return pulumi.get(self, "bandwidth_ranges")

    @property
    @pulumi.getter(name="bandwidthUnitPrice")
    def bandwidth_unit_price(self) -> float:
        return pulumi.get(self, "bandwidth_unit_price")

    @property
    @pulumi.getter(name="discountBandwidthUnitPrice")
    def discount_bandwidth_unit_price(self) -> float:
        return pulumi.get(self, "discount_bandwidth_unit_price")


@pulumi.output_type
class GetRegionAndPriceDestRegionSetResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetRegionAndPriceDestRegionSetSupportFeatureResult']):
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetRegionAndPriceDestRegionSetSupportFeatureResult']:
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetRegionAndPriceDestRegionSetSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetResourcesByTagResourceSetResult(dict):
    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRuleRealServersBindRealServerSetResult(dict):
    def __init__(__self__, *,
                 down_ip_lists: Sequence[str],
                 real_server_failover_role: str,
                 real_server_id: str,
                 real_server_ip: str,
                 real_server_port: int,
                 real_server_status: int,
                 real_server_weight: int):
        pulumi.set(__self__, "down_ip_lists", down_ip_lists)
        pulumi.set(__self__, "real_server_failover_role", real_server_failover_role)
        pulumi.set(__self__, "real_server_id", real_server_id)
        pulumi.set(__self__, "real_server_ip", real_server_ip)
        pulumi.set(__self__, "real_server_port", real_server_port)
        pulumi.set(__self__, "real_server_status", real_server_status)
        pulumi.set(__self__, "real_server_weight", real_server_weight)

    @property
    @pulumi.getter(name="downIpLists")
    def down_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "down_ip_lists")

    @property
    @pulumi.getter(name="realServerFailoverRole")
    def real_server_failover_role(self) -> str:
        return pulumi.get(self, "real_server_failover_role")

    @property
    @pulumi.getter(name="realServerId")
    def real_server_id(self) -> str:
        return pulumi.get(self, "real_server_id")

    @property
    @pulumi.getter(name="realServerIp")
    def real_server_ip(self) -> str:
        return pulumi.get(self, "real_server_ip")

    @property
    @pulumi.getter(name="realServerPort")
    def real_server_port(self) -> int:
        return pulumi.get(self, "real_server_port")

    @property
    @pulumi.getter(name="realServerStatus")
    def real_server_status(self) -> int:
        return pulumi.get(self, "real_server_status")

    @property
    @pulumi.getter(name="realServerWeight")
    def real_server_weight(self) -> int:
        return pulumi.get(self, "real_server_weight")


@pulumi.output_type
class GetRuleRealServersRealServerSetResult(dict):
    def __init__(__self__, *,
                 in_ban_blacklist: int,
                 project_id: int,
                 real_server_id: str,
                 real_server_ip: str,
                 real_server_name: str):
        pulumi.set(__self__, "in_ban_blacklist", in_ban_blacklist)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "real_server_id", real_server_id)
        pulumi.set(__self__, "real_server_ip", real_server_ip)
        pulumi.set(__self__, "real_server_name", real_server_name)

    @property
    @pulumi.getter(name="inBanBlacklist")
    def in_ban_blacklist(self) -> int:
        return pulumi.get(self, "in_ban_blacklist")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="realServerId")
    def real_server_id(self) -> str:
        return pulumi.get(self, "real_server_id")

    @property
    @pulumi.getter(name="realServerIp")
    def real_server_ip(self) -> str:
        return pulumi.get(self, "real_server_ip")

    @property
    @pulumi.getter(name="realServerName")
    def real_server_name(self) -> str:
        return pulumi.get(self, "real_server_name")


@pulumi.output_type
class GetSecurityRulesRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 id: str,
                 name: str,
                 port: str,
                 protocol: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


