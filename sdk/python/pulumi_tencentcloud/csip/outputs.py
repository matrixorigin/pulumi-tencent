# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RiskCenterAsset',
    'RiskCenterTaskAdvanceCfg',
    'RiskCenterTaskAdvanceCfgCfgRisk',
    'RiskCenterTaskAdvanceCfgPortRisk',
    'RiskCenterTaskAdvanceCfgVulRisk',
    'RiskCenterTaskAdvanceCfgWeakPwdRisk',
]

@pulumi.output_type
class RiskCenterAsset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assetName":
            suggest = "asset_name"
        elif key == "assetType":
            suggest = "asset_type"
        elif key == "instanceType":
            suggest = "instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RiskCenterAsset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RiskCenterAsset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RiskCenterAsset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 asset: Optional[str] = None,
                 asset_name: Optional[str] = None,
                 asset_type: Optional[str] = None,
                 instance_type: Optional[str] = None,
                 region: Optional[str] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if asset_name is not None:
            pulumi.set(__self__, "asset_name", asset_name)
        if asset_type is not None:
            pulumi.set(__self__, "asset_type", asset_type)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def asset(self) -> Optional[str]:
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter(name="assetName")
    def asset_name(self) -> Optional[str]:
        return pulumi.get(self, "asset_name")

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> Optional[str]:
        return pulumi.get(self, "asset_type")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class RiskCenterTaskAdvanceCfg(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cfgRisks":
            suggest = "cfg_risks"
        elif key == "portRisks":
            suggest = "port_risks"
        elif key == "vulRisks":
            suggest = "vul_risks"
        elif key == "weakPwdRisks":
            suggest = "weak_pwd_risks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RiskCenterTaskAdvanceCfg. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RiskCenterTaskAdvanceCfg.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RiskCenterTaskAdvanceCfg.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cfg_risks: Optional[Sequence['outputs.RiskCenterTaskAdvanceCfgCfgRisk']] = None,
                 port_risks: Optional[Sequence['outputs.RiskCenterTaskAdvanceCfgPortRisk']] = None,
                 vul_risks: Optional[Sequence['outputs.RiskCenterTaskAdvanceCfgVulRisk']] = None,
                 weak_pwd_risks: Optional[Sequence['outputs.RiskCenterTaskAdvanceCfgWeakPwdRisk']] = None):
        if cfg_risks is not None:
            pulumi.set(__self__, "cfg_risks", cfg_risks)
        if port_risks is not None:
            pulumi.set(__self__, "port_risks", port_risks)
        if vul_risks is not None:
            pulumi.set(__self__, "vul_risks", vul_risks)
        if weak_pwd_risks is not None:
            pulumi.set(__self__, "weak_pwd_risks", weak_pwd_risks)

    @property
    @pulumi.getter(name="cfgRisks")
    def cfg_risks(self) -> Optional[Sequence['outputs.RiskCenterTaskAdvanceCfgCfgRisk']]:
        return pulumi.get(self, "cfg_risks")

    @property
    @pulumi.getter(name="portRisks")
    def port_risks(self) -> Optional[Sequence['outputs.RiskCenterTaskAdvanceCfgPortRisk']]:
        return pulumi.get(self, "port_risks")

    @property
    @pulumi.getter(name="vulRisks")
    def vul_risks(self) -> Optional[Sequence['outputs.RiskCenterTaskAdvanceCfgVulRisk']]:
        return pulumi.get(self, "vul_risks")

    @property
    @pulumi.getter(name="weakPwdRisks")
    def weak_pwd_risks(self) -> Optional[Sequence['outputs.RiskCenterTaskAdvanceCfgWeakPwdRisk']]:
        return pulumi.get(self, "weak_pwd_risks")


@pulumi.output_type
class RiskCenterTaskAdvanceCfgCfgRisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "itemId":
            suggest = "item_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RiskCenterTaskAdvanceCfgCfgRisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RiskCenterTaskAdvanceCfgCfgRisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RiskCenterTaskAdvanceCfgCfgRisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: int,
                 item_id: str,
                 resource_type: str):
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "item_id", item_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def enable(self) -> int:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> str:
        return pulumi.get(self, "item_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class RiskCenterTaskAdvanceCfgPortRisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkType":
            suggest = "check_type"
        elif key == "portSets":
            suggest = "port_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RiskCenterTaskAdvanceCfgPortRisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RiskCenterTaskAdvanceCfgPortRisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RiskCenterTaskAdvanceCfgPortRisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_type: int,
                 detail: str,
                 enable: int,
                 port_sets: str):
        pulumi.set(__self__, "check_type", check_type)
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "port_sets", port_sets)

    @property
    @pulumi.getter(name="checkType")
    def check_type(self) -> int:
        return pulumi.get(self, "check_type")

    @property
    @pulumi.getter
    def detail(self) -> str:
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter
    def enable(self) -> int:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="portSets")
    def port_sets(self) -> str:
        return pulumi.get(self, "port_sets")


@pulumi.output_type
class RiskCenterTaskAdvanceCfgVulRisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "riskId":
            suggest = "risk_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RiskCenterTaskAdvanceCfgVulRisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RiskCenterTaskAdvanceCfgVulRisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RiskCenterTaskAdvanceCfgVulRisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: int,
                 risk_id: str):
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "risk_id", risk_id)

    @property
    @pulumi.getter
    def enable(self) -> int:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="riskId")
    def risk_id(self) -> str:
        return pulumi.get(self, "risk_id")


@pulumi.output_type
class RiskCenterTaskAdvanceCfgWeakPwdRisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkItemId":
            suggest = "check_item_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RiskCenterTaskAdvanceCfgWeakPwdRisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RiskCenterTaskAdvanceCfgWeakPwdRisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RiskCenterTaskAdvanceCfgWeakPwdRisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_item_id: int,
                 enable: int):
        pulumi.set(__self__, "check_item_id", check_item_id)
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="checkItemId")
    def check_item_id(self) -> int:
        return pulumi.get(self, "check_item_id")

    @property
    @pulumi.getter
    def enable(self) -> int:
        return pulumi.get(self, "enable")


