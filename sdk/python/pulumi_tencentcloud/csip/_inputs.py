# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'RiskCenterAssetArgs',
    'RiskCenterTaskAdvanceCfgArgs',
    'RiskCenterTaskAdvanceCfgCfgRiskArgs',
    'RiskCenterTaskAdvanceCfgPortRiskArgs',
    'RiskCenterTaskAdvanceCfgVulRiskArgs',
    'RiskCenterTaskAdvanceCfgWeakPwdRiskArgs',
]

@pulumi.input_type
class RiskCenterAssetArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 asset: Optional[pulumi.Input[str]] = None,
                 asset_name: Optional[pulumi.Input[str]] = None,
                 asset_type: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if asset_name is not None:
            pulumi.set(__self__, "asset_name", asset_name)
        if asset_type is not None:
            pulumi.set(__self__, "asset_type", asset_type)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter(name="assetName")
    def asset_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asset_name")

    @asset_name.setter
    def asset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_name", value)

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asset_type")

    @asset_type.setter
    def asset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_type", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class RiskCenterTaskAdvanceCfgArgs:
    def __init__(__self__, *,
                 cfg_risks: Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgCfgRiskArgs']]]] = None,
                 port_risks: Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgPortRiskArgs']]]] = None,
                 vul_risks: Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgVulRiskArgs']]]] = None,
                 weak_pwd_risks: Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgWeakPwdRiskArgs']]]] = None):
        if cfg_risks is not None:
            pulumi.set(__self__, "cfg_risks", cfg_risks)
        if port_risks is not None:
            pulumi.set(__self__, "port_risks", port_risks)
        if vul_risks is not None:
            pulumi.set(__self__, "vul_risks", vul_risks)
        if weak_pwd_risks is not None:
            pulumi.set(__self__, "weak_pwd_risks", weak_pwd_risks)

    @property
    @pulumi.getter(name="cfgRisks")
    def cfg_risks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgCfgRiskArgs']]]]:
        return pulumi.get(self, "cfg_risks")

    @cfg_risks.setter
    def cfg_risks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgCfgRiskArgs']]]]):
        pulumi.set(self, "cfg_risks", value)

    @property
    @pulumi.getter(name="portRisks")
    def port_risks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgPortRiskArgs']]]]:
        return pulumi.get(self, "port_risks")

    @port_risks.setter
    def port_risks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgPortRiskArgs']]]]):
        pulumi.set(self, "port_risks", value)

    @property
    @pulumi.getter(name="vulRisks")
    def vul_risks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgVulRiskArgs']]]]:
        return pulumi.get(self, "vul_risks")

    @vul_risks.setter
    def vul_risks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgVulRiskArgs']]]]):
        pulumi.set(self, "vul_risks", value)

    @property
    @pulumi.getter(name="weakPwdRisks")
    def weak_pwd_risks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgWeakPwdRiskArgs']]]]:
        return pulumi.get(self, "weak_pwd_risks")

    @weak_pwd_risks.setter
    def weak_pwd_risks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RiskCenterTaskAdvanceCfgWeakPwdRiskArgs']]]]):
        pulumi.set(self, "weak_pwd_risks", value)


@pulumi.input_type
class RiskCenterTaskAdvanceCfgCfgRiskArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[int],
                 item_id: pulumi.Input[str],
                 resource_type: pulumi.Input[str]):
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "item_id", item_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[int]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "item_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class RiskCenterTaskAdvanceCfgPortRiskArgs:
    def __init__(__self__, *,
                 check_type: pulumi.Input[int],
                 detail: pulumi.Input[str],
                 enable: pulumi.Input[int],
                 port_sets: pulumi.Input[str]):
        pulumi.set(__self__, "check_type", check_type)
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "port_sets", port_sets)

    @property
    @pulumi.getter(name="checkType")
    def check_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "check_type")

    @check_type.setter
    def check_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "check_type", value)

    @property
    @pulumi.getter
    def detail(self) -> pulumi.Input[str]:
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: pulumi.Input[str]):
        pulumi.set(self, "detail", value)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[int]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="portSets")
    def port_sets(self) -> pulumi.Input[str]:
        return pulumi.get(self, "port_sets")

    @port_sets.setter
    def port_sets(self, value: pulumi.Input[str]):
        pulumi.set(self, "port_sets", value)


@pulumi.input_type
class RiskCenterTaskAdvanceCfgVulRiskArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[int],
                 risk_id: pulumi.Input[str]):
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "risk_id", risk_id)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[int]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="riskId")
    def risk_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "risk_id")

    @risk_id.setter
    def risk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "risk_id", value)


@pulumi.input_type
class RiskCenterTaskAdvanceCfgWeakPwdRiskArgs:
    def __init__(__self__, *,
                 check_item_id: pulumi.Input[int],
                 enable: pulumi.Input[int]):
        pulumi.set(__self__, "check_item_id", check_item_id)
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="checkItemId")
    def check_item_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "check_item_id")

    @check_item_id.setter
    def check_item_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "check_item_id", value)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[int]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable", value)


