# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'JobConfigClazzLevel',
    'JobConfigExpertModeConfiguration',
    'JobConfigExpertModeConfigurationJobGraph',
    'JobConfigExpertModeConfigurationJobGraphEdge',
    'JobConfigExpertModeConfigurationJobGraphNode',
    'JobConfigExpertModeConfigurationNodeConfig',
    'JobConfigExpertModeConfigurationNodeConfigConfiguration',
    'JobConfigExpertModeConfigurationSlotSharingGroup',
    'JobConfigExpertModeConfigurationSlotSharingGroupSpec',
    'JobConfigProperty',
    'JobConfigResourceRef',
    'ResourceConfigResourceLoc',
    'ResourceConfigResourceLocParam',
    'ResourceResourceLoc',
    'ResourceResourceLocParam',
    'RunJobRunJobDescription',
    'StopJobStopJobDescription',
    'GetClustersClusterSetResult',
    'GetClustersClusterSetCcnResult',
    'GetClustersClusterSetClusterSessionResult',
    'GetClustersClusterSetCorrelationResult',
    'GetClustersClusterSetOrderResult',
    'GetClustersClusterSetSqlGatewayResult',
    'GetClustersClusterSetSqlGatewayPropertyResult',
    'GetClustersClusterSetSqlGatewayResourceRefResult',
    'GetClustersClusterSetTagResult',
    'GetClustersClusterSetVersionResult',
    'GetClustersFilterResult',
    'GetJobEventsEventResult',
    'GetJobSubmissionLogJobInstanceListResult',
    'GetJobSubmissionLogLogContentListResult',
    'GetResourceRelatedJobRefJobInfoResult',
    'GetSavepointListSavepointResult',
    'GetSystemResourceFilterResult',
    'GetSystemResourceResourceSetResult',
    'GetTreeJobsFilterResult',
    'GetTreeJobsTreeInfoResult',
    'GetTreeJobsTreeInfoJobSetResult',
    'GetTreeResourcesTreeInfoResult',
    'GetTreeResourcesTreeInfoItemResult',
    'GetTreeResourcesTreeInfoItemRefJobStatusCountSetResult',
    'GetWorkSpacesFilterResult',
    'GetWorkSpacesWorkSpaceSetItemResult',
    'GetWorkSpacesWorkSpaceSetItemClusterGroupSetItemResult',
    'GetWorkSpacesWorkSpaceSetItemRoleAuthResult',
]

@pulumi.output_type
class JobConfigClazzLevel(dict):
    def __init__(__self__, *,
                 clazz: str,
                 level: str):
        pulumi.set(__self__, "clazz", clazz)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def clazz(self) -> str:
        return pulumi.get(self, "clazz")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")


@pulumi.output_type
class JobConfigExpertModeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobGraph":
            suggest = "job_graph"
        elif key == "nodeConfigs":
            suggest = "node_configs"
        elif key == "slotSharingGroups":
            suggest = "slot_sharing_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobConfigExpertModeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobConfigExpertModeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobConfigExpertModeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_graph: Optional['outputs.JobConfigExpertModeConfigurationJobGraph'] = None,
                 node_configs: Optional[Sequence['outputs.JobConfigExpertModeConfigurationNodeConfig']] = None,
                 slot_sharing_groups: Optional[Sequence['outputs.JobConfigExpertModeConfigurationSlotSharingGroup']] = None):
        if job_graph is not None:
            pulumi.set(__self__, "job_graph", job_graph)
        if node_configs is not None:
            pulumi.set(__self__, "node_configs", node_configs)
        if slot_sharing_groups is not None:
            pulumi.set(__self__, "slot_sharing_groups", slot_sharing_groups)

    @property
    @pulumi.getter(name="jobGraph")
    def job_graph(self) -> Optional['outputs.JobConfigExpertModeConfigurationJobGraph']:
        return pulumi.get(self, "job_graph")

    @property
    @pulumi.getter(name="nodeConfigs")
    def node_configs(self) -> Optional[Sequence['outputs.JobConfigExpertModeConfigurationNodeConfig']]:
        return pulumi.get(self, "node_configs")

    @property
    @pulumi.getter(name="slotSharingGroups")
    def slot_sharing_groups(self) -> Optional[Sequence['outputs.JobConfigExpertModeConfigurationSlotSharingGroup']]:
        return pulumi.get(self, "slot_sharing_groups")


@pulumi.output_type
class JobConfigExpertModeConfigurationJobGraph(dict):
    def __init__(__self__, *,
                 edges: Optional[Sequence['outputs.JobConfigExpertModeConfigurationJobGraphEdge']] = None,
                 nodes: Optional[Sequence['outputs.JobConfigExpertModeConfigurationJobGraphNode']] = None):
        if edges is not None:
            pulumi.set(__self__, "edges", edges)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter
    def edges(self) -> Optional[Sequence['outputs.JobConfigExpertModeConfigurationJobGraphEdge']]:
        return pulumi.get(self, "edges")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.JobConfigExpertModeConfigurationJobGraphNode']]:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class JobConfigExpertModeConfigurationJobGraphEdge(dict):
    def __init__(__self__, *,
                 source: int,
                 target: int):
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def source(self) -> int:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> int:
        return pulumi.get(self, "target")


@pulumi.output_type
class JobConfigExpertModeConfigurationJobGraphNode(dict):
    def __init__(__self__, *,
                 description: str,
                 id: int,
                 name: str,
                 parallelism: int):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parallelism", parallelism)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parallelism(self) -> int:
        return pulumi.get(self, "parallelism")


@pulumi.output_type
class JobConfigExpertModeConfigurationNodeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotSharingGroup":
            suggest = "slot_sharing_group"
        elif key == "stateTtl":
            suggest = "state_ttl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobConfigExpertModeConfigurationNodeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobConfigExpertModeConfigurationNodeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobConfigExpertModeConfigurationNodeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: int,
                 configurations: Optional[Sequence['outputs.JobConfigExpertModeConfigurationNodeConfigConfiguration']] = None,
                 parallelism: Optional[int] = None,
                 slot_sharing_group: Optional[str] = None,
                 state_ttl: Optional[str] = None):
        pulumi.set(__self__, "id", id)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if slot_sharing_group is not None:
            pulumi.set(__self__, "slot_sharing_group", slot_sharing_group)
        if state_ttl is not None:
            pulumi.set(__self__, "state_ttl", state_ttl)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.JobConfigExpertModeConfigurationNodeConfigConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[int]:
        return pulumi.get(self, "parallelism")

    @property
    @pulumi.getter(name="slotSharingGroup")
    def slot_sharing_group(self) -> Optional[str]:
        return pulumi.get(self, "slot_sharing_group")

    @property
    @pulumi.getter(name="stateTtl")
    def state_ttl(self) -> Optional[str]:
        return pulumi.get(self, "state_ttl")


@pulumi.output_type
class JobConfigExpertModeConfigurationNodeConfigConfiguration(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class JobConfigExpertModeConfigurationSlotSharingGroup(dict):
    def __init__(__self__, *,
                 name: str,
                 spec: 'outputs.JobConfigExpertModeConfigurationSlotSharingGroupSpec',
                 description: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "spec", spec)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.JobConfigExpertModeConfigurationSlotSharingGroupSpec':
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class JobConfigExpertModeConfigurationSlotSharingGroupSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "heapMemory":
            suggest = "heap_memory"
        elif key == "managedMemory":
            suggest = "managed_memory"
        elif key == "offHeapMemory":
            suggest = "off_heap_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobConfigExpertModeConfigurationSlotSharingGroupSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobConfigExpertModeConfigurationSlotSharingGroupSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobConfigExpertModeConfigurationSlotSharingGroupSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: float,
                 heap_memory: str,
                 managed_memory: Optional[str] = None,
                 off_heap_memory: Optional[str] = None):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "heap_memory", heap_memory)
        if managed_memory is not None:
            pulumi.set(__self__, "managed_memory", managed_memory)
        if off_heap_memory is not None:
            pulumi.set(__self__, "off_heap_memory", off_heap_memory)

    @property
    @pulumi.getter
    def cpu(self) -> float:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="heapMemory")
    def heap_memory(self) -> str:
        return pulumi.get(self, "heap_memory")

    @property
    @pulumi.getter(name="managedMemory")
    def managed_memory(self) -> Optional[str]:
        return pulumi.get(self, "managed_memory")

    @property
    @pulumi.getter(name="offHeapMemory")
    def off_heap_memory(self) -> Optional[str]:
        return pulumi.get(self, "off_heap_memory")


@pulumi.output_type
class JobConfigProperty(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class JobConfigResourceRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobConfigResourceRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobConfigResourceRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobConfigResourceRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: str,
                 type: int,
                 version: int):
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class ResourceConfigResourceLoc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceConfigResourceLoc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceConfigResourceLoc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceConfigResourceLoc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param: 'outputs.ResourceConfigResourceLocParam',
                 storage_type: int):
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def param(self) -> 'outputs.ResourceConfigResourceLocParam':
        return pulumi.get(self, "param")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> int:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class ResourceConfigResourceLocParam(dict):
    def __init__(__self__, *,
                 bucket: str,
                 path: str,
                 region: Optional[str] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "path", path)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class ResourceResourceLoc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceResourceLoc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceResourceLoc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceResourceLoc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param: 'outputs.ResourceResourceLocParam',
                 storage_type: int):
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def param(self) -> 'outputs.ResourceResourceLocParam':
        return pulumi.get(self, "param")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> int:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class ResourceResourceLocParam(dict):
    def __init__(__self__, *,
                 bucket: str,
                 path: str,
                 region: Optional[str] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "path", path)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class RunJobRunJobDescription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobId":
            suggest = "job_id"
        elif key == "runType":
            suggest = "run_type"
        elif key == "customTimestamp":
            suggest = "custom_timestamp"
        elif key == "jobConfigVersion":
            suggest = "job_config_version"
        elif key == "savepointId":
            suggest = "savepoint_id"
        elif key == "savepointPath":
            suggest = "savepoint_path"
        elif key == "startMode":
            suggest = "start_mode"
        elif key == "useOldSystemConnector":
            suggest = "use_old_system_connector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunJobRunJobDescription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunJobRunJobDescription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunJobRunJobDescription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_id: str,
                 run_type: int,
                 custom_timestamp: Optional[int] = None,
                 job_config_version: Optional[int] = None,
                 savepoint_id: Optional[str] = None,
                 savepoint_path: Optional[str] = None,
                 start_mode: Optional[str] = None,
                 use_old_system_connector: Optional[bool] = None):
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "run_type", run_type)
        if custom_timestamp is not None:
            pulumi.set(__self__, "custom_timestamp", custom_timestamp)
        if job_config_version is not None:
            pulumi.set(__self__, "job_config_version", job_config_version)
        if savepoint_id is not None:
            pulumi.set(__self__, "savepoint_id", savepoint_id)
        if savepoint_path is not None:
            pulumi.set(__self__, "savepoint_path", savepoint_path)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)
        if use_old_system_connector is not None:
            pulumi.set(__self__, "use_old_system_connector", use_old_system_connector)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> int:
        return pulumi.get(self, "run_type")

    @property
    @pulumi.getter(name="customTimestamp")
    def custom_timestamp(self) -> Optional[int]:
        return pulumi.get(self, "custom_timestamp")

    @property
    @pulumi.getter(name="jobConfigVersion")
    def job_config_version(self) -> Optional[int]:
        return pulumi.get(self, "job_config_version")

    @property
    @pulumi.getter(name="savepointId")
    def savepoint_id(self) -> Optional[str]:
        return pulumi.get(self, "savepoint_id")

    @property
    @pulumi.getter(name="savepointPath")
    def savepoint_path(self) -> Optional[str]:
        return pulumi.get(self, "savepoint_path")

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[str]:
        return pulumi.get(self, "start_mode")

    @property
    @pulumi.getter(name="useOldSystemConnector")
    def use_old_system_connector(self) -> Optional[bool]:
        return pulumi.get(self, "use_old_system_connector")


@pulumi.output_type
class StopJobStopJobDescription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobId":
            suggest = "job_id"
        elif key == "stopType":
            suggest = "stop_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StopJobStopJobDescription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StopJobStopJobDescription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StopJobStopJobDescription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_id: str,
                 stop_type: int):
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "stop_type", stop_type)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="stopType")
    def stop_type(self) -> int:
        return pulumi.get(self, "stop_type")


@pulumi.output_type
class GetClustersClusterSetResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 arch_generation: int,
                 auto_renew_flag: int,
                 ccns: Sequence['outputs.GetClustersClusterSetCcnResult'],
                 cls_log_name: str,
                 cls_log_set: str,
                 cls_topic_id: str,
                 cls_topic_name: str,
                 cluster_id: str,
                 cluster_sessions: Sequence['outputs.GetClustersClusterSetClusterSessionResult'],
                 cluster_type: int,
                 correlations: Sequence['outputs.GetClustersClusterSetCorrelationResult'],
                 create_time: str,
                 creator_uin: str,
                 cu_mem: int,
                 cu_num: int,
                 customized_dns_enabled: int,
                 default_cos_bucket: str,
                 default_log_collect_conf: str,
                 expire_time: str,
                 free_cu: float,
                 free_cu_num: int,
                 is_need_manage_node: int,
                 isolated_time: str,
                 name: str,
                 net_environment_type: int,
                 orders: Sequence['outputs.GetClustersClusterSetOrderResult'],
                 owner_uin: str,
                 pay_mode: int,
                 region: str,
                 remark: str,
                 running_cu: float,
                 seconds_until_expiry: str,
                 sql_gateways: Sequence['outputs.GetClustersClusterSetSqlGatewayResult'],
                 status: int,
                 status_desc: str,
                 tags: Sequence['outputs.GetClustersClusterSetTagResult'],
                 update_time: str,
                 versions: Sequence['outputs.GetClustersClusterSetVersionResult'],
                 zone: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "arch_generation", arch_generation)
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "ccns", ccns)
        pulumi.set(__self__, "cls_log_name", cls_log_name)
        pulumi.set(__self__, "cls_log_set", cls_log_set)
        pulumi.set(__self__, "cls_topic_id", cls_topic_id)
        pulumi.set(__self__, "cls_topic_name", cls_topic_name)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_sessions", cluster_sessions)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "correlations", correlations)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_uin", creator_uin)
        pulumi.set(__self__, "cu_mem", cu_mem)
        pulumi.set(__self__, "cu_num", cu_num)
        pulumi.set(__self__, "customized_dns_enabled", customized_dns_enabled)
        pulumi.set(__self__, "default_cos_bucket", default_cos_bucket)
        pulumi.set(__self__, "default_log_collect_conf", default_log_collect_conf)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "free_cu", free_cu)
        pulumi.set(__self__, "free_cu_num", free_cu_num)
        pulumi.set(__self__, "is_need_manage_node", is_need_manage_node)
        pulumi.set(__self__, "isolated_time", isolated_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "net_environment_type", net_environment_type)
        pulumi.set(__self__, "orders", orders)
        pulumi.set(__self__, "owner_uin", owner_uin)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "running_cu", running_cu)
        pulumi.set(__self__, "seconds_until_expiry", seconds_until_expiry)
        pulumi.set(__self__, "sql_gateways", sql_gateways)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "versions", versions)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="archGeneration")
    def arch_generation(self) -> int:
        return pulumi.get(self, "arch_generation")

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter
    def ccns(self) -> Sequence['outputs.GetClustersClusterSetCcnResult']:
        return pulumi.get(self, "ccns")

    @property
    @pulumi.getter(name="clsLogName")
    def cls_log_name(self) -> str:
        return pulumi.get(self, "cls_log_name")

    @property
    @pulumi.getter(name="clsLogSet")
    def cls_log_set(self) -> str:
        return pulumi.get(self, "cls_log_set")

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> str:
        return pulumi.get(self, "cls_topic_id")

    @property
    @pulumi.getter(name="clsTopicName")
    def cls_topic_name(self) -> str:
        return pulumi.get(self, "cls_topic_name")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterSessions")
    def cluster_sessions(self) -> Sequence['outputs.GetClustersClusterSetClusterSessionResult']:
        return pulumi.get(self, "cluster_sessions")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> int:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def correlations(self) -> Sequence['outputs.GetClustersClusterSetCorrelationResult']:
        return pulumi.get(self, "correlations")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> str:
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter(name="cuMem")
    def cu_mem(self) -> int:
        return pulumi.get(self, "cu_mem")

    @property
    @pulumi.getter(name="cuNum")
    def cu_num(self) -> int:
        return pulumi.get(self, "cu_num")

    @property
    @pulumi.getter(name="customizedDnsEnabled")
    def customized_dns_enabled(self) -> int:
        return pulumi.get(self, "customized_dns_enabled")

    @property
    @pulumi.getter(name="defaultCosBucket")
    def default_cos_bucket(self) -> str:
        return pulumi.get(self, "default_cos_bucket")

    @property
    @pulumi.getter(name="defaultLogCollectConf")
    def default_log_collect_conf(self) -> str:
        return pulumi.get(self, "default_log_collect_conf")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="freeCu")
    def free_cu(self) -> float:
        return pulumi.get(self, "free_cu")

    @property
    @pulumi.getter(name="freeCuNum")
    def free_cu_num(self) -> int:
        return pulumi.get(self, "free_cu_num")

    @property
    @pulumi.getter(name="isNeedManageNode")
    def is_need_manage_node(self) -> int:
        return pulumi.get(self, "is_need_manage_node")

    @property
    @pulumi.getter(name="isolatedTime")
    def isolated_time(self) -> str:
        return pulumi.get(self, "isolated_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="netEnvironmentType")
    def net_environment_type(self) -> int:
        return pulumi.get(self, "net_environment_type")

    @property
    @pulumi.getter
    def orders(self) -> Sequence['outputs.GetClustersClusterSetOrderResult']:
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> str:
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="runningCu")
    def running_cu(self) -> float:
        return pulumi.get(self, "running_cu")

    @property
    @pulumi.getter(name="secondsUntilExpiry")
    def seconds_until_expiry(self) -> str:
        return pulumi.get(self, "seconds_until_expiry")

    @property
    @pulumi.getter(name="sqlGateways")
    def sql_gateways(self) -> Sequence['outputs.GetClustersClusterSetSqlGatewayResult']:
        return pulumi.get(self, "sql_gateways")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetClustersClusterSetTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.GetClustersClusterSetVersionResult']:
        return pulumi.get(self, "versions")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetClustersClusterSetCcnResult(dict):
    def __init__(__self__, *,
                 ccn_id: str,
                 subnet_id: str,
                 vpc_id: str):
        pulumi.set(__self__, "ccn_id", ccn_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> str:
        return pulumi.get(self, "ccn_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetClustersClusterSetClusterSessionResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetClustersClusterSetCorrelationResult(dict):
    def __init__(__self__, *,
                 cluster_group_id: int,
                 cluster_group_serial_id: str,
                 cluster_name: str,
                 project_id: int,
                 project_id_str: str,
                 status: int,
                 work_space_id: str,
                 work_space_name: str):
        pulumi.set(__self__, "cluster_group_id", cluster_group_id)
        pulumi.set(__self__, "cluster_group_serial_id", cluster_group_serial_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_id_str", project_id_str)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "work_space_id", work_space_id)
        pulumi.set(__self__, "work_space_name", work_space_name)

    @property
    @pulumi.getter(name="clusterGroupId")
    def cluster_group_id(self) -> int:
        return pulumi.get(self, "cluster_group_id")

    @property
    @pulumi.getter(name="clusterGroupSerialId")
    def cluster_group_serial_id(self) -> str:
        return pulumi.get(self, "cluster_group_serial_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectIdStr")
    def project_id_str(self) -> str:
        return pulumi.get(self, "project_id_str")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> str:
        return pulumi.get(self, "work_space_id")

    @property
    @pulumi.getter(name="workSpaceName")
    def work_space_name(self) -> str:
        return pulumi.get(self, "work_space_name")


@pulumi.output_type
class GetClustersClusterSetOrderResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 compute_cu: int,
                 operate_uin: str,
                 order_time: str,
                 type: int):
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "compute_cu", compute_cu)
        pulumi.set(__self__, "operate_uin", operate_uin)
        pulumi.set(__self__, "order_time", order_time)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="computeCu")
    def compute_cu(self) -> int:
        return pulumi.get(self, "compute_cu")

    @property
    @pulumi.getter(name="operateUin")
    def operate_uin(self) -> str:
        return pulumi.get(self, "operate_uin")

    @property
    @pulumi.getter(name="orderTime")
    def order_time(self) -> str:
        return pulumi.get(self, "order_time")

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClustersClusterSetSqlGatewayResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 creator_uin: str,
                 cu_spec: float,
                 flink_version: str,
                 properties: Sequence['outputs.GetClustersClusterSetSqlGatewayPropertyResult'],
                 resource_refs: Sequence['outputs.GetClustersClusterSetSqlGatewayResourceRefResult'],
                 serial_id: str,
                 status: int,
                 update_time: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_uin", creator_uin)
        pulumi.set(__self__, "cu_spec", cu_spec)
        pulumi.set(__self__, "flink_version", flink_version)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "resource_refs", resource_refs)
        pulumi.set(__self__, "serial_id", serial_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> str:
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter(name="cuSpec")
    def cu_spec(self) -> float:
        return pulumi.get(self, "cu_spec")

    @property
    @pulumi.getter(name="flinkVersion")
    def flink_version(self) -> str:
        return pulumi.get(self, "flink_version")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetClustersClusterSetSqlGatewayPropertyResult']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="resourceRefs")
    def resource_refs(self) -> Sequence['outputs.GetClustersClusterSetSqlGatewayResourceRefResult']:
        return pulumi.get(self, "resource_refs")

    @property
    @pulumi.getter(name="serialId")
    def serial_id(self) -> str:
        return pulumi.get(self, "serial_id")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetClustersClusterSetSqlGatewayPropertyResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClustersClusterSetSqlGatewayResourceRefResult(dict):
    def __init__(__self__, *,
                 resource_id: str,
                 type: int,
                 version: int,
                 workspace_id: str):
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetClustersClusterSetTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetClustersClusterSetVersionResult(dict):
    def __init__(__self__, *,
                 flink: str,
                 supported_flinks: Sequence[str]):
        pulumi.set(__self__, "flink", flink)
        pulumi.set(__self__, "supported_flinks", supported_flinks)

    @property
    @pulumi.getter
    def flink(self) -> str:
        return pulumi.get(self, "flink")

    @property
    @pulumi.getter(name="supportedFlinks")
    def supported_flinks(self) -> Sequence[str]:
        return pulumi.get(self, "supported_flinks")


@pulumi.output_type
class GetClustersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetJobEventsEventResult(dict):
    def __init__(__self__, *,
                 description: str,
                 message: str,
                 running_order_id: int,
                 solution_link: str,
                 timestamp: int,
                 type: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "running_order_id", running_order_id)
        pulumi.set(__self__, "solution_link", solution_link)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="runningOrderId")
    def running_order_id(self) -> int:
        return pulumi.get(self, "running_order_id")

    @property
    @pulumi.getter(name="solutionLink")
    def solution_link(self) -> str:
        return pulumi.get(self, "solution_link")

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetJobSubmissionLogJobInstanceListResult(dict):
    def __init__(__self__, *,
                 job_instance_start_time: str,
                 running_order_id: int,
                 starting_millis: int):
        pulumi.set(__self__, "job_instance_start_time", job_instance_start_time)
        pulumi.set(__self__, "running_order_id", running_order_id)
        pulumi.set(__self__, "starting_millis", starting_millis)

    @property
    @pulumi.getter(name="jobInstanceStartTime")
    def job_instance_start_time(self) -> str:
        return pulumi.get(self, "job_instance_start_time")

    @property
    @pulumi.getter(name="runningOrderId")
    def running_order_id(self) -> int:
        return pulumi.get(self, "running_order_id")

    @property
    @pulumi.getter(name="startingMillis")
    def starting_millis(self) -> int:
        return pulumi.get(self, "starting_millis")


@pulumi.output_type
class GetJobSubmissionLogLogContentListResult(dict):
    def __init__(__self__, *,
                 container_name: str,
                 log: str,
                 pkg_id: str,
                 pkg_log_id: int,
                 time: int):
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "pkg_id", pkg_id)
        pulumi.set(__self__, "pkg_log_id", pkg_log_id)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def log(self) -> str:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="pkgId")
    def pkg_id(self) -> str:
        return pulumi.get(self, "pkg_id")

    @property
    @pulumi.getter(name="pkgLogId")
    def pkg_log_id(self) -> int:
        return pulumi.get(self, "pkg_log_id")

    @property
    @pulumi.getter
    def time(self) -> int:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetResourceRelatedJobRefJobInfoResult(dict):
    def __init__(__self__, *,
                 job_config_version: int,
                 job_id: str,
                 resource_version: int):
        pulumi.set(__self__, "job_config_version", job_config_version)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "resource_version", resource_version)

    @property
    @pulumi.getter(name="jobConfigVersion")
    def job_config_version(self) -> int:
        return pulumi.get(self, "job_config_version")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> int:
        return pulumi.get(self, "resource_version")


@pulumi.output_type
class GetSavepointListSavepointResult(dict):
    def __init__(__self__, *,
                 create_time: int,
                 description: str,
                 id: int,
                 job_runtime_id: int,
                 path: str,
                 path_status: int,
                 record_type: int,
                 serial_id: str,
                 size: int,
                 status: int,
                 time_consuming: int,
                 timeout: int,
                 update_time: int,
                 version_id: int):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "job_runtime_id", job_runtime_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "path_status", path_status)
        pulumi.set(__self__, "record_type", record_type)
        pulumi.set(__self__, "serial_id", serial_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_consuming", time_consuming)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobRuntimeId")
    def job_runtime_id(self) -> int:
        return pulumi.get(self, "job_runtime_id")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathStatus")
    def path_status(self) -> int:
        return pulumi.get(self, "path_status")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> int:
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter(name="serialId")
    def serial_id(self) -> str:
        return pulumi.get(self, "serial_id")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeConsuming")
    def time_consuming(self) -> int:
        return pulumi.get(self, "time_consuming")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> int:
        return pulumi.get(self, "version_id")


@pulumi.output_type
class GetSystemResourceFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSystemResourceResourceSetResult(dict):
    def __init__(__self__, *,
                 latest_resource_config_version: int,
                 name: str,
                 region: str,
                 remark: str,
                 resource_id: str,
                 resource_type: int):
        pulumi.set(__self__, "latest_resource_config_version", latest_resource_config_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="latestResourceConfigVersion")
    def latest_resource_config_version(self) -> int:
        return pulumi.get(self, "latest_resource_config_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> int:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetTreeJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTreeJobsTreeInfoResult(dict):
    def __init__(__self__, *,
                 children: str,
                 id: str,
                 job_sets: Sequence['outputs.GetTreeJobsTreeInfoJobSetResult'],
                 name: str,
                 parent_id: str):
        pulumi.set(__self__, "children", children)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "job_sets", job_sets)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_id", parent_id)

    @property
    @pulumi.getter
    def children(self) -> str:
        return pulumi.get(self, "children")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobSets")
    def job_sets(self) -> Sequence['outputs.GetTreeJobsTreeInfoJobSetResult']:
        return pulumi.get(self, "job_sets")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> str:
        return pulumi.get(self, "parent_id")


@pulumi.output_type
class GetTreeJobsTreeInfoJobSetResult(dict):
    def __init__(__self__, *,
                 job_id: str,
                 job_type: int,
                 name: str,
                 running_cu: int,
                 status: int):
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "running_cu", running_cu)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> int:
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runningCu")
    def running_cu(self) -> int:
        return pulumi.get(self, "running_cu")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetTreeResourcesTreeInfoResult(dict):
    def __init__(__self__, *,
                 children: str,
                 id: str,
                 items: Sequence['outputs.GetTreeResourcesTreeInfoItemResult'],
                 name: str,
                 parent_id: str):
        pulumi.set(__self__, "children", children)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_id", parent_id)

    @property
    @pulumi.getter
    def children(self) -> str:
        return pulumi.get(self, "children")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetTreeResourcesTreeInfoItemResult']:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> str:
        return pulumi.get(self, "parent_id")


@pulumi.output_type
class GetTreeResourcesTreeInfoItemResult(dict):
    def __init__(__self__, *,
                 file_name: str,
                 folder_id: str,
                 name: str,
                 ref_job_status_count_sets: Sequence['outputs.GetTreeResourcesTreeInfoItemRefJobStatusCountSetResult'],
                 remark: str,
                 resource_id: str,
                 resource_type: int):
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref_job_status_count_sets", ref_job_status_count_sets)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="refJobStatusCountSets")
    def ref_job_status_count_sets(self) -> Sequence['outputs.GetTreeResourcesTreeInfoItemRefJobStatusCountSetResult']:
        return pulumi.get(self, "ref_job_status_count_sets")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> int:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetTreeResourcesTreeInfoItemRefJobStatusCountSetResult(dict):
    def __init__(__self__, *,
                 count: int,
                 job_status: int):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "job_status", job_status)

    @property
    @pulumi.getter
    def count(self) -> int:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="jobStatus")
    def job_status(self) -> int:
        return pulumi.get(self, "job_status")


@pulumi.output_type
class GetWorkSpacesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetWorkSpacesWorkSpaceSetItemResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 cluster_group_set_items: Sequence['outputs.GetWorkSpacesWorkSpaceSetItemClusterGroupSetItemResult'],
                 create_time: str,
                 creator_uin: str,
                 description: str,
                 jobs_count: int,
                 owner_uin: str,
                 region: str,
                 role_auth_count: int,
                 role_auths: Sequence['outputs.GetWorkSpacesWorkSpaceSetItemRoleAuthResult'],
                 serial_id: str,
                 status: int,
                 update_time: str,
                 work_space_id: str,
                 work_space_name: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "cluster_group_set_items", cluster_group_set_items)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_uin", creator_uin)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "jobs_count", jobs_count)
        pulumi.set(__self__, "owner_uin", owner_uin)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "role_auth_count", role_auth_count)
        pulumi.set(__self__, "role_auths", role_auths)
        pulumi.set(__self__, "serial_id", serial_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "work_space_id", work_space_id)
        pulumi.set(__self__, "work_space_name", work_space_name)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="clusterGroupSetItems")
    def cluster_group_set_items(self) -> Sequence['outputs.GetWorkSpacesWorkSpaceSetItemClusterGroupSetItemResult']:
        return pulumi.get(self, "cluster_group_set_items")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> str:
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="jobsCount")
    def jobs_count(self) -> int:
        return pulumi.get(self, "jobs_count")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> str:
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleAuthCount")
    def role_auth_count(self) -> int:
        return pulumi.get(self, "role_auth_count")

    @property
    @pulumi.getter(name="roleAuths")
    def role_auths(self) -> Sequence['outputs.GetWorkSpacesWorkSpaceSetItemRoleAuthResult']:
        return pulumi.get(self, "role_auths")

    @property
    @pulumi.getter(name="serialId")
    def serial_id(self) -> str:
        return pulumi.get(self, "serial_id")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> str:
        return pulumi.get(self, "work_space_id")

    @property
    @pulumi.getter(name="workSpaceName")
    def work_space_name(self) -> str:
        return pulumi.get(self, "work_space_name")


@pulumi.output_type
class GetWorkSpacesWorkSpaceSetItemClusterGroupSetItemResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 cluster_id: str,
                 create_time: str,
                 creator_uin: str,
                 cu_mem: int,
                 cu_num: int,
                 free_cu: float,
                 free_cu_num: int,
                 name: str,
                 net_environment_type: int,
                 owner_uin: str,
                 pay_mode: int,
                 region: str,
                 remark: str,
                 running_cu: float,
                 status: int,
                 status_desc: str,
                 update_time: str,
                 zone: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_uin", creator_uin)
        pulumi.set(__self__, "cu_mem", cu_mem)
        pulumi.set(__self__, "cu_num", cu_num)
        pulumi.set(__self__, "free_cu", free_cu)
        pulumi.set(__self__, "free_cu_num", free_cu_num)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "net_environment_type", net_environment_type)
        pulumi.set(__self__, "owner_uin", owner_uin)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "running_cu", running_cu)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> str:
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter(name="cuMem")
    def cu_mem(self) -> int:
        return pulumi.get(self, "cu_mem")

    @property
    @pulumi.getter(name="cuNum")
    def cu_num(self) -> int:
        return pulumi.get(self, "cu_num")

    @property
    @pulumi.getter(name="freeCu")
    def free_cu(self) -> float:
        return pulumi.get(self, "free_cu")

    @property
    @pulumi.getter(name="freeCuNum")
    def free_cu_num(self) -> int:
        return pulumi.get(self, "free_cu_num")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="netEnvironmentType")
    def net_environment_type(self) -> int:
        return pulumi.get(self, "net_environment_type")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> str:
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="runningCu")
    def running_cu(self) -> float:
        return pulumi.get(self, "running_cu")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetWorkSpacesWorkSpaceSetItemRoleAuthResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 auth_sub_account_uin: str,
                 create_time: str,
                 creator_uin: str,
                 id: int,
                 owner_uin: str,
                 permission: int,
                 role_name: str,
                 status: int,
                 update_time: str,
                 work_space_id: int,
                 work_space_serial_id: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "auth_sub_account_uin", auth_sub_account_uin)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_uin", creator_uin)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "owner_uin", owner_uin)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "work_space_id", work_space_id)
        pulumi.set(__self__, "work_space_serial_id", work_space_serial_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="authSubAccountUin")
    def auth_sub_account_uin(self) -> str:
        return pulumi.get(self, "auth_sub_account_uin")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> str:
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> str:
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter
    def permission(self) -> int:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> int:
        return pulumi.get(self, "work_space_id")

    @property
    @pulumi.getter(name="workSpaceSerialId")
    def work_space_serial_id(self) -> str:
        return pulumi.get(self, "work_space_serial_id")


