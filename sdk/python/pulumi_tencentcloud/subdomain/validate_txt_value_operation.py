# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ValidateTxtValueOperationArgs', 'ValidateTxtValueOperation']

@pulumi.input_type
class ValidateTxtValueOperationArgs:
    def __init__(__self__, *,
                 domain_zone: pulumi.Input[str]):
        """
        The set of arguments for constructing a ValidateTxtValueOperation resource.
        :param pulumi.Input[str] domain_zone: The subdomain to add Zone domain.
        """
        pulumi.set(__self__, "domain_zone", domain_zone)

    @property
    @pulumi.getter(name="domainZone")
    def domain_zone(self) -> pulumi.Input[str]:
        """
        The subdomain to add Zone domain.
        """
        return pulumi.get(self, "domain_zone")

    @domain_zone.setter
    def domain_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_zone", value)


@pulumi.input_type
class _ValidateTxtValueOperationState:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_zone: Optional[pulumi.Input[str]] = None,
                 record_type: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ValidateTxtValueOperation resources.
        :param pulumi.Input[str] domain: The domain name for which TXT records need to be added.
        :param pulumi.Input[str] domain_zone: The subdomain to add Zone domain.
        :param pulumi.Input[str] record_type: Record types need to be added.
        :param pulumi.Input[str] subdomain: Host records that need to be added to TXT records.
        :param pulumi.Input[str] value: The record value of the TXT record needs to be added.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_zone is not None:
            pulumi.set(__self__, "domain_zone", domain_zone)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name for which TXT records need to be added.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="domainZone")
    def domain_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The subdomain to add Zone domain.
        """
        return pulumi.get(self, "domain_zone")

    @domain_zone.setter
    def domain_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_zone", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[str]]:
        """
        Record types need to be added.
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Host records that need to be added to TXT records.
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The record value of the TXT record needs to be added.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


class ValidateTxtValueOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ValidateTxtValueOperation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_zone: The subdomain to add Zone domain.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ValidateTxtValueOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ValidateTxtValueOperation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ValidateTxtValueOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ValidateTxtValueOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ValidateTxtValueOperationArgs.__new__(ValidateTxtValueOperationArgs)

            if domain_zone is None and not opts.urn:
                raise TypeError("Missing required property 'domain_zone'")
            __props__.__dict__["domain_zone"] = domain_zone
            __props__.__dict__["domain"] = None
            __props__.__dict__["record_type"] = None
            __props__.__dict__["subdomain"] = None
            __props__.__dict__["value"] = None
        super(ValidateTxtValueOperation, __self__).__init__(
            'tencentcloud:Subdomain/validateTxtValueOperation:ValidateTxtValueOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain: Optional[pulumi.Input[str]] = None,
            domain_zone: Optional[pulumi.Input[str]] = None,
            record_type: Optional[pulumi.Input[str]] = None,
            subdomain: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[str]] = None) -> 'ValidateTxtValueOperation':
        """
        Get an existing ValidateTxtValueOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: The domain name for which TXT records need to be added.
        :param pulumi.Input[str] domain_zone: The subdomain to add Zone domain.
        :param pulumi.Input[str] record_type: Record types need to be added.
        :param pulumi.Input[str] subdomain: Host records that need to be added to TXT records.
        :param pulumi.Input[str] value: The record value of the TXT record needs to be added.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ValidateTxtValueOperationState.__new__(_ValidateTxtValueOperationState)

        __props__.__dict__["domain"] = domain
        __props__.__dict__["domain_zone"] = domain_zone
        __props__.__dict__["record_type"] = record_type
        __props__.__dict__["subdomain"] = subdomain
        __props__.__dict__["value"] = value
        return ValidateTxtValueOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        The domain name for which TXT records need to be added.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainZone")
    def domain_zone(self) -> pulumi.Output[str]:
        """
        The subdomain to add Zone domain.
        """
        return pulumi.get(self, "domain_zone")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> pulumi.Output[str]:
        """
        Record types need to be added.
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Output[str]:
        """
        Host records that need to be added to TXT records.
        """
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        """
        The record value of the TXT record needs to be added.
        """
        return pulumi.get(self, "value")

