// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Waf
{
    [TencentcloudResourceType("tencentcloud:Waf/saasDomain:SaasDomain")]
    public partial class SaasDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable active health detection, 0 represents disable and 1 represents enable.
        /// </summary>
        [Output("activeCheck")]
        public Output<int?> ActiveCheck { get; private set; } = null!;

        /// <summary>
        /// Whether to enable api safe, 1 enable, 0 disable.
        /// </summary>
        [Output("apiSafeStatus")]
        public Output<int?> ApiSafeStatus { get; private set; } = null!;

        /// <summary>
        /// Whether to enable bot, 1 enable, 0 disable.
        /// </summary>
        [Output("botStatus")]
        public Output<int?> BotStatus { get; private set; } = null!;

        /// <summary>
        /// Certificate content, When CertType=1, this parameter needs to be filled.
        /// </summary>
        [Output("cert")]
        public Output<string?> Cert { get; private set; } = null!;

        /// <summary>
        /// Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed
        /// certificate.
        /// </summary>
        [Output("certType")]
        public Output<int?> CertType { get; private set; } = null!;

        /// <summary>
        /// Encryption Suite Template, 0:default 1:Universal template 2:Security template 3:Custom template.
        /// </summary>
        [Output("cipherTemplate")]
        public Output<int?> CipherTemplate { get; private set; } = null!;

        /// <summary>
        /// Encryption Suite Information.
        /// </summary>
        [Output("ciphers")]
        public Output<ImmutableArray<int>> Ciphers { get; private set; } = null!;

        /// <summary>
        /// Whether to enable access logs, 1 enable, 0 disable.
        /// </summary>
        [Output("clsStatus")]
        public Output<int?> ClsStatus { get; private set; } = null!;

        /// <summary>
        /// Domain names that require defense.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Domain id.
        /// </summary>
        [Output("domainId")]
        public Output<string> DomainId { get; private set; } = null!;

        /// <summary>
        /// Whether redirect to https, 1 will redirect and 0 will not.
        /// </summary>
        [Output("httpsRewrite")]
        public Output<int?> HttpsRewrite { get; private set; } = null!;

        /// <summary>
        /// Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be
        /// filled.
        /// </summary>
        [Output("httpsUpstreamPort")]
        public Output<string?> HttpsUpstreamPort { get; private set; } = null!;

        /// <summary>
        /// Unique ID of Instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        /// </summary>
        [Output("ipHeaders")]
        public Output<ImmutableArray<string>> IpHeaders { get; private set; } = null!;

        /// <summary>
        /// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client
        /// IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        /// </summary>
        [Output("isCdn")]
        public Output<int?> IsCdn { get; private set; } = null!;

        /// <summary>
        /// Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
        /// </summary>
        [Output("isHttp2")]
        public Output<int?> IsHttp2 { get; private set; } = null!;

        /// <summary>
        /// Whether to enable keep-alive, 0 disable, 1 enable.
        /// </summary>
        [Output("isKeepAlive")]
        public Output<string?> IsKeepAlive { get; private set; } = null!;

        /// <summary>
        /// Is WebSocket support enabled. 1 means enabled, 0 does not.
        /// </summary>
        [Output("isWebsocket")]
        public Output<int?> IsWebsocket { get; private set; } = null!;

        /// <summary>
        /// Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
        /// </summary>
        [Output("loadBalance")]
        public Output<string?> LoadBalance { get; private set; } = null!;

        /// <summary>
        /// This field needs to be set for multiple ports in the upstream server.
        /// </summary>
        [Output("ports")]
        public Output<ImmutableArray<Outputs.SaasDomainPort>> Ports { get; private set; } = null!;

        /// <summary>
        /// Certificate key, When CertType=1, this parameter needs to be filled.
        /// </summary>
        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// 300s.
        /// </summary>
        [Output("proxyReadTimeout")]
        public Output<int?> ProxyReadTimeout { get; private set; } = null!;

        /// <summary>
        /// 300s.
        /// </summary>
        [Output("proxySendTimeout")]
        public Output<int?> ProxySendTimeout { get; private set; } = null!;

        /// <summary>
        /// When SniType=3, this parameter needs to be filled in to represent a custom host.
        /// </summary>
        [Output("sniHost")]
        public Output<string?> SniHost { get; private set; } = null!;

        /// <summary>
        /// Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host
        /// 3:enable SNI and equal customize host.
        /// </summary>
        [Output("sniType")]
        public Output<int?> SniType { get; private set; } = null!;

        /// <summary>
        /// Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
        /// </summary>
        [Output("srcLists")]
        public Output<ImmutableArray<string>> SrcLists { get; private set; } = null!;

        /// <summary>
        /// Certificate ID, When CertType=2, this parameter needs to be filled.
        /// </summary>
        [Output("sslId")]
        public Output<string?> SslId { get; private set; } = null!;

        /// <summary>
        /// Binding status between waf and LB, 0:not bind, 1:binding.
        /// </summary>
        [Output("status")]
        public Output<int?> Status { get; private set; } = null!;

        /// <summary>
        /// Version of TLS Protocol.
        /// </summary>
        [Output("tlsVersion")]
        public Output<int?> TlsVersion { get; private set; } = null!;

        /// <summary>
        /// Upstream domain, When UpstreamType=1, this parameter needs to be filled.
        /// </summary>
        [Output("upstreamDomain")]
        public Output<string?> UpstreamDomain { get; private set; } = null!;

        /// <summary>
        /// Upstream scheme for https, http or https.
        /// </summary>
        [Output("upstreamScheme")]
        public Output<string?> UpstreamScheme { get; private set; } = null!;

        /// <summary>
        /// Upstream type, 0 represents IP, 1 represents domain name.
        /// </summary>
        [Output("upstreamType")]
        public Output<int?> UpstreamType { get; private set; } = null!;

        /// <summary>
        /// Weight of each upstream.
        /// </summary>
        [Output("weights")]
        public Output<ImmutableArray<int>> Weights { get; private set; } = null!;

        /// <summary>
        /// 0:disable xff reset; 1:enable xff reset.
        /// </summary>
        [Output("xffReset")]
        public Output<int?> XffReset { get; private set; } = null!;


        /// <summary>
        /// Create a SaasDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SaasDomain(string name, SaasDomainArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Waf/saasDomain:SaasDomain", name, args ?? new SaasDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SaasDomain(string name, Input<string> id, SaasDomainState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Waf/saasDomain:SaasDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SaasDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SaasDomain Get(string name, Input<string> id, SaasDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new SaasDomain(name, id, state, options);
        }
    }

    public sealed class SaasDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable active health detection, 0 represents disable and 1 represents enable.
        /// </summary>
        [Input("activeCheck")]
        public Input<int>? ActiveCheck { get; set; }

        /// <summary>
        /// Whether to enable api safe, 1 enable, 0 disable.
        /// </summary>
        [Input("apiSafeStatus")]
        public Input<int>? ApiSafeStatus { get; set; }

        /// <summary>
        /// Whether to enable bot, 1 enable, 0 disable.
        /// </summary>
        [Input("botStatus")]
        public Input<int>? BotStatus { get; set; }

        /// <summary>
        /// Certificate content, When CertType=1, this parameter needs to be filled.
        /// </summary>
        [Input("cert")]
        public Input<string>? Cert { get; set; }

        /// <summary>
        /// Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed
        /// certificate.
        /// </summary>
        [Input("certType")]
        public Input<int>? CertType { get; set; }

        /// <summary>
        /// Encryption Suite Template, 0:default 1:Universal template 2:Security template 3:Custom template.
        /// </summary>
        [Input("cipherTemplate")]
        public Input<int>? CipherTemplate { get; set; }

        [Input("ciphers")]
        private InputList<int>? _ciphers;

        /// <summary>
        /// Encryption Suite Information.
        /// </summary>
        public InputList<int> Ciphers
        {
            get => _ciphers ?? (_ciphers = new InputList<int>());
            set => _ciphers = value;
        }

        /// <summary>
        /// Whether to enable access logs, 1 enable, 0 disable.
        /// </summary>
        [Input("clsStatus")]
        public Input<int>? ClsStatus { get; set; }

        /// <summary>
        /// Domain names that require defense.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Whether redirect to https, 1 will redirect and 0 will not.
        /// </summary>
        [Input("httpsRewrite")]
        public Input<int>? HttpsRewrite { get; set; }

        /// <summary>
        /// Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be
        /// filled.
        /// </summary>
        [Input("httpsUpstreamPort")]
        public Input<string>? HttpsUpstreamPort { get; set; }

        /// <summary>
        /// Unique ID of Instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("ipHeaders")]
        private InputList<string>? _ipHeaders;

        /// <summary>
        /// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        /// </summary>
        public InputList<string> IpHeaders
        {
            get => _ipHeaders ?? (_ipHeaders = new InputList<string>());
            set => _ipHeaders = value;
        }

        /// <summary>
        /// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client
        /// IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        /// </summary>
        [Input("isCdn")]
        public Input<int>? IsCdn { get; set; }

        /// <summary>
        /// Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
        /// </summary>
        [Input("isHttp2")]
        public Input<int>? IsHttp2 { get; set; }

        /// <summary>
        /// Whether to enable keep-alive, 0 disable, 1 enable.
        /// </summary>
        [Input("isKeepAlive")]
        public Input<string>? IsKeepAlive { get; set; }

        /// <summary>
        /// Is WebSocket support enabled. 1 means enabled, 0 does not.
        /// </summary>
        [Input("isWebsocket")]
        public Input<int>? IsWebsocket { get; set; }

        /// <summary>
        /// Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
        /// </summary>
        [Input("loadBalance")]
        public Input<string>? LoadBalance { get; set; }

        [Input("ports", required: true)]
        private InputList<Inputs.SaasDomainPortArgs>? _ports;

        /// <summary>
        /// This field needs to be set for multiple ports in the upstream server.
        /// </summary>
        public InputList<Inputs.SaasDomainPortArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<Inputs.SaasDomainPortArgs>());
            set => _ports = value;
        }

        /// <summary>
        /// Certificate key, When CertType=1, this parameter needs to be filled.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// 300s.
        /// </summary>
        [Input("proxyReadTimeout")]
        public Input<int>? ProxyReadTimeout { get; set; }

        /// <summary>
        /// 300s.
        /// </summary>
        [Input("proxySendTimeout")]
        public Input<int>? ProxySendTimeout { get; set; }

        /// <summary>
        /// When SniType=3, this parameter needs to be filled in to represent a custom host.
        /// </summary>
        [Input("sniHost")]
        public Input<string>? SniHost { get; set; }

        /// <summary>
        /// Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host
        /// 3:enable SNI and equal customize host.
        /// </summary>
        [Input("sniType")]
        public Input<int>? SniType { get; set; }

        [Input("srcLists")]
        private InputList<string>? _srcLists;

        /// <summary>
        /// Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
        /// </summary>
        public InputList<string> SrcLists
        {
            get => _srcLists ?? (_srcLists = new InputList<string>());
            set => _srcLists = value;
        }

        /// <summary>
        /// Certificate ID, When CertType=2, this parameter needs to be filled.
        /// </summary>
        [Input("sslId")]
        public Input<string>? SslId { get; set; }

        /// <summary>
        /// Binding status between waf and LB, 0:not bind, 1:binding.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        /// <summary>
        /// Version of TLS Protocol.
        /// </summary>
        [Input("tlsVersion")]
        public Input<int>? TlsVersion { get; set; }

        /// <summary>
        /// Upstream domain, When UpstreamType=1, this parameter needs to be filled.
        /// </summary>
        [Input("upstreamDomain")]
        public Input<string>? UpstreamDomain { get; set; }

        /// <summary>
        /// Upstream scheme for https, http or https.
        /// </summary>
        [Input("upstreamScheme")]
        public Input<string>? UpstreamScheme { get; set; }

        /// <summary>
        /// Upstream type, 0 represents IP, 1 represents domain name.
        /// </summary>
        [Input("upstreamType")]
        public Input<int>? UpstreamType { get; set; }

        [Input("weights")]
        private InputList<int>? _weights;

        /// <summary>
        /// Weight of each upstream.
        /// </summary>
        public InputList<int> Weights
        {
            get => _weights ?? (_weights = new InputList<int>());
            set => _weights = value;
        }

        /// <summary>
        /// 0:disable xff reset; 1:enable xff reset.
        /// </summary>
        [Input("xffReset")]
        public Input<int>? XffReset { get; set; }

        public SaasDomainArgs()
        {
        }
        public static new SaasDomainArgs Empty => new SaasDomainArgs();
    }

    public sealed class SaasDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable active health detection, 0 represents disable and 1 represents enable.
        /// </summary>
        [Input("activeCheck")]
        public Input<int>? ActiveCheck { get; set; }

        /// <summary>
        /// Whether to enable api safe, 1 enable, 0 disable.
        /// </summary>
        [Input("apiSafeStatus")]
        public Input<int>? ApiSafeStatus { get; set; }

        /// <summary>
        /// Whether to enable bot, 1 enable, 0 disable.
        /// </summary>
        [Input("botStatus")]
        public Input<int>? BotStatus { get; set; }

        /// <summary>
        /// Certificate content, When CertType=1, this parameter needs to be filled.
        /// </summary>
        [Input("cert")]
        public Input<string>? Cert { get; set; }

        /// <summary>
        /// Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed
        /// certificate.
        /// </summary>
        [Input("certType")]
        public Input<int>? CertType { get; set; }

        /// <summary>
        /// Encryption Suite Template, 0:default 1:Universal template 2:Security template 3:Custom template.
        /// </summary>
        [Input("cipherTemplate")]
        public Input<int>? CipherTemplate { get; set; }

        [Input("ciphers")]
        private InputList<int>? _ciphers;

        /// <summary>
        /// Encryption Suite Information.
        /// </summary>
        public InputList<int> Ciphers
        {
            get => _ciphers ?? (_ciphers = new InputList<int>());
            set => _ciphers = value;
        }

        /// <summary>
        /// Whether to enable access logs, 1 enable, 0 disable.
        /// </summary>
        [Input("clsStatus")]
        public Input<int>? ClsStatus { get; set; }

        /// <summary>
        /// Domain names that require defense.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Domain id.
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        /// <summary>
        /// Whether redirect to https, 1 will redirect and 0 will not.
        /// </summary>
        [Input("httpsRewrite")]
        public Input<int>? HttpsRewrite { get; set; }

        /// <summary>
        /// Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be
        /// filled.
        /// </summary>
        [Input("httpsUpstreamPort")]
        public Input<string>? HttpsUpstreamPort { get; set; }

        /// <summary>
        /// Unique ID of Instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("ipHeaders")]
        private InputList<string>? _ipHeaders;

        /// <summary>
        /// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        /// </summary>
        public InputList<string> IpHeaders
        {
            get => _ipHeaders ?? (_ipHeaders = new InputList<string>());
            set => _ipHeaders = value;
        }

        /// <summary>
        /// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client
        /// IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        /// </summary>
        [Input("isCdn")]
        public Input<int>? IsCdn { get; set; }

        /// <summary>
        /// Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
        /// </summary>
        [Input("isHttp2")]
        public Input<int>? IsHttp2 { get; set; }

        /// <summary>
        /// Whether to enable keep-alive, 0 disable, 1 enable.
        /// </summary>
        [Input("isKeepAlive")]
        public Input<string>? IsKeepAlive { get; set; }

        /// <summary>
        /// Is WebSocket support enabled. 1 means enabled, 0 does not.
        /// </summary>
        [Input("isWebsocket")]
        public Input<int>? IsWebsocket { get; set; }

        /// <summary>
        /// Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
        /// </summary>
        [Input("loadBalance")]
        public Input<string>? LoadBalance { get; set; }

        [Input("ports")]
        private InputList<Inputs.SaasDomainPortGetArgs>? _ports;

        /// <summary>
        /// This field needs to be set for multiple ports in the upstream server.
        /// </summary>
        public InputList<Inputs.SaasDomainPortGetArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<Inputs.SaasDomainPortGetArgs>());
            set => _ports = value;
        }

        /// <summary>
        /// Certificate key, When CertType=1, this parameter needs to be filled.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// 300s.
        /// </summary>
        [Input("proxyReadTimeout")]
        public Input<int>? ProxyReadTimeout { get; set; }

        /// <summary>
        /// 300s.
        /// </summary>
        [Input("proxySendTimeout")]
        public Input<int>? ProxySendTimeout { get; set; }

        /// <summary>
        /// When SniType=3, this parameter needs to be filled in to represent a custom host.
        /// </summary>
        [Input("sniHost")]
        public Input<string>? SniHost { get; set; }

        /// <summary>
        /// Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host
        /// 3:enable SNI and equal customize host.
        /// </summary>
        [Input("sniType")]
        public Input<int>? SniType { get; set; }

        [Input("srcLists")]
        private InputList<string>? _srcLists;

        /// <summary>
        /// Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
        /// </summary>
        public InputList<string> SrcLists
        {
            get => _srcLists ?? (_srcLists = new InputList<string>());
            set => _srcLists = value;
        }

        /// <summary>
        /// Certificate ID, When CertType=2, this parameter needs to be filled.
        /// </summary>
        [Input("sslId")]
        public Input<string>? SslId { get; set; }

        /// <summary>
        /// Binding status between waf and LB, 0:not bind, 1:binding.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        /// <summary>
        /// Version of TLS Protocol.
        /// </summary>
        [Input("tlsVersion")]
        public Input<int>? TlsVersion { get; set; }

        /// <summary>
        /// Upstream domain, When UpstreamType=1, this parameter needs to be filled.
        /// </summary>
        [Input("upstreamDomain")]
        public Input<string>? UpstreamDomain { get; set; }

        /// <summary>
        /// Upstream scheme for https, http or https.
        /// </summary>
        [Input("upstreamScheme")]
        public Input<string>? UpstreamScheme { get; set; }

        /// <summary>
        /// Upstream type, 0 represents IP, 1 represents domain name.
        /// </summary>
        [Input("upstreamType")]
        public Input<int>? UpstreamType { get; set; }

        [Input("weights")]
        private InputList<int>? _weights;

        /// <summary>
        /// Weight of each upstream.
        /// </summary>
        public InputList<int> Weights
        {
            get => _weights ?? (_weights = new InputList<int>());
            set => _weights = value;
        }

        /// <summary>
        /// 0:disable xff reset; 1:enable xff reset.
        /// </summary>
        [Input("xffReset")]
        public Input<int>? XffReset { get; set; }

        public SaasDomainState()
        {
        }
        public static new SaasDomainState Empty => new SaasDomainState();
    }
}
