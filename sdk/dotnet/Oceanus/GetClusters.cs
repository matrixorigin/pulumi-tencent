// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Oceanus
{
    public static class GetClusters
    {
        public static Task<GetClustersResult> InvokeAsync(GetClustersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClustersResult>("tencentcloud:Oceanus/getClusters:getClusters", args ?? new GetClustersArgs(), options.WithDefaults());

        public static Output<GetClustersResult> Invoke(GetClustersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClustersResult>("tencentcloud:Oceanus/getClusters:getClusters", args ?? new GetClustersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClustersArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private List<string>? _clusterIds;
        public List<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new List<string>());
            set => _clusterIds = value;
        }

        [Input("filters")]
        private List<Inputs.GetClustersFilterArgs>? _filters;
        public List<Inputs.GetClustersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetClustersFilterArgs>());
            set => _filters = value;
        }

        [Input("orderType")]
        public int? OrderType { get; set; }

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("workSpaceId")]
        public string? WorkSpaceId { get; set; }

        public GetClustersArgs()
        {
        }
        public static new GetClustersArgs Empty => new GetClustersArgs();
    }

    public sealed class GetClustersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private InputList<string>? _clusterIds;
        public InputList<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new InputList<string>());
            set => _clusterIds = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetClustersFilterInputArgs>? _filters;
        public InputList<Inputs.GetClustersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetClustersFilterInputArgs>());
            set => _filters = value;
        }

        [Input("orderType")]
        public Input<int>? OrderType { get; set; }

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("workSpaceId")]
        public Input<string>? WorkSpaceId { get; set; }

        public GetClustersInvokeArgs()
        {
        }
        public static new GetClustersInvokeArgs Empty => new GetClustersInvokeArgs();
    }


    [OutputType]
    public sealed class GetClustersResult
    {
        public readonly ImmutableArray<string> ClusterIds;
        public readonly ImmutableArray<Outputs.GetClustersClusterSetResult> ClusterSets;
        public readonly ImmutableArray<Outputs.GetClustersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? OrderType;
        public readonly string? ResultOutputFile;
        public readonly string? WorkSpaceId;

        [OutputConstructor]
        private GetClustersResult(
            ImmutableArray<string> clusterIds,

            ImmutableArray<Outputs.GetClustersClusterSetResult> clusterSets,

            ImmutableArray<Outputs.GetClustersFilterResult> filters,

            string id,

            int? orderType,

            string? resultOutputFile,

            string? workSpaceId)
        {
            ClusterIds = clusterIds;
            ClusterSets = clusterSets;
            Filters = filters;
            Id = id;
            OrderType = orderType;
            ResultOutputFile = resultOutputFile;
            WorkSpaceId = workSpaceId;
        }
    }
}
