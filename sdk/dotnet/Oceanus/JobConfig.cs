// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Oceanus
{
    [TencentcloudResourceType("tencentcloud:Oceanus/jobConfig:JobConfig")]
    public partial class JobConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Oceanus platform job recovery switch 1: on -1: off.
        /// </summary>
        [Output("autoRecover")]
        public Output<int?> AutoRecover { get; private set; } = null!;

        /// <summary>
        /// Class log level.
        /// </summary>
        [Output("clazzLevels")]
        public Output<ImmutableArray<Outputs.JobConfigClazzLevel>> ClazzLevels { get; private set; } = null!;

        /// <summary>
        /// CLS logset ID.
        /// </summary>
        [Output("clsLogsetId")]
        public Output<string?> ClsLogsetId { get; private set; } = null!;

        /// <summary>
        /// CLS log topic ID.
        /// </summary>
        [Output("clsTopicId")]
        public Output<string?> ClsTopicId { get; private set; } = null!;

        /// <summary>
        /// COS storage bucket name used by the job.
        /// </summary>
        [Output("cosBucket")]
        public Output<string> CosBucket { get; private set; } = null!;

        /// <summary>
        /// Job default parallelism.
        /// </summary>
        [Output("defaultParallelism")]
        public Output<int?> DefaultParallelism { get; private set; } = null!;

        /// <summary>
        /// Main class.
        /// </summary>
        [Output("entrypointClass")]
        public Output<string?> EntrypointClass { get; private set; } = null!;

        /// <summary>
        /// Expert mode configuration.
        /// </summary>
        [Output("expertModeConfiguration")]
        public Output<Outputs.JobConfigExpertModeConfiguration?> ExpertModeConfiguration { get; private set; } = null!;

        /// <summary>
        /// Whether to enable expert mode.
        /// </summary>
        [Output("expertModeOn")]
        public Output<bool?> ExpertModeOn { get; private set; } = null!;

        /// <summary>
        /// Job ID.
        /// </summary>
        [Output("jobId")]
        public Output<string> JobId { get; private set; } = null!;

        /// <summary>
        /// JobManager specification.
        /// </summary>
        [Output("jobManagerSpec")]
        public Output<double?> JobManagerSpec { get; private set; } = null!;

        /// <summary>
        /// Whether to collect job logs.
        /// </summary>
        [Output("logCollect")]
        public Output<bool?> LogCollect { get; private set; } = null!;

        /// <summary>
        /// Log collection type 2:CLS; 3:COS.
        /// </summary>
        [Output("logCollectType")]
        public Output<int?> LogCollectType { get; private set; } = null!;

        /// <summary>
        /// Log level.
        /// </summary>
        [Output("logLevel")]
        public Output<string?> LogLevel { get; private set; } = null!;

        /// <summary>
        /// Main class parameters.
        /// </summary>
        [Output("programArgs")]
        public Output<string?> ProgramArgs { get; private set; } = null!;

        /// <summary>
        /// System parameters.
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.JobConfigProperty>> Properties { get; private set; } = null!;

        /// <summary>
        /// Python version used by the pyflink job at runtime.
        /// </summary>
        [Output("pythonVersion")]
        public Output<string?> PythonVersion { get; private set; } = null!;

        /// <summary>
        /// Remarks.
        /// </summary>
        [Output("remark")]
        public Output<string?> Remark { get; private set; } = null!;

        /// <summary>
        /// Resource reference array.
        /// </summary>
        [Output("resourceRefs")]
        public Output<ImmutableArray<Outputs.JobConfigResourceRef>> ResourceRefs { get; private set; } = null!;

        /// <summary>
        /// TaskManager specification.
        /// </summary>
        [Output("taskManagerSpec")]
        public Output<double?> TaskManagerSpec { get; private set; } = null!;

        /// <summary>
        /// Workspace SerialId.
        /// </summary>
        [Output("workSpaceId")]
        public Output<string?> WorkSpaceId { get; private set; } = null!;


        /// <summary>
        /// Create a JobConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public JobConfig(string name, JobConfigArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Oceanus/jobConfig:JobConfig", name, args ?? new JobConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private JobConfig(string name, Input<string> id, JobConfigState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Oceanus/jobConfig:JobConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing JobConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static JobConfig Get(string name, Input<string> id, JobConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new JobConfig(name, id, state, options);
        }
    }

    public sealed class JobConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Oceanus platform job recovery switch 1: on -1: off.
        /// </summary>
        [Input("autoRecover")]
        public Input<int>? AutoRecover { get; set; }

        [Input("clazzLevels")]
        private InputList<Inputs.JobConfigClazzLevelArgs>? _clazzLevels;

        /// <summary>
        /// Class log level.
        /// </summary>
        public InputList<Inputs.JobConfigClazzLevelArgs> ClazzLevels
        {
            get => _clazzLevels ?? (_clazzLevels = new InputList<Inputs.JobConfigClazzLevelArgs>());
            set => _clazzLevels = value;
        }

        /// <summary>
        /// CLS logset ID.
        /// </summary>
        [Input("clsLogsetId")]
        public Input<string>? ClsLogsetId { get; set; }

        /// <summary>
        /// CLS log topic ID.
        /// </summary>
        [Input("clsTopicId")]
        public Input<string>? ClsTopicId { get; set; }

        /// <summary>
        /// COS storage bucket name used by the job.
        /// </summary>
        [Input("cosBucket")]
        public Input<string>? CosBucket { get; set; }

        /// <summary>
        /// Job default parallelism.
        /// </summary>
        [Input("defaultParallelism")]
        public Input<int>? DefaultParallelism { get; set; }

        /// <summary>
        /// Main class.
        /// </summary>
        [Input("entrypointClass")]
        public Input<string>? EntrypointClass { get; set; }

        /// <summary>
        /// Expert mode configuration.
        /// </summary>
        [Input("expertModeConfiguration")]
        public Input<Inputs.JobConfigExpertModeConfigurationArgs>? ExpertModeConfiguration { get; set; }

        /// <summary>
        /// Whether to enable expert mode.
        /// </summary>
        [Input("expertModeOn")]
        public Input<bool>? ExpertModeOn { get; set; }

        /// <summary>
        /// Job ID.
        /// </summary>
        [Input("jobId", required: true)]
        public Input<string> JobId { get; set; } = null!;

        /// <summary>
        /// JobManager specification.
        /// </summary>
        [Input("jobManagerSpec")]
        public Input<double>? JobManagerSpec { get; set; }

        /// <summary>
        /// Whether to collect job logs.
        /// </summary>
        [Input("logCollect")]
        public Input<bool>? LogCollect { get; set; }

        /// <summary>
        /// Log collection type 2:CLS; 3:COS.
        /// </summary>
        [Input("logCollectType")]
        public Input<int>? LogCollectType { get; set; }

        /// <summary>
        /// Log level.
        /// </summary>
        [Input("logLevel")]
        public Input<string>? LogLevel { get; set; }

        /// <summary>
        /// Main class parameters.
        /// </summary>
        [Input("programArgs")]
        public Input<string>? ProgramArgs { get; set; }

        [Input("properties")]
        private InputList<Inputs.JobConfigPropertyArgs>? _properties;

        /// <summary>
        /// System parameters.
        /// </summary>
        public InputList<Inputs.JobConfigPropertyArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.JobConfigPropertyArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// Python version used by the pyflink job at runtime.
        /// </summary>
        [Input("pythonVersion")]
        public Input<string>? PythonVersion { get; set; }

        /// <summary>
        /// Remarks.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        [Input("resourceRefs")]
        private InputList<Inputs.JobConfigResourceRefArgs>? _resourceRefs;

        /// <summary>
        /// Resource reference array.
        /// </summary>
        public InputList<Inputs.JobConfigResourceRefArgs> ResourceRefs
        {
            get => _resourceRefs ?? (_resourceRefs = new InputList<Inputs.JobConfigResourceRefArgs>());
            set => _resourceRefs = value;
        }

        /// <summary>
        /// TaskManager specification.
        /// </summary>
        [Input("taskManagerSpec")]
        public Input<double>? TaskManagerSpec { get; set; }

        /// <summary>
        /// Workspace SerialId.
        /// </summary>
        [Input("workSpaceId")]
        public Input<string>? WorkSpaceId { get; set; }

        public JobConfigArgs()
        {
        }
        public static new JobConfigArgs Empty => new JobConfigArgs();
    }

    public sealed class JobConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Oceanus platform job recovery switch 1: on -1: off.
        /// </summary>
        [Input("autoRecover")]
        public Input<int>? AutoRecover { get; set; }

        [Input("clazzLevels")]
        private InputList<Inputs.JobConfigClazzLevelGetArgs>? _clazzLevels;

        /// <summary>
        /// Class log level.
        /// </summary>
        public InputList<Inputs.JobConfigClazzLevelGetArgs> ClazzLevels
        {
            get => _clazzLevels ?? (_clazzLevels = new InputList<Inputs.JobConfigClazzLevelGetArgs>());
            set => _clazzLevels = value;
        }

        /// <summary>
        /// CLS logset ID.
        /// </summary>
        [Input("clsLogsetId")]
        public Input<string>? ClsLogsetId { get; set; }

        /// <summary>
        /// CLS log topic ID.
        /// </summary>
        [Input("clsTopicId")]
        public Input<string>? ClsTopicId { get; set; }

        /// <summary>
        /// COS storage bucket name used by the job.
        /// </summary>
        [Input("cosBucket")]
        public Input<string>? CosBucket { get; set; }

        /// <summary>
        /// Job default parallelism.
        /// </summary>
        [Input("defaultParallelism")]
        public Input<int>? DefaultParallelism { get; set; }

        /// <summary>
        /// Main class.
        /// </summary>
        [Input("entrypointClass")]
        public Input<string>? EntrypointClass { get; set; }

        /// <summary>
        /// Expert mode configuration.
        /// </summary>
        [Input("expertModeConfiguration")]
        public Input<Inputs.JobConfigExpertModeConfigurationGetArgs>? ExpertModeConfiguration { get; set; }

        /// <summary>
        /// Whether to enable expert mode.
        /// </summary>
        [Input("expertModeOn")]
        public Input<bool>? ExpertModeOn { get; set; }

        /// <summary>
        /// Job ID.
        /// </summary>
        [Input("jobId")]
        public Input<string>? JobId { get; set; }

        /// <summary>
        /// JobManager specification.
        /// </summary>
        [Input("jobManagerSpec")]
        public Input<double>? JobManagerSpec { get; set; }

        /// <summary>
        /// Whether to collect job logs.
        /// </summary>
        [Input("logCollect")]
        public Input<bool>? LogCollect { get; set; }

        /// <summary>
        /// Log collection type 2:CLS; 3:COS.
        /// </summary>
        [Input("logCollectType")]
        public Input<int>? LogCollectType { get; set; }

        /// <summary>
        /// Log level.
        /// </summary>
        [Input("logLevel")]
        public Input<string>? LogLevel { get; set; }

        /// <summary>
        /// Main class parameters.
        /// </summary>
        [Input("programArgs")]
        public Input<string>? ProgramArgs { get; set; }

        [Input("properties")]
        private InputList<Inputs.JobConfigPropertyGetArgs>? _properties;

        /// <summary>
        /// System parameters.
        /// </summary>
        public InputList<Inputs.JobConfigPropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.JobConfigPropertyGetArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// Python version used by the pyflink job at runtime.
        /// </summary>
        [Input("pythonVersion")]
        public Input<string>? PythonVersion { get; set; }

        /// <summary>
        /// Remarks.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        [Input("resourceRefs")]
        private InputList<Inputs.JobConfigResourceRefGetArgs>? _resourceRefs;

        /// <summary>
        /// Resource reference array.
        /// </summary>
        public InputList<Inputs.JobConfigResourceRefGetArgs> ResourceRefs
        {
            get => _resourceRefs ?? (_resourceRefs = new InputList<Inputs.JobConfigResourceRefGetArgs>());
            set => _resourceRefs = value;
        }

        /// <summary>
        /// TaskManager specification.
        /// </summary>
        [Input("taskManagerSpec")]
        public Input<double>? TaskManagerSpec { get; set; }

        /// <summary>
        /// Workspace SerialId.
        /// </summary>
        [Input("workSpaceId")]
        public Input<string>? WorkSpaceId { get; set; }

        public JobConfigState()
        {
        }
        public static new JobConfigState Empty => new JobConfigState();
    }
}
