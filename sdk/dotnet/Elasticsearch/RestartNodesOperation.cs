// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Elasticsearch
{
    [TencentcloudResourceType("tencentcloud:Elasticsearch/restartNodesOperation:RestartNodesOperation")]
    public partial class RestartNodesOperation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to force a restart.
        /// </summary>
        [Output("forceRestart")]
        public Output<bool?> ForceRestart { get; private set; } = null!;

        /// <summary>
        /// Instance id.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Node status, used in blue-green mode; off-line node blue-green is risky.
        /// </summary>
        [Output("isOffline")]
        public Output<bool?> IsOffline { get; private set; } = null!;

        /// <summary>
        /// List of node names.
        /// </summary>
        [Output("nodeNames")]
        public Output<ImmutableArray<string>> NodeNames { get; private set; } = null!;

        /// <summary>
        /// Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is
        /// in-place.
        /// </summary>
        [Output("restartMode")]
        public Output<string?> RestartMode { get; private set; } = null!;


        /// <summary>
        /// Create a RestartNodesOperation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RestartNodesOperation(string name, RestartNodesOperationArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Elasticsearch/restartNodesOperation:RestartNodesOperation", name, args ?? new RestartNodesOperationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RestartNodesOperation(string name, Input<string> id, RestartNodesOperationState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Elasticsearch/restartNodesOperation:RestartNodesOperation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RestartNodesOperation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RestartNodesOperation Get(string name, Input<string> id, RestartNodesOperationState? state = null, CustomResourceOptions? options = null)
        {
            return new RestartNodesOperation(name, id, state, options);
        }
    }

    public sealed class RestartNodesOperationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to force a restart.
        /// </summary>
        [Input("forceRestart")]
        public Input<bool>? ForceRestart { get; set; }

        /// <summary>
        /// Instance id.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Node status, used in blue-green mode; off-line node blue-green is risky.
        /// </summary>
        [Input("isOffline")]
        public Input<bool>? IsOffline { get; set; }

        [Input("nodeNames", required: true)]
        private InputList<string>? _nodeNames;

        /// <summary>
        /// List of node names.
        /// </summary>
        public InputList<string> NodeNames
        {
            get => _nodeNames ?? (_nodeNames = new InputList<string>());
            set => _nodeNames = value;
        }

        /// <summary>
        /// Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is
        /// in-place.
        /// </summary>
        [Input("restartMode")]
        public Input<string>? RestartMode { get; set; }

        public RestartNodesOperationArgs()
        {
        }
        public static new RestartNodesOperationArgs Empty => new RestartNodesOperationArgs();
    }

    public sealed class RestartNodesOperationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to force a restart.
        /// </summary>
        [Input("forceRestart")]
        public Input<bool>? ForceRestart { get; set; }

        /// <summary>
        /// Instance id.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Node status, used in blue-green mode; off-line node blue-green is risky.
        /// </summary>
        [Input("isOffline")]
        public Input<bool>? IsOffline { get; set; }

        [Input("nodeNames")]
        private InputList<string>? _nodeNames;

        /// <summary>
        /// List of node names.
        /// </summary>
        public InputList<string> NodeNames
        {
            get => _nodeNames ?? (_nodeNames = new InputList<string>());
            set => _nodeNames = value;
        }

        /// <summary>
        /// Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is
        /// in-place.
        /// </summary>
        [Input("restartMode")]
        public Input<string>? RestartMode { get; set; }

        public RestartNodesOperationState()
        {
        }
        public static new RestartNodesOperationState Empty => new RestartNodesOperationState();
    }
}
