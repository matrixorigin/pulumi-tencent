// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Elasticsearch
{
    [TencentcloudResourceType("tencentcloud:Elasticsearch/logstash:Logstash")]
    public partial class Logstash : global::Pulumi.CustomResource
    {
        /// <summary>
        /// whether to use voucher auto, 1 when use, else 0.
        /// </summary>
        [Output("autoVoucher")]
        public Output<int?> AutoVoucher { get; private set; } = null!;

        /// <summary>
        /// Period when charged by months or years(unit depends on TimeUnit).
        /// </summary>
        [Output("chargePeriod")]
        public Output<int?> ChargePeriod { get; private set; } = null!;

        /// <summary>
        /// Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
        /// </summary>
        [Output("chargeType")]
        public Output<string?> ChargeType { get; private set; } = null!;

        /// <summary>
        /// node disk size (unit GB).
        /// </summary>
        [Output("diskSize")]
        public Output<int?> DiskSize { get; private set; } = null!;

        /// <summary>
        /// Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
        /// </summary>
        [Output("diskType")]
        public Output<string?> DiskType { get; private set; } = null!;

        /// <summary>
        /// Instance name (compose of 1-50 letter, number, - or _).
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// License type. oss: open source version; xpack:xpack version; default: xpack.
        /// </summary>
        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        /// <summary>
        /// Instance version(6.8.13, 7.10.1).
        /// </summary>
        [Output("logstashVersion")]
        public Output<string> LogstashVersion { get; private set; } = null!;

        /// <summary>
        /// Node num(range 2-50).
        /// </summary>
        [Output("nodeNum")]
        public Output<int?> NodeNum { get; private set; } = null!;

        /// <summary>
        /// Node type. Valid values: - LOGSTASH.S1.SMALL2: 1 core 2G; - LOGSTASH.S1.MEDIUM4:2 core 4G; - LOGSTASH.S1.MEDIUM8:2 core
        /// 8G; - LOGSTASH.S1.LARGE16:4 core 16G; - LOGSTASH.S1.2XLARGE32:8 core 32G; - LOGSTASH.S1.4XLARGE32:16 core 32G; -
        /// LOGSTASH.S1.4XLARGE64:16 core 64G.
        /// </summary>
        [Output("nodeType")]
        public Output<string?> NodeType { get; private set; } = null!;

        /// <summary>
        /// operation time by tencent clound.
        /// </summary>
        [Output("operationDuration")]
        public Output<Outputs.LogstashOperationDuration?> OperationDuration { get; private set; } = null!;

        /// <summary>
        /// Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew
        /// manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew
        /// automatically by default, and SVIP users will renew automatically.
        /// </summary>
        [Output("renewFlag")]
        public Output<string?> RenewFlag { get; private set; } = null!;

        /// <summary>
        /// Subnet id.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Tag description list.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>> Tags { get; private set; } = null!;

        /// <summary>
        /// charge time unit(set when ChargeType is PREPAID, default value: ms).
        /// </summary>
        [Output("timeUnit")]
        public Output<string?> TimeUnit { get; private set; } = null!;

        /// <summary>
        /// Voucher list(only can use one voucher by now).
        /// </summary>
        [Output("voucherIds")]
        public Output<ImmutableArray<string>> VoucherIds { get; private set; } = null!;

        /// <summary>
        /// VPC id.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// Available zone.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Logstash resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Logstash(string name, LogstashArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Elasticsearch/logstash:Logstash", name, args ?? new LogstashArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Logstash(string name, Input<string> id, LogstashState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Elasticsearch/logstash:Logstash", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Logstash resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Logstash Get(string name, Input<string> id, LogstashState? state = null, CustomResourceOptions? options = null)
        {
            return new Logstash(name, id, state, options);
        }
    }

    public sealed class LogstashArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// whether to use voucher auto, 1 when use, else 0.
        /// </summary>
        [Input("autoVoucher")]
        public Input<int>? AutoVoucher { get; set; }

        /// <summary>
        /// Period when charged by months or years(unit depends on TimeUnit).
        /// </summary>
        [Input("chargePeriod")]
        public Input<int>? ChargePeriod { get; set; }

        /// <summary>
        /// Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// node disk size (unit GB).
        /// </summary>
        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        /// <summary>
        /// Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
        /// </summary>
        [Input("diskType")]
        public Input<string>? DiskType { get; set; }

        /// <summary>
        /// Instance name (compose of 1-50 letter, number, - or _).
        /// </summary>
        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        /// <summary>
        /// License type. oss: open source version; xpack:xpack version; default: xpack.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Instance version(6.8.13, 7.10.1).
        /// </summary>
        [Input("logstashVersion", required: true)]
        public Input<string> LogstashVersion { get; set; } = null!;

        /// <summary>
        /// Node num(range 2-50).
        /// </summary>
        [Input("nodeNum")]
        public Input<int>? NodeNum { get; set; }

        /// <summary>
        /// Node type. Valid values: - LOGSTASH.S1.SMALL2: 1 core 2G; - LOGSTASH.S1.MEDIUM4:2 core 4G; - LOGSTASH.S1.MEDIUM8:2 core
        /// 8G; - LOGSTASH.S1.LARGE16:4 core 16G; - LOGSTASH.S1.2XLARGE32:8 core 32G; - LOGSTASH.S1.4XLARGE32:16 core 32G; -
        /// LOGSTASH.S1.4XLARGE64:16 core 64G.
        /// </summary>
        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        /// <summary>
        /// operation time by tencent clound.
        /// </summary>
        [Input("operationDuration")]
        public Input<Inputs.LogstashOperationDurationArgs>? OperationDuration { get; set; }

        /// <summary>
        /// Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew
        /// manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew
        /// automatically by default, and SVIP users will renew automatically.
        /// </summary>
        [Input("renewFlag")]
        public Input<string>? RenewFlag { get; set; }

        /// <summary>
        /// Subnet id.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tag description list.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// charge time unit(set when ChargeType is PREPAID, default value: ms).
        /// </summary>
        [Input("timeUnit")]
        public Input<string>? TimeUnit { get; set; }

        [Input("voucherIds")]
        private InputList<string>? _voucherIds;

        /// <summary>
        /// Voucher list(only can use one voucher by now).
        /// </summary>
        public InputList<string> VoucherIds
        {
            get => _voucherIds ?? (_voucherIds = new InputList<string>());
            set => _voucherIds = value;
        }

        /// <summary>
        /// VPC id.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// Available zone.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public LogstashArgs()
        {
        }
        public static new LogstashArgs Empty => new LogstashArgs();
    }

    public sealed class LogstashState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// whether to use voucher auto, 1 when use, else 0.
        /// </summary>
        [Input("autoVoucher")]
        public Input<int>? AutoVoucher { get; set; }

        /// <summary>
        /// Period when charged by months or years(unit depends on TimeUnit).
        /// </summary>
        [Input("chargePeriod")]
        public Input<int>? ChargePeriod { get; set; }

        /// <summary>
        /// Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// node disk size (unit GB).
        /// </summary>
        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        /// <summary>
        /// Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
        /// </summary>
        [Input("diskType")]
        public Input<string>? DiskType { get; set; }

        /// <summary>
        /// Instance name (compose of 1-50 letter, number, - or _).
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// License type. oss: open source version; xpack:xpack version; default: xpack.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Instance version(6.8.13, 7.10.1).
        /// </summary>
        [Input("logstashVersion")]
        public Input<string>? LogstashVersion { get; set; }

        /// <summary>
        /// Node num(range 2-50).
        /// </summary>
        [Input("nodeNum")]
        public Input<int>? NodeNum { get; set; }

        /// <summary>
        /// Node type. Valid values: - LOGSTASH.S1.SMALL2: 1 core 2G; - LOGSTASH.S1.MEDIUM4:2 core 4G; - LOGSTASH.S1.MEDIUM8:2 core
        /// 8G; - LOGSTASH.S1.LARGE16:4 core 16G; - LOGSTASH.S1.2XLARGE32:8 core 32G; - LOGSTASH.S1.4XLARGE32:16 core 32G; -
        /// LOGSTASH.S1.4XLARGE64:16 core 64G.
        /// </summary>
        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        /// <summary>
        /// operation time by tencent clound.
        /// </summary>
        [Input("operationDuration")]
        public Input<Inputs.LogstashOperationDurationGetArgs>? OperationDuration { get; set; }

        /// <summary>
        /// Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew
        /// manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew
        /// automatically by default, and SVIP users will renew automatically.
        /// </summary>
        [Input("renewFlag")]
        public Input<string>? RenewFlag { get; set; }

        /// <summary>
        /// Subnet id.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tag description list.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// charge time unit(set when ChargeType is PREPAID, default value: ms).
        /// </summary>
        [Input("timeUnit")]
        public Input<string>? TimeUnit { get; set; }

        [Input("voucherIds")]
        private InputList<string>? _voucherIds;

        /// <summary>
        /// Voucher list(only can use one voucher by now).
        /// </summary>
        public InputList<string> VoucherIds
        {
            get => _voucherIds ?? (_voucherIds = new InputList<string>());
            set => _voucherIds = value;
        }

        /// <summary>
        /// VPC id.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// Available zone.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public LogstashState()
        {
        }
        public static new LogstashState Empty => new LogstashState();
    }
}
