// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Vod
{
    [TencentcloudResourceType("tencentcloud:Vod/eventConfig:EventConfig")]
    public partial class EventConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON`
        /// is to receive event notification.
        /// </summary>
        [Output("deleteMediaCompleteEventSwitch")]
        public Output<string> DeleteMediaCompleteEventSwitch { get; private set; } = null!;

        /// <summary>
        /// How to receive event notifications. Valid values: - Push: HTTP callback notification; - PULL: Reliable notification
        /// based on message queuing.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the
        /// NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
        /// </summary>
        [Output("notificationUrl")]
        public Output<string?> NotificationUrl { get; private set; } = null!;

        /// <summary>
        /// Sub app id.
        /// </summary>
        [Output("subAppId")]
        public Output<int> SubAppId { get; private set; } = null!;

        /// <summary>
        /// Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification,
        /// `ON` means to receive event notification.
        /// </summary>
        [Output("uploadMediaCompleteEventSwitch")]
        public Output<string> UploadMediaCompleteEventSwitch { get; private set; } = null!;


        /// <summary>
        /// Create a EventConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventConfig(string name, EventConfigArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Vod/eventConfig:EventConfig", name, args ?? new EventConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventConfig(string name, Input<string> id, EventConfigState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Vod/eventConfig:EventConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventConfig Get(string name, Input<string> id, EventConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new EventConfig(name, id, state, options);
        }
    }

    public sealed class EventConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON`
        /// is to receive event notification.
        /// </summary>
        [Input("deleteMediaCompleteEventSwitch")]
        public Input<string>? DeleteMediaCompleteEventSwitch { get; set; }

        /// <summary>
        /// How to receive event notifications. Valid values: - Push: HTTP callback notification; - PULL: Reliable notification
        /// based on message queuing.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the
        /// NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
        /// </summary>
        [Input("notificationUrl")]
        public Input<string>? NotificationUrl { get; set; }

        /// <summary>
        /// Sub app id.
        /// </summary>
        [Input("subAppId", required: true)]
        public Input<int> SubAppId { get; set; } = null!;

        /// <summary>
        /// Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification,
        /// `ON` means to receive event notification.
        /// </summary>
        [Input("uploadMediaCompleteEventSwitch")]
        public Input<string>? UploadMediaCompleteEventSwitch { get; set; }

        public EventConfigArgs()
        {
        }
        public static new EventConfigArgs Empty => new EventConfigArgs();
    }

    public sealed class EventConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON`
        /// is to receive event notification.
        /// </summary>
        [Input("deleteMediaCompleteEventSwitch")]
        public Input<string>? DeleteMediaCompleteEventSwitch { get; set; }

        /// <summary>
        /// How to receive event notifications. Valid values: - Push: HTTP callback notification; - PULL: Reliable notification
        /// based on message queuing.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the
        /// NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
        /// </summary>
        [Input("notificationUrl")]
        public Input<string>? NotificationUrl { get; set; }

        /// <summary>
        /// Sub app id.
        /// </summary>
        [Input("subAppId")]
        public Input<int>? SubAppId { get; set; }

        /// <summary>
        /// Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification,
        /// `ON` means to receive event notification.
        /// </summary>
        [Input("uploadMediaCompleteEventSwitch")]
        public Input<string>? UploadMediaCompleteEventSwitch { get; set; }

        public EventConfigState()
        {
        }
        public static new EventConfigState Empty => new EventConfigState();
    }
}
