// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Mps
{
    [TencentcloudResourceType("tencentcloud:Mps/processMediaOperation:ProcessMediaOperation")]
    public partial class ProcessMediaOperation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Video content analysis task parameter.
        /// </summary>
        [Output("aiAnalysisTask")]
        public Output<Outputs.ProcessMediaOperationAiAnalysisTask?> AiAnalysisTask { get; private set; } = null!;

        /// <summary>
        /// Type parameter of a video content audit task.
        /// </summary>
        [Output("aiContentReviewTask")]
        public Output<Outputs.ProcessMediaOperationAiContentReviewTask?> AiContentReviewTask { get; private set; } = null!;

        /// <summary>
        /// The parameters of a quality control task.
        /// </summary>
        [Output("aiQualityControlTask")]
        public Output<Outputs.ProcessMediaOperationAiQualityControlTask?> AiQualityControlTask { get; private set; } = null!;

        /// <summary>
        /// Type parameter of a video content recognition task.
        /// </summary>
        [Output("aiRecognitionTask")]
        public Output<Outputs.ProcessMediaOperationAiRecognitionTask?> AiRecognitionTask { get; private set; } = null!;

        /// <summary>
        /// The information of the file to process.
        /// </summary>
        [Output("inputInfo")]
        public Output<Outputs.ProcessMediaOperationInputInfo> InputInfo { get; private set; } = null!;

        /// <summary>
        /// The media processing parameters to use.
        /// </summary>
        [Output("mediaProcessTask")]
        public Output<Outputs.ProcessMediaOperationMediaProcessTask?> MediaProcessTask { get; private set; } = null!;

        /// <summary>
        /// The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If
        /// you do not specify this parameter, the file will be saved to the directory specified in `InputInfo`.
        /// </summary>
        [Output("outputDir")]
        public Output<string?> OutputDir { get; private set; } = null!;

        /// <summary>
        /// The storage location of the media processing output file. If this parameter is left empty, the storage location in
        /// `InputInfo` will be inherited.
        /// </summary>
        [Output("outputStorage")]
        public Output<Outputs.ProcessMediaOperationOutputStorage?> OutputStorage { get; private set; } = null!;

        /// <summary>
        /// The scheme ID.Note 1: About `OutputStorage` and `OutputDir`If an output storage and directory are specified for a
        /// subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for
        /// the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If
        /// `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the
        /// scheme.Note 3: The trigger configured for a scheme is for automatically starting a scheme. It stops working when you
        /// manually call this API to start a scheme.
        /// </summary>
        [Output("scheduleId")]
        public Output<int?> ScheduleId { get; private set; } = null!;

        /// <summary>
        /// The source context which is used to pass through the user request information. The task flow status change callback will
        /// return the value of this field. It can contain up to 1,000 characters.
        /// </summary>
        [Output("sessionContext")]
        public Output<string?> SessionContext { get; private set; } = null!;

        /// <summary>
        /// The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will
        /// return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered,
        /// no deduplication will be performed.
        /// </summary>
        [Output("sessionId")]
        public Output<string?> SessionId { get; private set; } = null!;

        /// <summary>
        /// Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        /// </summary>
        [Output("taskNotifyConfig")]
        public Output<Outputs.ProcessMediaOperationTaskNotifyConfig?> TaskNotifyConfig { get; private set; } = null!;

        /// <summary>
        /// The task type. `Online` (default): A task that is executed immediately. `Offline`: A task that is executed when the
        /// system is idle (within three days by default).
        /// </summary>
        [Output("taskType")]
        public Output<string?> TaskType { get; private set; } = null!;

        /// <summary>
        /// Task flow priority. The higher the value, the higher the priority. Value range: [-10, 10]. If this parameter is left
        /// empty, 0 will be used.
        /// </summary>
        [Output("tasksPriority")]
        public Output<int?> TasksPriority { get; private set; } = null!;


        /// <summary>
        /// Create a ProcessMediaOperation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProcessMediaOperation(string name, ProcessMediaOperationArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Mps/processMediaOperation:ProcessMediaOperation", name, args ?? new ProcessMediaOperationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProcessMediaOperation(string name, Input<string> id, ProcessMediaOperationState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Mps/processMediaOperation:ProcessMediaOperation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProcessMediaOperation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProcessMediaOperation Get(string name, Input<string> id, ProcessMediaOperationState? state = null, CustomResourceOptions? options = null)
        {
            return new ProcessMediaOperation(name, id, state, options);
        }
    }

    public sealed class ProcessMediaOperationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Video content analysis task parameter.
        /// </summary>
        [Input("aiAnalysisTask")]
        public Input<Inputs.ProcessMediaOperationAiAnalysisTaskArgs>? AiAnalysisTask { get; set; }

        /// <summary>
        /// Type parameter of a video content audit task.
        /// </summary>
        [Input("aiContentReviewTask")]
        public Input<Inputs.ProcessMediaOperationAiContentReviewTaskArgs>? AiContentReviewTask { get; set; }

        /// <summary>
        /// The parameters of a quality control task.
        /// </summary>
        [Input("aiQualityControlTask")]
        public Input<Inputs.ProcessMediaOperationAiQualityControlTaskArgs>? AiQualityControlTask { get; set; }

        /// <summary>
        /// Type parameter of a video content recognition task.
        /// </summary>
        [Input("aiRecognitionTask")]
        public Input<Inputs.ProcessMediaOperationAiRecognitionTaskArgs>? AiRecognitionTask { get; set; }

        /// <summary>
        /// The information of the file to process.
        /// </summary>
        [Input("inputInfo", required: true)]
        public Input<Inputs.ProcessMediaOperationInputInfoArgs> InputInfo { get; set; } = null!;

        /// <summary>
        /// The media processing parameters to use.
        /// </summary>
        [Input("mediaProcessTask")]
        public Input<Inputs.ProcessMediaOperationMediaProcessTaskArgs>? MediaProcessTask { get; set; }

        /// <summary>
        /// The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If
        /// you do not specify this parameter, the file will be saved to the directory specified in `InputInfo`.
        /// </summary>
        [Input("outputDir")]
        public Input<string>? OutputDir { get; set; }

        /// <summary>
        /// The storage location of the media processing output file. If this parameter is left empty, the storage location in
        /// `InputInfo` will be inherited.
        /// </summary>
        [Input("outputStorage")]
        public Input<Inputs.ProcessMediaOperationOutputStorageArgs>? OutputStorage { get; set; }

        /// <summary>
        /// The scheme ID.Note 1: About `OutputStorage` and `OutputDir`If an output storage and directory are specified for a
        /// subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for
        /// the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If
        /// `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the
        /// scheme.Note 3: The trigger configured for a scheme is for automatically starting a scheme. It stops working when you
        /// manually call this API to start a scheme.
        /// </summary>
        [Input("scheduleId")]
        public Input<int>? ScheduleId { get; set; }

        /// <summary>
        /// The source context which is used to pass through the user request information. The task flow status change callback will
        /// return the value of this field. It can contain up to 1,000 characters.
        /// </summary>
        [Input("sessionContext")]
        public Input<string>? SessionContext { get; set; }

        /// <summary>
        /// The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will
        /// return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered,
        /// no deduplication will be performed.
        /// </summary>
        [Input("sessionId")]
        public Input<string>? SessionId { get; set; }

        /// <summary>
        /// Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        /// </summary>
        [Input("taskNotifyConfig")]
        public Input<Inputs.ProcessMediaOperationTaskNotifyConfigArgs>? TaskNotifyConfig { get; set; }

        /// <summary>
        /// The task type. `Online` (default): A task that is executed immediately. `Offline`: A task that is executed when the
        /// system is idle (within three days by default).
        /// </summary>
        [Input("taskType")]
        public Input<string>? TaskType { get; set; }

        /// <summary>
        /// Task flow priority. The higher the value, the higher the priority. Value range: [-10, 10]. If this parameter is left
        /// empty, 0 will be used.
        /// </summary>
        [Input("tasksPriority")]
        public Input<int>? TasksPriority { get; set; }

        public ProcessMediaOperationArgs()
        {
        }
        public static new ProcessMediaOperationArgs Empty => new ProcessMediaOperationArgs();
    }

    public sealed class ProcessMediaOperationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Video content analysis task parameter.
        /// </summary>
        [Input("aiAnalysisTask")]
        public Input<Inputs.ProcessMediaOperationAiAnalysisTaskGetArgs>? AiAnalysisTask { get; set; }

        /// <summary>
        /// Type parameter of a video content audit task.
        /// </summary>
        [Input("aiContentReviewTask")]
        public Input<Inputs.ProcessMediaOperationAiContentReviewTaskGetArgs>? AiContentReviewTask { get; set; }

        /// <summary>
        /// The parameters of a quality control task.
        /// </summary>
        [Input("aiQualityControlTask")]
        public Input<Inputs.ProcessMediaOperationAiQualityControlTaskGetArgs>? AiQualityControlTask { get; set; }

        /// <summary>
        /// Type parameter of a video content recognition task.
        /// </summary>
        [Input("aiRecognitionTask")]
        public Input<Inputs.ProcessMediaOperationAiRecognitionTaskGetArgs>? AiRecognitionTask { get; set; }

        /// <summary>
        /// The information of the file to process.
        /// </summary>
        [Input("inputInfo")]
        public Input<Inputs.ProcessMediaOperationInputInfoGetArgs>? InputInfo { get; set; }

        /// <summary>
        /// The media processing parameters to use.
        /// </summary>
        [Input("mediaProcessTask")]
        public Input<Inputs.ProcessMediaOperationMediaProcessTaskGetArgs>? MediaProcessTask { get; set; }

        /// <summary>
        /// The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If
        /// you do not specify this parameter, the file will be saved to the directory specified in `InputInfo`.
        /// </summary>
        [Input("outputDir")]
        public Input<string>? OutputDir { get; set; }

        /// <summary>
        /// The storage location of the media processing output file. If this parameter is left empty, the storage location in
        /// `InputInfo` will be inherited.
        /// </summary>
        [Input("outputStorage")]
        public Input<Inputs.ProcessMediaOperationOutputStorageGetArgs>? OutputStorage { get; set; }

        /// <summary>
        /// The scheme ID.Note 1: About `OutputStorage` and `OutputDir`If an output storage and directory are specified for a
        /// subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for
        /// the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If
        /// `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the
        /// scheme.Note 3: The trigger configured for a scheme is for automatically starting a scheme. It stops working when you
        /// manually call this API to start a scheme.
        /// </summary>
        [Input("scheduleId")]
        public Input<int>? ScheduleId { get; set; }

        /// <summary>
        /// The source context which is used to pass through the user request information. The task flow status change callback will
        /// return the value of this field. It can contain up to 1,000 characters.
        /// </summary>
        [Input("sessionContext")]
        public Input<string>? SessionContext { get; set; }

        /// <summary>
        /// The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will
        /// return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered,
        /// no deduplication will be performed.
        /// </summary>
        [Input("sessionId")]
        public Input<string>? SessionId { get; set; }

        /// <summary>
        /// Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        /// </summary>
        [Input("taskNotifyConfig")]
        public Input<Inputs.ProcessMediaOperationTaskNotifyConfigGetArgs>? TaskNotifyConfig { get; set; }

        /// <summary>
        /// The task type. `Online` (default): A task that is executed immediately. `Offline`: A task that is executed when the
        /// system is idle (within three days by default).
        /// </summary>
        [Input("taskType")]
        public Input<string>? TaskType { get; set; }

        /// <summary>
        /// Task flow priority. The higher the value, the higher the priority. Value range: [-10, 10]. If this parameter is left
        /// empty, 0 will be used.
        /// </summary>
        [Input("tasksPriority")]
        public Input<int>? TasksPriority { get; set; }

        public ProcessMediaOperationState()
        {
        }
        public static new ProcessMediaOperationState Empty => new ProcessMediaOperationState();
    }
}
