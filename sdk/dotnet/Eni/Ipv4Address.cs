// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Eni
{
    [TencentcloudResourceType("tencentcloud:Eni/ipv4Address:Ipv4Address")]
    public partial class Ipv4Address : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the ENI instance, such as `eni-m6dyj72l`.
        /// </summary>
        [Output("networkInterfaceId")]
        public Output<string> NetworkInterfaceId { get; private set; } = null!;

        /// <summary>
        /// The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either
        /// this parameter or SecondaryPrivateIpAddressCount, or both.
        /// </summary>
        [Output("privateIpAddresses")]
        public Output<ImmutableArray<Outputs.Ipv4AddressPrivateIpAddress>> PrivateIpAddresses { get; private set; } = null!;

        /// <summary>
        /// IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT`(Gold), `AU`(Silver), `AG
        /// `(Bronze) and DEFAULT (Default).
        /// </summary>
        [Output("qosLevel")]
        public Output<string> QosLevel { get; private set; } = null!;

        /// <summary>
        /// The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or
        /// both. The total number of private IP addresses cannot exceed the quota.
        /// </summary>
        [Output("secondaryPrivateIpAddressCount")]
        public Output<int> SecondaryPrivateIpAddressCount { get; private set; } = null!;


        /// <summary>
        /// Create a Ipv4Address resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ipv4Address(string name, Ipv4AddressArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Eni/ipv4Address:Ipv4Address", name, args ?? new Ipv4AddressArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ipv4Address(string name, Input<string> id, Ipv4AddressState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Eni/ipv4Address:Ipv4Address", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ipv4Address resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ipv4Address Get(string name, Input<string> id, Ipv4AddressState? state = null, CustomResourceOptions? options = null)
        {
            return new Ipv4Address(name, id, state, options);
        }
    }

    public sealed class Ipv4AddressArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the ENI instance, such as `eni-m6dyj72l`.
        /// </summary>
        [Input("networkInterfaceId", required: true)]
        public Input<string> NetworkInterfaceId { get; set; } = null!;

        [Input("privateIpAddresses")]
        private InputList<Inputs.Ipv4AddressPrivateIpAddressArgs>? _privateIpAddresses;

        /// <summary>
        /// The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either
        /// this parameter or SecondaryPrivateIpAddressCount, or both.
        /// </summary>
        public InputList<Inputs.Ipv4AddressPrivateIpAddressArgs> PrivateIpAddresses
        {
            get => _privateIpAddresses ?? (_privateIpAddresses = new InputList<Inputs.Ipv4AddressPrivateIpAddressArgs>());
            set => _privateIpAddresses = value;
        }

        /// <summary>
        /// IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT`(Gold), `AU`(Silver), `AG
        /// `(Bronze) and DEFAULT (Default).
        /// </summary>
        [Input("qosLevel")]
        public Input<string>? QosLevel { get; set; }

        /// <summary>
        /// The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or
        /// both. The total number of private IP addresses cannot exceed the quota.
        /// </summary>
        [Input("secondaryPrivateIpAddressCount")]
        public Input<int>? SecondaryPrivateIpAddressCount { get; set; }

        public Ipv4AddressArgs()
        {
        }
        public static new Ipv4AddressArgs Empty => new Ipv4AddressArgs();
    }

    public sealed class Ipv4AddressState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the ENI instance, such as `eni-m6dyj72l`.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        [Input("privateIpAddresses")]
        private InputList<Inputs.Ipv4AddressPrivateIpAddressGetArgs>? _privateIpAddresses;

        /// <summary>
        /// The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either
        /// this parameter or SecondaryPrivateIpAddressCount, or both.
        /// </summary>
        public InputList<Inputs.Ipv4AddressPrivateIpAddressGetArgs> PrivateIpAddresses
        {
            get => _privateIpAddresses ?? (_privateIpAddresses = new InputList<Inputs.Ipv4AddressPrivateIpAddressGetArgs>());
            set => _privateIpAddresses = value;
        }

        /// <summary>
        /// IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT`(Gold), `AU`(Silver), `AG
        /// `(Bronze) and DEFAULT (Default).
        /// </summary>
        [Input("qosLevel")]
        public Input<string>? QosLevel { get; set; }

        /// <summary>
        /// The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or
        /// both. The total number of private IP addresses cannot exceed the quota.
        /// </summary>
        [Input("secondaryPrivateIpAddressCount")]
        public Input<int>? SecondaryPrivateIpAddressCount { get; set; }

        public Ipv4AddressState()
        {
        }
        public static new Ipv4AddressState Empty => new Ipv4AddressState();
    }
}
