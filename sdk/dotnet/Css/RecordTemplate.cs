// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Css
{
    [TencentcloudResourceType("tencentcloud:Css/recordTemplate:RecordTemplate")]
    public partial class RecordTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Aac recording parameters are set when Aac recording is enabled.
        /// </summary>
        [Output("aacParam")]
        public Output<Outputs.RecordTemplateAacParam?> AacParam { get; private set; } = null!;

        /// <summary>
        /// Description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Flv recording parameters are set when Flv recording is enabled.
        /// </summary>
        [Output("flvParam")]
        public Output<Outputs.RecordTemplateFlvParam?> FlvParam { get; private set; } = null!;

        /// <summary>
        /// FLV records special parameters.
        /// </summary>
        [Output("flvSpecialParam")]
        public Output<Outputs.RecordTemplateFlvSpecialParam?> FlvSpecialParam { get; private set; } = null!;

        /// <summary>
        /// Hls recording parameters, which are set when hls recording is enabled.
        /// </summary>
        [Output("hlsParam")]
        public Output<Outputs.RecordTemplateHlsParam?> HlsParam { get; private set; } = null!;

        /// <summary>
        /// HLS specific recording parameters.
        /// </summary>
        [Output("hlsSpecialParam")]
        public Output<Outputs.RecordTemplateHlsSpecialParam?> HlsSpecialParam { get; private set; } = null!;

        /// <summary>
        /// Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
        /// </summary>
        [Output("isDelayLive")]
        public Output<int?> IsDelayLive { get; private set; } = null!;

        /// <summary>
        /// Mp3 recording parameters are set when Mp3 recording is turned on.
        /// </summary>
        [Output("mp3Param")]
        public Output<Outputs.RecordTemplateMp3Param?> Mp3Param { get; private set; } = null!;

        /// <summary>
        /// Mp4 recording parameters are set when Mp4 recording is enabled.
        /// </summary>
        [Output("mp4Param")]
        public Output<Outputs.RecordTemplateMp4Param?> Mp4Param { get; private set; } = null!;

        /// <summary>
        /// Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
        /// </summary>
        [Output("removeWatermark")]
        public Output<bool?> RemoveWatermark { get; private set; } = null!;

        /// <summary>
        /// Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        /// </summary>
        [Output("templateName")]
        public Output<string> TemplateName { get; private set; } = null!;


        /// <summary>
        /// Create a RecordTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RecordTemplate(string name, RecordTemplateArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Css/recordTemplate:RecordTemplate", name, args ?? new RecordTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RecordTemplate(string name, Input<string> id, RecordTemplateState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Css/recordTemplate:RecordTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RecordTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RecordTemplate Get(string name, Input<string> id, RecordTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new RecordTemplate(name, id, state, options);
        }
    }

    public sealed class RecordTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Aac recording parameters are set when Aac recording is enabled.
        /// </summary>
        [Input("aacParam")]
        public Input<Inputs.RecordTemplateAacParamArgs>? AacParam { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Flv recording parameters are set when Flv recording is enabled.
        /// </summary>
        [Input("flvParam")]
        public Input<Inputs.RecordTemplateFlvParamArgs>? FlvParam { get; set; }

        /// <summary>
        /// FLV records special parameters.
        /// </summary>
        [Input("flvSpecialParam")]
        public Input<Inputs.RecordTemplateFlvSpecialParamArgs>? FlvSpecialParam { get; set; }

        /// <summary>
        /// Hls recording parameters, which are set when hls recording is enabled.
        /// </summary>
        [Input("hlsParam")]
        public Input<Inputs.RecordTemplateHlsParamArgs>? HlsParam { get; set; }

        /// <summary>
        /// HLS specific recording parameters.
        /// </summary>
        [Input("hlsSpecialParam")]
        public Input<Inputs.RecordTemplateHlsSpecialParamArgs>? HlsSpecialParam { get; set; }

        /// <summary>
        /// Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
        /// </summary>
        [Input("isDelayLive")]
        public Input<int>? IsDelayLive { get; set; }

        /// <summary>
        /// Mp3 recording parameters are set when Mp3 recording is turned on.
        /// </summary>
        [Input("mp3Param")]
        public Input<Inputs.RecordTemplateMp3ParamArgs>? Mp3Param { get; set; }

        /// <summary>
        /// Mp4 recording parameters are set when Mp4 recording is enabled.
        /// </summary>
        [Input("mp4Param")]
        public Input<Inputs.RecordTemplateMp4ParamArgs>? Mp4Param { get; set; }

        /// <summary>
        /// Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
        /// </summary>
        [Input("removeWatermark")]
        public Input<bool>? RemoveWatermark { get; set; }

        /// <summary>
        /// Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        /// </summary>
        [Input("templateName", required: true)]
        public Input<string> TemplateName { get; set; } = null!;

        public RecordTemplateArgs()
        {
        }
        public static new RecordTemplateArgs Empty => new RecordTemplateArgs();
    }

    public sealed class RecordTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Aac recording parameters are set when Aac recording is enabled.
        /// </summary>
        [Input("aacParam")]
        public Input<Inputs.RecordTemplateAacParamGetArgs>? AacParam { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Flv recording parameters are set when Flv recording is enabled.
        /// </summary>
        [Input("flvParam")]
        public Input<Inputs.RecordTemplateFlvParamGetArgs>? FlvParam { get; set; }

        /// <summary>
        /// FLV records special parameters.
        /// </summary>
        [Input("flvSpecialParam")]
        public Input<Inputs.RecordTemplateFlvSpecialParamGetArgs>? FlvSpecialParam { get; set; }

        /// <summary>
        /// Hls recording parameters, which are set when hls recording is enabled.
        /// </summary>
        [Input("hlsParam")]
        public Input<Inputs.RecordTemplateHlsParamGetArgs>? HlsParam { get; set; }

        /// <summary>
        /// HLS specific recording parameters.
        /// </summary>
        [Input("hlsSpecialParam")]
        public Input<Inputs.RecordTemplateHlsSpecialParamGetArgs>? HlsSpecialParam { get; set; }

        /// <summary>
        /// Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
        /// </summary>
        [Input("isDelayLive")]
        public Input<int>? IsDelayLive { get; set; }

        /// <summary>
        /// Mp3 recording parameters are set when Mp3 recording is turned on.
        /// </summary>
        [Input("mp3Param")]
        public Input<Inputs.RecordTemplateMp3ParamGetArgs>? Mp3Param { get; set; }

        /// <summary>
        /// Mp4 recording parameters are set when Mp4 recording is enabled.
        /// </summary>
        [Input("mp4Param")]
        public Input<Inputs.RecordTemplateMp4ParamGetArgs>? Mp4Param { get; set; }

        /// <summary>
        /// Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
        /// </summary>
        [Input("removeWatermark")]
        public Input<bool>? RemoveWatermark { get; set; }

        /// <summary>
        /// Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        public RecordTemplateState()
        {
        }
        public static new RecordTemplateState Empty => new RecordTemplateState();
    }
}
