// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Css
{
    [TencentcloudResourceType("tencentcloud:Css/timeshiftRuleAttachment:TimeshiftRuleAttachment")]
    public partial class TimeshiftRuleAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
        /// </summary>
        [Output("appName")]
        public Output<string> AppName { get; private set; } = null!;

        /// <summary>
        /// The push domain.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
        /// </summary>
        [Output("streamName")]
        public Output<string> StreamName { get; private set; } = null!;

        /// <summary>
        /// The template ID.
        /// </summary>
        [Output("templateId")]
        public Output<int> TemplateId { get; private set; } = null!;


        /// <summary>
        /// Create a TimeshiftRuleAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TimeshiftRuleAttachment(string name, TimeshiftRuleAttachmentArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Css/timeshiftRuleAttachment:TimeshiftRuleAttachment", name, args ?? new TimeshiftRuleAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TimeshiftRuleAttachment(string name, Input<string> id, TimeshiftRuleAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Css/timeshiftRuleAttachment:TimeshiftRuleAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TimeshiftRuleAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TimeshiftRuleAttachment Get(string name, Input<string> id, TimeshiftRuleAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new TimeshiftRuleAttachment(name, id, state, options);
        }
    }

    public sealed class TimeshiftRuleAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
        /// </summary>
        [Input("appName", required: true)]
        public Input<string> AppName { get; set; } = null!;

        /// <summary>
        /// The push domain.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
        /// </summary>
        [Input("streamName", required: true)]
        public Input<string> StreamName { get; set; } = null!;

        /// <summary>
        /// The template ID.
        /// </summary>
        [Input("templateId", required: true)]
        public Input<int> TemplateId { get; set; } = null!;

        public TimeshiftRuleAttachmentArgs()
        {
        }
        public static new TimeshiftRuleAttachmentArgs Empty => new TimeshiftRuleAttachmentArgs();
    }

    public sealed class TimeshiftRuleAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
        /// </summary>
        [Input("appName")]
        public Input<string>? AppName { get; set; }

        /// <summary>
        /// The push domain.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
        /// </summary>
        [Input("streamName")]
        public Input<string>? StreamName { get; set; }

        /// <summary>
        /// The template ID.
        /// </summary>
        [Input("templateId")]
        public Input<int>? TemplateId { get; set; }

        public TimeshiftRuleAttachmentState()
        {
        }
        public static new TimeshiftRuleAttachmentState Empty => new TimeshiftRuleAttachmentState();
    }
}
