// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.ApiGateway
{
    [TencentcloudResourceType("tencentcloud:ApiGateway/importOpenApi:ImportOpenApi")]
    public partial class ImportOpenApi : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When `auth_type` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
        /// </summary>
        [Output("apiBusinessType")]
        public Output<string> ApiBusinessType { get; private set; } = null!;

        /// <summary>
        /// Custom API description.
        /// </summary>
        [Output("apiDesc")]
        public Output<string> ApiDesc { get; private set; } = null!;

        /// <summary>
        /// Custom Api Id.
        /// </summary>
        [Output("apiId")]
        public Output<string> ApiId { get; private set; } = null!;

        /// <summary>
        /// Custom API name.
        /// </summary>
        [Output("apiName")]
        public Output<string> ApiName { get; private set; } = null!;

        /// <summary>
        /// API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
        /// </summary>
        [Output("apiType")]
        public Output<string> ApiType { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The
        /// unique ID of the oauth2.0 authorized API that identifies the business API binding.
        /// </summary>
        [Output("authRelationApiId")]
        public Output<string> AuthRelationApiId { get; private set; } = null!;

        /// <summary>
        /// API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP
        /// (Application Authentication). The default is NONE.
        /// </summary>
        [Output("authType")]
        public Output<string> AuthType { get; private set; } = null!;

        /// <summary>
        /// Constant parameter.
        /// </summary>
        [Output("constantParameters")]
        public Output<ImmutableArray<Outputs.ImportOpenApiConstantParameter>> ConstantParameters { get; private set; } = null!;

        /// <summary>
        /// OpenAPI body content.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// The Content version defaults to OpenAPI and currently only supports OpenAPI.
        /// </summary>
        [Output("contentVersion")]
        public Output<string?> ContentVersion { get; private set; } = null!;

        /// <summary>
        /// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Whether to enable CORS. Default value: `true`.
        /// </summary>
        [Output("enableCors")]
        public Output<bool> EnableCors { get; private set; } = null!;

        /// <summary>
        /// The Content format can only be YAML or JSON, and the default is YAML.
        /// </summary>
        [Output("encodeType")]
        public Output<string?> EncodeType { get; private set; } = null!;

        /// <summary>
        /// Whether to enable Base64 encoding will only take effect when the backend is scf.
        /// </summary>
        [Output("isBase64Encoded")]
        public Output<bool> IsBase64Encoded { get; private set; } = null!;

        /// <summary>
        /// Charge after starting debugging. (Cloud Market Reserved Fields).
        /// </summary>
        [Output("isDebugAfterCharge")]
        public Output<bool> IsDebugAfterCharge { get; private set; } = null!;

        /// <summary>
        /// Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not
        /// be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
        /// </summary>
        [Output("isDeleteResponseErrorCodes")]
        public Output<bool> IsDeleteResponseErrorCodes { get; private set; } = null!;

        /// <summary>
        /// API bound microservice list.
        /// </summary>
        [Output("microServices")]
        public Output<ImmutableArray<Outputs.ImportOpenApiMicroService>> MicroServices { get; private set; } = null!;

        /// <summary>
        /// OAuth configuration. Effective when AuthType is OAUTH.
        /// </summary>
        [Output("oauthConfigs")]
        public Output<ImmutableArray<Outputs.ImportOpenApiOauthConfig>> OauthConfigs { get; private set; } = null!;

        /// <summary>
        /// API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        /// </summary>
        [Output("requestConfigMethod")]
        public Output<string> RequestConfigMethod { get; private set; } = null!;

        /// <summary>
        /// Request frontend path configuration. Like `/user/getinfo`.
        /// </summary>
        [Output("requestConfigPath")]
        public Output<string> RequestConfigPath { get; private set; } = null!;

        /// <summary>
        /// Frontend request parameters.
        /// </summary>
        [Output("requestParameters")]
        public Output<ImmutableArray<Outputs.ImportOpenApiRequestParameter>> RequestParameters { get; private set; } = null!;

        /// <summary>
        /// Custom error code configuration. Must keep at least one after set.
        /// </summary>
        [Output("responseErrorCodes")]
        public Output<ImmutableArray<Outputs.ImportOpenApiResponseErrorCode>> ResponseErrorCodes { get; private set; } = null!;

        /// <summary>
        /// Response failure sample of custom response configuration.
        /// </summary>
        [Output("responseFailExample")]
        public Output<string> ResponseFailExample { get; private set; } = null!;

        /// <summary>
        /// Successful response sample of custom response configuration.
        /// </summary>
        [Output("responseSuccessExample")]
        public Output<string> ResponseSuccessExample { get; private set; } = null!;

        /// <summary>
        /// Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        /// </summary>
        [Output("responseType")]
        public Output<string> ResponseType { get; private set; } = null!;

        /// <summary>
        /// API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return
        /// null, indicating that a valid value cannot be obtained.
        /// </summary>
        [Output("serviceConfigCosConfigs")]
        public Output<ImmutableArray<Outputs.ImportOpenApiServiceConfigCosConfig>> ServiceConfigCosConfigs { get; private set; } = null!;

        /// <summary>
        /// API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required.
        /// The frontend `request_config_method` and backend method `service_config_method` can be different.
        /// </summary>
        [Output("serviceConfigMethod")]
        public Output<string> ServiceConfigMethod { get; private set; } = null!;

        /// <summary>
        /// Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        /// </summary>
        [Output("serviceConfigMockReturnMessage")]
        public Output<string> ServiceConfigMockReturnMessage { get; private set; } = null!;

        /// <summary>
        /// API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The
        /// frontend `request_config_path` and backend path `service_config_path` can be different.
        /// </summary>
        [Output("serviceConfigPath")]
        public Output<string> ServiceConfigPath { get; private set; } = null!;

        /// <summary>
        /// Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
        /// </summary>
        [Output("serviceConfigProduct")]
        public Output<string> ServiceConfigProduct { get; private set; } = null!;

        /// <summary>
        /// SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        /// </summary>
        [Output("serviceConfigScfFunctionName")]
        public Output<string> ServiceConfigScfFunctionName { get; private set; } = null!;

        /// <summary>
        /// SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        /// </summary>
        [Output("serviceConfigScfFunctionNamespace")]
        public Output<string> ServiceConfigScfFunctionNamespace { get; private set; } = null!;

        /// <summary>
        /// SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        /// </summary>
        [Output("serviceConfigScfFunctionQualifier")]
        public Output<string> ServiceConfigScfFunctionQualifier { get; private set; } = null!;

        /// <summary>
        /// Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud
        /// Function (HTTP).
        /// </summary>
        [Output("serviceConfigScfFunctionType")]
        public Output<string> ServiceConfigScfFunctionType { get; private set; } = null!;

        /// <summary>
        /// Whether to enable response integration. Effective when the backend type is SCF.
        /// </summary>
        [Output("serviceConfigScfIsIntegratedResponse")]
        public Output<bool> ServiceConfigScfIsIntegratedResponse { get; private set; } = null!;

        /// <summary>
        /// API backend service timeout period in seconds. Default value: `5`.
        /// </summary>
        [Output("serviceConfigTimeout")]
        public Output<int> ServiceConfigTimeout { get; private set; } = null!;

        /// <summary>
        /// The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
        /// </summary>
        [Output("serviceConfigType")]
        public Output<string> ServiceConfigType { get; private set; } = null!;

        /// <summary>
        /// Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be
        /// obtained.
        /// </summary>
        [Output("serviceConfigUpstreamId")]
        public Output<string> ServiceConfigUpstreamId { get; private set; } = null!;

        /// <summary>
        /// The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
        /// </summary>
        [Output("serviceConfigUrl")]
        public Output<string> ServiceConfigUrl { get; private set; } = null!;

        /// <summary>
        /// Unique VPC ID.
        /// </summary>
        [Output("serviceConfigVpcId")]
        public Output<string> ServiceConfigVpcId { get; private set; } = null!;

        /// <summary>
        /// Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        /// </summary>
        [Output("serviceConfigWebsocketCleanupFunctionName")]
        public Output<string> ServiceConfigWebsocketCleanupFunctionName { get; private set; } = null!;

        /// <summary>
        /// Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend
        /// type is SCF.
        /// </summary>
        [Output("serviceConfigWebsocketCleanupFunctionNamespace")]
        public Output<string> ServiceConfigWebsocketCleanupFunctionNamespace { get; private set; } = null!;

        /// <summary>
        /// Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is
        /// SCF.
        /// </summary>
        [Output("serviceConfigWebsocketCleanupFunctionQualifier")]
        public Output<string> ServiceConfigWebsocketCleanupFunctionQualifier { get; private set; } = null!;

        /// <summary>
        /// Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        /// </summary>
        [Output("serviceConfigWebsocketRegisterFunctionName")]
        public Output<string> ServiceConfigWebsocketRegisterFunctionName { get; private set; } = null!;

        /// <summary>
        /// Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type
        /// is SCF.
        /// </summary>
        [Output("serviceConfigWebsocketRegisterFunctionNamespace")]
        public Output<string> ServiceConfigWebsocketRegisterFunctionNamespace { get; private set; } = null!;

        /// <summary>
        /// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is
        /// SCF.
        /// </summary>
        [Output("serviceConfigWebsocketRegisterFunctionQualifier")]
        public Output<string> ServiceConfigWebsocketRegisterFunctionQualifier { get; private set; } = null!;

        /// <summary>
        /// Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        /// </summary>
        [Output("serviceConfigWebsocketTransportFunctionName")]
        public Output<string> ServiceConfigWebsocketTransportFunctionName { get; private set; } = null!;

        /// <summary>
        /// Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type
        /// is SCF.
        /// </summary>
        [Output("serviceConfigWebsocketTransportFunctionNamespace")]
        public Output<string> ServiceConfigWebsocketTransportFunctionNamespace { get; private set; } = null!;

        /// <summary>
        /// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is
        /// SCF.
        /// </summary>
        [Output("serviceConfigWebsocketTransportFunctionQualifier")]
        public Output<string> ServiceConfigWebsocketTransportFunctionQualifier { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the service where the API is located.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// The backend service parameters of the API.
        /// </summary>
        [Output("serviceParameters")]
        public Output<ImmutableArray<Outputs.ImportOpenApiServiceParameter>> ServiceParameters { get; private set; } = null!;

        /// <summary>
        /// Health check configuration for microservices.
        /// </summary>
        [Output("serviceTsfHealthCheckConfs")]
        public Output<ImmutableArray<Outputs.ImportOpenApiServiceTsfHealthCheckConf>> ServiceTsfHealthCheckConfs { get; private set; } = null!;

        /// <summary>
        /// Load balancing configuration for microservices.
        /// </summary>
        [Output("serviceTsfLoadBalanceConfs")]
        public Output<ImmutableArray<Outputs.ImportOpenApiServiceTsfLoadBalanceConf>> ServiceTsfLoadBalanceConfs { get; private set; } = null!;

        /// <summary>
        /// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a ImportOpenApi resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImportOpenApi(string name, ImportOpenApiArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:ApiGateway/importOpenApi:ImportOpenApi", name, args ?? new ImportOpenApiArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImportOpenApi(string name, Input<string> id, ImportOpenApiState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:ApiGateway/importOpenApi:ImportOpenApi", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImportOpenApi resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImportOpenApi Get(string name, Input<string> id, ImportOpenApiState? state = null, CustomResourceOptions? options = null)
        {
            return new ImportOpenApi(name, id, state, options);
        }
    }

    public sealed class ImportOpenApiArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// OpenAPI body content.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The Content version defaults to OpenAPI and currently only supports OpenAPI.
        /// </summary>
        [Input("contentVersion")]
        public Input<string>? ContentVersion { get; set; }

        /// <summary>
        /// The Content format can only be YAML or JSON, and the default is YAML.
        /// </summary>
        [Input("encodeType")]
        public Input<string>? EncodeType { get; set; }

        /// <summary>
        /// The unique ID of the service where the API is located.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public ImportOpenApiArgs()
        {
        }
        public static new ImportOpenApiArgs Empty => new ImportOpenApiArgs();
    }

    public sealed class ImportOpenApiState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When `auth_type` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
        /// </summary>
        [Input("apiBusinessType")]
        public Input<string>? ApiBusinessType { get; set; }

        /// <summary>
        /// Custom API description.
        /// </summary>
        [Input("apiDesc")]
        public Input<string>? ApiDesc { get; set; }

        /// <summary>
        /// Custom Api Id.
        /// </summary>
        [Input("apiId")]
        public Input<string>? ApiId { get; set; }

        /// <summary>
        /// Custom API name.
        /// </summary>
        [Input("apiName")]
        public Input<string>? ApiName { get; set; }

        /// <summary>
        /// API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
        /// </summary>
        [Input("apiType")]
        public Input<string>? ApiType { get; set; }

        /// <summary>
        /// The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The
        /// unique ID of the oauth2.0 authorized API that identifies the business API binding.
        /// </summary>
        [Input("authRelationApiId")]
        public Input<string>? AuthRelationApiId { get; set; }

        /// <summary>
        /// API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP
        /// (Application Authentication). The default is NONE.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        [Input("constantParameters")]
        private InputList<Inputs.ImportOpenApiConstantParameterGetArgs>? _constantParameters;

        /// <summary>
        /// Constant parameter.
        /// </summary>
        public InputList<Inputs.ImportOpenApiConstantParameterGetArgs> ConstantParameters
        {
            get => _constantParameters ?? (_constantParameters = new InputList<Inputs.ImportOpenApiConstantParameterGetArgs>());
            set => _constantParameters = value;
        }

        /// <summary>
        /// OpenAPI body content.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The Content version defaults to OpenAPI and currently only supports OpenAPI.
        /// </summary>
        [Input("contentVersion")]
        public Input<string>? ContentVersion { get; set; }

        /// <summary>
        /// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Whether to enable CORS. Default value: `true`.
        /// </summary>
        [Input("enableCors")]
        public Input<bool>? EnableCors { get; set; }

        /// <summary>
        /// The Content format can only be YAML or JSON, and the default is YAML.
        /// </summary>
        [Input("encodeType")]
        public Input<string>? EncodeType { get; set; }

        /// <summary>
        /// Whether to enable Base64 encoding will only take effect when the backend is scf.
        /// </summary>
        [Input("isBase64Encoded")]
        public Input<bool>? IsBase64Encoded { get; set; }

        /// <summary>
        /// Charge after starting debugging. (Cloud Market Reserved Fields).
        /// </summary>
        [Input("isDebugAfterCharge")]
        public Input<bool>? IsDebugAfterCharge { get; set; }

        /// <summary>
        /// Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not
        /// be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
        /// </summary>
        [Input("isDeleteResponseErrorCodes")]
        public Input<bool>? IsDeleteResponseErrorCodes { get; set; }

        [Input("microServices")]
        private InputList<Inputs.ImportOpenApiMicroServiceGetArgs>? _microServices;

        /// <summary>
        /// API bound microservice list.
        /// </summary>
        public InputList<Inputs.ImportOpenApiMicroServiceGetArgs> MicroServices
        {
            get => _microServices ?? (_microServices = new InputList<Inputs.ImportOpenApiMicroServiceGetArgs>());
            set => _microServices = value;
        }

        [Input("oauthConfigs")]
        private InputList<Inputs.ImportOpenApiOauthConfigGetArgs>? _oauthConfigs;

        /// <summary>
        /// OAuth configuration. Effective when AuthType is OAUTH.
        /// </summary>
        public InputList<Inputs.ImportOpenApiOauthConfigGetArgs> OauthConfigs
        {
            get => _oauthConfigs ?? (_oauthConfigs = new InputList<Inputs.ImportOpenApiOauthConfigGetArgs>());
            set => _oauthConfigs = value;
        }

        /// <summary>
        /// API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        /// </summary>
        [Input("requestConfigMethod")]
        public Input<string>? RequestConfigMethod { get; set; }

        /// <summary>
        /// Request frontend path configuration. Like `/user/getinfo`.
        /// </summary>
        [Input("requestConfigPath")]
        public Input<string>? RequestConfigPath { get; set; }

        [Input("requestParameters")]
        private InputList<Inputs.ImportOpenApiRequestParameterGetArgs>? _requestParameters;

        /// <summary>
        /// Frontend request parameters.
        /// </summary>
        public InputList<Inputs.ImportOpenApiRequestParameterGetArgs> RequestParameters
        {
            get => _requestParameters ?? (_requestParameters = new InputList<Inputs.ImportOpenApiRequestParameterGetArgs>());
            set => _requestParameters = value;
        }

        [Input("responseErrorCodes")]
        private InputList<Inputs.ImportOpenApiResponseErrorCodeGetArgs>? _responseErrorCodes;

        /// <summary>
        /// Custom error code configuration. Must keep at least one after set.
        /// </summary>
        public InputList<Inputs.ImportOpenApiResponseErrorCodeGetArgs> ResponseErrorCodes
        {
            get => _responseErrorCodes ?? (_responseErrorCodes = new InputList<Inputs.ImportOpenApiResponseErrorCodeGetArgs>());
            set => _responseErrorCodes = value;
        }

        /// <summary>
        /// Response failure sample of custom response configuration.
        /// </summary>
        [Input("responseFailExample")]
        public Input<string>? ResponseFailExample { get; set; }

        /// <summary>
        /// Successful response sample of custom response configuration.
        /// </summary>
        [Input("responseSuccessExample")]
        public Input<string>? ResponseSuccessExample { get; set; }

        /// <summary>
        /// Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        /// </summary>
        [Input("responseType")]
        public Input<string>? ResponseType { get; set; }

        [Input("serviceConfigCosConfigs")]
        private InputList<Inputs.ImportOpenApiServiceConfigCosConfigGetArgs>? _serviceConfigCosConfigs;

        /// <summary>
        /// API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return
        /// null, indicating that a valid value cannot be obtained.
        /// </summary>
        public InputList<Inputs.ImportOpenApiServiceConfigCosConfigGetArgs> ServiceConfigCosConfigs
        {
            get => _serviceConfigCosConfigs ?? (_serviceConfigCosConfigs = new InputList<Inputs.ImportOpenApiServiceConfigCosConfigGetArgs>());
            set => _serviceConfigCosConfigs = value;
        }

        /// <summary>
        /// API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required.
        /// The frontend `request_config_method` and backend method `service_config_method` can be different.
        /// </summary>
        [Input("serviceConfigMethod")]
        public Input<string>? ServiceConfigMethod { get; set; }

        /// <summary>
        /// Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        /// </summary>
        [Input("serviceConfigMockReturnMessage")]
        public Input<string>? ServiceConfigMockReturnMessage { get; set; }

        /// <summary>
        /// API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The
        /// frontend `request_config_path` and backend path `service_config_path` can be different.
        /// </summary>
        [Input("serviceConfigPath")]
        public Input<string>? ServiceConfigPath { get; set; }

        /// <summary>
        /// Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
        /// </summary>
        [Input("serviceConfigProduct")]
        public Input<string>? ServiceConfigProduct { get; set; }

        /// <summary>
        /// SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        /// </summary>
        [Input("serviceConfigScfFunctionName")]
        public Input<string>? ServiceConfigScfFunctionName { get; set; }

        /// <summary>
        /// SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        /// </summary>
        [Input("serviceConfigScfFunctionNamespace")]
        public Input<string>? ServiceConfigScfFunctionNamespace { get; set; }

        /// <summary>
        /// SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        /// </summary>
        [Input("serviceConfigScfFunctionQualifier")]
        public Input<string>? ServiceConfigScfFunctionQualifier { get; set; }

        /// <summary>
        /// Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud
        /// Function (HTTP).
        /// </summary>
        [Input("serviceConfigScfFunctionType")]
        public Input<string>? ServiceConfigScfFunctionType { get; set; }

        /// <summary>
        /// Whether to enable response integration. Effective when the backend type is SCF.
        /// </summary>
        [Input("serviceConfigScfIsIntegratedResponse")]
        public Input<bool>? ServiceConfigScfIsIntegratedResponse { get; set; }

        /// <summary>
        /// API backend service timeout period in seconds. Default value: `5`.
        /// </summary>
        [Input("serviceConfigTimeout")]
        public Input<int>? ServiceConfigTimeout { get; set; }

        /// <summary>
        /// The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
        /// </summary>
        [Input("serviceConfigType")]
        public Input<string>? ServiceConfigType { get; set; }

        /// <summary>
        /// Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be
        /// obtained.
        /// </summary>
        [Input("serviceConfigUpstreamId")]
        public Input<string>? ServiceConfigUpstreamId { get; set; }

        /// <summary>
        /// The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
        /// </summary>
        [Input("serviceConfigUrl")]
        public Input<string>? ServiceConfigUrl { get; set; }

        /// <summary>
        /// Unique VPC ID.
        /// </summary>
        [Input("serviceConfigVpcId")]
        public Input<string>? ServiceConfigVpcId { get; set; }

        /// <summary>
        /// Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        /// </summary>
        [Input("serviceConfigWebsocketCleanupFunctionName")]
        public Input<string>? ServiceConfigWebsocketCleanupFunctionName { get; set; }

        /// <summary>
        /// Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend
        /// type is SCF.
        /// </summary>
        [Input("serviceConfigWebsocketCleanupFunctionNamespace")]
        public Input<string>? ServiceConfigWebsocketCleanupFunctionNamespace { get; set; }

        /// <summary>
        /// Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is
        /// SCF.
        /// </summary>
        [Input("serviceConfigWebsocketCleanupFunctionQualifier")]
        public Input<string>? ServiceConfigWebsocketCleanupFunctionQualifier { get; set; }

        /// <summary>
        /// Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        /// </summary>
        [Input("serviceConfigWebsocketRegisterFunctionName")]
        public Input<string>? ServiceConfigWebsocketRegisterFunctionName { get; set; }

        /// <summary>
        /// Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type
        /// is SCF.
        /// </summary>
        [Input("serviceConfigWebsocketRegisterFunctionNamespace")]
        public Input<string>? ServiceConfigWebsocketRegisterFunctionNamespace { get; set; }

        /// <summary>
        /// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is
        /// SCF.
        /// </summary>
        [Input("serviceConfigWebsocketRegisterFunctionQualifier")]
        public Input<string>? ServiceConfigWebsocketRegisterFunctionQualifier { get; set; }

        /// <summary>
        /// Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        /// </summary>
        [Input("serviceConfigWebsocketTransportFunctionName")]
        public Input<string>? ServiceConfigWebsocketTransportFunctionName { get; set; }

        /// <summary>
        /// Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type
        /// is SCF.
        /// </summary>
        [Input("serviceConfigWebsocketTransportFunctionNamespace")]
        public Input<string>? ServiceConfigWebsocketTransportFunctionNamespace { get; set; }

        /// <summary>
        /// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is
        /// SCF.
        /// </summary>
        [Input("serviceConfigWebsocketTransportFunctionQualifier")]
        public Input<string>? ServiceConfigWebsocketTransportFunctionQualifier { get; set; }

        /// <summary>
        /// The unique ID of the service where the API is located.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("serviceParameters")]
        private InputList<Inputs.ImportOpenApiServiceParameterGetArgs>? _serviceParameters;

        /// <summary>
        /// The backend service parameters of the API.
        /// </summary>
        public InputList<Inputs.ImportOpenApiServiceParameterGetArgs> ServiceParameters
        {
            get => _serviceParameters ?? (_serviceParameters = new InputList<Inputs.ImportOpenApiServiceParameterGetArgs>());
            set => _serviceParameters = value;
        }

        [Input("serviceTsfHealthCheckConfs")]
        private InputList<Inputs.ImportOpenApiServiceTsfHealthCheckConfGetArgs>? _serviceTsfHealthCheckConfs;

        /// <summary>
        /// Health check configuration for microservices.
        /// </summary>
        public InputList<Inputs.ImportOpenApiServiceTsfHealthCheckConfGetArgs> ServiceTsfHealthCheckConfs
        {
            get => _serviceTsfHealthCheckConfs ?? (_serviceTsfHealthCheckConfs = new InputList<Inputs.ImportOpenApiServiceTsfHealthCheckConfGetArgs>());
            set => _serviceTsfHealthCheckConfs = value;
        }

        [Input("serviceTsfLoadBalanceConfs")]
        private InputList<Inputs.ImportOpenApiServiceTsfLoadBalanceConfGetArgs>? _serviceTsfLoadBalanceConfs;

        /// <summary>
        /// Load balancing configuration for microservices.
        /// </summary>
        public InputList<Inputs.ImportOpenApiServiceTsfLoadBalanceConfGetArgs> ServiceTsfLoadBalanceConfs
        {
            get => _serviceTsfLoadBalanceConfs ?? (_serviceTsfLoadBalanceConfs = new InputList<Inputs.ImportOpenApiServiceTsfLoadBalanceConfGetArgs>());
            set => _serviceTsfLoadBalanceConfs = value;
        }

        /// <summary>
        /// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public ImportOpenApiState()
        {
        }
        public static new ImportOpenApiState Empty => new ImportOpenApiState();
    }
}
