// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Ssl
{
    public static class GetDescribeHostTkeInstanceList
    {
        public static Task<GetDescribeHostTkeInstanceListResult> InvokeAsync(GetDescribeHostTkeInstanceListArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDescribeHostTkeInstanceListResult>("tencentcloud:Ssl/getDescribeHostTkeInstanceList:getDescribeHostTkeInstanceList", args ?? new GetDescribeHostTkeInstanceListArgs(), options.WithDefaults());

        public static Output<GetDescribeHostTkeInstanceListResult> Invoke(GetDescribeHostTkeInstanceListInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDescribeHostTkeInstanceListResult>("tencentcloud:Ssl/getDescribeHostTkeInstanceList:getDescribeHostTkeInstanceList", args ?? new GetDescribeHostTkeInstanceListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDescribeHostTkeInstanceListArgs : global::Pulumi.InvokeArgs
    {
        [Input("asyncCache")]
        public int? AsyncCache { get; set; }

        [Input("certificateId", required: true)]
        public string CertificateId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetDescribeHostTkeInstanceListFilterArgs>? _filters;
        public List<Inputs.GetDescribeHostTkeInstanceListFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDescribeHostTkeInstanceListFilterArgs>());
            set => _filters = value;
        }

        [Input("isCache")]
        public int? IsCache { get; set; }

        [Input("oldCertificateId")]
        public string? OldCertificateId { get; set; }

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetDescribeHostTkeInstanceListArgs()
        {
        }
        public static new GetDescribeHostTkeInstanceListArgs Empty => new GetDescribeHostTkeInstanceListArgs();
    }

    public sealed class GetDescribeHostTkeInstanceListInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("asyncCache")]
        public Input<int>? AsyncCache { get; set; }

        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetDescribeHostTkeInstanceListFilterInputArgs>? _filters;
        public InputList<Inputs.GetDescribeHostTkeInstanceListFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDescribeHostTkeInstanceListFilterInputArgs>());
            set => _filters = value;
        }

        [Input("isCache")]
        public Input<int>? IsCache { get; set; }

        [Input("oldCertificateId")]
        public Input<string>? OldCertificateId { get; set; }

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetDescribeHostTkeInstanceListInvokeArgs()
        {
        }
        public static new GetDescribeHostTkeInstanceListInvokeArgs Empty => new GetDescribeHostTkeInstanceListInvokeArgs();
    }


    [OutputType]
    public sealed class GetDescribeHostTkeInstanceListResult
    {
        public readonly int? AsyncCache;
        public readonly string AsyncCacheTime;
        public readonly int AsyncOffset;
        public readonly int AsyncTotalNum;
        public readonly string CertificateId;
        public readonly ImmutableArray<Outputs.GetDescribeHostTkeInstanceListFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetDescribeHostTkeInstanceListInstanceListResult> InstanceLists;
        public readonly int? IsCache;
        public readonly string? OldCertificateId;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetDescribeHostTkeInstanceListResult(
            int? asyncCache,

            string asyncCacheTime,

            int asyncOffset,

            int asyncTotalNum,

            string certificateId,

            ImmutableArray<Outputs.GetDescribeHostTkeInstanceListFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetDescribeHostTkeInstanceListInstanceListResult> instanceLists,

            int? isCache,

            string? oldCertificateId,

            string? resultOutputFile)
        {
            AsyncCache = asyncCache;
            AsyncCacheTime = asyncCacheTime;
            AsyncOffset = asyncOffset;
            AsyncTotalNum = asyncTotalNum;
            CertificateId = certificateId;
            Filters = filters;
            Id = id;
            InstanceLists = instanceLists;
            IsCache = isCache;
            OldCertificateId = oldCertificateId;
            ResultOutputFile = resultOutputFile;
        }
    }
}
