// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Ssl
{
    [TencentcloudResourceType("tencentcloud:Ssl/updateCertificateInstanceOperation:UpdateCertificateInstanceOperation")]
    public partial class UpdateCertificateInstanceOperation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to allow downloading, if you choose to upload the certificate, you can configure this parameter.
        /// </summary>
        [Output("allowDownload")]
        public Output<bool?> AllowDownload { get; private set; } = null!;

        /// <summary>
        /// Update new certificate ID.
        /// </summary>
        [Output("certificateId")]
        public Output<string?> CertificateId { get; private set; } = null!;

        /// <summary>
        /// Certificate private key. If you upload the certificate public key, CertificateId does not need to be passed.
        /// </summary>
        [Output("certificatePrivateKey")]
        public Output<string?> CertificatePrivateKey { get; private set; } = null!;

        /// <summary>
        /// Certificate public key. If you upload the certificate public key, CertificateId does not need to be passed.
        /// </summary>
        [Output("certificatePublicKey")]
        public Output<string?> CertificatePublicKey { get; private set; } = null!;

        /// <summary>
        /// Whether to ignore expiration reminders for old certificates 0: Do not ignore notifications. 1: Ignore the notification
        /// and ignore the OldCertificateId expiration reminder.
        /// </summary>
        [Output("expiringNotificationSwitch")]
        public Output<int?> ExpiringNotificationSwitch { get; private set; } = null!;

        /// <summary>
        /// Update the original certificate ID.
        /// </summary>
        [Output("oldCertificateId")]
        public Output<string> OldCertificateId { get; private set; } = null!;

        /// <summary>
        /// Project ID, if you choose to upload the certificate, you can configure this parameter.
        /// </summary>
        [Output("projectId")]
        public Output<int?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Whether the same certificate is allowed to be uploaded repeatedly. If you choose to upload the certificate, you can
        /// configure this parameter.
        /// </summary>
        [Output("repeatable")]
        public Output<bool?> Repeatable { get; private set; } = null!;

        /// <summary>
        /// The resource type that needs to be deployed. The parameter value is optional: clb, cdn, waf, live, ddos, teo,
        /// apigateway, vod, tke, tcb.
        /// </summary>
        [Output("resourceTypes")]
        public Output<ImmutableArray<string>> ResourceTypes { get; private set; } = null!;

        /// <summary>
        /// List of regions where cloud resources need to be deploye.
        /// </summary>
        [Output("resourceTypesRegions")]
        public Output<ImmutableArray<Outputs.UpdateCertificateInstanceOperationResourceTypesRegion>> ResourceTypesRegions { get; private set; } = null!;


        /// <summary>
        /// Create a UpdateCertificateInstanceOperation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UpdateCertificateInstanceOperation(string name, UpdateCertificateInstanceOperationArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Ssl/updateCertificateInstanceOperation:UpdateCertificateInstanceOperation", name, args ?? new UpdateCertificateInstanceOperationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UpdateCertificateInstanceOperation(string name, Input<string> id, UpdateCertificateInstanceOperationState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Ssl/updateCertificateInstanceOperation:UpdateCertificateInstanceOperation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
                AdditionalSecretOutputs =
                {
                    "certificatePrivateKey",
                    "certificatePublicKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UpdateCertificateInstanceOperation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UpdateCertificateInstanceOperation Get(string name, Input<string> id, UpdateCertificateInstanceOperationState? state = null, CustomResourceOptions? options = null)
        {
            return new UpdateCertificateInstanceOperation(name, id, state, options);
        }
    }

    public sealed class UpdateCertificateInstanceOperationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to allow downloading, if you choose to upload the certificate, you can configure this parameter.
        /// </summary>
        [Input("allowDownload")]
        public Input<bool>? AllowDownload { get; set; }

        /// <summary>
        /// Update new certificate ID.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        [Input("certificatePrivateKey")]
        private Input<string>? _certificatePrivateKey;

        /// <summary>
        /// Certificate private key. If you upload the certificate public key, CertificateId does not need to be passed.
        /// </summary>
        public Input<string>? CertificatePrivateKey
        {
            get => _certificatePrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificatePrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("certificatePublicKey")]
        private Input<string>? _certificatePublicKey;

        /// <summary>
        /// Certificate public key. If you upload the certificate public key, CertificateId does not need to be passed.
        /// </summary>
        public Input<string>? CertificatePublicKey
        {
            get => _certificatePublicKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificatePublicKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether to ignore expiration reminders for old certificates 0: Do not ignore notifications. 1: Ignore the notification
        /// and ignore the OldCertificateId expiration reminder.
        /// </summary>
        [Input("expiringNotificationSwitch")]
        public Input<int>? ExpiringNotificationSwitch { get; set; }

        /// <summary>
        /// Update the original certificate ID.
        /// </summary>
        [Input("oldCertificateId", required: true)]
        public Input<string> OldCertificateId { get; set; } = null!;

        /// <summary>
        /// Project ID, if you choose to upload the certificate, you can configure this parameter.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// Whether the same certificate is allowed to be uploaded repeatedly. If you choose to upload the certificate, you can
        /// configure this parameter.
        /// </summary>
        [Input("repeatable")]
        public Input<bool>? Repeatable { get; set; }

        [Input("resourceTypes", required: true)]
        private InputList<string>? _resourceTypes;

        /// <summary>
        /// The resource type that needs to be deployed. The parameter value is optional: clb, cdn, waf, live, ddos, teo,
        /// apigateway, vod, tke, tcb.
        /// </summary>
        public InputList<string> ResourceTypes
        {
            get => _resourceTypes ?? (_resourceTypes = new InputList<string>());
            set => _resourceTypes = value;
        }

        [Input("resourceTypesRegions")]
        private InputList<Inputs.UpdateCertificateInstanceOperationResourceTypesRegionArgs>? _resourceTypesRegions;

        /// <summary>
        /// List of regions where cloud resources need to be deploye.
        /// </summary>
        public InputList<Inputs.UpdateCertificateInstanceOperationResourceTypesRegionArgs> ResourceTypesRegions
        {
            get => _resourceTypesRegions ?? (_resourceTypesRegions = new InputList<Inputs.UpdateCertificateInstanceOperationResourceTypesRegionArgs>());
            set => _resourceTypesRegions = value;
        }

        public UpdateCertificateInstanceOperationArgs()
        {
        }
        public static new UpdateCertificateInstanceOperationArgs Empty => new UpdateCertificateInstanceOperationArgs();
    }

    public sealed class UpdateCertificateInstanceOperationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to allow downloading, if you choose to upload the certificate, you can configure this parameter.
        /// </summary>
        [Input("allowDownload")]
        public Input<bool>? AllowDownload { get; set; }

        /// <summary>
        /// Update new certificate ID.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        [Input("certificatePrivateKey")]
        private Input<string>? _certificatePrivateKey;

        /// <summary>
        /// Certificate private key. If you upload the certificate public key, CertificateId does not need to be passed.
        /// </summary>
        public Input<string>? CertificatePrivateKey
        {
            get => _certificatePrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificatePrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("certificatePublicKey")]
        private Input<string>? _certificatePublicKey;

        /// <summary>
        /// Certificate public key. If you upload the certificate public key, CertificateId does not need to be passed.
        /// </summary>
        public Input<string>? CertificatePublicKey
        {
            get => _certificatePublicKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificatePublicKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether to ignore expiration reminders for old certificates 0: Do not ignore notifications. 1: Ignore the notification
        /// and ignore the OldCertificateId expiration reminder.
        /// </summary>
        [Input("expiringNotificationSwitch")]
        public Input<int>? ExpiringNotificationSwitch { get; set; }

        /// <summary>
        /// Update the original certificate ID.
        /// </summary>
        [Input("oldCertificateId")]
        public Input<string>? OldCertificateId { get; set; }

        /// <summary>
        /// Project ID, if you choose to upload the certificate, you can configure this parameter.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// Whether the same certificate is allowed to be uploaded repeatedly. If you choose to upload the certificate, you can
        /// configure this parameter.
        /// </summary>
        [Input("repeatable")]
        public Input<bool>? Repeatable { get; set; }

        [Input("resourceTypes")]
        private InputList<string>? _resourceTypes;

        /// <summary>
        /// The resource type that needs to be deployed. The parameter value is optional: clb, cdn, waf, live, ddos, teo,
        /// apigateway, vod, tke, tcb.
        /// </summary>
        public InputList<string> ResourceTypes
        {
            get => _resourceTypes ?? (_resourceTypes = new InputList<string>());
            set => _resourceTypes = value;
        }

        [Input("resourceTypesRegions")]
        private InputList<Inputs.UpdateCertificateInstanceOperationResourceTypesRegionGetArgs>? _resourceTypesRegions;

        /// <summary>
        /// List of regions where cloud resources need to be deploye.
        /// </summary>
        public InputList<Inputs.UpdateCertificateInstanceOperationResourceTypesRegionGetArgs> ResourceTypesRegions
        {
            get => _resourceTypesRegions ?? (_resourceTypesRegions = new InputList<Inputs.UpdateCertificateInstanceOperationResourceTypesRegionGetArgs>());
            set => _resourceTypesRegions = value;
        }

        public UpdateCertificateInstanceOperationState()
        {
        }
        public static new UpdateCertificateInstanceOperationState Empty => new UpdateCertificateInstanceOperationState();
    }
}
