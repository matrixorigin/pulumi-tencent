// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Csip
{
    [TencentcloudResourceType("tencentcloud:Csip/riskCenter:RiskCenter")]
    public partial class RiskCenter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Scan the asset information list.
        /// </summary>
        [Output("assets")]
        public Output<ImmutableArray<Outputs.RiskCenterAsset>> Assets { get; private set; } = null!;

        /// <summary>
        /// 0- Full scan, 1- Specify asset scan, 2- Exclude asset scan, 3- Manually fill in the scan. If 1 and 2 are required while
        /// task_mode not 1, the Assets field is required. If 3 is required, SelfDefiningAssets is required.
        /// </summary>
        [Output("scanAssetType")]
        public Output<int> ScanAssetType { get; private set; } = null!;

        /// <summary>
        /// Request origin.
        /// </summary>
        [Output("scanFrom")]
        public Output<string> ScanFrom { get; private set; } = null!;

        /// <summary>
        /// Scan Project. Example: port/poc/weakpass/webcontent/configrisk/exposedserver.
        /// </summary>
        [Output("scanItems")]
        public Output<ImmutableArray<string>> ScanItems { get; private set; } = null!;

        /// <summary>
        /// Scan plan details.
        /// </summary>
        [Output("scanPlanContent")]
        public Output<string?> ScanPlanContent { get; private set; } = null!;

        /// <summary>
        /// 0- Periodic task, 1- immediate scan, 2- periodic scan, 3- Custom; 0, 2 and 3 are required for scan_plan_content.
        /// </summary>
        [Output("scanPlanType")]
        public Output<int> ScanPlanType { get; private set; } = null!;

        /// <summary>
        /// Ip/domain/url array.
        /// </summary>
        [Output("selfDefiningAssets")]
        public Output<ImmutableArray<string>> SelfDefiningAssets { get; private set; } = null!;

        /// <summary>
        /// Advanced configuration.
        /// </summary>
        [Output("taskAdvanceCfg")]
        public Output<Outputs.RiskCenterTaskAdvanceCfg?> TaskAdvanceCfg { get; private set; } = null!;

        /// <summary>
        /// Physical examination mode, 0-standard mode, 1-fast mode, 2-advanced mode, default standard mode.
        /// </summary>
        [Output("taskMode")]
        public Output<int?> TaskMode { get; private set; } = null!;

        /// <summary>
        /// Task Name.
        /// </summary>
        [Output("taskName")]
        public Output<string> TaskName { get; private set; } = null!;


        /// <summary>
        /// Create a RiskCenter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RiskCenter(string name, RiskCenterArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Csip/riskCenter:RiskCenter", name, args ?? new RiskCenterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RiskCenter(string name, Input<string> id, RiskCenterState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Csip/riskCenter:RiskCenter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RiskCenter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RiskCenter Get(string name, Input<string> id, RiskCenterState? state = null, CustomResourceOptions? options = null)
        {
            return new RiskCenter(name, id, state, options);
        }
    }

    public sealed class RiskCenterArgs : global::Pulumi.ResourceArgs
    {
        [Input("assets")]
        private InputList<Inputs.RiskCenterAssetArgs>? _assets;

        /// <summary>
        /// Scan the asset information list.
        /// </summary>
        public InputList<Inputs.RiskCenterAssetArgs> Assets
        {
            get => _assets ?? (_assets = new InputList<Inputs.RiskCenterAssetArgs>());
            set => _assets = value;
        }

        /// <summary>
        /// 0- Full scan, 1- Specify asset scan, 2- Exclude asset scan, 3- Manually fill in the scan. If 1 and 2 are required while
        /// task_mode not 1, the Assets field is required. If 3 is required, SelfDefiningAssets is required.
        /// </summary>
        [Input("scanAssetType", required: true)]
        public Input<int> ScanAssetType { get; set; } = null!;

        [Input("scanItems", required: true)]
        private InputList<string>? _scanItems;

        /// <summary>
        /// Scan Project. Example: port/poc/weakpass/webcontent/configrisk/exposedserver.
        /// </summary>
        public InputList<string> ScanItems
        {
            get => _scanItems ?? (_scanItems = new InputList<string>());
            set => _scanItems = value;
        }

        /// <summary>
        /// Scan plan details.
        /// </summary>
        [Input("scanPlanContent")]
        public Input<string>? ScanPlanContent { get; set; }

        /// <summary>
        /// 0- Periodic task, 1- immediate scan, 2- periodic scan, 3- Custom; 0, 2 and 3 are required for scan_plan_content.
        /// </summary>
        [Input("scanPlanType", required: true)]
        public Input<int> ScanPlanType { get; set; } = null!;

        [Input("selfDefiningAssets")]
        private InputList<string>? _selfDefiningAssets;

        /// <summary>
        /// Ip/domain/url array.
        /// </summary>
        public InputList<string> SelfDefiningAssets
        {
            get => _selfDefiningAssets ?? (_selfDefiningAssets = new InputList<string>());
            set => _selfDefiningAssets = value;
        }

        /// <summary>
        /// Advanced configuration.
        /// </summary>
        [Input("taskAdvanceCfg")]
        public Input<Inputs.RiskCenterTaskAdvanceCfgArgs>? TaskAdvanceCfg { get; set; }

        /// <summary>
        /// Physical examination mode, 0-standard mode, 1-fast mode, 2-advanced mode, default standard mode.
        /// </summary>
        [Input("taskMode")]
        public Input<int>? TaskMode { get; set; }

        /// <summary>
        /// Task Name.
        /// </summary>
        [Input("taskName", required: true)]
        public Input<string> TaskName { get; set; } = null!;

        public RiskCenterArgs()
        {
        }
        public static new RiskCenterArgs Empty => new RiskCenterArgs();
    }

    public sealed class RiskCenterState : global::Pulumi.ResourceArgs
    {
        [Input("assets")]
        private InputList<Inputs.RiskCenterAssetGetArgs>? _assets;

        /// <summary>
        /// Scan the asset information list.
        /// </summary>
        public InputList<Inputs.RiskCenterAssetGetArgs> Assets
        {
            get => _assets ?? (_assets = new InputList<Inputs.RiskCenterAssetGetArgs>());
            set => _assets = value;
        }

        /// <summary>
        /// 0- Full scan, 1- Specify asset scan, 2- Exclude asset scan, 3- Manually fill in the scan. If 1 and 2 are required while
        /// task_mode not 1, the Assets field is required. If 3 is required, SelfDefiningAssets is required.
        /// </summary>
        [Input("scanAssetType")]
        public Input<int>? ScanAssetType { get; set; }

        /// <summary>
        /// Request origin.
        /// </summary>
        [Input("scanFrom")]
        public Input<string>? ScanFrom { get; set; }

        [Input("scanItems")]
        private InputList<string>? _scanItems;

        /// <summary>
        /// Scan Project. Example: port/poc/weakpass/webcontent/configrisk/exposedserver.
        /// </summary>
        public InputList<string> ScanItems
        {
            get => _scanItems ?? (_scanItems = new InputList<string>());
            set => _scanItems = value;
        }

        /// <summary>
        /// Scan plan details.
        /// </summary>
        [Input("scanPlanContent")]
        public Input<string>? ScanPlanContent { get; set; }

        /// <summary>
        /// 0- Periodic task, 1- immediate scan, 2- periodic scan, 3- Custom; 0, 2 and 3 are required for scan_plan_content.
        /// </summary>
        [Input("scanPlanType")]
        public Input<int>? ScanPlanType { get; set; }

        [Input("selfDefiningAssets")]
        private InputList<string>? _selfDefiningAssets;

        /// <summary>
        /// Ip/domain/url array.
        /// </summary>
        public InputList<string> SelfDefiningAssets
        {
            get => _selfDefiningAssets ?? (_selfDefiningAssets = new InputList<string>());
            set => _selfDefiningAssets = value;
        }

        /// <summary>
        /// Advanced configuration.
        /// </summary>
        [Input("taskAdvanceCfg")]
        public Input<Inputs.RiskCenterTaskAdvanceCfgGetArgs>? TaskAdvanceCfg { get; set; }

        /// <summary>
        /// Physical examination mode, 0-standard mode, 1-fast mode, 2-advanced mode, default standard mode.
        /// </summary>
        [Input("taskMode")]
        public Input<int>? TaskMode { get; set; }

        /// <summary>
        /// Task Name.
        /// </summary>
        [Input("taskName")]
        public Input<string>? TaskName { get; set; }

        public RiskCenterState()
        {
        }
        public static new RiskCenterState Empty => new RiskCenterState();
    }
}
