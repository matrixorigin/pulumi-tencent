// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Dlc
{
    [TencentcloudResourceType("tencentcloud:Dlc/userDataEngineConfig:UserDataEngineConfig")]
    public partial class UserDataEngineConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Engine configuration items.
        /// </summary>
        [Output("dataEngineConfigPairs")]
        public Output<ImmutableArray<Outputs.UserDataEngineConfigDataEngineConfigPair>> DataEngineConfigPairs { get; private set; } = null!;

        /// <summary>
        /// Engine unique id.
        /// </summary>
        [Output("dataEngineId")]
        public Output<string> DataEngineId { get; private set; } = null!;

        /// <summary>
        /// Job engine resource configuration template.
        /// </summary>
        [Output("sessionResourceTemplate")]
        public Output<Outputs.UserDataEngineConfigSessionResourceTemplate?> SessionResourceTemplate { get; private set; } = null!;


        /// <summary>
        /// Create a UserDataEngineConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserDataEngineConfig(string name, UserDataEngineConfigArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Dlc/userDataEngineConfig:UserDataEngineConfig", name, args ?? new UserDataEngineConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserDataEngineConfig(string name, Input<string> id, UserDataEngineConfigState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Dlc/userDataEngineConfig:UserDataEngineConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserDataEngineConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserDataEngineConfig Get(string name, Input<string> id, UserDataEngineConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new UserDataEngineConfig(name, id, state, options);
        }
    }

    public sealed class UserDataEngineConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("dataEngineConfigPairs")]
        private InputList<Inputs.UserDataEngineConfigDataEngineConfigPairArgs>? _dataEngineConfigPairs;

        /// <summary>
        /// Engine configuration items.
        /// </summary>
        public InputList<Inputs.UserDataEngineConfigDataEngineConfigPairArgs> DataEngineConfigPairs
        {
            get => _dataEngineConfigPairs ?? (_dataEngineConfigPairs = new InputList<Inputs.UserDataEngineConfigDataEngineConfigPairArgs>());
            set => _dataEngineConfigPairs = value;
        }

        /// <summary>
        /// Engine unique id.
        /// </summary>
        [Input("dataEngineId", required: true)]
        public Input<string> DataEngineId { get; set; } = null!;

        /// <summary>
        /// Job engine resource configuration template.
        /// </summary>
        [Input("sessionResourceTemplate")]
        public Input<Inputs.UserDataEngineConfigSessionResourceTemplateArgs>? SessionResourceTemplate { get; set; }

        public UserDataEngineConfigArgs()
        {
        }
        public static new UserDataEngineConfigArgs Empty => new UserDataEngineConfigArgs();
    }

    public sealed class UserDataEngineConfigState : global::Pulumi.ResourceArgs
    {
        [Input("dataEngineConfigPairs")]
        private InputList<Inputs.UserDataEngineConfigDataEngineConfigPairGetArgs>? _dataEngineConfigPairs;

        /// <summary>
        /// Engine configuration items.
        /// </summary>
        public InputList<Inputs.UserDataEngineConfigDataEngineConfigPairGetArgs> DataEngineConfigPairs
        {
            get => _dataEngineConfigPairs ?? (_dataEngineConfigPairs = new InputList<Inputs.UserDataEngineConfigDataEngineConfigPairGetArgs>());
            set => _dataEngineConfigPairs = value;
        }

        /// <summary>
        /// Engine unique id.
        /// </summary>
        [Input("dataEngineId")]
        public Input<string>? DataEngineId { get; set; }

        /// <summary>
        /// Job engine resource configuration template.
        /// </summary>
        [Input("sessionResourceTemplate")]
        public Input<Inputs.UserDataEngineConfigSessionResourceTemplateGetArgs>? SessionResourceTemplate { get; set; }

        public UserDataEngineConfigState()
        {
        }
        public static new UserDataEngineConfigState Empty => new UserDataEngineConfigState();
    }
}
