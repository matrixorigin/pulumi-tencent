// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Vpc
{
    [TencentcloudResourceType("tencentcloud:Vpc/peerConnectManager:PeerConnectManager")]
    public partial class PeerConnectManager : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Bandwidth upper limit, unit Mbps.
        /// </summary>
        [Output("bandwidth")]
        public Output<int?> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// Billing mode, daily peak value POSTPAID_BY_DAY_MAX, monthly value 95 POSTPAID_BY_MONTH_95.
        /// </summary>
        [Output("chargeType")]
        public Output<string> ChargeType { get; private set; } = null!;

        /// <summary>
        /// Peer region.
        /// </summary>
        [Output("destinationRegion")]
        public Output<string> DestinationRegion { get; private set; } = null!;

        /// <summary>
        /// Peer user UIN.
        /// </summary>
        [Output("destinationUin")]
        public Output<string> DestinationUin { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the peer VPC.
        /// </summary>
        [Output("destinationVpcId")]
        public Output<string> DestinationVpcId { get; private set; } = null!;

        /// <summary>
        /// Peer connection name.
        /// </summary>
        [Output("peeringConnectionName")]
        public Output<string> PeeringConnectionName { get; private set; } = null!;

        /// <summary>
        /// Service classification PT, AU, AG.
        /// </summary>
        [Output("qosLevel")]
        public Output<string> QosLevel { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the local VPC.
        /// </summary>
        [Output("sourceVpcId")]
        public Output<string> SourceVpcId { get; private set; } = null!;

        /// <summary>
        /// Interworking type, VPC_PEER interworking between VPCs; VPC_BM_PEER interworking between VPC and BM Network.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PeerConnectManager resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PeerConnectManager(string name, PeerConnectManagerArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Vpc/peerConnectManager:PeerConnectManager", name, args ?? new PeerConnectManagerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PeerConnectManager(string name, Input<string> id, PeerConnectManagerState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Vpc/peerConnectManager:PeerConnectManager", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PeerConnectManager resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PeerConnectManager Get(string name, Input<string> id, PeerConnectManagerState? state = null, CustomResourceOptions? options = null)
        {
            return new PeerConnectManager(name, id, state, options);
        }
    }

    public sealed class PeerConnectManagerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bandwidth upper limit, unit Mbps.
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// Billing mode, daily peak value POSTPAID_BY_DAY_MAX, monthly value 95 POSTPAID_BY_MONTH_95.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// Peer region.
        /// </summary>
        [Input("destinationRegion", required: true)]
        public Input<string> DestinationRegion { get; set; } = null!;

        /// <summary>
        /// Peer user UIN.
        /// </summary>
        [Input("destinationUin", required: true)]
        public Input<string> DestinationUin { get; set; } = null!;

        /// <summary>
        /// The unique ID of the peer VPC.
        /// </summary>
        [Input("destinationVpcId", required: true)]
        public Input<string> DestinationVpcId { get; set; } = null!;

        /// <summary>
        /// Peer connection name.
        /// </summary>
        [Input("peeringConnectionName", required: true)]
        public Input<string> PeeringConnectionName { get; set; } = null!;

        /// <summary>
        /// Service classification PT, AU, AG.
        /// </summary>
        [Input("qosLevel")]
        public Input<string>? QosLevel { get; set; }

        /// <summary>
        /// The unique ID of the local VPC.
        /// </summary>
        [Input("sourceVpcId", required: true)]
        public Input<string> SourceVpcId { get; set; } = null!;

        /// <summary>
        /// Interworking type, VPC_PEER interworking between VPCs; VPC_BM_PEER interworking between VPC and BM Network.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public PeerConnectManagerArgs()
        {
        }
        public static new PeerConnectManagerArgs Empty => new PeerConnectManagerArgs();
    }

    public sealed class PeerConnectManagerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bandwidth upper limit, unit Mbps.
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// Billing mode, daily peak value POSTPAID_BY_DAY_MAX, monthly value 95 POSTPAID_BY_MONTH_95.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// Peer region.
        /// </summary>
        [Input("destinationRegion")]
        public Input<string>? DestinationRegion { get; set; }

        /// <summary>
        /// Peer user UIN.
        /// </summary>
        [Input("destinationUin")]
        public Input<string>? DestinationUin { get; set; }

        /// <summary>
        /// The unique ID of the peer VPC.
        /// </summary>
        [Input("destinationVpcId")]
        public Input<string>? DestinationVpcId { get; set; }

        /// <summary>
        /// Peer connection name.
        /// </summary>
        [Input("peeringConnectionName")]
        public Input<string>? PeeringConnectionName { get; set; }

        /// <summary>
        /// Service classification PT, AU, AG.
        /// </summary>
        [Input("qosLevel")]
        public Input<string>? QosLevel { get; set; }

        /// <summary>
        /// The unique ID of the local VPC.
        /// </summary>
        [Input("sourceVpcId")]
        public Input<string>? SourceVpcId { get; set; }

        /// <summary>
        /// Interworking type, VPC_PEER interworking between VPCs; VPC_BM_PEER interworking between VPC and BM Network.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public PeerConnectManagerState()
        {
        }
        public static new PeerConnectManagerState Empty => new PeerConnectManagerState();
    }
}
