// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Wedata
{
    [TencentcloudResourceType("tencentcloud:Wedata/integrationTaskNode:IntegrationTaskNode")]
    public partial class IntegrationTaskNode : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM,
        /// GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA,
        /// REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
        /// </summary>
        [Output("dataSourceType")]
        public Output<string> DataSourceType { get; private set; } = null!;

        /// <summary>
        /// Node Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Node ID.
        /// </summary>
        [Output("nodeId")]
        public Output<string> NodeId { get; private set; } = null!;

        /// <summary>
        /// Node information.
        /// </summary>
        [Output("nodeInfo")]
        public Output<Outputs.IntegrationTaskNodeNodeInfo> NodeInfo { get; private set; } = null!;

        /// <summary>
        /// Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
        /// </summary>
        [Output("nodeType")]
        public Output<string> NodeType { get; private set; } = null!;

        /// <summary>
        /// Project ID.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The task id to which the node belongs.
        /// </summary>
        [Output("taskId")]
        public Output<string> TaskId { get; private set; } = null!;

        /// <summary>
        /// Task display mode, 0: canvas mode, 1: form mode.
        /// </summary>
        [Output("taskMode")]
        public Output<int> TaskMode { get; private set; } = null!;

        /// <summary>
        /// Task type, 201: real-time task, 202: offline task.
        /// </summary>
        [Output("taskType")]
        public Output<int> TaskType { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationTaskNode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationTaskNode(string name, IntegrationTaskNodeArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Wedata/integrationTaskNode:IntegrationTaskNode", name, args ?? new IntegrationTaskNodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationTaskNode(string name, Input<string> id, IntegrationTaskNodeState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Wedata/integrationTaskNode:IntegrationTaskNode", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/matrixorigin",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationTaskNode resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationTaskNode Get(string name, Input<string> id, IntegrationTaskNodeState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationTaskNode(name, id, state, options);
        }
    }

    public sealed class IntegrationTaskNodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM,
        /// GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA,
        /// REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
        /// </summary>
        [Input("dataSourceType", required: true)]
        public Input<string> DataSourceType { get; set; } = null!;

        /// <summary>
        /// Node Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Node information.
        /// </summary>
        [Input("nodeInfo", required: true)]
        public Input<Inputs.IntegrationTaskNodeNodeInfoArgs> NodeInfo { get; set; } = null!;

        /// <summary>
        /// Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
        /// </summary>
        [Input("nodeType", required: true)]
        public Input<string> NodeType { get; set; } = null!;

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The task id to which the node belongs.
        /// </summary>
        [Input("taskId", required: true)]
        public Input<string> TaskId { get; set; } = null!;

        /// <summary>
        /// Task display mode, 0: canvas mode, 1: form mode.
        /// </summary>
        [Input("taskMode", required: true)]
        public Input<int> TaskMode { get; set; } = null!;

        /// <summary>
        /// Task type, 201: real-time task, 202: offline task.
        /// </summary>
        [Input("taskType", required: true)]
        public Input<int> TaskType { get; set; } = null!;

        public IntegrationTaskNodeArgs()
        {
        }
        public static new IntegrationTaskNodeArgs Empty => new IntegrationTaskNodeArgs();
    }

    public sealed class IntegrationTaskNodeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM,
        /// GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA,
        /// REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
        /// </summary>
        [Input("dataSourceType")]
        public Input<string>? DataSourceType { get; set; }

        /// <summary>
        /// Node Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Node ID.
        /// </summary>
        [Input("nodeId")]
        public Input<string>? NodeId { get; set; }

        /// <summary>
        /// Node information.
        /// </summary>
        [Input("nodeInfo")]
        public Input<Inputs.IntegrationTaskNodeNodeInfoGetArgs>? NodeInfo { get; set; }

        /// <summary>
        /// Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
        /// </summary>
        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The task id to which the node belongs.
        /// </summary>
        [Input("taskId")]
        public Input<string>? TaskId { get; set; }

        /// <summary>
        /// Task display mode, 0: canvas mode, 1: form mode.
        /// </summary>
        [Input("taskMode")]
        public Input<int>? TaskMode { get; set; }

        /// <summary>
        /// Task type, 201: real-time task, 202: offline task.
        /// </summary>
        [Input("taskType")]
        public Input<int>? TaskType { get; set; }

        public IntegrationTaskNodeState()
        {
        }
        public static new IntegrationTaskNodeState Empty => new IntegrationTaskNodeState();
    }
}
