// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Tse
{
    public static class GetGatewayCertificates
    {
        public static Task<GetGatewayCertificatesResult> InvokeAsync(GetGatewayCertificatesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGatewayCertificatesResult>("tencentcloud:Tse/getGatewayCertificates:getGatewayCertificates", args ?? new GetGatewayCertificatesArgs(), options.WithDefaults());

        public static Output<GetGatewayCertificatesResult> Invoke(GetGatewayCertificatesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewayCertificatesResult>("tencentcloud:Tse/getGatewayCertificates:getGatewayCertificates", args ?? new GetGatewayCertificatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewayCertificatesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetGatewayCertificatesFilterArgs>? _filters;
        public List<Inputs.GetGatewayCertificatesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetGatewayCertificatesFilterArgs>());
            set => _filters = value;
        }

        [Input("gatewayId", required: true)]
        public string GatewayId { get; set; } = null!;

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetGatewayCertificatesArgs()
        {
        }
        public static new GetGatewayCertificatesArgs Empty => new GetGatewayCertificatesArgs();
    }

    public sealed class GetGatewayCertificatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetGatewayCertificatesFilterInputArgs>? _filters;
        public InputList<Inputs.GetGatewayCertificatesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetGatewayCertificatesFilterInputArgs>());
            set => _filters = value;
        }

        [Input("gatewayId", required: true)]
        public Input<string> GatewayId { get; set; } = null!;

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetGatewayCertificatesInvokeArgs()
        {
        }
        public static new GetGatewayCertificatesInvokeArgs Empty => new GetGatewayCertificatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetGatewayCertificatesResult
    {
        public readonly ImmutableArray<Outputs.GetGatewayCertificatesFilterResult> Filters;
        public readonly string GatewayId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ResultOutputFile;
        public readonly ImmutableArray<Outputs.GetGatewayCertificatesResultResult> Results;

        [OutputConstructor]
        private GetGatewayCertificatesResult(
            ImmutableArray<Outputs.GetGatewayCertificatesFilterResult> filters,

            string gatewayId,

            string id,

            string? resultOutputFile,

            ImmutableArray<Outputs.GetGatewayCertificatesResultResult> results)
        {
            Filters = filters;
            GatewayId = gatewayId;
            Id = id;
            ResultOutputFile = resultOutputFile;
            Results = results;
        }
    }
}
